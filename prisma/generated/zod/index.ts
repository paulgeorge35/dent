import { z } from 'zod';
import { Prisma } from '@prisma/client';

/////////////////////////////////////////
// HELPER FUNCTIONS
/////////////////////////////////////////

// JSON
//------------------------------------------------------

export type NullableJsonInput = Prisma.JsonValue | null | 'JsonNull' | 'DbNull' | Prisma.NullTypes.DbNull | Prisma.NullTypes.JsonNull;

export const transformJsonNull = (v?: NullableJsonInput) => {
  if (!v || v === 'DbNull') return Prisma.DbNull;
  if (v === 'JsonNull') return Prisma.JsonNull;
  return v;
};

export const JsonValueSchema: z.ZodType<Prisma.JsonValue> = z.lazy(() =>
  z.union([
    z.string(),
    z.number(),
    z.boolean(),
    z.literal(null),
    z.record(z.lazy(() => JsonValueSchema.optional())),
    z.array(z.lazy(() => JsonValueSchema)),
  ])
);

export type JsonValueType = z.infer<typeof JsonValueSchema>;

export const NullableJsonValue = z
  .union([JsonValueSchema, z.literal('DbNull'), z.literal('JsonNull')])
  .nullable()
  .transform((v) => transformJsonNull(v));

export type NullableJsonValueType = z.infer<typeof NullableJsonValue>;

export const InputJsonValueSchema: z.ZodType<Prisma.InputJsonValue> = z.lazy(() =>
  z.union([
    z.string(),
    z.number(),
    z.boolean(),
    z.object({ toJSON: z.function(z.tuple([]), z.any()) }),
    z.record(z.lazy(() => z.union([InputJsonValueSchema, z.literal(null)]))),
    z.array(z.lazy(() => z.union([InputJsonValueSchema, z.literal(null)]))),
  ])
);

export type InputJsonValueType = z.infer<typeof InputJsonValueSchema>;


/////////////////////////////////////////
// ENUMS
/////////////////////////////////////////

export const TransactionIsolationLevelSchema = z.enum(['ReadUncommitted','ReadCommitted','RepeatableRead','Serializable']);

export const TenantScalarFieldEnumSchema = z.enum(['id','email','profileId','deletedAt','disabledAt','trialExpiresAt','createdAt','updatedAt']);

export const TenantProfileScalarFieldEnumSchema = z.enum(['id','name','county','address','zip','phone','avatar','size','stripeSubscriptionId','activeSubscription','planId','createdAt','updatedAt']);

export const UserScalarFieldEnumSchema = z.enum(['id','index','role','workingHours','specializationId','profileId','tenantId','deletedAt','activatedAt','lastLoginAt','bannedAt','createdAt','updatedAt']);

export const ProfileScalarFieldEnumSchema = z.enum(['id','title','firstName','lastName','email','phone','avatar','stripeCustomerId','stripeFreeTrialUsed','preferredTenantId','createdAt','updatedAt']);

export const AccountAuthScalarFieldEnumSchema = z.enum(['id','profileId','type','provider','passwordHash','refresh_token','access_token','expires_at','refresh_token_expires_in','token_type','scope','id_token','session_state']);

export const PlanScalarFieldEnumSchema = z.enum(['id','stripeProductId','stripePriceId','name','maxUsers','createdAt','updatedAt']);

export const TokenScalarFieldEnumSchema = z.enum(['id','type','token','expires','userId']);

export const InvitationScalarFieldEnumSchema = z.enum(['id','email','role','token','expires','invitedById','userId','createdAt','updatedAt']);

export const PatientScalarFieldEnumSchema = z.enum(['id','firstName','lastName','gender','dob','email','phone','city','county','status','smsNotifications','emailNotifications','userId','tenantId','createdAt','updatedAt']);

export const SpecializationScalarFieldEnumSchema = z.enum(['id','name','description','tenantId','createdAt','updatedAt']);

export const EventScalarFieldEnumSchema = z.enum(['id','title','description','date','start','end','allDay','type','status','patientId','userId','tenantId','createdAt','updatedAt']);

export const EventActionScalarFieldEnumSchema = z.enum(['id','data','userId','eventId','createdAt','updatedAt']);

export const ProductScalarFieldEnumSchema = z.enum(['id','name','description','price','image','tags','isActive','isDeleted','categoryId','tenantId','createdAt','updatedAt']);

export const PriceScalarFieldEnumSchema = z.enum(['id','value','productId','createdAt','updatedAt']);

export const ProductCategoryScalarFieldEnumSchema = z.enum(['id','name','parentCategoryId','createdAt','updatedAt']);

export const TreatmentScalarFieldEnumSchema = z.enum(['id','price','toothNumber','status','productId','treatmentPlanId','eventId','createdAt','updatedAt']);

export const TreatmentPlanScalarFieldEnumSchema = z.enum(['id','description','isDone','patientId','userId','createdAt','updatedAt']);

export const CountyScalarFieldEnumSchema = z.enum(['id','name','code','createdAt','updatedAt']);

export const CityScalarFieldEnumSchema = z.enum(['id','name','countyId','createdAt','updatedAt']);

export const SortOrderSchema = z.enum(['asc','desc']);

export const JsonNullValueInputSchema = z.enum(['JsonNull',]).transform((value) => (value === 'JsonNull' ? Prisma.JsonNull : value));

export const QueryModeSchema = z.enum(['default','insensitive']);

export const NullsOrderSchema = z.enum(['first','last']);

export const JsonNullValueFilterSchema = z.enum(['DbNull','JsonNull','AnyNull',]).transform((value) => value === 'JsonNull' ? Prisma.JsonNull : value === 'DbNull' ? Prisma.JsonNull : value === 'AnyNull' ? Prisma.AnyNull : value);

export const TreatmentStatusSchema = z.enum(['PLANNED','COMPLETED','CANCELLED']);

export type TreatmentStatusType = `${z.infer<typeof TreatmentStatusSchema>}`

export const CurrencySchema = z.enum(['RON','EUR','USD']);

export type CurrencyType = `${z.infer<typeof CurrencySchema>}`

export const ContractTypeSchema = z.enum(['FIXED','HOURLY','PERCENTAGE']);

export type ContractTypeType = `${z.infer<typeof ContractTypeSchema>}`

export const RoleSchema = z.enum(['USER','ADMIN']);

export type RoleType = `${z.infer<typeof RoleSchema>}`

export const StatusSchema = z.enum(['ACTIVE','INACTIVE']);

export type StatusType = `${z.infer<typeof StatusSchema>}`

export const TokenTypeSchema = z.enum(['ACTIVATION','PASSWORD_RESET','MAGIC_LINK']);

export type TokenTypeType = `${z.infer<typeof TokenTypeSchema>}`

export const EventStatusSchema = z.enum(['CREATED','CONFIRMED','COMPLETED','CANCELLED','RESCHEDULED']);

export type EventStatusType = `${z.infer<typeof EventStatusSchema>}`

export const EventTypeSchema = z.enum(['APPOINTMENT']);

export type EventTypeType = `${z.infer<typeof EventTypeSchema>}`

/////////////////////////////////////////
// MODELS
/////////////////////////////////////////

/////////////////////////////////////////
// TENANT SCHEMA
/////////////////////////////////////////

export const TenantSchema = z.object({
  id: z.string().cuid(),
  email: z.string(),
  profileId: z.string(),
  deletedAt: z.coerce.date().nullable(),
  disabledAt: z.coerce.date().nullable(),
  trialExpiresAt: z.coerce.date().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
})

export type Tenant = z.infer<typeof TenantSchema>

/////////////////////////////////////////
// TENANT PROFILE SCHEMA
/////////////////////////////////////////

export const TenantProfileSchema = z.object({
  id: z.string().cuid(),
  name: z.string(),
  county: z.string().nullable(),
  address: z.string().nullable(),
  zip: z.string().nullable(),
  phone: z.string().nullable(),
  avatar: z.string().nullable(),
  size: z.string().nullable(),
  stripeSubscriptionId: z.string(),
  activeSubscription: z.boolean(),
  planId: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
})

export type TenantProfile = z.infer<typeof TenantProfileSchema>

/////////////////////////////////////////
// USER SCHEMA
/////////////////////////////////////////

export const UserSchema = z.object({
  role: RoleSchema,
  id: z.string().cuid(),
  index: z.number().int(),
  workingHours: JsonValueSchema,
  specializationId: z.string().nullable(),
  profileId: z.string(),
  tenantId: z.string(),
  deletedAt: z.coerce.date().nullable(),
  activatedAt: z.coerce.date().nullable(),
  lastLoginAt: z.coerce.date().nullable(),
  bannedAt: z.coerce.date().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
})

export type User = z.infer<typeof UserSchema>

/////////////////////////////////////////
// PROFILE SCHEMA
/////////////////////////////////////////

export const ProfileSchema = z.object({
  id: z.string().cuid(),
  title: z.string().nullable(),
  firstName: z.string(),
  lastName: z.string(),
  email: z.string(),
  phone: z.string().nullable(),
  avatar: z.string().nullable(),
  stripeCustomerId: z.string(),
  stripeFreeTrialUsed: z.boolean(),
  preferredTenantId: z.string().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
})

export type Profile = z.infer<typeof ProfileSchema>

/////////////////////////////////////////
// ACCOUNT AUTH SCHEMA
/////////////////////////////////////////

export const AccountAuthSchema = z.object({
  id: z.string().cuid(),
  profileId: z.string(),
  type: z.string(),
  provider: z.string(),
  passwordHash: z.string().nullable(),
  refresh_token: z.string().nullable(),
  access_token: z.string().nullable(),
  expires_at: z.coerce.date().nullable(),
  refresh_token_expires_in: z.number().int().nullable(),
  token_type: z.string().nullable(),
  scope: z.string().nullable(),
  id_token: z.string().nullable(),
  session_state: z.string().nullable(),
})

export type AccountAuth = z.infer<typeof AccountAuthSchema>

/////////////////////////////////////////
// PLAN SCHEMA
/////////////////////////////////////////

export const PlanSchema = z.object({
  id: z.string().cuid(),
  stripeProductId: z.string(),
  stripePriceId: z.string(),
  name: z.string(),
  maxUsers: z.number().int(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
})

export type Plan = z.infer<typeof PlanSchema>

/////////////////////////////////////////
// TOKEN SCHEMA
/////////////////////////////////////////

export const TokenSchema = z.object({
  type: TokenTypeSchema,
  id: z.string().cuid(),
  token: z.string(),
  expires: z.coerce.date(),
  userId: z.string(),
})

export type Token = z.infer<typeof TokenSchema>

/////////////////////////////////////////
// INVITATION SCHEMA
/////////////////////////////////////////

export const InvitationSchema = z.object({
  role: RoleSchema,
  id: z.string().cuid(),
  email: z.string(),
  token: z.string(),
  expires: z.coerce.date(),
  invitedById: z.string(),
  userId: z.string().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
})

export type Invitation = z.infer<typeof InvitationSchema>

/////////////////////////////////////////
// PATIENT SCHEMA
/////////////////////////////////////////

export const PatientSchema = z.object({
  status: StatusSchema,
  id: z.string().cuid(),
  firstName: z.string(),
  lastName: z.string(),
  gender: z.string().nullable(),
  dob: z.coerce.date().nullable(),
  email: z.string().nullable(),
  phone: z.string().nullable(),
  city: z.string().nullable(),
  county: z.string().nullable(),
  smsNotifications: z.boolean(),
  emailNotifications: z.boolean(),
  userId: z.string(),
  tenantId: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
})

export type Patient = z.infer<typeof PatientSchema>

/////////////////////////////////////////
// SPECIALIZATION SCHEMA
/////////////////////////////////////////

export const SpecializationSchema = z.object({
  id: z.string().cuid(),
  name: z.string(),
  description: z.string().nullable(),
  tenantId: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
})

export type Specialization = z.infer<typeof SpecializationSchema>

/////////////////////////////////////////
// EVENT SCHEMA
/////////////////////////////////////////

export const EventSchema = z.object({
  type: EventTypeSchema,
  status: EventStatusSchema,
  id: z.string().cuid(),
  title: z.string(),
  description: z.string().nullable(),
  date: z.coerce.date(),
  start: z.coerce.date().nullable(),
  end: z.coerce.date().nullable(),
  allDay: z.boolean(),
  patientId: z.string().nullable(),
  userId: z.string(),
  tenantId: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
})

export type Event = z.infer<typeof EventSchema>

/////////////////////////////////////////
// EVENT ACTION SCHEMA
/////////////////////////////////////////

export const EventActionSchema = z.object({
  id: z.string().cuid(),
  data: JsonValueSchema,
  userId: z.string(),
  eventId: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
})

export type EventAction = z.infer<typeof EventActionSchema>

/////////////////////////////////////////
// PRODUCT SCHEMA
/////////////////////////////////////////

export const ProductSchema = z.object({
  id: z.string().cuid(),
  name: z.string(),
  description: z.string().nullable(),
  price: z.number().int(),
  image: z.string().nullable(),
  tags: z.string().array(),
  isActive: z.boolean(),
  isDeleted: z.boolean(),
  categoryId: z.string().nullable(),
  tenantId: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
})

export type Product = z.infer<typeof ProductSchema>

/////////////////////////////////////////
// PRICE SCHEMA
/////////////////////////////////////////

export const PriceSchema = z.object({
  id: z.string().cuid(),
  value: z.number().int(),
  productId: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
})

export type Price = z.infer<typeof PriceSchema>

/////////////////////////////////////////
// PRODUCT CATEGORY SCHEMA
/////////////////////////////////////////

export const ProductCategorySchema = z.object({
  id: z.string().cuid(),
  name: z.string(),
  parentCategoryId: z.string().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
})

export type ProductCategory = z.infer<typeof ProductCategorySchema>

/////////////////////////////////////////
// TREATMENT SCHEMA
/////////////////////////////////////////

export const TreatmentSchema = z.object({
  status: TreatmentStatusSchema,
  id: z.string().cuid(),
  price: z.number().int(),
  toothNumber: z.number().int(),
  productId: z.string(),
  treatmentPlanId: z.string().nullable(),
  eventId: z.string().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
})

export type Treatment = z.infer<typeof TreatmentSchema>

/////////////////////////////////////////
// TREATMENT PLAN SCHEMA
/////////////////////////////////////////

export const TreatmentPlanSchema = z.object({
  id: z.string().cuid(),
  description: z.string().nullable(),
  isDone: z.boolean(),
  patientId: z.string(),
  userId: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
})

export type TreatmentPlan = z.infer<typeof TreatmentPlanSchema>

/////////////////////////////////////////
// COUNTY SCHEMA
/////////////////////////////////////////

export const CountySchema = z.object({
  id: z.string().uuid(),
  name: z.string(),
  code: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
})

export type County = z.infer<typeof CountySchema>

/////////////////////////////////////////
// CITY SCHEMA
/////////////////////////////////////////

export const CitySchema = z.object({
  id: z.string().uuid(),
  name: z.string(),
  countyId: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
})

export type City = z.infer<typeof CitySchema>

/////////////////////////////////////////
// SELECT & INCLUDE
/////////////////////////////////////////

// TENANT
//------------------------------------------------------

export const TenantIncludeSchema: z.ZodType<Prisma.TenantInclude> = z.object({
  users: z.union([z.boolean(),z.lazy(() => UserFindManyArgsSchema)]).optional(),
  profile: z.union([z.boolean(),z.lazy(() => TenantProfileArgsSchema)]).optional(),
  specializations: z.union([z.boolean(),z.lazy(() => SpecializationFindManyArgsSchema)]).optional(),
  preferedByProfiles: z.union([z.boolean(),z.lazy(() => ProfileFindManyArgsSchema)]).optional(),
  patients: z.union([z.boolean(),z.lazy(() => PatientFindManyArgsSchema)]).optional(),
  products: z.union([z.boolean(),z.lazy(() => ProductFindManyArgsSchema)]).optional(),
  events: z.union([z.boolean(),z.lazy(() => EventFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => TenantCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const TenantArgsSchema: z.ZodType<Prisma.TenantDefaultArgs> = z.object({
  select: z.lazy(() => TenantSelectSchema).optional(),
  include: z.lazy(() => TenantIncludeSchema).optional(),
}).strict();

export const TenantCountOutputTypeArgsSchema: z.ZodType<Prisma.TenantCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => TenantCountOutputTypeSelectSchema).nullish(),
}).strict();

export const TenantCountOutputTypeSelectSchema: z.ZodType<Prisma.TenantCountOutputTypeSelect> = z.object({
  users: z.boolean().optional(),
  specializations: z.boolean().optional(),
  preferedByProfiles: z.boolean().optional(),
  patients: z.boolean().optional(),
  products: z.boolean().optional(),
  events: z.boolean().optional(),
}).strict();

export const TenantSelectSchema: z.ZodType<Prisma.TenantSelect> = z.object({
  id: z.boolean().optional(),
  email: z.boolean().optional(),
  profileId: z.boolean().optional(),
  deletedAt: z.boolean().optional(),
  disabledAt: z.boolean().optional(),
  trialExpiresAt: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  users: z.union([z.boolean(),z.lazy(() => UserFindManyArgsSchema)]).optional(),
  profile: z.union([z.boolean(),z.lazy(() => TenantProfileArgsSchema)]).optional(),
  specializations: z.union([z.boolean(),z.lazy(() => SpecializationFindManyArgsSchema)]).optional(),
  preferedByProfiles: z.union([z.boolean(),z.lazy(() => ProfileFindManyArgsSchema)]).optional(),
  patients: z.union([z.boolean(),z.lazy(() => PatientFindManyArgsSchema)]).optional(),
  products: z.union([z.boolean(),z.lazy(() => ProductFindManyArgsSchema)]).optional(),
  events: z.union([z.boolean(),z.lazy(() => EventFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => TenantCountOutputTypeArgsSchema)]).optional(),
}).strict()

// TENANT PROFILE
//------------------------------------------------------

export const TenantProfileIncludeSchema: z.ZodType<Prisma.TenantProfileInclude> = z.object({
  plan: z.union([z.boolean(),z.lazy(() => PlanArgsSchema)]).optional(),
  tenant: z.union([z.boolean(),z.lazy(() => TenantArgsSchema)]).optional(),
}).strict()

export const TenantProfileArgsSchema: z.ZodType<Prisma.TenantProfileDefaultArgs> = z.object({
  select: z.lazy(() => TenantProfileSelectSchema).optional(),
  include: z.lazy(() => TenantProfileIncludeSchema).optional(),
}).strict();

export const TenantProfileSelectSchema: z.ZodType<Prisma.TenantProfileSelect> = z.object({
  id: z.boolean().optional(),
  name: z.boolean().optional(),
  county: z.boolean().optional(),
  address: z.boolean().optional(),
  zip: z.boolean().optional(),
  phone: z.boolean().optional(),
  avatar: z.boolean().optional(),
  size: z.boolean().optional(),
  stripeSubscriptionId: z.boolean().optional(),
  activeSubscription: z.boolean().optional(),
  planId: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  plan: z.union([z.boolean(),z.lazy(() => PlanArgsSchema)]).optional(),
  tenant: z.union([z.boolean(),z.lazy(() => TenantArgsSchema)]).optional(),
}).strict()

// USER
//------------------------------------------------------

export const UserIncludeSchema: z.ZodType<Prisma.UserInclude> = z.object({
  specialization: z.union([z.boolean(),z.lazy(() => SpecializationArgsSchema)]).optional(),
  profile: z.union([z.boolean(),z.lazy(() => ProfileArgsSchema)]).optional(),
  tenant: z.union([z.boolean(),z.lazy(() => TenantArgsSchema)]).optional(),
  invitation: z.union([z.boolean(),z.lazy(() => InvitationArgsSchema)]).optional(),
  tokens: z.union([z.boolean(),z.lazy(() => TokenFindManyArgsSchema)]).optional(),
  patients: z.union([z.boolean(),z.lazy(() => PatientFindManyArgsSchema)]).optional(),
  events: z.union([z.boolean(),z.lazy(() => EventFindManyArgsSchema)]).optional(),
  eventActions: z.union([z.boolean(),z.lazy(() => EventActionFindManyArgsSchema)]).optional(),
  treatmentPlans: z.union([z.boolean(),z.lazy(() => TreatmentPlanFindManyArgsSchema)]).optional(),
  invitations: z.union([z.boolean(),z.lazy(() => InvitationFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => UserCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const UserArgsSchema: z.ZodType<Prisma.UserDefaultArgs> = z.object({
  select: z.lazy(() => UserSelectSchema).optional(),
  include: z.lazy(() => UserIncludeSchema).optional(),
}).strict();

export const UserCountOutputTypeArgsSchema: z.ZodType<Prisma.UserCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => UserCountOutputTypeSelectSchema).nullish(),
}).strict();

export const UserCountOutputTypeSelectSchema: z.ZodType<Prisma.UserCountOutputTypeSelect> = z.object({
  tokens: z.boolean().optional(),
  patients: z.boolean().optional(),
  events: z.boolean().optional(),
  eventActions: z.boolean().optional(),
  treatmentPlans: z.boolean().optional(),
  invitations: z.boolean().optional(),
}).strict();

export const UserSelectSchema: z.ZodType<Prisma.UserSelect> = z.object({
  id: z.boolean().optional(),
  index: z.boolean().optional(),
  role: z.boolean().optional(),
  workingHours: z.boolean().optional(),
  specializationId: z.boolean().optional(),
  profileId: z.boolean().optional(),
  tenantId: z.boolean().optional(),
  deletedAt: z.boolean().optional(),
  activatedAt: z.boolean().optional(),
  lastLoginAt: z.boolean().optional(),
  bannedAt: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  specialization: z.union([z.boolean(),z.lazy(() => SpecializationArgsSchema)]).optional(),
  profile: z.union([z.boolean(),z.lazy(() => ProfileArgsSchema)]).optional(),
  tenant: z.union([z.boolean(),z.lazy(() => TenantArgsSchema)]).optional(),
  invitation: z.union([z.boolean(),z.lazy(() => InvitationArgsSchema)]).optional(),
  tokens: z.union([z.boolean(),z.lazy(() => TokenFindManyArgsSchema)]).optional(),
  patients: z.union([z.boolean(),z.lazy(() => PatientFindManyArgsSchema)]).optional(),
  events: z.union([z.boolean(),z.lazy(() => EventFindManyArgsSchema)]).optional(),
  eventActions: z.union([z.boolean(),z.lazy(() => EventActionFindManyArgsSchema)]).optional(),
  treatmentPlans: z.union([z.boolean(),z.lazy(() => TreatmentPlanFindManyArgsSchema)]).optional(),
  invitations: z.union([z.boolean(),z.lazy(() => InvitationFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => UserCountOutputTypeArgsSchema)]).optional(),
}).strict()

// PROFILE
//------------------------------------------------------

export const ProfileIncludeSchema: z.ZodType<Prisma.ProfileInclude> = z.object({
  preferredTenant: z.union([z.boolean(),z.lazy(() => TenantArgsSchema)]).optional(),
  users: z.union([z.boolean(),z.lazy(() => UserFindManyArgsSchema)]).optional(),
  auth: z.union([z.boolean(),z.lazy(() => AccountAuthFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => ProfileCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const ProfileArgsSchema: z.ZodType<Prisma.ProfileDefaultArgs> = z.object({
  select: z.lazy(() => ProfileSelectSchema).optional(),
  include: z.lazy(() => ProfileIncludeSchema).optional(),
}).strict();

export const ProfileCountOutputTypeArgsSchema: z.ZodType<Prisma.ProfileCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => ProfileCountOutputTypeSelectSchema).nullish(),
}).strict();

export const ProfileCountOutputTypeSelectSchema: z.ZodType<Prisma.ProfileCountOutputTypeSelect> = z.object({
  users: z.boolean().optional(),
  auth: z.boolean().optional(),
}).strict();

export const ProfileSelectSchema: z.ZodType<Prisma.ProfileSelect> = z.object({
  id: z.boolean().optional(),
  title: z.boolean().optional(),
  firstName: z.boolean().optional(),
  lastName: z.boolean().optional(),
  email: z.boolean().optional(),
  phone: z.boolean().optional(),
  avatar: z.boolean().optional(),
  stripeCustomerId: z.boolean().optional(),
  stripeFreeTrialUsed: z.boolean().optional(),
  preferredTenantId: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  preferredTenant: z.union([z.boolean(),z.lazy(() => TenantArgsSchema)]).optional(),
  users: z.union([z.boolean(),z.lazy(() => UserFindManyArgsSchema)]).optional(),
  auth: z.union([z.boolean(),z.lazy(() => AccountAuthFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => ProfileCountOutputTypeArgsSchema)]).optional(),
}).strict()

// ACCOUNT AUTH
//------------------------------------------------------

export const AccountAuthIncludeSchema: z.ZodType<Prisma.AccountAuthInclude> = z.object({
  profile: z.union([z.boolean(),z.lazy(() => ProfileArgsSchema)]).optional(),
}).strict()

export const AccountAuthArgsSchema: z.ZodType<Prisma.AccountAuthDefaultArgs> = z.object({
  select: z.lazy(() => AccountAuthSelectSchema).optional(),
  include: z.lazy(() => AccountAuthIncludeSchema).optional(),
}).strict();

export const AccountAuthSelectSchema: z.ZodType<Prisma.AccountAuthSelect> = z.object({
  id: z.boolean().optional(),
  profileId: z.boolean().optional(),
  type: z.boolean().optional(),
  provider: z.boolean().optional(),
  passwordHash: z.boolean().optional(),
  refresh_token: z.boolean().optional(),
  access_token: z.boolean().optional(),
  expires_at: z.boolean().optional(),
  refresh_token_expires_in: z.boolean().optional(),
  token_type: z.boolean().optional(),
  scope: z.boolean().optional(),
  id_token: z.boolean().optional(),
  session_state: z.boolean().optional(),
  profile: z.union([z.boolean(),z.lazy(() => ProfileArgsSchema)]).optional(),
}).strict()

// PLAN
//------------------------------------------------------

export const PlanIncludeSchema: z.ZodType<Prisma.PlanInclude> = z.object({
  tenantProfiles: z.union([z.boolean(),z.lazy(() => TenantProfileFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => PlanCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const PlanArgsSchema: z.ZodType<Prisma.PlanDefaultArgs> = z.object({
  select: z.lazy(() => PlanSelectSchema).optional(),
  include: z.lazy(() => PlanIncludeSchema).optional(),
}).strict();

export const PlanCountOutputTypeArgsSchema: z.ZodType<Prisma.PlanCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => PlanCountOutputTypeSelectSchema).nullish(),
}).strict();

export const PlanCountOutputTypeSelectSchema: z.ZodType<Prisma.PlanCountOutputTypeSelect> = z.object({
  tenantProfiles: z.boolean().optional(),
}).strict();

export const PlanSelectSchema: z.ZodType<Prisma.PlanSelect> = z.object({
  id: z.boolean().optional(),
  stripeProductId: z.boolean().optional(),
  stripePriceId: z.boolean().optional(),
  name: z.boolean().optional(),
  maxUsers: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  tenantProfiles: z.union([z.boolean(),z.lazy(() => TenantProfileFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => PlanCountOutputTypeArgsSchema)]).optional(),
}).strict()

// TOKEN
//------------------------------------------------------

export const TokenIncludeSchema: z.ZodType<Prisma.TokenInclude> = z.object({
  user: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
}).strict()

export const TokenArgsSchema: z.ZodType<Prisma.TokenDefaultArgs> = z.object({
  select: z.lazy(() => TokenSelectSchema).optional(),
  include: z.lazy(() => TokenIncludeSchema).optional(),
}).strict();

export const TokenSelectSchema: z.ZodType<Prisma.TokenSelect> = z.object({
  id: z.boolean().optional(),
  type: z.boolean().optional(),
  token: z.boolean().optional(),
  expires: z.boolean().optional(),
  userId: z.boolean().optional(),
  user: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
}).strict()

// INVITATION
//------------------------------------------------------

export const InvitationIncludeSchema: z.ZodType<Prisma.InvitationInclude> = z.object({
  invitedBy: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
  user: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
}).strict()

export const InvitationArgsSchema: z.ZodType<Prisma.InvitationDefaultArgs> = z.object({
  select: z.lazy(() => InvitationSelectSchema).optional(),
  include: z.lazy(() => InvitationIncludeSchema).optional(),
}).strict();

export const InvitationSelectSchema: z.ZodType<Prisma.InvitationSelect> = z.object({
  id: z.boolean().optional(),
  email: z.boolean().optional(),
  role: z.boolean().optional(),
  token: z.boolean().optional(),
  expires: z.boolean().optional(),
  invitedById: z.boolean().optional(),
  userId: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  invitedBy: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
  user: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
}).strict()

// PATIENT
//------------------------------------------------------

export const PatientIncludeSchema: z.ZodType<Prisma.PatientInclude> = z.object({
  user: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
  tenant: z.union([z.boolean(),z.lazy(() => TenantArgsSchema)]).optional(),
  appointments: z.union([z.boolean(),z.lazy(() => EventFindManyArgsSchema)]).optional(),
  treatmentPlans: z.union([z.boolean(),z.lazy(() => TreatmentPlanFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => PatientCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const PatientArgsSchema: z.ZodType<Prisma.PatientDefaultArgs> = z.object({
  select: z.lazy(() => PatientSelectSchema).optional(),
  include: z.lazy(() => PatientIncludeSchema).optional(),
}).strict();

export const PatientCountOutputTypeArgsSchema: z.ZodType<Prisma.PatientCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => PatientCountOutputTypeSelectSchema).nullish(),
}).strict();

export const PatientCountOutputTypeSelectSchema: z.ZodType<Prisma.PatientCountOutputTypeSelect> = z.object({
  appointments: z.boolean().optional(),
  treatmentPlans: z.boolean().optional(),
}).strict();

export const PatientSelectSchema: z.ZodType<Prisma.PatientSelect> = z.object({
  id: z.boolean().optional(),
  firstName: z.boolean().optional(),
  lastName: z.boolean().optional(),
  gender: z.boolean().optional(),
  dob: z.boolean().optional(),
  email: z.boolean().optional(),
  phone: z.boolean().optional(),
  city: z.boolean().optional(),
  county: z.boolean().optional(),
  status: z.boolean().optional(),
  smsNotifications: z.boolean().optional(),
  emailNotifications: z.boolean().optional(),
  userId: z.boolean().optional(),
  tenantId: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  user: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
  tenant: z.union([z.boolean(),z.lazy(() => TenantArgsSchema)]).optional(),
  appointments: z.union([z.boolean(),z.lazy(() => EventFindManyArgsSchema)]).optional(),
  treatmentPlans: z.union([z.boolean(),z.lazy(() => TreatmentPlanFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => PatientCountOutputTypeArgsSchema)]).optional(),
}).strict()

// SPECIALIZATION
//------------------------------------------------------

export const SpecializationIncludeSchema: z.ZodType<Prisma.SpecializationInclude> = z.object({
  users: z.union([z.boolean(),z.lazy(() => UserFindManyArgsSchema)]).optional(),
  tenant: z.union([z.boolean(),z.lazy(() => TenantArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => SpecializationCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const SpecializationArgsSchema: z.ZodType<Prisma.SpecializationDefaultArgs> = z.object({
  select: z.lazy(() => SpecializationSelectSchema).optional(),
  include: z.lazy(() => SpecializationIncludeSchema).optional(),
}).strict();

export const SpecializationCountOutputTypeArgsSchema: z.ZodType<Prisma.SpecializationCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => SpecializationCountOutputTypeSelectSchema).nullish(),
}).strict();

export const SpecializationCountOutputTypeSelectSchema: z.ZodType<Prisma.SpecializationCountOutputTypeSelect> = z.object({
  users: z.boolean().optional(),
}).strict();

export const SpecializationSelectSchema: z.ZodType<Prisma.SpecializationSelect> = z.object({
  id: z.boolean().optional(),
  name: z.boolean().optional(),
  description: z.boolean().optional(),
  tenantId: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  users: z.union([z.boolean(),z.lazy(() => UserFindManyArgsSchema)]).optional(),
  tenant: z.union([z.boolean(),z.lazy(() => TenantArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => SpecializationCountOutputTypeArgsSchema)]).optional(),
}).strict()

// EVENT
//------------------------------------------------------

export const EventIncludeSchema: z.ZodType<Prisma.EventInclude> = z.object({
  actions: z.union([z.boolean(),z.lazy(() => EventActionFindManyArgsSchema)]).optional(),
  treatments: z.union([z.boolean(),z.lazy(() => TreatmentFindManyArgsSchema)]).optional(),
  patient: z.union([z.boolean(),z.lazy(() => PatientArgsSchema)]).optional(),
  user: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
  tenant: z.union([z.boolean(),z.lazy(() => TenantArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => EventCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const EventArgsSchema: z.ZodType<Prisma.EventDefaultArgs> = z.object({
  select: z.lazy(() => EventSelectSchema).optional(),
  include: z.lazy(() => EventIncludeSchema).optional(),
}).strict();

export const EventCountOutputTypeArgsSchema: z.ZodType<Prisma.EventCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => EventCountOutputTypeSelectSchema).nullish(),
}).strict();

export const EventCountOutputTypeSelectSchema: z.ZodType<Prisma.EventCountOutputTypeSelect> = z.object({
  actions: z.boolean().optional(),
  treatments: z.boolean().optional(),
}).strict();

export const EventSelectSchema: z.ZodType<Prisma.EventSelect> = z.object({
  id: z.boolean().optional(),
  title: z.boolean().optional(),
  description: z.boolean().optional(),
  date: z.boolean().optional(),
  start: z.boolean().optional(),
  end: z.boolean().optional(),
  allDay: z.boolean().optional(),
  type: z.boolean().optional(),
  status: z.boolean().optional(),
  patientId: z.boolean().optional(),
  userId: z.boolean().optional(),
  tenantId: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  actions: z.union([z.boolean(),z.lazy(() => EventActionFindManyArgsSchema)]).optional(),
  treatments: z.union([z.boolean(),z.lazy(() => TreatmentFindManyArgsSchema)]).optional(),
  patient: z.union([z.boolean(),z.lazy(() => PatientArgsSchema)]).optional(),
  user: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
  tenant: z.union([z.boolean(),z.lazy(() => TenantArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => EventCountOutputTypeArgsSchema)]).optional(),
}).strict()

// EVENT ACTION
//------------------------------------------------------

export const EventActionIncludeSchema: z.ZodType<Prisma.EventActionInclude> = z.object({
  user: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
  event: z.union([z.boolean(),z.lazy(() => EventArgsSchema)]).optional(),
}).strict()

export const EventActionArgsSchema: z.ZodType<Prisma.EventActionDefaultArgs> = z.object({
  select: z.lazy(() => EventActionSelectSchema).optional(),
  include: z.lazy(() => EventActionIncludeSchema).optional(),
}).strict();

export const EventActionSelectSchema: z.ZodType<Prisma.EventActionSelect> = z.object({
  id: z.boolean().optional(),
  data: z.boolean().optional(),
  userId: z.boolean().optional(),
  eventId: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  user: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
  event: z.union([z.boolean(),z.lazy(() => EventArgsSchema)]).optional(),
}).strict()

// PRODUCT
//------------------------------------------------------

export const ProductIncludeSchema: z.ZodType<Prisma.ProductInclude> = z.object({
  priceHistory: z.union([z.boolean(),z.lazy(() => PriceFindManyArgsSchema)]).optional(),
  treatments: z.union([z.boolean(),z.lazy(() => TreatmentFindManyArgsSchema)]).optional(),
  category: z.union([z.boolean(),z.lazy(() => ProductCategoryArgsSchema)]).optional(),
  tenant: z.union([z.boolean(),z.lazy(() => TenantArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => ProductCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const ProductArgsSchema: z.ZodType<Prisma.ProductDefaultArgs> = z.object({
  select: z.lazy(() => ProductSelectSchema).optional(),
  include: z.lazy(() => ProductIncludeSchema).optional(),
}).strict();

export const ProductCountOutputTypeArgsSchema: z.ZodType<Prisma.ProductCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => ProductCountOutputTypeSelectSchema).nullish(),
}).strict();

export const ProductCountOutputTypeSelectSchema: z.ZodType<Prisma.ProductCountOutputTypeSelect> = z.object({
  priceHistory: z.boolean().optional(),
  treatments: z.boolean().optional(),
}).strict();

export const ProductSelectSchema: z.ZodType<Prisma.ProductSelect> = z.object({
  id: z.boolean().optional(),
  name: z.boolean().optional(),
  description: z.boolean().optional(),
  price: z.boolean().optional(),
  image: z.boolean().optional(),
  tags: z.boolean().optional(),
  isActive: z.boolean().optional(),
  isDeleted: z.boolean().optional(),
  categoryId: z.boolean().optional(),
  tenantId: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  priceHistory: z.union([z.boolean(),z.lazy(() => PriceFindManyArgsSchema)]).optional(),
  treatments: z.union([z.boolean(),z.lazy(() => TreatmentFindManyArgsSchema)]).optional(),
  category: z.union([z.boolean(),z.lazy(() => ProductCategoryArgsSchema)]).optional(),
  tenant: z.union([z.boolean(),z.lazy(() => TenantArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => ProductCountOutputTypeArgsSchema)]).optional(),
}).strict()

// PRICE
//------------------------------------------------------

export const PriceIncludeSchema: z.ZodType<Prisma.PriceInclude> = z.object({
  product: z.union([z.boolean(),z.lazy(() => ProductArgsSchema)]).optional(),
}).strict()

export const PriceArgsSchema: z.ZodType<Prisma.PriceDefaultArgs> = z.object({
  select: z.lazy(() => PriceSelectSchema).optional(),
  include: z.lazy(() => PriceIncludeSchema).optional(),
}).strict();

export const PriceSelectSchema: z.ZodType<Prisma.PriceSelect> = z.object({
  id: z.boolean().optional(),
  value: z.boolean().optional(),
  productId: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  product: z.union([z.boolean(),z.lazy(() => ProductArgsSchema)]).optional(),
}).strict()

// PRODUCT CATEGORY
//------------------------------------------------------

export const ProductCategoryIncludeSchema: z.ZodType<Prisma.ProductCategoryInclude> = z.object({
  parentCategory: z.union([z.boolean(),z.lazy(() => ProductCategoryArgsSchema)]).optional(),
  subcategories: z.union([z.boolean(),z.lazy(() => ProductCategoryFindManyArgsSchema)]).optional(),
  products: z.union([z.boolean(),z.lazy(() => ProductFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => ProductCategoryCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const ProductCategoryArgsSchema: z.ZodType<Prisma.ProductCategoryDefaultArgs> = z.object({
  select: z.lazy(() => ProductCategorySelectSchema).optional(),
  include: z.lazy(() => ProductCategoryIncludeSchema).optional(),
}).strict();

export const ProductCategoryCountOutputTypeArgsSchema: z.ZodType<Prisma.ProductCategoryCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => ProductCategoryCountOutputTypeSelectSchema).nullish(),
}).strict();

export const ProductCategoryCountOutputTypeSelectSchema: z.ZodType<Prisma.ProductCategoryCountOutputTypeSelect> = z.object({
  subcategories: z.boolean().optional(),
  products: z.boolean().optional(),
}).strict();

export const ProductCategorySelectSchema: z.ZodType<Prisma.ProductCategorySelect> = z.object({
  id: z.boolean().optional(),
  name: z.boolean().optional(),
  parentCategoryId: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  parentCategory: z.union([z.boolean(),z.lazy(() => ProductCategoryArgsSchema)]).optional(),
  subcategories: z.union([z.boolean(),z.lazy(() => ProductCategoryFindManyArgsSchema)]).optional(),
  products: z.union([z.boolean(),z.lazy(() => ProductFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => ProductCategoryCountOutputTypeArgsSchema)]).optional(),
}).strict()

// TREATMENT
//------------------------------------------------------

export const TreatmentIncludeSchema: z.ZodType<Prisma.TreatmentInclude> = z.object({
  product: z.union([z.boolean(),z.lazy(() => ProductArgsSchema)]).optional(),
  treatmentPlan: z.union([z.boolean(),z.lazy(() => TreatmentPlanArgsSchema)]).optional(),
  event: z.union([z.boolean(),z.lazy(() => EventArgsSchema)]).optional(),
}).strict()

export const TreatmentArgsSchema: z.ZodType<Prisma.TreatmentDefaultArgs> = z.object({
  select: z.lazy(() => TreatmentSelectSchema).optional(),
  include: z.lazy(() => TreatmentIncludeSchema).optional(),
}).strict();

export const TreatmentSelectSchema: z.ZodType<Prisma.TreatmentSelect> = z.object({
  id: z.boolean().optional(),
  price: z.boolean().optional(),
  toothNumber: z.boolean().optional(),
  status: z.boolean().optional(),
  productId: z.boolean().optional(),
  treatmentPlanId: z.boolean().optional(),
  eventId: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  product: z.union([z.boolean(),z.lazy(() => ProductArgsSchema)]).optional(),
  treatmentPlan: z.union([z.boolean(),z.lazy(() => TreatmentPlanArgsSchema)]).optional(),
  event: z.union([z.boolean(),z.lazy(() => EventArgsSchema)]).optional(),
}).strict()

// TREATMENT PLAN
//------------------------------------------------------

export const TreatmentPlanIncludeSchema: z.ZodType<Prisma.TreatmentPlanInclude> = z.object({
  treatments: z.union([z.boolean(),z.lazy(() => TreatmentFindManyArgsSchema)]).optional(),
  patient: z.union([z.boolean(),z.lazy(() => PatientArgsSchema)]).optional(),
  user: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => TreatmentPlanCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const TreatmentPlanArgsSchema: z.ZodType<Prisma.TreatmentPlanDefaultArgs> = z.object({
  select: z.lazy(() => TreatmentPlanSelectSchema).optional(),
  include: z.lazy(() => TreatmentPlanIncludeSchema).optional(),
}).strict();

export const TreatmentPlanCountOutputTypeArgsSchema: z.ZodType<Prisma.TreatmentPlanCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => TreatmentPlanCountOutputTypeSelectSchema).nullish(),
}).strict();

export const TreatmentPlanCountOutputTypeSelectSchema: z.ZodType<Prisma.TreatmentPlanCountOutputTypeSelect> = z.object({
  treatments: z.boolean().optional(),
}).strict();

export const TreatmentPlanSelectSchema: z.ZodType<Prisma.TreatmentPlanSelect> = z.object({
  id: z.boolean().optional(),
  description: z.boolean().optional(),
  isDone: z.boolean().optional(),
  patientId: z.boolean().optional(),
  userId: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  treatments: z.union([z.boolean(),z.lazy(() => TreatmentFindManyArgsSchema)]).optional(),
  patient: z.union([z.boolean(),z.lazy(() => PatientArgsSchema)]).optional(),
  user: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => TreatmentPlanCountOutputTypeArgsSchema)]).optional(),
}).strict()

// COUNTY
//------------------------------------------------------

export const CountyIncludeSchema: z.ZodType<Prisma.CountyInclude> = z.object({
  cities: z.union([z.boolean(),z.lazy(() => CityFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => CountyCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const CountyArgsSchema: z.ZodType<Prisma.CountyDefaultArgs> = z.object({
  select: z.lazy(() => CountySelectSchema).optional(),
  include: z.lazy(() => CountyIncludeSchema).optional(),
}).strict();

export const CountyCountOutputTypeArgsSchema: z.ZodType<Prisma.CountyCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => CountyCountOutputTypeSelectSchema).nullish(),
}).strict();

export const CountyCountOutputTypeSelectSchema: z.ZodType<Prisma.CountyCountOutputTypeSelect> = z.object({
  cities: z.boolean().optional(),
}).strict();

export const CountySelectSchema: z.ZodType<Prisma.CountySelect> = z.object({
  id: z.boolean().optional(),
  name: z.boolean().optional(),
  code: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  cities: z.union([z.boolean(),z.lazy(() => CityFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => CountyCountOutputTypeArgsSchema)]).optional(),
}).strict()

// CITY
//------------------------------------------------------

export const CityIncludeSchema: z.ZodType<Prisma.CityInclude> = z.object({
  county: z.union([z.boolean(),z.lazy(() => CountyArgsSchema)]).optional(),
}).strict()

export const CityArgsSchema: z.ZodType<Prisma.CityDefaultArgs> = z.object({
  select: z.lazy(() => CitySelectSchema).optional(),
  include: z.lazy(() => CityIncludeSchema).optional(),
}).strict();

export const CitySelectSchema: z.ZodType<Prisma.CitySelect> = z.object({
  id: z.boolean().optional(),
  name: z.boolean().optional(),
  countyId: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  county: z.union([z.boolean(),z.lazy(() => CountyArgsSchema)]).optional(),
}).strict()


/////////////////////////////////////////
// INPUT TYPES
/////////////////////////////////////////

export const TenantWhereInputSchema: z.ZodType<Prisma.TenantWhereInput> = z.object({
  AND: z.union([ z.lazy(() => TenantWhereInputSchema),z.lazy(() => TenantWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => TenantWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => TenantWhereInputSchema),z.lazy(() => TenantWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  email: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  profileId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  deletedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  disabledAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  trialExpiresAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  users: z.lazy(() => UserListRelationFilterSchema).optional(),
  profile: z.union([ z.lazy(() => TenantProfileRelationFilterSchema),z.lazy(() => TenantProfileWhereInputSchema) ]).optional(),
  specializations: z.lazy(() => SpecializationListRelationFilterSchema).optional(),
  preferedByProfiles: z.lazy(() => ProfileListRelationFilterSchema).optional(),
  patients: z.lazy(() => PatientListRelationFilterSchema).optional(),
  products: z.lazy(() => ProductListRelationFilterSchema).optional(),
  events: z.lazy(() => EventListRelationFilterSchema).optional()
}).strict();

export const TenantOrderByWithRelationInputSchema: z.ZodType<Prisma.TenantOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  profileId: z.lazy(() => SortOrderSchema).optional(),
  deletedAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  disabledAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  trialExpiresAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  users: z.lazy(() => UserOrderByRelationAggregateInputSchema).optional(),
  profile: z.lazy(() => TenantProfileOrderByWithRelationInputSchema).optional(),
  specializations: z.lazy(() => SpecializationOrderByRelationAggregateInputSchema).optional(),
  preferedByProfiles: z.lazy(() => ProfileOrderByRelationAggregateInputSchema).optional(),
  patients: z.lazy(() => PatientOrderByRelationAggregateInputSchema).optional(),
  products: z.lazy(() => ProductOrderByRelationAggregateInputSchema).optional(),
  events: z.lazy(() => EventOrderByRelationAggregateInputSchema).optional()
}).strict();

export const TenantWhereUniqueInputSchema: z.ZodType<Prisma.TenantWhereUniqueInput> = z.union([
  z.object({
    id: z.string().cuid(),
    profileId: z.string()
  }),
  z.object({
    id: z.string().cuid(),
  }),
  z.object({
    profileId: z.string(),
  }),
])
.and(z.object({
  id: z.string().cuid().optional(),
  profileId: z.string().optional(),
  AND: z.union([ z.lazy(() => TenantWhereInputSchema),z.lazy(() => TenantWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => TenantWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => TenantWhereInputSchema),z.lazy(() => TenantWhereInputSchema).array() ]).optional(),
  email: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  deletedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  disabledAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  trialExpiresAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  users: z.lazy(() => UserListRelationFilterSchema).optional(),
  profile: z.union([ z.lazy(() => TenantProfileRelationFilterSchema),z.lazy(() => TenantProfileWhereInputSchema) ]).optional(),
  specializations: z.lazy(() => SpecializationListRelationFilterSchema).optional(),
  preferedByProfiles: z.lazy(() => ProfileListRelationFilterSchema).optional(),
  patients: z.lazy(() => PatientListRelationFilterSchema).optional(),
  products: z.lazy(() => ProductListRelationFilterSchema).optional(),
  events: z.lazy(() => EventListRelationFilterSchema).optional()
}).strict());

export const TenantOrderByWithAggregationInputSchema: z.ZodType<Prisma.TenantOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  profileId: z.lazy(() => SortOrderSchema).optional(),
  deletedAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  disabledAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  trialExpiresAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => TenantCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => TenantMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => TenantMinOrderByAggregateInputSchema).optional()
}).strict();

export const TenantScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.TenantScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => TenantScalarWhereWithAggregatesInputSchema),z.lazy(() => TenantScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => TenantScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => TenantScalarWhereWithAggregatesInputSchema),z.lazy(() => TenantScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  email: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  profileId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  deletedAt: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  disabledAt: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  trialExpiresAt: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const TenantProfileWhereInputSchema: z.ZodType<Prisma.TenantProfileWhereInput> = z.object({
  AND: z.union([ z.lazy(() => TenantProfileWhereInputSchema),z.lazy(() => TenantProfileWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => TenantProfileWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => TenantProfileWhereInputSchema),z.lazy(() => TenantProfileWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  county: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  address: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  zip: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  phone: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  avatar: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  size: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  stripeSubscriptionId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  activeSubscription: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  planId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  plan: z.union([ z.lazy(() => PlanRelationFilterSchema),z.lazy(() => PlanWhereInputSchema) ]).optional(),
  tenant: z.union([ z.lazy(() => TenantNullableRelationFilterSchema),z.lazy(() => TenantWhereInputSchema) ]).optional().nullable(),
}).strict();

export const TenantProfileOrderByWithRelationInputSchema: z.ZodType<Prisma.TenantProfileOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  county: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  address: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  zip: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  phone: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  avatar: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  size: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  stripeSubscriptionId: z.lazy(() => SortOrderSchema).optional(),
  activeSubscription: z.lazy(() => SortOrderSchema).optional(),
  planId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  plan: z.lazy(() => PlanOrderByWithRelationInputSchema).optional(),
  tenant: z.lazy(() => TenantOrderByWithRelationInputSchema).optional()
}).strict();

export const TenantProfileWhereUniqueInputSchema: z.ZodType<Prisma.TenantProfileWhereUniqueInput> = z.object({
  id: z.string().cuid()
})
.and(z.object({
  id: z.string().cuid().optional(),
  AND: z.union([ z.lazy(() => TenantProfileWhereInputSchema),z.lazy(() => TenantProfileWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => TenantProfileWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => TenantProfileWhereInputSchema),z.lazy(() => TenantProfileWhereInputSchema).array() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  county: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  address: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  zip: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  phone: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  avatar: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  size: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  stripeSubscriptionId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  activeSubscription: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  planId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  plan: z.union([ z.lazy(() => PlanRelationFilterSchema),z.lazy(() => PlanWhereInputSchema) ]).optional(),
  tenant: z.union([ z.lazy(() => TenantNullableRelationFilterSchema),z.lazy(() => TenantWhereInputSchema) ]).optional().nullable(),
}).strict());

export const TenantProfileOrderByWithAggregationInputSchema: z.ZodType<Prisma.TenantProfileOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  county: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  address: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  zip: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  phone: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  avatar: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  size: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  stripeSubscriptionId: z.lazy(() => SortOrderSchema).optional(),
  activeSubscription: z.lazy(() => SortOrderSchema).optional(),
  planId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => TenantProfileCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => TenantProfileMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => TenantProfileMinOrderByAggregateInputSchema).optional()
}).strict();

export const TenantProfileScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.TenantProfileScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => TenantProfileScalarWhereWithAggregatesInputSchema),z.lazy(() => TenantProfileScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => TenantProfileScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => TenantProfileScalarWhereWithAggregatesInputSchema),z.lazy(() => TenantProfileScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  county: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  address: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  zip: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  phone: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  avatar: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  size: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  stripeSubscriptionId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  activeSubscription: z.union([ z.lazy(() => BoolWithAggregatesFilterSchema),z.boolean() ]).optional(),
  planId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const UserWhereInputSchema: z.ZodType<Prisma.UserWhereInput> = z.object({
  AND: z.union([ z.lazy(() => UserWhereInputSchema),z.lazy(() => UserWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => UserWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => UserWhereInputSchema),z.lazy(() => UserWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  index: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  role: z.union([ z.lazy(() => EnumRoleFilterSchema),z.lazy(() => RoleSchema) ]).optional(),
  workingHours: z.lazy(() => JsonFilterSchema).optional(),
  specializationId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  profileId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  tenantId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  deletedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  activatedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  lastLoginAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  bannedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  specialization: z.union([ z.lazy(() => SpecializationNullableRelationFilterSchema),z.lazy(() => SpecializationWhereInputSchema) ]).optional().nullable(),
  profile: z.union([ z.lazy(() => ProfileRelationFilterSchema),z.lazy(() => ProfileWhereInputSchema) ]).optional(),
  tenant: z.union([ z.lazy(() => TenantRelationFilterSchema),z.lazy(() => TenantWhereInputSchema) ]).optional(),
  invitation: z.union([ z.lazy(() => InvitationNullableRelationFilterSchema),z.lazy(() => InvitationWhereInputSchema) ]).optional().nullable(),
  tokens: z.lazy(() => TokenListRelationFilterSchema).optional(),
  patients: z.lazy(() => PatientListRelationFilterSchema).optional(),
  events: z.lazy(() => EventListRelationFilterSchema).optional(),
  eventActions: z.lazy(() => EventActionListRelationFilterSchema).optional(),
  treatmentPlans: z.lazy(() => TreatmentPlanListRelationFilterSchema).optional(),
  invitations: z.lazy(() => InvitationListRelationFilterSchema).optional()
}).strict();

export const UserOrderByWithRelationInputSchema: z.ZodType<Prisma.UserOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  index: z.lazy(() => SortOrderSchema).optional(),
  role: z.lazy(() => SortOrderSchema).optional(),
  workingHours: z.lazy(() => SortOrderSchema).optional(),
  specializationId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  profileId: z.lazy(() => SortOrderSchema).optional(),
  tenantId: z.lazy(() => SortOrderSchema).optional(),
  deletedAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  activatedAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  lastLoginAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  bannedAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  specialization: z.lazy(() => SpecializationOrderByWithRelationInputSchema).optional(),
  profile: z.lazy(() => ProfileOrderByWithRelationInputSchema).optional(),
  tenant: z.lazy(() => TenantOrderByWithRelationInputSchema).optional(),
  invitation: z.lazy(() => InvitationOrderByWithRelationInputSchema).optional(),
  tokens: z.lazy(() => TokenOrderByRelationAggregateInputSchema).optional(),
  patients: z.lazy(() => PatientOrderByRelationAggregateInputSchema).optional(),
  events: z.lazy(() => EventOrderByRelationAggregateInputSchema).optional(),
  eventActions: z.lazy(() => EventActionOrderByRelationAggregateInputSchema).optional(),
  treatmentPlans: z.lazy(() => TreatmentPlanOrderByRelationAggregateInputSchema).optional(),
  invitations: z.lazy(() => InvitationOrderByRelationAggregateInputSchema).optional()
}).strict();

export const UserWhereUniqueInputSchema: z.ZodType<Prisma.UserWhereUniqueInput> = z.object({
  id: z.string().cuid()
})
.and(z.object({
  id: z.string().cuid().optional(),
  AND: z.union([ z.lazy(() => UserWhereInputSchema),z.lazy(() => UserWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => UserWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => UserWhereInputSchema),z.lazy(() => UserWhereInputSchema).array() ]).optional(),
  index: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  role: z.union([ z.lazy(() => EnumRoleFilterSchema),z.lazy(() => RoleSchema) ]).optional(),
  workingHours: z.lazy(() => JsonFilterSchema).optional(),
  specializationId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  profileId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  tenantId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  deletedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  activatedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  lastLoginAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  bannedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  specialization: z.union([ z.lazy(() => SpecializationNullableRelationFilterSchema),z.lazy(() => SpecializationWhereInputSchema) ]).optional().nullable(),
  profile: z.union([ z.lazy(() => ProfileRelationFilterSchema),z.lazy(() => ProfileWhereInputSchema) ]).optional(),
  tenant: z.union([ z.lazy(() => TenantRelationFilterSchema),z.lazy(() => TenantWhereInputSchema) ]).optional(),
  invitation: z.union([ z.lazy(() => InvitationNullableRelationFilterSchema),z.lazy(() => InvitationWhereInputSchema) ]).optional().nullable(),
  tokens: z.lazy(() => TokenListRelationFilterSchema).optional(),
  patients: z.lazy(() => PatientListRelationFilterSchema).optional(),
  events: z.lazy(() => EventListRelationFilterSchema).optional(),
  eventActions: z.lazy(() => EventActionListRelationFilterSchema).optional(),
  treatmentPlans: z.lazy(() => TreatmentPlanListRelationFilterSchema).optional(),
  invitations: z.lazy(() => InvitationListRelationFilterSchema).optional()
}).strict());

export const UserOrderByWithAggregationInputSchema: z.ZodType<Prisma.UserOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  index: z.lazy(() => SortOrderSchema).optional(),
  role: z.lazy(() => SortOrderSchema).optional(),
  workingHours: z.lazy(() => SortOrderSchema).optional(),
  specializationId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  profileId: z.lazy(() => SortOrderSchema).optional(),
  tenantId: z.lazy(() => SortOrderSchema).optional(),
  deletedAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  activatedAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  lastLoginAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  bannedAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => UserCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => UserAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => UserMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => UserMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => UserSumOrderByAggregateInputSchema).optional()
}).strict();

export const UserScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.UserScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => UserScalarWhereWithAggregatesInputSchema),z.lazy(() => UserScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => UserScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => UserScalarWhereWithAggregatesInputSchema),z.lazy(() => UserScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  index: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  role: z.union([ z.lazy(() => EnumRoleWithAggregatesFilterSchema),z.lazy(() => RoleSchema) ]).optional(),
  workingHours: z.lazy(() => JsonWithAggregatesFilterSchema).optional(),
  specializationId: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  profileId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  tenantId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  deletedAt: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  activatedAt: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  lastLoginAt: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  bannedAt: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const ProfileWhereInputSchema: z.ZodType<Prisma.ProfileWhereInput> = z.object({
  AND: z.union([ z.lazy(() => ProfileWhereInputSchema),z.lazy(() => ProfileWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ProfileWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ProfileWhereInputSchema),z.lazy(() => ProfileWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  title: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  firstName: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  lastName: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  email: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  phone: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  avatar: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  stripeCustomerId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  stripeFreeTrialUsed: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  preferredTenantId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  preferredTenant: z.union([ z.lazy(() => TenantNullableRelationFilterSchema),z.lazy(() => TenantWhereInputSchema) ]).optional().nullable(),
  users: z.lazy(() => UserListRelationFilterSchema).optional(),
  auth: z.lazy(() => AccountAuthListRelationFilterSchema).optional()
}).strict();

export const ProfileOrderByWithRelationInputSchema: z.ZodType<Prisma.ProfileOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  title: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  firstName: z.lazy(() => SortOrderSchema).optional(),
  lastName: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  phone: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  avatar: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  stripeCustomerId: z.lazy(() => SortOrderSchema).optional(),
  stripeFreeTrialUsed: z.lazy(() => SortOrderSchema).optional(),
  preferredTenantId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  preferredTenant: z.lazy(() => TenantOrderByWithRelationInputSchema).optional(),
  users: z.lazy(() => UserOrderByRelationAggregateInputSchema).optional(),
  auth: z.lazy(() => AccountAuthOrderByRelationAggregateInputSchema).optional()
}).strict();

export const ProfileWhereUniqueInputSchema: z.ZodType<Prisma.ProfileWhereUniqueInput> = z.union([
  z.object({
    id: z.string().cuid(),
    email: z.string()
  }),
  z.object({
    id: z.string().cuid(),
  }),
  z.object({
    email: z.string(),
  }),
])
.and(z.object({
  id: z.string().cuid().optional(),
  email: z.string().optional(),
  AND: z.union([ z.lazy(() => ProfileWhereInputSchema),z.lazy(() => ProfileWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ProfileWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ProfileWhereInputSchema),z.lazy(() => ProfileWhereInputSchema).array() ]).optional(),
  title: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  firstName: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  lastName: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  phone: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  avatar: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  stripeCustomerId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  stripeFreeTrialUsed: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  preferredTenantId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  preferredTenant: z.union([ z.lazy(() => TenantNullableRelationFilterSchema),z.lazy(() => TenantWhereInputSchema) ]).optional().nullable(),
  users: z.lazy(() => UserListRelationFilterSchema).optional(),
  auth: z.lazy(() => AccountAuthListRelationFilterSchema).optional()
}).strict());

export const ProfileOrderByWithAggregationInputSchema: z.ZodType<Prisma.ProfileOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  title: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  firstName: z.lazy(() => SortOrderSchema).optional(),
  lastName: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  phone: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  avatar: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  stripeCustomerId: z.lazy(() => SortOrderSchema).optional(),
  stripeFreeTrialUsed: z.lazy(() => SortOrderSchema).optional(),
  preferredTenantId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => ProfileCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => ProfileMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => ProfileMinOrderByAggregateInputSchema).optional()
}).strict();

export const ProfileScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.ProfileScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => ProfileScalarWhereWithAggregatesInputSchema),z.lazy(() => ProfileScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => ProfileScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ProfileScalarWhereWithAggregatesInputSchema),z.lazy(() => ProfileScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  title: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  firstName: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  lastName: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  email: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  phone: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  avatar: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  stripeCustomerId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  stripeFreeTrialUsed: z.union([ z.lazy(() => BoolWithAggregatesFilterSchema),z.boolean() ]).optional(),
  preferredTenantId: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const AccountAuthWhereInputSchema: z.ZodType<Prisma.AccountAuthWhereInput> = z.object({
  AND: z.union([ z.lazy(() => AccountAuthWhereInputSchema),z.lazy(() => AccountAuthWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => AccountAuthWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => AccountAuthWhereInputSchema),z.lazy(() => AccountAuthWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  profileId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  type: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  provider: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  passwordHash: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  refresh_token: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  access_token: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  expires_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  refresh_token_expires_in: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  token_type: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  scope: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  id_token: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  session_state: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  profile: z.union([ z.lazy(() => ProfileRelationFilterSchema),z.lazy(() => ProfileWhereInputSchema) ]).optional(),
}).strict();

export const AccountAuthOrderByWithRelationInputSchema: z.ZodType<Prisma.AccountAuthOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  profileId: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  provider: z.lazy(() => SortOrderSchema).optional(),
  passwordHash: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  refresh_token: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  access_token: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  expires_at: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  refresh_token_expires_in: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  token_type: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  scope: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  id_token: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  session_state: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  profile: z.lazy(() => ProfileOrderByWithRelationInputSchema).optional()
}).strict();

export const AccountAuthWhereUniqueInputSchema: z.ZodType<Prisma.AccountAuthWhereUniqueInput> = z.object({
  id: z.string().cuid()
})
.and(z.object({
  id: z.string().cuid().optional(),
  AND: z.union([ z.lazy(() => AccountAuthWhereInputSchema),z.lazy(() => AccountAuthWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => AccountAuthWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => AccountAuthWhereInputSchema),z.lazy(() => AccountAuthWhereInputSchema).array() ]).optional(),
  profileId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  type: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  provider: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  passwordHash: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  refresh_token: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  access_token: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  expires_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  refresh_token_expires_in: z.union([ z.lazy(() => IntNullableFilterSchema),z.number().int() ]).optional().nullable(),
  token_type: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  scope: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  id_token: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  session_state: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  profile: z.union([ z.lazy(() => ProfileRelationFilterSchema),z.lazy(() => ProfileWhereInputSchema) ]).optional(),
}).strict());

export const AccountAuthOrderByWithAggregationInputSchema: z.ZodType<Prisma.AccountAuthOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  profileId: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  provider: z.lazy(() => SortOrderSchema).optional(),
  passwordHash: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  refresh_token: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  access_token: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  expires_at: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  refresh_token_expires_in: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  token_type: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  scope: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  id_token: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  session_state: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  _count: z.lazy(() => AccountAuthCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => AccountAuthAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => AccountAuthMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => AccountAuthMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => AccountAuthSumOrderByAggregateInputSchema).optional()
}).strict();

export const AccountAuthScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.AccountAuthScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => AccountAuthScalarWhereWithAggregatesInputSchema),z.lazy(() => AccountAuthScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => AccountAuthScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => AccountAuthScalarWhereWithAggregatesInputSchema),z.lazy(() => AccountAuthScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  profileId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  type: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  provider: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  passwordHash: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  refresh_token: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  access_token: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  expires_at: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  refresh_token_expires_in: z.union([ z.lazy(() => IntNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  token_type: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  scope: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  id_token: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  session_state: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
}).strict();

export const PlanWhereInputSchema: z.ZodType<Prisma.PlanWhereInput> = z.object({
  AND: z.union([ z.lazy(() => PlanWhereInputSchema),z.lazy(() => PlanWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => PlanWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => PlanWhereInputSchema),z.lazy(() => PlanWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  stripeProductId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  stripePriceId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  maxUsers: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  tenantProfiles: z.lazy(() => TenantProfileListRelationFilterSchema).optional()
}).strict();

export const PlanOrderByWithRelationInputSchema: z.ZodType<Prisma.PlanOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  stripeProductId: z.lazy(() => SortOrderSchema).optional(),
  stripePriceId: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  maxUsers: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  tenantProfiles: z.lazy(() => TenantProfileOrderByRelationAggregateInputSchema).optional()
}).strict();

export const PlanWhereUniqueInputSchema: z.ZodType<Prisma.PlanWhereUniqueInput> = z.union([
  z.object({
    id: z.string().cuid(),
    stripePriceId: z.string()
  }),
  z.object({
    id: z.string().cuid(),
  }),
  z.object({
    stripePriceId: z.string(),
  }),
])
.and(z.object({
  id: z.string().cuid().optional(),
  stripePriceId: z.string().optional(),
  AND: z.union([ z.lazy(() => PlanWhereInputSchema),z.lazy(() => PlanWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => PlanWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => PlanWhereInputSchema),z.lazy(() => PlanWhereInputSchema).array() ]).optional(),
  stripeProductId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  maxUsers: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  tenantProfiles: z.lazy(() => TenantProfileListRelationFilterSchema).optional()
}).strict());

export const PlanOrderByWithAggregationInputSchema: z.ZodType<Prisma.PlanOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  stripeProductId: z.lazy(() => SortOrderSchema).optional(),
  stripePriceId: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  maxUsers: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => PlanCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => PlanAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => PlanMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => PlanMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => PlanSumOrderByAggregateInputSchema).optional()
}).strict();

export const PlanScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.PlanScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => PlanScalarWhereWithAggregatesInputSchema),z.lazy(() => PlanScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => PlanScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => PlanScalarWhereWithAggregatesInputSchema),z.lazy(() => PlanScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  stripeProductId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  stripePriceId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  maxUsers: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const TokenWhereInputSchema: z.ZodType<Prisma.TokenWhereInput> = z.object({
  AND: z.union([ z.lazy(() => TokenWhereInputSchema),z.lazy(() => TokenWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => TokenWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => TokenWhereInputSchema),z.lazy(() => TokenWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  type: z.union([ z.lazy(() => EnumTokenTypeFilterSchema),z.lazy(() => TokenTypeSchema) ]).optional(),
  token: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  expires: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  userId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  user: z.union([ z.lazy(() => UserRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
}).strict();

export const TokenOrderByWithRelationInputSchema: z.ZodType<Prisma.TokenOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  token: z.lazy(() => SortOrderSchema).optional(),
  expires: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  user: z.lazy(() => UserOrderByWithRelationInputSchema).optional()
}).strict();

export const TokenWhereUniqueInputSchema: z.ZodType<Prisma.TokenWhereUniqueInput> = z.union([
  z.object({
    id: z.string().cuid(),
    token: z.string()
  }),
  z.object({
    id: z.string().cuid(),
  }),
  z.object({
    token: z.string(),
  }),
])
.and(z.object({
  id: z.string().cuid().optional(),
  token: z.string().optional(),
  AND: z.union([ z.lazy(() => TokenWhereInputSchema),z.lazy(() => TokenWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => TokenWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => TokenWhereInputSchema),z.lazy(() => TokenWhereInputSchema).array() ]).optional(),
  type: z.union([ z.lazy(() => EnumTokenTypeFilterSchema),z.lazy(() => TokenTypeSchema) ]).optional(),
  expires: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  userId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  user: z.union([ z.lazy(() => UserRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
}).strict());

export const TokenOrderByWithAggregationInputSchema: z.ZodType<Prisma.TokenOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  token: z.lazy(() => SortOrderSchema).optional(),
  expires: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => TokenCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => TokenMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => TokenMinOrderByAggregateInputSchema).optional()
}).strict();

export const TokenScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.TokenScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => TokenScalarWhereWithAggregatesInputSchema),z.lazy(() => TokenScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => TokenScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => TokenScalarWhereWithAggregatesInputSchema),z.lazy(() => TokenScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  type: z.union([ z.lazy(() => EnumTokenTypeWithAggregatesFilterSchema),z.lazy(() => TokenTypeSchema) ]).optional(),
  token: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  expires: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  userId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
}).strict();

export const InvitationWhereInputSchema: z.ZodType<Prisma.InvitationWhereInput> = z.object({
  AND: z.union([ z.lazy(() => InvitationWhereInputSchema),z.lazy(() => InvitationWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => InvitationWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => InvitationWhereInputSchema),z.lazy(() => InvitationWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  email: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  role: z.union([ z.lazy(() => EnumRoleFilterSchema),z.lazy(() => RoleSchema) ]).optional(),
  token: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  expires: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  invitedById: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  userId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  invitedBy: z.union([ z.lazy(() => UserRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
  user: z.union([ z.lazy(() => UserNullableRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional().nullable(),
}).strict();

export const InvitationOrderByWithRelationInputSchema: z.ZodType<Prisma.InvitationOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  role: z.lazy(() => SortOrderSchema).optional(),
  token: z.lazy(() => SortOrderSchema).optional(),
  expires: z.lazy(() => SortOrderSchema).optional(),
  invitedById: z.lazy(() => SortOrderSchema).optional(),
  userId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  invitedBy: z.lazy(() => UserOrderByWithRelationInputSchema).optional(),
  user: z.lazy(() => UserOrderByWithRelationInputSchema).optional()
}).strict();

export const InvitationWhereUniqueInputSchema: z.ZodType<Prisma.InvitationWhereUniqueInput> = z.union([
  z.object({
    id: z.string().cuid(),
    token: z.string(),
    userId: z.string()
  }),
  z.object({
    id: z.string().cuid(),
    token: z.string(),
  }),
  z.object({
    id: z.string().cuid(),
    userId: z.string(),
  }),
  z.object({
    id: z.string().cuid(),
  }),
  z.object({
    token: z.string(),
    userId: z.string(),
  }),
  z.object({
    token: z.string(),
  }),
  z.object({
    userId: z.string(),
  }),
])
.and(z.object({
  id: z.string().cuid().optional(),
  token: z.string().optional(),
  userId: z.string().optional(),
  AND: z.union([ z.lazy(() => InvitationWhereInputSchema),z.lazy(() => InvitationWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => InvitationWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => InvitationWhereInputSchema),z.lazy(() => InvitationWhereInputSchema).array() ]).optional(),
  email: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  role: z.union([ z.lazy(() => EnumRoleFilterSchema),z.lazy(() => RoleSchema) ]).optional(),
  expires: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  invitedById: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  invitedBy: z.union([ z.lazy(() => UserRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
  user: z.union([ z.lazy(() => UserNullableRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional().nullable(),
}).strict());

export const InvitationOrderByWithAggregationInputSchema: z.ZodType<Prisma.InvitationOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  role: z.lazy(() => SortOrderSchema).optional(),
  token: z.lazy(() => SortOrderSchema).optional(),
  expires: z.lazy(() => SortOrderSchema).optional(),
  invitedById: z.lazy(() => SortOrderSchema).optional(),
  userId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => InvitationCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => InvitationMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => InvitationMinOrderByAggregateInputSchema).optional()
}).strict();

export const InvitationScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.InvitationScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => InvitationScalarWhereWithAggregatesInputSchema),z.lazy(() => InvitationScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => InvitationScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => InvitationScalarWhereWithAggregatesInputSchema),z.lazy(() => InvitationScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  email: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  role: z.union([ z.lazy(() => EnumRoleWithAggregatesFilterSchema),z.lazy(() => RoleSchema) ]).optional(),
  token: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  expires: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  invitedById: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  userId: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const PatientWhereInputSchema: z.ZodType<Prisma.PatientWhereInput> = z.object({
  AND: z.union([ z.lazy(() => PatientWhereInputSchema),z.lazy(() => PatientWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => PatientWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => PatientWhereInputSchema),z.lazy(() => PatientWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  firstName: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  lastName: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  gender: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  dob: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  email: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  phone: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  city: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  county: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  status: z.union([ z.lazy(() => EnumStatusFilterSchema),z.lazy(() => StatusSchema) ]).optional(),
  smsNotifications: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  emailNotifications: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  userId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  tenantId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  user: z.union([ z.lazy(() => UserRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
  tenant: z.union([ z.lazy(() => TenantRelationFilterSchema),z.lazy(() => TenantWhereInputSchema) ]).optional(),
  appointments: z.lazy(() => EventListRelationFilterSchema).optional(),
  treatmentPlans: z.lazy(() => TreatmentPlanListRelationFilterSchema).optional()
}).strict();

export const PatientOrderByWithRelationInputSchema: z.ZodType<Prisma.PatientOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  firstName: z.lazy(() => SortOrderSchema).optional(),
  lastName: z.lazy(() => SortOrderSchema).optional(),
  gender: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  dob: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  email: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  phone: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  city: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  county: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  smsNotifications: z.lazy(() => SortOrderSchema).optional(),
  emailNotifications: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  tenantId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  user: z.lazy(() => UserOrderByWithRelationInputSchema).optional(),
  tenant: z.lazy(() => TenantOrderByWithRelationInputSchema).optional(),
  appointments: z.lazy(() => EventOrderByRelationAggregateInputSchema).optional(),
  treatmentPlans: z.lazy(() => TreatmentPlanOrderByRelationAggregateInputSchema).optional()
}).strict();

export const PatientWhereUniqueInputSchema: z.ZodType<Prisma.PatientWhereUniqueInput> = z.object({
  id: z.string().cuid()
})
.and(z.object({
  id: z.string().cuid().optional(),
  AND: z.union([ z.lazy(() => PatientWhereInputSchema),z.lazy(() => PatientWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => PatientWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => PatientWhereInputSchema),z.lazy(() => PatientWhereInputSchema).array() ]).optional(),
  firstName: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  lastName: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  gender: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  dob: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  email: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  phone: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  city: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  county: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  status: z.union([ z.lazy(() => EnumStatusFilterSchema),z.lazy(() => StatusSchema) ]).optional(),
  smsNotifications: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  emailNotifications: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  userId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  tenantId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  user: z.union([ z.lazy(() => UserRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
  tenant: z.union([ z.lazy(() => TenantRelationFilterSchema),z.lazy(() => TenantWhereInputSchema) ]).optional(),
  appointments: z.lazy(() => EventListRelationFilterSchema).optional(),
  treatmentPlans: z.lazy(() => TreatmentPlanListRelationFilterSchema).optional()
}).strict());

export const PatientOrderByWithAggregationInputSchema: z.ZodType<Prisma.PatientOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  firstName: z.lazy(() => SortOrderSchema).optional(),
  lastName: z.lazy(() => SortOrderSchema).optional(),
  gender: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  dob: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  email: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  phone: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  city: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  county: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  smsNotifications: z.lazy(() => SortOrderSchema).optional(),
  emailNotifications: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  tenantId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => PatientCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => PatientMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => PatientMinOrderByAggregateInputSchema).optional()
}).strict();

export const PatientScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.PatientScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => PatientScalarWhereWithAggregatesInputSchema),z.lazy(() => PatientScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => PatientScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => PatientScalarWhereWithAggregatesInputSchema),z.lazy(() => PatientScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  firstName: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  lastName: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  gender: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  dob: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  email: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  phone: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  city: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  county: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  status: z.union([ z.lazy(() => EnumStatusWithAggregatesFilterSchema),z.lazy(() => StatusSchema) ]).optional(),
  smsNotifications: z.union([ z.lazy(() => BoolWithAggregatesFilterSchema),z.boolean() ]).optional(),
  emailNotifications: z.union([ z.lazy(() => BoolWithAggregatesFilterSchema),z.boolean() ]).optional(),
  userId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  tenantId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const SpecializationWhereInputSchema: z.ZodType<Prisma.SpecializationWhereInput> = z.object({
  AND: z.union([ z.lazy(() => SpecializationWhereInputSchema),z.lazy(() => SpecializationWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => SpecializationWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => SpecializationWhereInputSchema),z.lazy(() => SpecializationWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  tenantId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  users: z.lazy(() => UserListRelationFilterSchema).optional(),
  tenant: z.union([ z.lazy(() => TenantRelationFilterSchema),z.lazy(() => TenantWhereInputSchema) ]).optional(),
}).strict();

export const SpecializationOrderByWithRelationInputSchema: z.ZodType<Prisma.SpecializationOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  tenantId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  users: z.lazy(() => UserOrderByRelationAggregateInputSchema).optional(),
  tenant: z.lazy(() => TenantOrderByWithRelationInputSchema).optional()
}).strict();

export const SpecializationWhereUniqueInputSchema: z.ZodType<Prisma.SpecializationWhereUniqueInput> = z.object({
  id: z.string().cuid()
})
.and(z.object({
  id: z.string().cuid().optional(),
  AND: z.union([ z.lazy(() => SpecializationWhereInputSchema),z.lazy(() => SpecializationWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => SpecializationWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => SpecializationWhereInputSchema),z.lazy(() => SpecializationWhereInputSchema).array() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  tenantId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  users: z.lazy(() => UserListRelationFilterSchema).optional(),
  tenant: z.union([ z.lazy(() => TenantRelationFilterSchema),z.lazy(() => TenantWhereInputSchema) ]).optional(),
}).strict());

export const SpecializationOrderByWithAggregationInputSchema: z.ZodType<Prisma.SpecializationOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  tenantId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => SpecializationCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => SpecializationMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => SpecializationMinOrderByAggregateInputSchema).optional()
}).strict();

export const SpecializationScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.SpecializationScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => SpecializationScalarWhereWithAggregatesInputSchema),z.lazy(() => SpecializationScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => SpecializationScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => SpecializationScalarWhereWithAggregatesInputSchema),z.lazy(() => SpecializationScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  tenantId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const EventWhereInputSchema: z.ZodType<Prisma.EventWhereInput> = z.object({
  AND: z.union([ z.lazy(() => EventWhereInputSchema),z.lazy(() => EventWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => EventWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => EventWhereInputSchema),z.lazy(() => EventWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  title: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  date: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  start: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  end: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  allDay: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  type: z.union([ z.lazy(() => EnumEventTypeFilterSchema),z.lazy(() => EventTypeSchema) ]).optional(),
  status: z.union([ z.lazy(() => EnumEventStatusFilterSchema),z.lazy(() => EventStatusSchema) ]).optional(),
  patientId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  userId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  tenantId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  actions: z.lazy(() => EventActionListRelationFilterSchema).optional(),
  treatments: z.lazy(() => TreatmentListRelationFilterSchema).optional(),
  patient: z.union([ z.lazy(() => PatientNullableRelationFilterSchema),z.lazy(() => PatientWhereInputSchema) ]).optional().nullable(),
  user: z.union([ z.lazy(() => UserRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
  tenant: z.union([ z.lazy(() => TenantRelationFilterSchema),z.lazy(() => TenantWhereInputSchema) ]).optional(),
}).strict();

export const EventOrderByWithRelationInputSchema: z.ZodType<Prisma.EventOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  title: z.lazy(() => SortOrderSchema).optional(),
  description: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  date: z.lazy(() => SortOrderSchema).optional(),
  start: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  end: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  allDay: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  patientId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  tenantId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  actions: z.lazy(() => EventActionOrderByRelationAggregateInputSchema).optional(),
  treatments: z.lazy(() => TreatmentOrderByRelationAggregateInputSchema).optional(),
  patient: z.lazy(() => PatientOrderByWithRelationInputSchema).optional(),
  user: z.lazy(() => UserOrderByWithRelationInputSchema).optional(),
  tenant: z.lazy(() => TenantOrderByWithRelationInputSchema).optional()
}).strict();

export const EventWhereUniqueInputSchema: z.ZodType<Prisma.EventWhereUniqueInput> = z.object({
  id: z.string().cuid()
})
.and(z.object({
  id: z.string().cuid().optional(),
  AND: z.union([ z.lazy(() => EventWhereInputSchema),z.lazy(() => EventWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => EventWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => EventWhereInputSchema),z.lazy(() => EventWhereInputSchema).array() ]).optional(),
  title: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  date: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  start: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  end: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  allDay: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  type: z.union([ z.lazy(() => EnumEventTypeFilterSchema),z.lazy(() => EventTypeSchema) ]).optional(),
  status: z.union([ z.lazy(() => EnumEventStatusFilterSchema),z.lazy(() => EventStatusSchema) ]).optional(),
  patientId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  userId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  tenantId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  actions: z.lazy(() => EventActionListRelationFilterSchema).optional(),
  treatments: z.lazy(() => TreatmentListRelationFilterSchema).optional(),
  patient: z.union([ z.lazy(() => PatientNullableRelationFilterSchema),z.lazy(() => PatientWhereInputSchema) ]).optional().nullable(),
  user: z.union([ z.lazy(() => UserRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
  tenant: z.union([ z.lazy(() => TenantRelationFilterSchema),z.lazy(() => TenantWhereInputSchema) ]).optional(),
}).strict());

export const EventOrderByWithAggregationInputSchema: z.ZodType<Prisma.EventOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  title: z.lazy(() => SortOrderSchema).optional(),
  description: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  date: z.lazy(() => SortOrderSchema).optional(),
  start: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  end: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  allDay: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  patientId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  tenantId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => EventCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => EventMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => EventMinOrderByAggregateInputSchema).optional()
}).strict();

export const EventScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.EventScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => EventScalarWhereWithAggregatesInputSchema),z.lazy(() => EventScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => EventScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => EventScalarWhereWithAggregatesInputSchema),z.lazy(() => EventScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  title: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  date: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  start: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  end: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  allDay: z.union([ z.lazy(() => BoolWithAggregatesFilterSchema),z.boolean() ]).optional(),
  type: z.union([ z.lazy(() => EnumEventTypeWithAggregatesFilterSchema),z.lazy(() => EventTypeSchema) ]).optional(),
  status: z.union([ z.lazy(() => EnumEventStatusWithAggregatesFilterSchema),z.lazy(() => EventStatusSchema) ]).optional(),
  patientId: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  userId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  tenantId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const EventActionWhereInputSchema: z.ZodType<Prisma.EventActionWhereInput> = z.object({
  AND: z.union([ z.lazy(() => EventActionWhereInputSchema),z.lazy(() => EventActionWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => EventActionWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => EventActionWhereInputSchema),z.lazy(() => EventActionWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  data: z.lazy(() => JsonFilterSchema).optional(),
  userId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  eventId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  user: z.union([ z.lazy(() => UserRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
  event: z.union([ z.lazy(() => EventRelationFilterSchema),z.lazy(() => EventWhereInputSchema) ]).optional(),
}).strict();

export const EventActionOrderByWithRelationInputSchema: z.ZodType<Prisma.EventActionOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  data: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  eventId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  user: z.lazy(() => UserOrderByWithRelationInputSchema).optional(),
  event: z.lazy(() => EventOrderByWithRelationInputSchema).optional()
}).strict();

export const EventActionWhereUniqueInputSchema: z.ZodType<Prisma.EventActionWhereUniqueInput> = z.object({
  id: z.string().cuid()
})
.and(z.object({
  id: z.string().cuid().optional(),
  AND: z.union([ z.lazy(() => EventActionWhereInputSchema),z.lazy(() => EventActionWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => EventActionWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => EventActionWhereInputSchema),z.lazy(() => EventActionWhereInputSchema).array() ]).optional(),
  data: z.lazy(() => JsonFilterSchema).optional(),
  userId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  eventId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  user: z.union([ z.lazy(() => UserRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
  event: z.union([ z.lazy(() => EventRelationFilterSchema),z.lazy(() => EventWhereInputSchema) ]).optional(),
}).strict());

export const EventActionOrderByWithAggregationInputSchema: z.ZodType<Prisma.EventActionOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  data: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  eventId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => EventActionCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => EventActionMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => EventActionMinOrderByAggregateInputSchema).optional()
}).strict();

export const EventActionScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.EventActionScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => EventActionScalarWhereWithAggregatesInputSchema),z.lazy(() => EventActionScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => EventActionScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => EventActionScalarWhereWithAggregatesInputSchema),z.lazy(() => EventActionScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  data: z.lazy(() => JsonWithAggregatesFilterSchema).optional(),
  userId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  eventId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const ProductWhereInputSchema: z.ZodType<Prisma.ProductWhereInput> = z.object({
  AND: z.union([ z.lazy(() => ProductWhereInputSchema),z.lazy(() => ProductWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ProductWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ProductWhereInputSchema),z.lazy(() => ProductWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  price: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  image: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  tags: z.lazy(() => StringNullableListFilterSchema).optional(),
  isActive: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  isDeleted: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  categoryId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  tenantId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  priceHistory: z.lazy(() => PriceListRelationFilterSchema).optional(),
  treatments: z.lazy(() => TreatmentListRelationFilterSchema).optional(),
  category: z.union([ z.lazy(() => ProductCategoryNullableRelationFilterSchema),z.lazy(() => ProductCategoryWhereInputSchema) ]).optional().nullable(),
  tenant: z.union([ z.lazy(() => TenantRelationFilterSchema),z.lazy(() => TenantWhereInputSchema) ]).optional(),
}).strict();

export const ProductOrderByWithRelationInputSchema: z.ZodType<Prisma.ProductOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  price: z.lazy(() => SortOrderSchema).optional(),
  image: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  tags: z.lazy(() => SortOrderSchema).optional(),
  isActive: z.lazy(() => SortOrderSchema).optional(),
  isDeleted: z.lazy(() => SortOrderSchema).optional(),
  categoryId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  tenantId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  priceHistory: z.lazy(() => PriceOrderByRelationAggregateInputSchema).optional(),
  treatments: z.lazy(() => TreatmentOrderByRelationAggregateInputSchema).optional(),
  category: z.lazy(() => ProductCategoryOrderByWithRelationInputSchema).optional(),
  tenant: z.lazy(() => TenantOrderByWithRelationInputSchema).optional()
}).strict();

export const ProductWhereUniqueInputSchema: z.ZodType<Prisma.ProductWhereUniqueInput> = z.object({
  id: z.string().cuid()
})
.and(z.object({
  id: z.string().cuid().optional(),
  AND: z.union([ z.lazy(() => ProductWhereInputSchema),z.lazy(() => ProductWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ProductWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ProductWhereInputSchema),z.lazy(() => ProductWhereInputSchema).array() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  price: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  image: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  tags: z.lazy(() => StringNullableListFilterSchema).optional(),
  isActive: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  isDeleted: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  categoryId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  tenantId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  priceHistory: z.lazy(() => PriceListRelationFilterSchema).optional(),
  treatments: z.lazy(() => TreatmentListRelationFilterSchema).optional(),
  category: z.union([ z.lazy(() => ProductCategoryNullableRelationFilterSchema),z.lazy(() => ProductCategoryWhereInputSchema) ]).optional().nullable(),
  tenant: z.union([ z.lazy(() => TenantRelationFilterSchema),z.lazy(() => TenantWhereInputSchema) ]).optional(),
}).strict());

export const ProductOrderByWithAggregationInputSchema: z.ZodType<Prisma.ProductOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  price: z.lazy(() => SortOrderSchema).optional(),
  image: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  tags: z.lazy(() => SortOrderSchema).optional(),
  isActive: z.lazy(() => SortOrderSchema).optional(),
  isDeleted: z.lazy(() => SortOrderSchema).optional(),
  categoryId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  tenantId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => ProductCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => ProductAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => ProductMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => ProductMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => ProductSumOrderByAggregateInputSchema).optional()
}).strict();

export const ProductScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.ProductScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => ProductScalarWhereWithAggregatesInputSchema),z.lazy(() => ProductScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => ProductScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ProductScalarWhereWithAggregatesInputSchema),z.lazy(() => ProductScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  price: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  image: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  tags: z.lazy(() => StringNullableListFilterSchema).optional(),
  isActive: z.union([ z.lazy(() => BoolWithAggregatesFilterSchema),z.boolean() ]).optional(),
  isDeleted: z.union([ z.lazy(() => BoolWithAggregatesFilterSchema),z.boolean() ]).optional(),
  categoryId: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  tenantId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const PriceWhereInputSchema: z.ZodType<Prisma.PriceWhereInput> = z.object({
  AND: z.union([ z.lazy(() => PriceWhereInputSchema),z.lazy(() => PriceWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => PriceWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => PriceWhereInputSchema),z.lazy(() => PriceWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  value: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  productId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  product: z.union([ z.lazy(() => ProductRelationFilterSchema),z.lazy(() => ProductWhereInputSchema) ]).optional(),
}).strict();

export const PriceOrderByWithRelationInputSchema: z.ZodType<Prisma.PriceOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  value: z.lazy(() => SortOrderSchema).optional(),
  productId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  product: z.lazy(() => ProductOrderByWithRelationInputSchema).optional()
}).strict();

export const PriceWhereUniqueInputSchema: z.ZodType<Prisma.PriceWhereUniqueInput> = z.object({
  id: z.string().cuid()
})
.and(z.object({
  id: z.string().cuid().optional(),
  AND: z.union([ z.lazy(() => PriceWhereInputSchema),z.lazy(() => PriceWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => PriceWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => PriceWhereInputSchema),z.lazy(() => PriceWhereInputSchema).array() ]).optional(),
  value: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  productId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  product: z.union([ z.lazy(() => ProductRelationFilterSchema),z.lazy(() => ProductWhereInputSchema) ]).optional(),
}).strict());

export const PriceOrderByWithAggregationInputSchema: z.ZodType<Prisma.PriceOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  value: z.lazy(() => SortOrderSchema).optional(),
  productId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => PriceCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => PriceAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => PriceMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => PriceMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => PriceSumOrderByAggregateInputSchema).optional()
}).strict();

export const PriceScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.PriceScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => PriceScalarWhereWithAggregatesInputSchema),z.lazy(() => PriceScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => PriceScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => PriceScalarWhereWithAggregatesInputSchema),z.lazy(() => PriceScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  value: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  productId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const ProductCategoryWhereInputSchema: z.ZodType<Prisma.ProductCategoryWhereInput> = z.object({
  AND: z.union([ z.lazy(() => ProductCategoryWhereInputSchema),z.lazy(() => ProductCategoryWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ProductCategoryWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ProductCategoryWhereInputSchema),z.lazy(() => ProductCategoryWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  parentCategoryId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  parentCategory: z.union([ z.lazy(() => ProductCategoryNullableRelationFilterSchema),z.lazy(() => ProductCategoryWhereInputSchema) ]).optional().nullable(),
  subcategories: z.lazy(() => ProductCategoryListRelationFilterSchema).optional(),
  products: z.lazy(() => ProductListRelationFilterSchema).optional()
}).strict();

export const ProductCategoryOrderByWithRelationInputSchema: z.ZodType<Prisma.ProductCategoryOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  parentCategoryId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  parentCategory: z.lazy(() => ProductCategoryOrderByWithRelationInputSchema).optional(),
  subcategories: z.lazy(() => ProductCategoryOrderByRelationAggregateInputSchema).optional(),
  products: z.lazy(() => ProductOrderByRelationAggregateInputSchema).optional()
}).strict();

export const ProductCategoryWhereUniqueInputSchema: z.ZodType<Prisma.ProductCategoryWhereUniqueInput> = z.object({
  id: z.string().cuid()
})
.and(z.object({
  id: z.string().cuid().optional(),
  AND: z.union([ z.lazy(() => ProductCategoryWhereInputSchema),z.lazy(() => ProductCategoryWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ProductCategoryWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ProductCategoryWhereInputSchema),z.lazy(() => ProductCategoryWhereInputSchema).array() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  parentCategoryId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  parentCategory: z.union([ z.lazy(() => ProductCategoryNullableRelationFilterSchema),z.lazy(() => ProductCategoryWhereInputSchema) ]).optional().nullable(),
  subcategories: z.lazy(() => ProductCategoryListRelationFilterSchema).optional(),
  products: z.lazy(() => ProductListRelationFilterSchema).optional()
}).strict());

export const ProductCategoryOrderByWithAggregationInputSchema: z.ZodType<Prisma.ProductCategoryOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  parentCategoryId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => ProductCategoryCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => ProductCategoryMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => ProductCategoryMinOrderByAggregateInputSchema).optional()
}).strict();

export const ProductCategoryScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.ProductCategoryScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => ProductCategoryScalarWhereWithAggregatesInputSchema),z.lazy(() => ProductCategoryScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => ProductCategoryScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ProductCategoryScalarWhereWithAggregatesInputSchema),z.lazy(() => ProductCategoryScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  parentCategoryId: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const TreatmentWhereInputSchema: z.ZodType<Prisma.TreatmentWhereInput> = z.object({
  AND: z.union([ z.lazy(() => TreatmentWhereInputSchema),z.lazy(() => TreatmentWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => TreatmentWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => TreatmentWhereInputSchema),z.lazy(() => TreatmentWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  price: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  toothNumber: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  status: z.union([ z.lazy(() => EnumTreatmentStatusFilterSchema),z.lazy(() => TreatmentStatusSchema) ]).optional(),
  productId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  treatmentPlanId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  eventId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  product: z.union([ z.lazy(() => ProductRelationFilterSchema),z.lazy(() => ProductWhereInputSchema) ]).optional(),
  treatmentPlan: z.union([ z.lazy(() => TreatmentPlanNullableRelationFilterSchema),z.lazy(() => TreatmentPlanWhereInputSchema) ]).optional().nullable(),
  event: z.union([ z.lazy(() => EventNullableRelationFilterSchema),z.lazy(() => EventWhereInputSchema) ]).optional().nullable(),
}).strict();

export const TreatmentOrderByWithRelationInputSchema: z.ZodType<Prisma.TreatmentOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  price: z.lazy(() => SortOrderSchema).optional(),
  toothNumber: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  productId: z.lazy(() => SortOrderSchema).optional(),
  treatmentPlanId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  eventId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  product: z.lazy(() => ProductOrderByWithRelationInputSchema).optional(),
  treatmentPlan: z.lazy(() => TreatmentPlanOrderByWithRelationInputSchema).optional(),
  event: z.lazy(() => EventOrderByWithRelationInputSchema).optional()
}).strict();

export const TreatmentWhereUniqueInputSchema: z.ZodType<Prisma.TreatmentWhereUniqueInput> = z.object({
  id: z.string().cuid()
})
.and(z.object({
  id: z.string().cuid().optional(),
  AND: z.union([ z.lazy(() => TreatmentWhereInputSchema),z.lazy(() => TreatmentWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => TreatmentWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => TreatmentWhereInputSchema),z.lazy(() => TreatmentWhereInputSchema).array() ]).optional(),
  price: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  toothNumber: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  status: z.union([ z.lazy(() => EnumTreatmentStatusFilterSchema),z.lazy(() => TreatmentStatusSchema) ]).optional(),
  productId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  treatmentPlanId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  eventId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  product: z.union([ z.lazy(() => ProductRelationFilterSchema),z.lazy(() => ProductWhereInputSchema) ]).optional(),
  treatmentPlan: z.union([ z.lazy(() => TreatmentPlanNullableRelationFilterSchema),z.lazy(() => TreatmentPlanWhereInputSchema) ]).optional().nullable(),
  event: z.union([ z.lazy(() => EventNullableRelationFilterSchema),z.lazy(() => EventWhereInputSchema) ]).optional().nullable(),
}).strict());

export const TreatmentOrderByWithAggregationInputSchema: z.ZodType<Prisma.TreatmentOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  price: z.lazy(() => SortOrderSchema).optional(),
  toothNumber: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  productId: z.lazy(() => SortOrderSchema).optional(),
  treatmentPlanId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  eventId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => TreatmentCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => TreatmentAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => TreatmentMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => TreatmentMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => TreatmentSumOrderByAggregateInputSchema).optional()
}).strict();

export const TreatmentScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.TreatmentScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => TreatmentScalarWhereWithAggregatesInputSchema),z.lazy(() => TreatmentScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => TreatmentScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => TreatmentScalarWhereWithAggregatesInputSchema),z.lazy(() => TreatmentScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  price: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  toothNumber: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  status: z.union([ z.lazy(() => EnumTreatmentStatusWithAggregatesFilterSchema),z.lazy(() => TreatmentStatusSchema) ]).optional(),
  productId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  treatmentPlanId: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  eventId: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const TreatmentPlanWhereInputSchema: z.ZodType<Prisma.TreatmentPlanWhereInput> = z.object({
  AND: z.union([ z.lazy(() => TreatmentPlanWhereInputSchema),z.lazy(() => TreatmentPlanWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => TreatmentPlanWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => TreatmentPlanWhereInputSchema),z.lazy(() => TreatmentPlanWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  isDone: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  patientId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  userId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  treatments: z.lazy(() => TreatmentListRelationFilterSchema).optional(),
  patient: z.union([ z.lazy(() => PatientRelationFilterSchema),z.lazy(() => PatientWhereInputSchema) ]).optional(),
  user: z.union([ z.lazy(() => UserRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
}).strict();

export const TreatmentPlanOrderByWithRelationInputSchema: z.ZodType<Prisma.TreatmentPlanOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  description: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  isDone: z.lazy(() => SortOrderSchema).optional(),
  patientId: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  treatments: z.lazy(() => TreatmentOrderByRelationAggregateInputSchema).optional(),
  patient: z.lazy(() => PatientOrderByWithRelationInputSchema).optional(),
  user: z.lazy(() => UserOrderByWithRelationInputSchema).optional()
}).strict();

export const TreatmentPlanWhereUniqueInputSchema: z.ZodType<Prisma.TreatmentPlanWhereUniqueInput> = z.object({
  id: z.string().cuid()
})
.and(z.object({
  id: z.string().cuid().optional(),
  AND: z.union([ z.lazy(() => TreatmentPlanWhereInputSchema),z.lazy(() => TreatmentPlanWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => TreatmentPlanWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => TreatmentPlanWhereInputSchema),z.lazy(() => TreatmentPlanWhereInputSchema).array() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  isDone: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  patientId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  userId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  treatments: z.lazy(() => TreatmentListRelationFilterSchema).optional(),
  patient: z.union([ z.lazy(() => PatientRelationFilterSchema),z.lazy(() => PatientWhereInputSchema) ]).optional(),
  user: z.union([ z.lazy(() => UserRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
}).strict());

export const TreatmentPlanOrderByWithAggregationInputSchema: z.ZodType<Prisma.TreatmentPlanOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  description: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  isDone: z.lazy(() => SortOrderSchema).optional(),
  patientId: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => TreatmentPlanCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => TreatmentPlanMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => TreatmentPlanMinOrderByAggregateInputSchema).optional()
}).strict();

export const TreatmentPlanScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.TreatmentPlanScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => TreatmentPlanScalarWhereWithAggregatesInputSchema),z.lazy(() => TreatmentPlanScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => TreatmentPlanScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => TreatmentPlanScalarWhereWithAggregatesInputSchema),z.lazy(() => TreatmentPlanScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  isDone: z.union([ z.lazy(() => BoolWithAggregatesFilterSchema),z.boolean() ]).optional(),
  patientId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  userId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const CountyWhereInputSchema: z.ZodType<Prisma.CountyWhereInput> = z.object({
  AND: z.union([ z.lazy(() => CountyWhereInputSchema),z.lazy(() => CountyWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => CountyWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => CountyWhereInputSchema),z.lazy(() => CountyWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  code: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  cities: z.lazy(() => CityListRelationFilterSchema).optional()
}).strict();

export const CountyOrderByWithRelationInputSchema: z.ZodType<Prisma.CountyOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  code: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  cities: z.lazy(() => CityOrderByRelationAggregateInputSchema).optional()
}).strict();

export const CountyWhereUniqueInputSchema: z.ZodType<Prisma.CountyWhereUniqueInput> = z.object({
  id: z.string().uuid()
})
.and(z.object({
  id: z.string().uuid().optional(),
  AND: z.union([ z.lazy(() => CountyWhereInputSchema),z.lazy(() => CountyWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => CountyWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => CountyWhereInputSchema),z.lazy(() => CountyWhereInputSchema).array() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  code: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  cities: z.lazy(() => CityListRelationFilterSchema).optional()
}).strict());

export const CountyOrderByWithAggregationInputSchema: z.ZodType<Prisma.CountyOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  code: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => CountyCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => CountyMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => CountyMinOrderByAggregateInputSchema).optional()
}).strict();

export const CountyScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.CountyScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => CountyScalarWhereWithAggregatesInputSchema),z.lazy(() => CountyScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => CountyScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => CountyScalarWhereWithAggregatesInputSchema),z.lazy(() => CountyScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  code: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const CityWhereInputSchema: z.ZodType<Prisma.CityWhereInput> = z.object({
  AND: z.union([ z.lazy(() => CityWhereInputSchema),z.lazy(() => CityWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => CityWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => CityWhereInputSchema),z.lazy(() => CityWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  countyId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  county: z.union([ z.lazy(() => CountyRelationFilterSchema),z.lazy(() => CountyWhereInputSchema) ]).optional(),
}).strict();

export const CityOrderByWithRelationInputSchema: z.ZodType<Prisma.CityOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  countyId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  county: z.lazy(() => CountyOrderByWithRelationInputSchema).optional()
}).strict();

export const CityWhereUniqueInputSchema: z.ZodType<Prisma.CityWhereUniqueInput> = z.object({
  id: z.string().uuid()
})
.and(z.object({
  id: z.string().uuid().optional(),
  AND: z.union([ z.lazy(() => CityWhereInputSchema),z.lazy(() => CityWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => CityWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => CityWhereInputSchema),z.lazy(() => CityWhereInputSchema).array() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  countyId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  county: z.union([ z.lazy(() => CountyRelationFilterSchema),z.lazy(() => CountyWhereInputSchema) ]).optional(),
}).strict());

export const CityOrderByWithAggregationInputSchema: z.ZodType<Prisma.CityOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  countyId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => CityCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => CityMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => CityMinOrderByAggregateInputSchema).optional()
}).strict();

export const CityScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.CityScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => CityScalarWhereWithAggregatesInputSchema),z.lazy(() => CityScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => CityScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => CityScalarWhereWithAggregatesInputSchema),z.lazy(() => CityScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  countyId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const TenantCreateInputSchema: z.ZodType<Prisma.TenantCreateInput> = z.object({
  id: z.string().cuid().optional(),
  email: z.string(),
  deletedAt: z.coerce.date().optional().nullable(),
  disabledAt: z.coerce.date().optional().nullable(),
  trialExpiresAt: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  users: z.lazy(() => UserCreateNestedManyWithoutTenantInputSchema).optional(),
  profile: z.lazy(() => TenantProfileCreateNestedOneWithoutTenantInputSchema),
  specializations: z.lazy(() => SpecializationCreateNestedManyWithoutTenantInputSchema).optional(),
  preferedByProfiles: z.lazy(() => ProfileCreateNestedManyWithoutPreferredTenantInputSchema).optional(),
  patients: z.lazy(() => PatientCreateNestedManyWithoutTenantInputSchema).optional(),
  products: z.lazy(() => ProductCreateNestedManyWithoutTenantInputSchema).optional(),
  events: z.lazy(() => EventCreateNestedManyWithoutTenantInputSchema).optional()
}).strict();

export const TenantUncheckedCreateInputSchema: z.ZodType<Prisma.TenantUncheckedCreateInput> = z.object({
  id: z.string().cuid().optional(),
  email: z.string(),
  profileId: z.string(),
  deletedAt: z.coerce.date().optional().nullable(),
  disabledAt: z.coerce.date().optional().nullable(),
  trialExpiresAt: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  users: z.lazy(() => UserUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  specializations: z.lazy(() => SpecializationUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  preferedByProfiles: z.lazy(() => ProfileUncheckedCreateNestedManyWithoutPreferredTenantInputSchema).optional(),
  patients: z.lazy(() => PatientUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  products: z.lazy(() => ProductUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  events: z.lazy(() => EventUncheckedCreateNestedManyWithoutTenantInputSchema).optional()
}).strict();

export const TenantUpdateInputSchema: z.ZodType<Prisma.TenantUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  disabledAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  trialExpiresAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  users: z.lazy(() => UserUpdateManyWithoutTenantNestedInputSchema).optional(),
  profile: z.lazy(() => TenantProfileUpdateOneRequiredWithoutTenantNestedInputSchema).optional(),
  specializations: z.lazy(() => SpecializationUpdateManyWithoutTenantNestedInputSchema).optional(),
  preferedByProfiles: z.lazy(() => ProfileUpdateManyWithoutPreferredTenantNestedInputSchema).optional(),
  patients: z.lazy(() => PatientUpdateManyWithoutTenantNestedInputSchema).optional(),
  products: z.lazy(() => ProductUpdateManyWithoutTenantNestedInputSchema).optional(),
  events: z.lazy(() => EventUpdateManyWithoutTenantNestedInputSchema).optional()
}).strict();

export const TenantUncheckedUpdateInputSchema: z.ZodType<Prisma.TenantUncheckedUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  profileId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  disabledAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  trialExpiresAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  users: z.lazy(() => UserUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  specializations: z.lazy(() => SpecializationUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  preferedByProfiles: z.lazy(() => ProfileUncheckedUpdateManyWithoutPreferredTenantNestedInputSchema).optional(),
  patients: z.lazy(() => PatientUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  products: z.lazy(() => ProductUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  events: z.lazy(() => EventUncheckedUpdateManyWithoutTenantNestedInputSchema).optional()
}).strict();

export const TenantCreateManyInputSchema: z.ZodType<Prisma.TenantCreateManyInput> = z.object({
  id: z.string().cuid().optional(),
  email: z.string(),
  profileId: z.string(),
  deletedAt: z.coerce.date().optional().nullable(),
  disabledAt: z.coerce.date().optional().nullable(),
  trialExpiresAt: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const TenantUpdateManyMutationInputSchema: z.ZodType<Prisma.TenantUpdateManyMutationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  disabledAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  trialExpiresAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const TenantUncheckedUpdateManyInputSchema: z.ZodType<Prisma.TenantUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  profileId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  disabledAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  trialExpiresAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const TenantProfileCreateInputSchema: z.ZodType<Prisma.TenantProfileCreateInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  county: z.string().optional().nullable(),
  address: z.string().optional().nullable(),
  zip: z.string().optional().nullable(),
  phone: z.string().optional().nullable(),
  avatar: z.string().optional().nullable(),
  size: z.string().optional().nullable(),
  stripeSubscriptionId: z.string(),
  activeSubscription: z.boolean().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  plan: z.lazy(() => PlanCreateNestedOneWithoutTenantProfilesInputSchema),
  tenant: z.lazy(() => TenantCreateNestedOneWithoutProfileInputSchema).optional()
}).strict();

export const TenantProfileUncheckedCreateInputSchema: z.ZodType<Prisma.TenantProfileUncheckedCreateInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  county: z.string().optional().nullable(),
  address: z.string().optional().nullable(),
  zip: z.string().optional().nullable(),
  phone: z.string().optional().nullable(),
  avatar: z.string().optional().nullable(),
  size: z.string().optional().nullable(),
  stripeSubscriptionId: z.string(),
  activeSubscription: z.boolean().optional(),
  planId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  tenant: z.lazy(() => TenantUncheckedCreateNestedOneWithoutProfileInputSchema).optional()
}).strict();

export const TenantProfileUpdateInputSchema: z.ZodType<Prisma.TenantProfileUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  county: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  address: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  zip: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  avatar: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  size: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  stripeSubscriptionId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  activeSubscription: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  plan: z.lazy(() => PlanUpdateOneRequiredWithoutTenantProfilesNestedInputSchema).optional(),
  tenant: z.lazy(() => TenantUpdateOneWithoutProfileNestedInputSchema).optional()
}).strict();

export const TenantProfileUncheckedUpdateInputSchema: z.ZodType<Prisma.TenantProfileUncheckedUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  county: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  address: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  zip: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  avatar: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  size: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  stripeSubscriptionId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  activeSubscription: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  planId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  tenant: z.lazy(() => TenantUncheckedUpdateOneWithoutProfileNestedInputSchema).optional()
}).strict();

export const TenantProfileCreateManyInputSchema: z.ZodType<Prisma.TenantProfileCreateManyInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  county: z.string().optional().nullable(),
  address: z.string().optional().nullable(),
  zip: z.string().optional().nullable(),
  phone: z.string().optional().nullable(),
  avatar: z.string().optional().nullable(),
  size: z.string().optional().nullable(),
  stripeSubscriptionId: z.string(),
  activeSubscription: z.boolean().optional(),
  planId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const TenantProfileUpdateManyMutationInputSchema: z.ZodType<Prisma.TenantProfileUpdateManyMutationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  county: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  address: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  zip: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  avatar: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  size: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  stripeSubscriptionId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  activeSubscription: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const TenantProfileUncheckedUpdateManyInputSchema: z.ZodType<Prisma.TenantProfileUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  county: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  address: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  zip: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  avatar: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  size: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  stripeSubscriptionId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  activeSubscription: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  planId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const UserCreateInputSchema: z.ZodType<Prisma.UserCreateInput> = z.object({
  id: z.string().cuid().optional(),
  index: z.number().int().optional(),
  role: z.lazy(() => RoleSchema).optional(),
  workingHours: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  deletedAt: z.coerce.date().optional().nullable(),
  activatedAt: z.coerce.date().optional().nullable(),
  lastLoginAt: z.coerce.date().optional().nullable(),
  bannedAt: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  specialization: z.lazy(() => SpecializationCreateNestedOneWithoutUsersInputSchema).optional(),
  profile: z.lazy(() => ProfileCreateNestedOneWithoutUsersInputSchema),
  tenant: z.lazy(() => TenantCreateNestedOneWithoutUsersInputSchema),
  invitation: z.lazy(() => InvitationCreateNestedOneWithoutUserInputSchema).optional(),
  tokens: z.lazy(() => TokenCreateNestedManyWithoutUserInputSchema).optional(),
  patients: z.lazy(() => PatientCreateNestedManyWithoutUserInputSchema).optional(),
  events: z.lazy(() => EventCreateNestedManyWithoutUserInputSchema).optional(),
  eventActions: z.lazy(() => EventActionCreateNestedManyWithoutUserInputSchema).optional(),
  treatmentPlans: z.lazy(() => TreatmentPlanCreateNestedManyWithoutUserInputSchema).optional(),
  invitations: z.lazy(() => InvitationCreateNestedManyWithoutInvitedByInputSchema).optional()
}).strict();

export const UserUncheckedCreateInputSchema: z.ZodType<Prisma.UserUncheckedCreateInput> = z.object({
  id: z.string().cuid().optional(),
  index: z.number().int().optional(),
  role: z.lazy(() => RoleSchema).optional(),
  workingHours: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  specializationId: z.string().optional().nullable(),
  profileId: z.string(),
  tenantId: z.string(),
  deletedAt: z.coerce.date().optional().nullable(),
  activatedAt: z.coerce.date().optional().nullable(),
  lastLoginAt: z.coerce.date().optional().nullable(),
  bannedAt: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  invitation: z.lazy(() => InvitationUncheckedCreateNestedOneWithoutUserInputSchema).optional(),
  tokens: z.lazy(() => TokenUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  patients: z.lazy(() => PatientUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  events: z.lazy(() => EventUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  eventActions: z.lazy(() => EventActionUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  treatmentPlans: z.lazy(() => TreatmentPlanUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedCreateNestedManyWithoutInvitedByInputSchema).optional()
}).strict();

export const UserUpdateInputSchema: z.ZodType<Prisma.UserUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  index: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.lazy(() => RoleSchema),z.lazy(() => EnumRoleFieldUpdateOperationsInputSchema) ]).optional(),
  workingHours: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  activatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastLoginAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bannedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  specialization: z.lazy(() => SpecializationUpdateOneWithoutUsersNestedInputSchema).optional(),
  profile: z.lazy(() => ProfileUpdateOneRequiredWithoutUsersNestedInputSchema).optional(),
  tenant: z.lazy(() => TenantUpdateOneRequiredWithoutUsersNestedInputSchema).optional(),
  invitation: z.lazy(() => InvitationUpdateOneWithoutUserNestedInputSchema).optional(),
  tokens: z.lazy(() => TokenUpdateManyWithoutUserNestedInputSchema).optional(),
  patients: z.lazy(() => PatientUpdateManyWithoutUserNestedInputSchema).optional(),
  events: z.lazy(() => EventUpdateManyWithoutUserNestedInputSchema).optional(),
  eventActions: z.lazy(() => EventActionUpdateManyWithoutUserNestedInputSchema).optional(),
  treatmentPlans: z.lazy(() => TreatmentPlanUpdateManyWithoutUserNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUpdateManyWithoutInvitedByNestedInputSchema).optional()
}).strict();

export const UserUncheckedUpdateInputSchema: z.ZodType<Prisma.UserUncheckedUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  index: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.lazy(() => RoleSchema),z.lazy(() => EnumRoleFieldUpdateOperationsInputSchema) ]).optional(),
  workingHours: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  specializationId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  profileId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  tenantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  activatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastLoginAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bannedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  invitation: z.lazy(() => InvitationUncheckedUpdateOneWithoutUserNestedInputSchema).optional(),
  tokens: z.lazy(() => TokenUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  patients: z.lazy(() => PatientUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  events: z.lazy(() => EventUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  eventActions: z.lazy(() => EventActionUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  treatmentPlans: z.lazy(() => TreatmentPlanUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedUpdateManyWithoutInvitedByNestedInputSchema).optional()
}).strict();

export const UserCreateManyInputSchema: z.ZodType<Prisma.UserCreateManyInput> = z.object({
  id: z.string().cuid().optional(),
  index: z.number().int().optional(),
  role: z.lazy(() => RoleSchema).optional(),
  workingHours: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  specializationId: z.string().optional().nullable(),
  profileId: z.string(),
  tenantId: z.string(),
  deletedAt: z.coerce.date().optional().nullable(),
  activatedAt: z.coerce.date().optional().nullable(),
  lastLoginAt: z.coerce.date().optional().nullable(),
  bannedAt: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const UserUpdateManyMutationInputSchema: z.ZodType<Prisma.UserUpdateManyMutationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  index: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.lazy(() => RoleSchema),z.lazy(() => EnumRoleFieldUpdateOperationsInputSchema) ]).optional(),
  workingHours: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  activatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastLoginAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bannedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const UserUncheckedUpdateManyInputSchema: z.ZodType<Prisma.UserUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  index: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.lazy(() => RoleSchema),z.lazy(() => EnumRoleFieldUpdateOperationsInputSchema) ]).optional(),
  workingHours: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  specializationId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  profileId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  tenantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  activatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastLoginAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bannedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ProfileCreateInputSchema: z.ZodType<Prisma.ProfileCreateInput> = z.object({
  id: z.string().cuid().optional(),
  title: z.string().optional().nullable(),
  firstName: z.string(),
  lastName: z.string(),
  email: z.string(),
  phone: z.string().optional().nullable(),
  avatar: z.string().optional().nullable(),
  stripeCustomerId: z.string(),
  stripeFreeTrialUsed: z.boolean().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  preferredTenant: z.lazy(() => TenantCreateNestedOneWithoutPreferedByProfilesInputSchema).optional(),
  users: z.lazy(() => UserCreateNestedManyWithoutProfileInputSchema).optional(),
  auth: z.lazy(() => AccountAuthCreateNestedManyWithoutProfileInputSchema).optional()
}).strict();

export const ProfileUncheckedCreateInputSchema: z.ZodType<Prisma.ProfileUncheckedCreateInput> = z.object({
  id: z.string().cuid().optional(),
  title: z.string().optional().nullable(),
  firstName: z.string(),
  lastName: z.string(),
  email: z.string(),
  phone: z.string().optional().nullable(),
  avatar: z.string().optional().nullable(),
  stripeCustomerId: z.string(),
  stripeFreeTrialUsed: z.boolean().optional(),
  preferredTenantId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  users: z.lazy(() => UserUncheckedCreateNestedManyWithoutProfileInputSchema).optional(),
  auth: z.lazy(() => AccountAuthUncheckedCreateNestedManyWithoutProfileInputSchema).optional()
}).strict();

export const ProfileUpdateInputSchema: z.ZodType<Prisma.ProfileUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  title: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  firstName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  lastName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  avatar: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  stripeCustomerId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  stripeFreeTrialUsed: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  preferredTenant: z.lazy(() => TenantUpdateOneWithoutPreferedByProfilesNestedInputSchema).optional(),
  users: z.lazy(() => UserUpdateManyWithoutProfileNestedInputSchema).optional(),
  auth: z.lazy(() => AccountAuthUpdateManyWithoutProfileNestedInputSchema).optional()
}).strict();

export const ProfileUncheckedUpdateInputSchema: z.ZodType<Prisma.ProfileUncheckedUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  title: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  firstName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  lastName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  avatar: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  stripeCustomerId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  stripeFreeTrialUsed: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  preferredTenantId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  users: z.lazy(() => UserUncheckedUpdateManyWithoutProfileNestedInputSchema).optional(),
  auth: z.lazy(() => AccountAuthUncheckedUpdateManyWithoutProfileNestedInputSchema).optional()
}).strict();

export const ProfileCreateManyInputSchema: z.ZodType<Prisma.ProfileCreateManyInput> = z.object({
  id: z.string().cuid().optional(),
  title: z.string().optional().nullable(),
  firstName: z.string(),
  lastName: z.string(),
  email: z.string(),
  phone: z.string().optional().nullable(),
  avatar: z.string().optional().nullable(),
  stripeCustomerId: z.string(),
  stripeFreeTrialUsed: z.boolean().optional(),
  preferredTenantId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const ProfileUpdateManyMutationInputSchema: z.ZodType<Prisma.ProfileUpdateManyMutationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  title: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  firstName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  lastName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  avatar: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  stripeCustomerId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  stripeFreeTrialUsed: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ProfileUncheckedUpdateManyInputSchema: z.ZodType<Prisma.ProfileUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  title: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  firstName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  lastName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  avatar: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  stripeCustomerId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  stripeFreeTrialUsed: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  preferredTenantId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const AccountAuthCreateInputSchema: z.ZodType<Prisma.AccountAuthCreateInput> = z.object({
  id: z.string().cuid().optional(),
  type: z.string(),
  provider: z.string(),
  passwordHash: z.string().optional().nullable(),
  refresh_token: z.string().optional().nullable(),
  access_token: z.string().optional().nullable(),
  expires_at: z.coerce.date().optional().nullable(),
  refresh_token_expires_in: z.number().int().optional().nullable(),
  token_type: z.string().optional().nullable(),
  scope: z.string().optional().nullable(),
  id_token: z.string().optional().nullable(),
  session_state: z.string().optional().nullable(),
  profile: z.lazy(() => ProfileCreateNestedOneWithoutAuthInputSchema)
}).strict();

export const AccountAuthUncheckedCreateInputSchema: z.ZodType<Prisma.AccountAuthUncheckedCreateInput> = z.object({
  id: z.string().cuid().optional(),
  profileId: z.string(),
  type: z.string(),
  provider: z.string(),
  passwordHash: z.string().optional().nullable(),
  refresh_token: z.string().optional().nullable(),
  access_token: z.string().optional().nullable(),
  expires_at: z.coerce.date().optional().nullable(),
  refresh_token_expires_in: z.number().int().optional().nullable(),
  token_type: z.string().optional().nullable(),
  scope: z.string().optional().nullable(),
  id_token: z.string().optional().nullable(),
  session_state: z.string().optional().nullable()
}).strict();

export const AccountAuthUpdateInputSchema: z.ZodType<Prisma.AccountAuthUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  provider: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  passwordHash: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  refresh_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  access_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  expires_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  refresh_token_expires_in: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  token_type: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  scope: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  id_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  session_state: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  profile: z.lazy(() => ProfileUpdateOneRequiredWithoutAuthNestedInputSchema).optional()
}).strict();

export const AccountAuthUncheckedUpdateInputSchema: z.ZodType<Prisma.AccountAuthUncheckedUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  profileId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  provider: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  passwordHash: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  refresh_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  access_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  expires_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  refresh_token_expires_in: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  token_type: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  scope: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  id_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  session_state: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const AccountAuthCreateManyInputSchema: z.ZodType<Prisma.AccountAuthCreateManyInput> = z.object({
  id: z.string().cuid().optional(),
  profileId: z.string(),
  type: z.string(),
  provider: z.string(),
  passwordHash: z.string().optional().nullable(),
  refresh_token: z.string().optional().nullable(),
  access_token: z.string().optional().nullable(),
  expires_at: z.coerce.date().optional().nullable(),
  refresh_token_expires_in: z.number().int().optional().nullable(),
  token_type: z.string().optional().nullable(),
  scope: z.string().optional().nullable(),
  id_token: z.string().optional().nullable(),
  session_state: z.string().optional().nullable()
}).strict();

export const AccountAuthUpdateManyMutationInputSchema: z.ZodType<Prisma.AccountAuthUpdateManyMutationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  provider: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  passwordHash: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  refresh_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  access_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  expires_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  refresh_token_expires_in: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  token_type: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  scope: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  id_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  session_state: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const AccountAuthUncheckedUpdateManyInputSchema: z.ZodType<Prisma.AccountAuthUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  profileId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  provider: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  passwordHash: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  refresh_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  access_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  expires_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  refresh_token_expires_in: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  token_type: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  scope: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  id_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  session_state: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const PlanCreateInputSchema: z.ZodType<Prisma.PlanCreateInput> = z.object({
  id: z.string().cuid().optional(),
  stripeProductId: z.string(),
  stripePriceId: z.string(),
  name: z.string(),
  maxUsers: z.number().int(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  tenantProfiles: z.lazy(() => TenantProfileCreateNestedManyWithoutPlanInputSchema).optional()
}).strict();

export const PlanUncheckedCreateInputSchema: z.ZodType<Prisma.PlanUncheckedCreateInput> = z.object({
  id: z.string().cuid().optional(),
  stripeProductId: z.string(),
  stripePriceId: z.string(),
  name: z.string(),
  maxUsers: z.number().int(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  tenantProfiles: z.lazy(() => TenantProfileUncheckedCreateNestedManyWithoutPlanInputSchema).optional()
}).strict();

export const PlanUpdateInputSchema: z.ZodType<Prisma.PlanUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  stripeProductId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  stripePriceId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  maxUsers: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  tenantProfiles: z.lazy(() => TenantProfileUpdateManyWithoutPlanNestedInputSchema).optional()
}).strict();

export const PlanUncheckedUpdateInputSchema: z.ZodType<Prisma.PlanUncheckedUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  stripeProductId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  stripePriceId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  maxUsers: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  tenantProfiles: z.lazy(() => TenantProfileUncheckedUpdateManyWithoutPlanNestedInputSchema).optional()
}).strict();

export const PlanCreateManyInputSchema: z.ZodType<Prisma.PlanCreateManyInput> = z.object({
  id: z.string().cuid().optional(),
  stripeProductId: z.string(),
  stripePriceId: z.string(),
  name: z.string(),
  maxUsers: z.number().int(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const PlanUpdateManyMutationInputSchema: z.ZodType<Prisma.PlanUpdateManyMutationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  stripeProductId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  stripePriceId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  maxUsers: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const PlanUncheckedUpdateManyInputSchema: z.ZodType<Prisma.PlanUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  stripeProductId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  stripePriceId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  maxUsers: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const TokenCreateInputSchema: z.ZodType<Prisma.TokenCreateInput> = z.object({
  id: z.string().cuid().optional(),
  type: z.lazy(() => TokenTypeSchema),
  token: z.string(),
  expires: z.coerce.date(),
  user: z.lazy(() => UserCreateNestedOneWithoutTokensInputSchema)
}).strict();

export const TokenUncheckedCreateInputSchema: z.ZodType<Prisma.TokenUncheckedCreateInput> = z.object({
  id: z.string().cuid().optional(),
  type: z.lazy(() => TokenTypeSchema),
  token: z.string(),
  expires: z.coerce.date(),
  userId: z.string()
}).strict();

export const TokenUpdateInputSchema: z.ZodType<Prisma.TokenUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => TokenTypeSchema),z.lazy(() => EnumTokenTypeFieldUpdateOperationsInputSchema) ]).optional(),
  token: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  expires: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  user: z.lazy(() => UserUpdateOneRequiredWithoutTokensNestedInputSchema).optional()
}).strict();

export const TokenUncheckedUpdateInputSchema: z.ZodType<Prisma.TokenUncheckedUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => TokenTypeSchema),z.lazy(() => EnumTokenTypeFieldUpdateOperationsInputSchema) ]).optional(),
  token: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  expires: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const TokenCreateManyInputSchema: z.ZodType<Prisma.TokenCreateManyInput> = z.object({
  id: z.string().cuid().optional(),
  type: z.lazy(() => TokenTypeSchema),
  token: z.string(),
  expires: z.coerce.date(),
  userId: z.string()
}).strict();

export const TokenUpdateManyMutationInputSchema: z.ZodType<Prisma.TokenUpdateManyMutationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => TokenTypeSchema),z.lazy(() => EnumTokenTypeFieldUpdateOperationsInputSchema) ]).optional(),
  token: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  expires: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const TokenUncheckedUpdateManyInputSchema: z.ZodType<Prisma.TokenUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => TokenTypeSchema),z.lazy(() => EnumTokenTypeFieldUpdateOperationsInputSchema) ]).optional(),
  token: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  expires: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const InvitationCreateInputSchema: z.ZodType<Prisma.InvitationCreateInput> = z.object({
  id: z.string().cuid().optional(),
  email: z.string(),
  role: z.lazy(() => RoleSchema),
  token: z.string(),
  expires: z.coerce.date(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  invitedBy: z.lazy(() => UserCreateNestedOneWithoutInvitationsInputSchema),
  user: z.lazy(() => UserCreateNestedOneWithoutInvitationInputSchema).optional()
}).strict();

export const InvitationUncheckedCreateInputSchema: z.ZodType<Prisma.InvitationUncheckedCreateInput> = z.object({
  id: z.string().cuid().optional(),
  email: z.string(),
  role: z.lazy(() => RoleSchema),
  token: z.string(),
  expires: z.coerce.date(),
  invitedById: z.string(),
  userId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const InvitationUpdateInputSchema: z.ZodType<Prisma.InvitationUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.lazy(() => RoleSchema),z.lazy(() => EnumRoleFieldUpdateOperationsInputSchema) ]).optional(),
  token: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  expires: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  invitedBy: z.lazy(() => UserUpdateOneRequiredWithoutInvitationsNestedInputSchema).optional(),
  user: z.lazy(() => UserUpdateOneWithoutInvitationNestedInputSchema).optional()
}).strict();

export const InvitationUncheckedUpdateInputSchema: z.ZodType<Prisma.InvitationUncheckedUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.lazy(() => RoleSchema),z.lazy(() => EnumRoleFieldUpdateOperationsInputSchema) ]).optional(),
  token: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  expires: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  invitedById: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const InvitationCreateManyInputSchema: z.ZodType<Prisma.InvitationCreateManyInput> = z.object({
  id: z.string().cuid().optional(),
  email: z.string(),
  role: z.lazy(() => RoleSchema),
  token: z.string(),
  expires: z.coerce.date(),
  invitedById: z.string(),
  userId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const InvitationUpdateManyMutationInputSchema: z.ZodType<Prisma.InvitationUpdateManyMutationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.lazy(() => RoleSchema),z.lazy(() => EnumRoleFieldUpdateOperationsInputSchema) ]).optional(),
  token: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  expires: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const InvitationUncheckedUpdateManyInputSchema: z.ZodType<Prisma.InvitationUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.lazy(() => RoleSchema),z.lazy(() => EnumRoleFieldUpdateOperationsInputSchema) ]).optional(),
  token: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  expires: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  invitedById: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const PatientCreateInputSchema: z.ZodType<Prisma.PatientCreateInput> = z.object({
  id: z.string().cuid().optional(),
  firstName: z.string(),
  lastName: z.string(),
  gender: z.string().optional().nullable(),
  dob: z.coerce.date().optional().nullable(),
  email: z.string().optional().nullable(),
  phone: z.string().optional().nullable(),
  city: z.string().optional().nullable(),
  county: z.string().optional().nullable(),
  status: z.lazy(() => StatusSchema).optional(),
  smsNotifications: z.boolean().optional(),
  emailNotifications: z.boolean().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  user: z.lazy(() => UserCreateNestedOneWithoutPatientsInputSchema),
  tenant: z.lazy(() => TenantCreateNestedOneWithoutPatientsInputSchema),
  appointments: z.lazy(() => EventCreateNestedManyWithoutPatientInputSchema).optional(),
  treatmentPlans: z.lazy(() => TreatmentPlanCreateNestedManyWithoutPatientInputSchema).optional()
}).strict();

export const PatientUncheckedCreateInputSchema: z.ZodType<Prisma.PatientUncheckedCreateInput> = z.object({
  id: z.string().cuid().optional(),
  firstName: z.string(),
  lastName: z.string(),
  gender: z.string().optional().nullable(),
  dob: z.coerce.date().optional().nullable(),
  email: z.string().optional().nullable(),
  phone: z.string().optional().nullable(),
  city: z.string().optional().nullable(),
  county: z.string().optional().nullable(),
  status: z.lazy(() => StatusSchema).optional(),
  smsNotifications: z.boolean().optional(),
  emailNotifications: z.boolean().optional(),
  userId: z.string(),
  tenantId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  appointments: z.lazy(() => EventUncheckedCreateNestedManyWithoutPatientInputSchema).optional(),
  treatmentPlans: z.lazy(() => TreatmentPlanUncheckedCreateNestedManyWithoutPatientInputSchema).optional()
}).strict();

export const PatientUpdateInputSchema: z.ZodType<Prisma.PatientUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  firstName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  lastName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  gender: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  dob: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  city: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  county: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.lazy(() => StatusSchema),z.lazy(() => EnumStatusFieldUpdateOperationsInputSchema) ]).optional(),
  smsNotifications: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  emailNotifications: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  user: z.lazy(() => UserUpdateOneRequiredWithoutPatientsNestedInputSchema).optional(),
  tenant: z.lazy(() => TenantUpdateOneRequiredWithoutPatientsNestedInputSchema).optional(),
  appointments: z.lazy(() => EventUpdateManyWithoutPatientNestedInputSchema).optional(),
  treatmentPlans: z.lazy(() => TreatmentPlanUpdateManyWithoutPatientNestedInputSchema).optional()
}).strict();

export const PatientUncheckedUpdateInputSchema: z.ZodType<Prisma.PatientUncheckedUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  firstName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  lastName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  gender: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  dob: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  city: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  county: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.lazy(() => StatusSchema),z.lazy(() => EnumStatusFieldUpdateOperationsInputSchema) ]).optional(),
  smsNotifications: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  emailNotifications: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  tenantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  appointments: z.lazy(() => EventUncheckedUpdateManyWithoutPatientNestedInputSchema).optional(),
  treatmentPlans: z.lazy(() => TreatmentPlanUncheckedUpdateManyWithoutPatientNestedInputSchema).optional()
}).strict();

export const PatientCreateManyInputSchema: z.ZodType<Prisma.PatientCreateManyInput> = z.object({
  id: z.string().cuid().optional(),
  firstName: z.string(),
  lastName: z.string(),
  gender: z.string().optional().nullable(),
  dob: z.coerce.date().optional().nullable(),
  email: z.string().optional().nullable(),
  phone: z.string().optional().nullable(),
  city: z.string().optional().nullable(),
  county: z.string().optional().nullable(),
  status: z.lazy(() => StatusSchema).optional(),
  smsNotifications: z.boolean().optional(),
  emailNotifications: z.boolean().optional(),
  userId: z.string(),
  tenantId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const PatientUpdateManyMutationInputSchema: z.ZodType<Prisma.PatientUpdateManyMutationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  firstName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  lastName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  gender: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  dob: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  city: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  county: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.lazy(() => StatusSchema),z.lazy(() => EnumStatusFieldUpdateOperationsInputSchema) ]).optional(),
  smsNotifications: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  emailNotifications: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const PatientUncheckedUpdateManyInputSchema: z.ZodType<Prisma.PatientUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  firstName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  lastName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  gender: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  dob: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  city: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  county: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.lazy(() => StatusSchema),z.lazy(() => EnumStatusFieldUpdateOperationsInputSchema) ]).optional(),
  smsNotifications: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  emailNotifications: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  tenantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const SpecializationCreateInputSchema: z.ZodType<Prisma.SpecializationCreateInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  users: z.lazy(() => UserCreateNestedManyWithoutSpecializationInputSchema).optional(),
  tenant: z.lazy(() => TenantCreateNestedOneWithoutSpecializationsInputSchema)
}).strict();

export const SpecializationUncheckedCreateInputSchema: z.ZodType<Prisma.SpecializationUncheckedCreateInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  tenantId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  users: z.lazy(() => UserUncheckedCreateNestedManyWithoutSpecializationInputSchema).optional()
}).strict();

export const SpecializationUpdateInputSchema: z.ZodType<Prisma.SpecializationUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  users: z.lazy(() => UserUpdateManyWithoutSpecializationNestedInputSchema).optional(),
  tenant: z.lazy(() => TenantUpdateOneRequiredWithoutSpecializationsNestedInputSchema).optional()
}).strict();

export const SpecializationUncheckedUpdateInputSchema: z.ZodType<Prisma.SpecializationUncheckedUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tenantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  users: z.lazy(() => UserUncheckedUpdateManyWithoutSpecializationNestedInputSchema).optional()
}).strict();

export const SpecializationCreateManyInputSchema: z.ZodType<Prisma.SpecializationCreateManyInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  tenantId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const SpecializationUpdateManyMutationInputSchema: z.ZodType<Prisma.SpecializationUpdateManyMutationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const SpecializationUncheckedUpdateManyInputSchema: z.ZodType<Prisma.SpecializationUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tenantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const EventCreateInputSchema: z.ZodType<Prisma.EventCreateInput> = z.object({
  id: z.string().cuid().optional(),
  title: z.string(),
  description: z.string().optional().nullable(),
  date: z.coerce.date(),
  start: z.coerce.date().optional().nullable(),
  end: z.coerce.date().optional().nullable(),
  allDay: z.boolean().optional(),
  type: z.lazy(() => EventTypeSchema).optional(),
  status: z.lazy(() => EventStatusSchema).optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  actions: z.lazy(() => EventActionCreateNestedManyWithoutEventInputSchema).optional(),
  treatments: z.lazy(() => TreatmentCreateNestedManyWithoutEventInputSchema).optional(),
  patient: z.lazy(() => PatientCreateNestedOneWithoutAppointmentsInputSchema).optional(),
  user: z.lazy(() => UserCreateNestedOneWithoutEventsInputSchema),
  tenant: z.lazy(() => TenantCreateNestedOneWithoutEventsInputSchema)
}).strict();

export const EventUncheckedCreateInputSchema: z.ZodType<Prisma.EventUncheckedCreateInput> = z.object({
  id: z.string().cuid().optional(),
  title: z.string(),
  description: z.string().optional().nullable(),
  date: z.coerce.date(),
  start: z.coerce.date().optional().nullable(),
  end: z.coerce.date().optional().nullable(),
  allDay: z.boolean().optional(),
  type: z.lazy(() => EventTypeSchema).optional(),
  status: z.lazy(() => EventStatusSchema).optional(),
  patientId: z.string().optional().nullable(),
  userId: z.string(),
  tenantId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  actions: z.lazy(() => EventActionUncheckedCreateNestedManyWithoutEventInputSchema).optional(),
  treatments: z.lazy(() => TreatmentUncheckedCreateNestedManyWithoutEventInputSchema).optional()
}).strict();

export const EventUpdateInputSchema: z.ZodType<Prisma.EventUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  title: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  start: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  end: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  allDay: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => EventTypeSchema),z.lazy(() => EnumEventTypeFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => EventStatusSchema),z.lazy(() => EnumEventStatusFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  actions: z.lazy(() => EventActionUpdateManyWithoutEventNestedInputSchema).optional(),
  treatments: z.lazy(() => TreatmentUpdateManyWithoutEventNestedInputSchema).optional(),
  patient: z.lazy(() => PatientUpdateOneWithoutAppointmentsNestedInputSchema).optional(),
  user: z.lazy(() => UserUpdateOneRequiredWithoutEventsNestedInputSchema).optional(),
  tenant: z.lazy(() => TenantUpdateOneRequiredWithoutEventsNestedInputSchema).optional()
}).strict();

export const EventUncheckedUpdateInputSchema: z.ZodType<Prisma.EventUncheckedUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  title: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  start: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  end: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  allDay: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => EventTypeSchema),z.lazy(() => EnumEventTypeFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => EventStatusSchema),z.lazy(() => EnumEventStatusFieldUpdateOperationsInputSchema) ]).optional(),
  patientId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  tenantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  actions: z.lazy(() => EventActionUncheckedUpdateManyWithoutEventNestedInputSchema).optional(),
  treatments: z.lazy(() => TreatmentUncheckedUpdateManyWithoutEventNestedInputSchema).optional()
}).strict();

export const EventCreateManyInputSchema: z.ZodType<Prisma.EventCreateManyInput> = z.object({
  id: z.string().cuid().optional(),
  title: z.string(),
  description: z.string().optional().nullable(),
  date: z.coerce.date(),
  start: z.coerce.date().optional().nullable(),
  end: z.coerce.date().optional().nullable(),
  allDay: z.boolean().optional(),
  type: z.lazy(() => EventTypeSchema).optional(),
  status: z.lazy(() => EventStatusSchema).optional(),
  patientId: z.string().optional().nullable(),
  userId: z.string(),
  tenantId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const EventUpdateManyMutationInputSchema: z.ZodType<Prisma.EventUpdateManyMutationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  title: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  start: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  end: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  allDay: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => EventTypeSchema),z.lazy(() => EnumEventTypeFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => EventStatusSchema),z.lazy(() => EnumEventStatusFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const EventUncheckedUpdateManyInputSchema: z.ZodType<Prisma.EventUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  title: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  start: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  end: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  allDay: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => EventTypeSchema),z.lazy(() => EnumEventTypeFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => EventStatusSchema),z.lazy(() => EnumEventStatusFieldUpdateOperationsInputSchema) ]).optional(),
  patientId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  tenantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const EventActionCreateInputSchema: z.ZodType<Prisma.EventActionCreateInput> = z.object({
  id: z.string().cuid().optional(),
  data: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  user: z.lazy(() => UserCreateNestedOneWithoutEventActionsInputSchema),
  event: z.lazy(() => EventCreateNestedOneWithoutActionsInputSchema)
}).strict();

export const EventActionUncheckedCreateInputSchema: z.ZodType<Prisma.EventActionUncheckedCreateInput> = z.object({
  id: z.string().cuid().optional(),
  data: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  userId: z.string(),
  eventId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const EventActionUpdateInputSchema: z.ZodType<Prisma.EventActionUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  data: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  user: z.lazy(() => UserUpdateOneRequiredWithoutEventActionsNestedInputSchema).optional(),
  event: z.lazy(() => EventUpdateOneRequiredWithoutActionsNestedInputSchema).optional()
}).strict();

export const EventActionUncheckedUpdateInputSchema: z.ZodType<Prisma.EventActionUncheckedUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  data: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  eventId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const EventActionCreateManyInputSchema: z.ZodType<Prisma.EventActionCreateManyInput> = z.object({
  id: z.string().cuid().optional(),
  data: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  userId: z.string(),
  eventId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const EventActionUpdateManyMutationInputSchema: z.ZodType<Prisma.EventActionUpdateManyMutationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  data: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const EventActionUncheckedUpdateManyInputSchema: z.ZodType<Prisma.EventActionUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  data: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  eventId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ProductCreateInputSchema: z.ZodType<Prisma.ProductCreateInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  price: z.number().int(),
  image: z.string().optional().nullable(),
  tags: z.union([ z.lazy(() => ProductCreatetagsInputSchema),z.string().array() ]).optional(),
  isActive: z.boolean().optional(),
  isDeleted: z.boolean().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  priceHistory: z.lazy(() => PriceCreateNestedManyWithoutProductInputSchema).optional(),
  treatments: z.lazy(() => TreatmentCreateNestedManyWithoutProductInputSchema).optional(),
  category: z.lazy(() => ProductCategoryCreateNestedOneWithoutProductsInputSchema).optional(),
  tenant: z.lazy(() => TenantCreateNestedOneWithoutProductsInputSchema)
}).strict();

export const ProductUncheckedCreateInputSchema: z.ZodType<Prisma.ProductUncheckedCreateInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  price: z.number().int(),
  image: z.string().optional().nullable(),
  tags: z.union([ z.lazy(() => ProductCreatetagsInputSchema),z.string().array() ]).optional(),
  isActive: z.boolean().optional(),
  isDeleted: z.boolean().optional(),
  categoryId: z.string().optional().nullable(),
  tenantId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  priceHistory: z.lazy(() => PriceUncheckedCreateNestedManyWithoutProductInputSchema).optional(),
  treatments: z.lazy(() => TreatmentUncheckedCreateNestedManyWithoutProductInputSchema).optional()
}).strict();

export const ProductUpdateInputSchema: z.ZodType<Prisma.ProductUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  price: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  image: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tags: z.union([ z.lazy(() => ProductUpdatetagsInputSchema),z.string().array() ]).optional(),
  isActive: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  isDeleted: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  priceHistory: z.lazy(() => PriceUpdateManyWithoutProductNestedInputSchema).optional(),
  treatments: z.lazy(() => TreatmentUpdateManyWithoutProductNestedInputSchema).optional(),
  category: z.lazy(() => ProductCategoryUpdateOneWithoutProductsNestedInputSchema).optional(),
  tenant: z.lazy(() => TenantUpdateOneRequiredWithoutProductsNestedInputSchema).optional()
}).strict();

export const ProductUncheckedUpdateInputSchema: z.ZodType<Prisma.ProductUncheckedUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  price: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  image: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tags: z.union([ z.lazy(() => ProductUpdatetagsInputSchema),z.string().array() ]).optional(),
  isActive: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  isDeleted: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  categoryId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tenantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  priceHistory: z.lazy(() => PriceUncheckedUpdateManyWithoutProductNestedInputSchema).optional(),
  treatments: z.lazy(() => TreatmentUncheckedUpdateManyWithoutProductNestedInputSchema).optional()
}).strict();

export const ProductCreateManyInputSchema: z.ZodType<Prisma.ProductCreateManyInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  price: z.number().int(),
  image: z.string().optional().nullable(),
  tags: z.union([ z.lazy(() => ProductCreatetagsInputSchema),z.string().array() ]).optional(),
  isActive: z.boolean().optional(),
  isDeleted: z.boolean().optional(),
  categoryId: z.string().optional().nullable(),
  tenantId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const ProductUpdateManyMutationInputSchema: z.ZodType<Prisma.ProductUpdateManyMutationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  price: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  image: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tags: z.union([ z.lazy(() => ProductUpdatetagsInputSchema),z.string().array() ]).optional(),
  isActive: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  isDeleted: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ProductUncheckedUpdateManyInputSchema: z.ZodType<Prisma.ProductUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  price: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  image: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tags: z.union([ z.lazy(() => ProductUpdatetagsInputSchema),z.string().array() ]).optional(),
  isActive: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  isDeleted: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  categoryId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tenantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const PriceCreateInputSchema: z.ZodType<Prisma.PriceCreateInput> = z.object({
  id: z.string().cuid().optional(),
  value: z.number().int(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  product: z.lazy(() => ProductCreateNestedOneWithoutPriceHistoryInputSchema)
}).strict();

export const PriceUncheckedCreateInputSchema: z.ZodType<Prisma.PriceUncheckedCreateInput> = z.object({
  id: z.string().cuid().optional(),
  value: z.number().int(),
  productId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const PriceUpdateInputSchema: z.ZodType<Prisma.PriceUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  value: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  product: z.lazy(() => ProductUpdateOneRequiredWithoutPriceHistoryNestedInputSchema).optional()
}).strict();

export const PriceUncheckedUpdateInputSchema: z.ZodType<Prisma.PriceUncheckedUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  value: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  productId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const PriceCreateManyInputSchema: z.ZodType<Prisma.PriceCreateManyInput> = z.object({
  id: z.string().cuid().optional(),
  value: z.number().int(),
  productId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const PriceUpdateManyMutationInputSchema: z.ZodType<Prisma.PriceUpdateManyMutationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  value: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const PriceUncheckedUpdateManyInputSchema: z.ZodType<Prisma.PriceUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  value: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  productId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ProductCategoryCreateInputSchema: z.ZodType<Prisma.ProductCategoryCreateInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  parentCategory: z.lazy(() => ProductCategoryCreateNestedOneWithoutSubcategoriesInputSchema).optional(),
  subcategories: z.lazy(() => ProductCategoryCreateNestedManyWithoutParentCategoryInputSchema).optional(),
  products: z.lazy(() => ProductCreateNestedManyWithoutCategoryInputSchema).optional()
}).strict();

export const ProductCategoryUncheckedCreateInputSchema: z.ZodType<Prisma.ProductCategoryUncheckedCreateInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  parentCategoryId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  subcategories: z.lazy(() => ProductCategoryUncheckedCreateNestedManyWithoutParentCategoryInputSchema).optional(),
  products: z.lazy(() => ProductUncheckedCreateNestedManyWithoutCategoryInputSchema).optional()
}).strict();

export const ProductCategoryUpdateInputSchema: z.ZodType<Prisma.ProductCategoryUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  parentCategory: z.lazy(() => ProductCategoryUpdateOneWithoutSubcategoriesNestedInputSchema).optional(),
  subcategories: z.lazy(() => ProductCategoryUpdateManyWithoutParentCategoryNestedInputSchema).optional(),
  products: z.lazy(() => ProductUpdateManyWithoutCategoryNestedInputSchema).optional()
}).strict();

export const ProductCategoryUncheckedUpdateInputSchema: z.ZodType<Prisma.ProductCategoryUncheckedUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  parentCategoryId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  subcategories: z.lazy(() => ProductCategoryUncheckedUpdateManyWithoutParentCategoryNestedInputSchema).optional(),
  products: z.lazy(() => ProductUncheckedUpdateManyWithoutCategoryNestedInputSchema).optional()
}).strict();

export const ProductCategoryCreateManyInputSchema: z.ZodType<Prisma.ProductCategoryCreateManyInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  parentCategoryId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const ProductCategoryUpdateManyMutationInputSchema: z.ZodType<Prisma.ProductCategoryUpdateManyMutationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ProductCategoryUncheckedUpdateManyInputSchema: z.ZodType<Prisma.ProductCategoryUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  parentCategoryId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const TreatmentCreateInputSchema: z.ZodType<Prisma.TreatmentCreateInput> = z.object({
  id: z.string().cuid().optional(),
  price: z.number().int(),
  toothNumber: z.number().int(),
  status: z.lazy(() => TreatmentStatusSchema).optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  product: z.lazy(() => ProductCreateNestedOneWithoutTreatmentsInputSchema),
  treatmentPlan: z.lazy(() => TreatmentPlanCreateNestedOneWithoutTreatmentsInputSchema).optional(),
  event: z.lazy(() => EventCreateNestedOneWithoutTreatmentsInputSchema).optional()
}).strict();

export const TreatmentUncheckedCreateInputSchema: z.ZodType<Prisma.TreatmentUncheckedCreateInput> = z.object({
  id: z.string().cuid().optional(),
  price: z.number().int(),
  toothNumber: z.number().int(),
  status: z.lazy(() => TreatmentStatusSchema).optional(),
  productId: z.string(),
  treatmentPlanId: z.string().optional().nullable(),
  eventId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const TreatmentUpdateInputSchema: z.ZodType<Prisma.TreatmentUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  price: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  toothNumber: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => TreatmentStatusSchema),z.lazy(() => EnumTreatmentStatusFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  product: z.lazy(() => ProductUpdateOneRequiredWithoutTreatmentsNestedInputSchema).optional(),
  treatmentPlan: z.lazy(() => TreatmentPlanUpdateOneWithoutTreatmentsNestedInputSchema).optional(),
  event: z.lazy(() => EventUpdateOneWithoutTreatmentsNestedInputSchema).optional()
}).strict();

export const TreatmentUncheckedUpdateInputSchema: z.ZodType<Prisma.TreatmentUncheckedUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  price: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  toothNumber: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => TreatmentStatusSchema),z.lazy(() => EnumTreatmentStatusFieldUpdateOperationsInputSchema) ]).optional(),
  productId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  treatmentPlanId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  eventId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const TreatmentCreateManyInputSchema: z.ZodType<Prisma.TreatmentCreateManyInput> = z.object({
  id: z.string().cuid().optional(),
  price: z.number().int(),
  toothNumber: z.number().int(),
  status: z.lazy(() => TreatmentStatusSchema).optional(),
  productId: z.string(),
  treatmentPlanId: z.string().optional().nullable(),
  eventId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const TreatmentUpdateManyMutationInputSchema: z.ZodType<Prisma.TreatmentUpdateManyMutationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  price: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  toothNumber: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => TreatmentStatusSchema),z.lazy(() => EnumTreatmentStatusFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const TreatmentUncheckedUpdateManyInputSchema: z.ZodType<Prisma.TreatmentUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  price: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  toothNumber: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => TreatmentStatusSchema),z.lazy(() => EnumTreatmentStatusFieldUpdateOperationsInputSchema) ]).optional(),
  productId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  treatmentPlanId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  eventId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const TreatmentPlanCreateInputSchema: z.ZodType<Prisma.TreatmentPlanCreateInput> = z.object({
  id: z.string().cuid().optional(),
  description: z.string().optional().nullable(),
  isDone: z.boolean().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  treatments: z.lazy(() => TreatmentCreateNestedManyWithoutTreatmentPlanInputSchema).optional(),
  patient: z.lazy(() => PatientCreateNestedOneWithoutTreatmentPlansInputSchema),
  user: z.lazy(() => UserCreateNestedOneWithoutTreatmentPlansInputSchema)
}).strict();

export const TreatmentPlanUncheckedCreateInputSchema: z.ZodType<Prisma.TreatmentPlanUncheckedCreateInput> = z.object({
  id: z.string().cuid().optional(),
  description: z.string().optional().nullable(),
  isDone: z.boolean().optional(),
  patientId: z.string(),
  userId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  treatments: z.lazy(() => TreatmentUncheckedCreateNestedManyWithoutTreatmentPlanInputSchema).optional()
}).strict();

export const TreatmentPlanUpdateInputSchema: z.ZodType<Prisma.TreatmentPlanUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isDone: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  treatments: z.lazy(() => TreatmentUpdateManyWithoutTreatmentPlanNestedInputSchema).optional(),
  patient: z.lazy(() => PatientUpdateOneRequiredWithoutTreatmentPlansNestedInputSchema).optional(),
  user: z.lazy(() => UserUpdateOneRequiredWithoutTreatmentPlansNestedInputSchema).optional()
}).strict();

export const TreatmentPlanUncheckedUpdateInputSchema: z.ZodType<Prisma.TreatmentPlanUncheckedUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isDone: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  patientId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  treatments: z.lazy(() => TreatmentUncheckedUpdateManyWithoutTreatmentPlanNestedInputSchema).optional()
}).strict();

export const TreatmentPlanCreateManyInputSchema: z.ZodType<Prisma.TreatmentPlanCreateManyInput> = z.object({
  id: z.string().cuid().optional(),
  description: z.string().optional().nullable(),
  isDone: z.boolean().optional(),
  patientId: z.string(),
  userId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const TreatmentPlanUpdateManyMutationInputSchema: z.ZodType<Prisma.TreatmentPlanUpdateManyMutationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isDone: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const TreatmentPlanUncheckedUpdateManyInputSchema: z.ZodType<Prisma.TreatmentPlanUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isDone: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  patientId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const CountyCreateInputSchema: z.ZodType<Prisma.CountyCreateInput> = z.object({
  id: z.string().uuid().optional(),
  name: z.string(),
  code: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  cities: z.lazy(() => CityCreateNestedManyWithoutCountyInputSchema).optional()
}).strict();

export const CountyUncheckedCreateInputSchema: z.ZodType<Prisma.CountyUncheckedCreateInput> = z.object({
  id: z.string().uuid().optional(),
  name: z.string(),
  code: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  cities: z.lazy(() => CityUncheckedCreateNestedManyWithoutCountyInputSchema).optional()
}).strict();

export const CountyUpdateInputSchema: z.ZodType<Prisma.CountyUpdateInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  code: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  cities: z.lazy(() => CityUpdateManyWithoutCountyNestedInputSchema).optional()
}).strict();

export const CountyUncheckedUpdateInputSchema: z.ZodType<Prisma.CountyUncheckedUpdateInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  code: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  cities: z.lazy(() => CityUncheckedUpdateManyWithoutCountyNestedInputSchema).optional()
}).strict();

export const CountyCreateManyInputSchema: z.ZodType<Prisma.CountyCreateManyInput> = z.object({
  id: z.string().uuid().optional(),
  name: z.string(),
  code: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const CountyUpdateManyMutationInputSchema: z.ZodType<Prisma.CountyUpdateManyMutationInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  code: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const CountyUncheckedUpdateManyInputSchema: z.ZodType<Prisma.CountyUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  code: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const CityCreateInputSchema: z.ZodType<Prisma.CityCreateInput> = z.object({
  id: z.string().uuid().optional(),
  name: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  county: z.lazy(() => CountyCreateNestedOneWithoutCitiesInputSchema)
}).strict();

export const CityUncheckedCreateInputSchema: z.ZodType<Prisma.CityUncheckedCreateInput> = z.object({
  id: z.string().uuid().optional(),
  name: z.string(),
  countyId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const CityUpdateInputSchema: z.ZodType<Prisma.CityUpdateInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  county: z.lazy(() => CountyUpdateOneRequiredWithoutCitiesNestedInputSchema).optional()
}).strict();

export const CityUncheckedUpdateInputSchema: z.ZodType<Prisma.CityUncheckedUpdateInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  countyId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const CityCreateManyInputSchema: z.ZodType<Prisma.CityCreateManyInput> = z.object({
  id: z.string().uuid().optional(),
  name: z.string(),
  countyId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const CityUpdateManyMutationInputSchema: z.ZodType<Prisma.CityUpdateManyMutationInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const CityUncheckedUpdateManyInputSchema: z.ZodType<Prisma.CityUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  countyId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const StringFilterSchema: z.ZodType<Prisma.StringFilter> = z.object({
  equals: z.string().optional(),
  in: z.string().array().optional(),
  notIn: z.string().array().optional(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  contains: z.string().optional(),
  startsWith: z.string().optional(),
  endsWith: z.string().optional(),
  mode: z.lazy(() => QueryModeSchema).optional(),
  not: z.union([ z.string(),z.lazy(() => NestedStringFilterSchema) ]).optional(),
}).strict();

export const DateTimeNullableFilterSchema: z.ZodType<Prisma.DateTimeNullableFilter> = z.object({
  equals: z.coerce.date().optional().nullable(),
  in: z.coerce.date().array().optional().nullable(),
  notIn: z.coerce.date().array().optional().nullable(),
  lt: z.coerce.date().optional(),
  lte: z.coerce.date().optional(),
  gt: z.coerce.date().optional(),
  gte: z.coerce.date().optional(),
  not: z.union([ z.coerce.date(),z.lazy(() => NestedDateTimeNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const DateTimeFilterSchema: z.ZodType<Prisma.DateTimeFilter> = z.object({
  equals: z.coerce.date().optional(),
  in: z.coerce.date().array().optional(),
  notIn: z.coerce.date().array().optional(),
  lt: z.coerce.date().optional(),
  lte: z.coerce.date().optional(),
  gt: z.coerce.date().optional(),
  gte: z.coerce.date().optional(),
  not: z.union([ z.coerce.date(),z.lazy(() => NestedDateTimeFilterSchema) ]).optional(),
}).strict();

export const UserListRelationFilterSchema: z.ZodType<Prisma.UserListRelationFilter> = z.object({
  every: z.lazy(() => UserWhereInputSchema).optional(),
  some: z.lazy(() => UserWhereInputSchema).optional(),
  none: z.lazy(() => UserWhereInputSchema).optional()
}).strict();

export const TenantProfileRelationFilterSchema: z.ZodType<Prisma.TenantProfileRelationFilter> = z.object({
  is: z.lazy(() => TenantProfileWhereInputSchema).optional(),
  isNot: z.lazy(() => TenantProfileWhereInputSchema).optional()
}).strict();

export const SpecializationListRelationFilterSchema: z.ZodType<Prisma.SpecializationListRelationFilter> = z.object({
  every: z.lazy(() => SpecializationWhereInputSchema).optional(),
  some: z.lazy(() => SpecializationWhereInputSchema).optional(),
  none: z.lazy(() => SpecializationWhereInputSchema).optional()
}).strict();

export const ProfileListRelationFilterSchema: z.ZodType<Prisma.ProfileListRelationFilter> = z.object({
  every: z.lazy(() => ProfileWhereInputSchema).optional(),
  some: z.lazy(() => ProfileWhereInputSchema).optional(),
  none: z.lazy(() => ProfileWhereInputSchema).optional()
}).strict();

export const PatientListRelationFilterSchema: z.ZodType<Prisma.PatientListRelationFilter> = z.object({
  every: z.lazy(() => PatientWhereInputSchema).optional(),
  some: z.lazy(() => PatientWhereInputSchema).optional(),
  none: z.lazy(() => PatientWhereInputSchema).optional()
}).strict();

export const ProductListRelationFilterSchema: z.ZodType<Prisma.ProductListRelationFilter> = z.object({
  every: z.lazy(() => ProductWhereInputSchema).optional(),
  some: z.lazy(() => ProductWhereInputSchema).optional(),
  none: z.lazy(() => ProductWhereInputSchema).optional()
}).strict();

export const EventListRelationFilterSchema: z.ZodType<Prisma.EventListRelationFilter> = z.object({
  every: z.lazy(() => EventWhereInputSchema).optional(),
  some: z.lazy(() => EventWhereInputSchema).optional(),
  none: z.lazy(() => EventWhereInputSchema).optional()
}).strict();

export const SortOrderInputSchema: z.ZodType<Prisma.SortOrderInput> = z.object({
  sort: z.lazy(() => SortOrderSchema),
  nulls: z.lazy(() => NullsOrderSchema).optional()
}).strict();

export const UserOrderByRelationAggregateInputSchema: z.ZodType<Prisma.UserOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const SpecializationOrderByRelationAggregateInputSchema: z.ZodType<Prisma.SpecializationOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ProfileOrderByRelationAggregateInputSchema: z.ZodType<Prisma.ProfileOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const PatientOrderByRelationAggregateInputSchema: z.ZodType<Prisma.PatientOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ProductOrderByRelationAggregateInputSchema: z.ZodType<Prisma.ProductOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const EventOrderByRelationAggregateInputSchema: z.ZodType<Prisma.EventOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const TenantCountOrderByAggregateInputSchema: z.ZodType<Prisma.TenantCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  profileId: z.lazy(() => SortOrderSchema).optional(),
  deletedAt: z.lazy(() => SortOrderSchema).optional(),
  disabledAt: z.lazy(() => SortOrderSchema).optional(),
  trialExpiresAt: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const TenantMaxOrderByAggregateInputSchema: z.ZodType<Prisma.TenantMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  profileId: z.lazy(() => SortOrderSchema).optional(),
  deletedAt: z.lazy(() => SortOrderSchema).optional(),
  disabledAt: z.lazy(() => SortOrderSchema).optional(),
  trialExpiresAt: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const TenantMinOrderByAggregateInputSchema: z.ZodType<Prisma.TenantMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  profileId: z.lazy(() => SortOrderSchema).optional(),
  deletedAt: z.lazy(() => SortOrderSchema).optional(),
  disabledAt: z.lazy(() => SortOrderSchema).optional(),
  trialExpiresAt: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const StringWithAggregatesFilterSchema: z.ZodType<Prisma.StringWithAggregatesFilter> = z.object({
  equals: z.string().optional(),
  in: z.string().array().optional(),
  notIn: z.string().array().optional(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  contains: z.string().optional(),
  startsWith: z.string().optional(),
  endsWith: z.string().optional(),
  mode: z.lazy(() => QueryModeSchema).optional(),
  not: z.union([ z.string(),z.lazy(() => NestedStringWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedStringFilterSchema).optional(),
  _max: z.lazy(() => NestedStringFilterSchema).optional()
}).strict();

export const DateTimeNullableWithAggregatesFilterSchema: z.ZodType<Prisma.DateTimeNullableWithAggregatesFilter> = z.object({
  equals: z.coerce.date().optional().nullable(),
  in: z.coerce.date().array().optional().nullable(),
  notIn: z.coerce.date().array().optional().nullable(),
  lt: z.coerce.date().optional(),
  lte: z.coerce.date().optional(),
  gt: z.coerce.date().optional(),
  gte: z.coerce.date().optional(),
  not: z.union([ z.coerce.date(),z.lazy(() => NestedDateTimeNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedDateTimeNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedDateTimeNullableFilterSchema).optional()
}).strict();

export const DateTimeWithAggregatesFilterSchema: z.ZodType<Prisma.DateTimeWithAggregatesFilter> = z.object({
  equals: z.coerce.date().optional(),
  in: z.coerce.date().array().optional(),
  notIn: z.coerce.date().array().optional(),
  lt: z.coerce.date().optional(),
  lte: z.coerce.date().optional(),
  gt: z.coerce.date().optional(),
  gte: z.coerce.date().optional(),
  not: z.union([ z.coerce.date(),z.lazy(() => NestedDateTimeWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedDateTimeFilterSchema).optional(),
  _max: z.lazy(() => NestedDateTimeFilterSchema).optional()
}).strict();

export const StringNullableFilterSchema: z.ZodType<Prisma.StringNullableFilter> = z.object({
  equals: z.string().optional().nullable(),
  in: z.string().array().optional().nullable(),
  notIn: z.string().array().optional().nullable(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  contains: z.string().optional(),
  startsWith: z.string().optional(),
  endsWith: z.string().optional(),
  mode: z.lazy(() => QueryModeSchema).optional(),
  not: z.union([ z.string(),z.lazy(() => NestedStringNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const BoolFilterSchema: z.ZodType<Prisma.BoolFilter> = z.object({
  equals: z.boolean().optional(),
  not: z.union([ z.boolean(),z.lazy(() => NestedBoolFilterSchema) ]).optional(),
}).strict();

export const PlanRelationFilterSchema: z.ZodType<Prisma.PlanRelationFilter> = z.object({
  is: z.lazy(() => PlanWhereInputSchema).optional(),
  isNot: z.lazy(() => PlanWhereInputSchema).optional()
}).strict();

export const TenantNullableRelationFilterSchema: z.ZodType<Prisma.TenantNullableRelationFilter> = z.object({
  is: z.lazy(() => TenantWhereInputSchema).optional().nullable(),
  isNot: z.lazy(() => TenantWhereInputSchema).optional().nullable()
}).strict();

export const TenantProfileCountOrderByAggregateInputSchema: z.ZodType<Prisma.TenantProfileCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  county: z.lazy(() => SortOrderSchema).optional(),
  address: z.lazy(() => SortOrderSchema).optional(),
  zip: z.lazy(() => SortOrderSchema).optional(),
  phone: z.lazy(() => SortOrderSchema).optional(),
  avatar: z.lazy(() => SortOrderSchema).optional(),
  size: z.lazy(() => SortOrderSchema).optional(),
  stripeSubscriptionId: z.lazy(() => SortOrderSchema).optional(),
  activeSubscription: z.lazy(() => SortOrderSchema).optional(),
  planId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const TenantProfileMaxOrderByAggregateInputSchema: z.ZodType<Prisma.TenantProfileMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  county: z.lazy(() => SortOrderSchema).optional(),
  address: z.lazy(() => SortOrderSchema).optional(),
  zip: z.lazy(() => SortOrderSchema).optional(),
  phone: z.lazy(() => SortOrderSchema).optional(),
  avatar: z.lazy(() => SortOrderSchema).optional(),
  size: z.lazy(() => SortOrderSchema).optional(),
  stripeSubscriptionId: z.lazy(() => SortOrderSchema).optional(),
  activeSubscription: z.lazy(() => SortOrderSchema).optional(),
  planId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const TenantProfileMinOrderByAggregateInputSchema: z.ZodType<Prisma.TenantProfileMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  county: z.lazy(() => SortOrderSchema).optional(),
  address: z.lazy(() => SortOrderSchema).optional(),
  zip: z.lazy(() => SortOrderSchema).optional(),
  phone: z.lazy(() => SortOrderSchema).optional(),
  avatar: z.lazy(() => SortOrderSchema).optional(),
  size: z.lazy(() => SortOrderSchema).optional(),
  stripeSubscriptionId: z.lazy(() => SortOrderSchema).optional(),
  activeSubscription: z.lazy(() => SortOrderSchema).optional(),
  planId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const StringNullableWithAggregatesFilterSchema: z.ZodType<Prisma.StringNullableWithAggregatesFilter> = z.object({
  equals: z.string().optional().nullable(),
  in: z.string().array().optional().nullable(),
  notIn: z.string().array().optional().nullable(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  contains: z.string().optional(),
  startsWith: z.string().optional(),
  endsWith: z.string().optional(),
  mode: z.lazy(() => QueryModeSchema).optional(),
  not: z.union([ z.string(),z.lazy(() => NestedStringNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedStringNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedStringNullableFilterSchema).optional()
}).strict();

export const BoolWithAggregatesFilterSchema: z.ZodType<Prisma.BoolWithAggregatesFilter> = z.object({
  equals: z.boolean().optional(),
  not: z.union([ z.boolean(),z.lazy(() => NestedBoolWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedBoolFilterSchema).optional(),
  _max: z.lazy(() => NestedBoolFilterSchema).optional()
}).strict();

export const IntFilterSchema: z.ZodType<Prisma.IntFilter> = z.object({
  equals: z.number().optional(),
  in: z.number().array().optional(),
  notIn: z.number().array().optional(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedIntFilterSchema) ]).optional(),
}).strict();

export const EnumRoleFilterSchema: z.ZodType<Prisma.EnumRoleFilter> = z.object({
  equals: z.lazy(() => RoleSchema).optional(),
  in: z.lazy(() => RoleSchema).array().optional(),
  notIn: z.lazy(() => RoleSchema).array().optional(),
  not: z.union([ z.lazy(() => RoleSchema),z.lazy(() => NestedEnumRoleFilterSchema) ]).optional(),
}).strict();

export const JsonFilterSchema: z.ZodType<Prisma.JsonFilter> = z.object({
  equals: InputJsonValueSchema.optional(),
  path: z.string().array().optional(),
  string_contains: z.string().optional(),
  string_starts_with: z.string().optional(),
  string_ends_with: z.string().optional(),
  array_contains: InputJsonValueSchema.optional().nullable(),
  array_starts_with: InputJsonValueSchema.optional().nullable(),
  array_ends_with: InputJsonValueSchema.optional().nullable(),
  lt: InputJsonValueSchema.optional(),
  lte: InputJsonValueSchema.optional(),
  gt: InputJsonValueSchema.optional(),
  gte: InputJsonValueSchema.optional(),
  not: InputJsonValueSchema.optional()
}).strict();

export const SpecializationNullableRelationFilterSchema: z.ZodType<Prisma.SpecializationNullableRelationFilter> = z.object({
  is: z.lazy(() => SpecializationWhereInputSchema).optional().nullable(),
  isNot: z.lazy(() => SpecializationWhereInputSchema).optional().nullable()
}).strict();

export const ProfileRelationFilterSchema: z.ZodType<Prisma.ProfileRelationFilter> = z.object({
  is: z.lazy(() => ProfileWhereInputSchema).optional(),
  isNot: z.lazy(() => ProfileWhereInputSchema).optional()
}).strict();

export const TenantRelationFilterSchema: z.ZodType<Prisma.TenantRelationFilter> = z.object({
  is: z.lazy(() => TenantWhereInputSchema).optional(),
  isNot: z.lazy(() => TenantWhereInputSchema).optional()
}).strict();

export const InvitationNullableRelationFilterSchema: z.ZodType<Prisma.InvitationNullableRelationFilter> = z.object({
  is: z.lazy(() => InvitationWhereInputSchema).optional().nullable(),
  isNot: z.lazy(() => InvitationWhereInputSchema).optional().nullable()
}).strict();

export const TokenListRelationFilterSchema: z.ZodType<Prisma.TokenListRelationFilter> = z.object({
  every: z.lazy(() => TokenWhereInputSchema).optional(),
  some: z.lazy(() => TokenWhereInputSchema).optional(),
  none: z.lazy(() => TokenWhereInputSchema).optional()
}).strict();

export const EventActionListRelationFilterSchema: z.ZodType<Prisma.EventActionListRelationFilter> = z.object({
  every: z.lazy(() => EventActionWhereInputSchema).optional(),
  some: z.lazy(() => EventActionWhereInputSchema).optional(),
  none: z.lazy(() => EventActionWhereInputSchema).optional()
}).strict();

export const TreatmentPlanListRelationFilterSchema: z.ZodType<Prisma.TreatmentPlanListRelationFilter> = z.object({
  every: z.lazy(() => TreatmentPlanWhereInputSchema).optional(),
  some: z.lazy(() => TreatmentPlanWhereInputSchema).optional(),
  none: z.lazy(() => TreatmentPlanWhereInputSchema).optional()
}).strict();

export const InvitationListRelationFilterSchema: z.ZodType<Prisma.InvitationListRelationFilter> = z.object({
  every: z.lazy(() => InvitationWhereInputSchema).optional(),
  some: z.lazy(() => InvitationWhereInputSchema).optional(),
  none: z.lazy(() => InvitationWhereInputSchema).optional()
}).strict();

export const TokenOrderByRelationAggregateInputSchema: z.ZodType<Prisma.TokenOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const EventActionOrderByRelationAggregateInputSchema: z.ZodType<Prisma.EventActionOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const TreatmentPlanOrderByRelationAggregateInputSchema: z.ZodType<Prisma.TreatmentPlanOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const InvitationOrderByRelationAggregateInputSchema: z.ZodType<Prisma.InvitationOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const UserCountOrderByAggregateInputSchema: z.ZodType<Prisma.UserCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  index: z.lazy(() => SortOrderSchema).optional(),
  role: z.lazy(() => SortOrderSchema).optional(),
  workingHours: z.lazy(() => SortOrderSchema).optional(),
  specializationId: z.lazy(() => SortOrderSchema).optional(),
  profileId: z.lazy(() => SortOrderSchema).optional(),
  tenantId: z.lazy(() => SortOrderSchema).optional(),
  deletedAt: z.lazy(() => SortOrderSchema).optional(),
  activatedAt: z.lazy(() => SortOrderSchema).optional(),
  lastLoginAt: z.lazy(() => SortOrderSchema).optional(),
  bannedAt: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const UserAvgOrderByAggregateInputSchema: z.ZodType<Prisma.UserAvgOrderByAggregateInput> = z.object({
  index: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const UserMaxOrderByAggregateInputSchema: z.ZodType<Prisma.UserMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  index: z.lazy(() => SortOrderSchema).optional(),
  role: z.lazy(() => SortOrderSchema).optional(),
  specializationId: z.lazy(() => SortOrderSchema).optional(),
  profileId: z.lazy(() => SortOrderSchema).optional(),
  tenantId: z.lazy(() => SortOrderSchema).optional(),
  deletedAt: z.lazy(() => SortOrderSchema).optional(),
  activatedAt: z.lazy(() => SortOrderSchema).optional(),
  lastLoginAt: z.lazy(() => SortOrderSchema).optional(),
  bannedAt: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const UserMinOrderByAggregateInputSchema: z.ZodType<Prisma.UserMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  index: z.lazy(() => SortOrderSchema).optional(),
  role: z.lazy(() => SortOrderSchema).optional(),
  specializationId: z.lazy(() => SortOrderSchema).optional(),
  profileId: z.lazy(() => SortOrderSchema).optional(),
  tenantId: z.lazy(() => SortOrderSchema).optional(),
  deletedAt: z.lazy(() => SortOrderSchema).optional(),
  activatedAt: z.lazy(() => SortOrderSchema).optional(),
  lastLoginAt: z.lazy(() => SortOrderSchema).optional(),
  bannedAt: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const UserSumOrderByAggregateInputSchema: z.ZodType<Prisma.UserSumOrderByAggregateInput> = z.object({
  index: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const IntWithAggregatesFilterSchema: z.ZodType<Prisma.IntWithAggregatesFilter> = z.object({
  equals: z.number().optional(),
  in: z.number().array().optional(),
  notIn: z.number().array().optional(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedIntWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _avg: z.lazy(() => NestedFloatFilterSchema).optional(),
  _sum: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedIntFilterSchema).optional(),
  _max: z.lazy(() => NestedIntFilterSchema).optional()
}).strict();

export const EnumRoleWithAggregatesFilterSchema: z.ZodType<Prisma.EnumRoleWithAggregatesFilter> = z.object({
  equals: z.lazy(() => RoleSchema).optional(),
  in: z.lazy(() => RoleSchema).array().optional(),
  notIn: z.lazy(() => RoleSchema).array().optional(),
  not: z.union([ z.lazy(() => RoleSchema),z.lazy(() => NestedEnumRoleWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumRoleFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumRoleFilterSchema).optional()
}).strict();

export const JsonWithAggregatesFilterSchema: z.ZodType<Prisma.JsonWithAggregatesFilter> = z.object({
  equals: InputJsonValueSchema.optional(),
  path: z.string().array().optional(),
  string_contains: z.string().optional(),
  string_starts_with: z.string().optional(),
  string_ends_with: z.string().optional(),
  array_contains: InputJsonValueSchema.optional().nullable(),
  array_starts_with: InputJsonValueSchema.optional().nullable(),
  array_ends_with: InputJsonValueSchema.optional().nullable(),
  lt: InputJsonValueSchema.optional(),
  lte: InputJsonValueSchema.optional(),
  gt: InputJsonValueSchema.optional(),
  gte: InputJsonValueSchema.optional(),
  not: InputJsonValueSchema.optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedJsonFilterSchema).optional(),
  _max: z.lazy(() => NestedJsonFilterSchema).optional()
}).strict();

export const AccountAuthListRelationFilterSchema: z.ZodType<Prisma.AccountAuthListRelationFilter> = z.object({
  every: z.lazy(() => AccountAuthWhereInputSchema).optional(),
  some: z.lazy(() => AccountAuthWhereInputSchema).optional(),
  none: z.lazy(() => AccountAuthWhereInputSchema).optional()
}).strict();

export const AccountAuthOrderByRelationAggregateInputSchema: z.ZodType<Prisma.AccountAuthOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ProfileCountOrderByAggregateInputSchema: z.ZodType<Prisma.ProfileCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  title: z.lazy(() => SortOrderSchema).optional(),
  firstName: z.lazy(() => SortOrderSchema).optional(),
  lastName: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  phone: z.lazy(() => SortOrderSchema).optional(),
  avatar: z.lazy(() => SortOrderSchema).optional(),
  stripeCustomerId: z.lazy(() => SortOrderSchema).optional(),
  stripeFreeTrialUsed: z.lazy(() => SortOrderSchema).optional(),
  preferredTenantId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ProfileMaxOrderByAggregateInputSchema: z.ZodType<Prisma.ProfileMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  title: z.lazy(() => SortOrderSchema).optional(),
  firstName: z.lazy(() => SortOrderSchema).optional(),
  lastName: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  phone: z.lazy(() => SortOrderSchema).optional(),
  avatar: z.lazy(() => SortOrderSchema).optional(),
  stripeCustomerId: z.lazy(() => SortOrderSchema).optional(),
  stripeFreeTrialUsed: z.lazy(() => SortOrderSchema).optional(),
  preferredTenantId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ProfileMinOrderByAggregateInputSchema: z.ZodType<Prisma.ProfileMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  title: z.lazy(() => SortOrderSchema).optional(),
  firstName: z.lazy(() => SortOrderSchema).optional(),
  lastName: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  phone: z.lazy(() => SortOrderSchema).optional(),
  avatar: z.lazy(() => SortOrderSchema).optional(),
  stripeCustomerId: z.lazy(() => SortOrderSchema).optional(),
  stripeFreeTrialUsed: z.lazy(() => SortOrderSchema).optional(),
  preferredTenantId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const IntNullableFilterSchema: z.ZodType<Prisma.IntNullableFilter> = z.object({
  equals: z.number().optional().nullable(),
  in: z.number().array().optional().nullable(),
  notIn: z.number().array().optional().nullable(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedIntNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const AccountAuthCountOrderByAggregateInputSchema: z.ZodType<Prisma.AccountAuthCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  profileId: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  provider: z.lazy(() => SortOrderSchema).optional(),
  passwordHash: z.lazy(() => SortOrderSchema).optional(),
  refresh_token: z.lazy(() => SortOrderSchema).optional(),
  access_token: z.lazy(() => SortOrderSchema).optional(),
  expires_at: z.lazy(() => SortOrderSchema).optional(),
  refresh_token_expires_in: z.lazy(() => SortOrderSchema).optional(),
  token_type: z.lazy(() => SortOrderSchema).optional(),
  scope: z.lazy(() => SortOrderSchema).optional(),
  id_token: z.lazy(() => SortOrderSchema).optional(),
  session_state: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const AccountAuthAvgOrderByAggregateInputSchema: z.ZodType<Prisma.AccountAuthAvgOrderByAggregateInput> = z.object({
  refresh_token_expires_in: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const AccountAuthMaxOrderByAggregateInputSchema: z.ZodType<Prisma.AccountAuthMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  profileId: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  provider: z.lazy(() => SortOrderSchema).optional(),
  passwordHash: z.lazy(() => SortOrderSchema).optional(),
  refresh_token: z.lazy(() => SortOrderSchema).optional(),
  access_token: z.lazy(() => SortOrderSchema).optional(),
  expires_at: z.lazy(() => SortOrderSchema).optional(),
  refresh_token_expires_in: z.lazy(() => SortOrderSchema).optional(),
  token_type: z.lazy(() => SortOrderSchema).optional(),
  scope: z.lazy(() => SortOrderSchema).optional(),
  id_token: z.lazy(() => SortOrderSchema).optional(),
  session_state: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const AccountAuthMinOrderByAggregateInputSchema: z.ZodType<Prisma.AccountAuthMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  profileId: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  provider: z.lazy(() => SortOrderSchema).optional(),
  passwordHash: z.lazy(() => SortOrderSchema).optional(),
  refresh_token: z.lazy(() => SortOrderSchema).optional(),
  access_token: z.lazy(() => SortOrderSchema).optional(),
  expires_at: z.lazy(() => SortOrderSchema).optional(),
  refresh_token_expires_in: z.lazy(() => SortOrderSchema).optional(),
  token_type: z.lazy(() => SortOrderSchema).optional(),
  scope: z.lazy(() => SortOrderSchema).optional(),
  id_token: z.lazy(() => SortOrderSchema).optional(),
  session_state: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const AccountAuthSumOrderByAggregateInputSchema: z.ZodType<Prisma.AccountAuthSumOrderByAggregateInput> = z.object({
  refresh_token_expires_in: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const IntNullableWithAggregatesFilterSchema: z.ZodType<Prisma.IntNullableWithAggregatesFilter> = z.object({
  equals: z.number().optional().nullable(),
  in: z.number().array().optional().nullable(),
  notIn: z.number().array().optional().nullable(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedIntNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _avg: z.lazy(() => NestedFloatNullableFilterSchema).optional(),
  _sum: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedIntNullableFilterSchema).optional()
}).strict();

export const TenantProfileListRelationFilterSchema: z.ZodType<Prisma.TenantProfileListRelationFilter> = z.object({
  every: z.lazy(() => TenantProfileWhereInputSchema).optional(),
  some: z.lazy(() => TenantProfileWhereInputSchema).optional(),
  none: z.lazy(() => TenantProfileWhereInputSchema).optional()
}).strict();

export const TenantProfileOrderByRelationAggregateInputSchema: z.ZodType<Prisma.TenantProfileOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const PlanCountOrderByAggregateInputSchema: z.ZodType<Prisma.PlanCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  stripeProductId: z.lazy(() => SortOrderSchema).optional(),
  stripePriceId: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  maxUsers: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const PlanAvgOrderByAggregateInputSchema: z.ZodType<Prisma.PlanAvgOrderByAggregateInput> = z.object({
  maxUsers: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const PlanMaxOrderByAggregateInputSchema: z.ZodType<Prisma.PlanMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  stripeProductId: z.lazy(() => SortOrderSchema).optional(),
  stripePriceId: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  maxUsers: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const PlanMinOrderByAggregateInputSchema: z.ZodType<Prisma.PlanMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  stripeProductId: z.lazy(() => SortOrderSchema).optional(),
  stripePriceId: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  maxUsers: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const PlanSumOrderByAggregateInputSchema: z.ZodType<Prisma.PlanSumOrderByAggregateInput> = z.object({
  maxUsers: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const EnumTokenTypeFilterSchema: z.ZodType<Prisma.EnumTokenTypeFilter> = z.object({
  equals: z.lazy(() => TokenTypeSchema).optional(),
  in: z.lazy(() => TokenTypeSchema).array().optional(),
  notIn: z.lazy(() => TokenTypeSchema).array().optional(),
  not: z.union([ z.lazy(() => TokenTypeSchema),z.lazy(() => NestedEnumTokenTypeFilterSchema) ]).optional(),
}).strict();

export const UserRelationFilterSchema: z.ZodType<Prisma.UserRelationFilter> = z.object({
  is: z.lazy(() => UserWhereInputSchema).optional(),
  isNot: z.lazy(() => UserWhereInputSchema).optional()
}).strict();

export const TokenCountOrderByAggregateInputSchema: z.ZodType<Prisma.TokenCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  token: z.lazy(() => SortOrderSchema).optional(),
  expires: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const TokenMaxOrderByAggregateInputSchema: z.ZodType<Prisma.TokenMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  token: z.lazy(() => SortOrderSchema).optional(),
  expires: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const TokenMinOrderByAggregateInputSchema: z.ZodType<Prisma.TokenMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  token: z.lazy(() => SortOrderSchema).optional(),
  expires: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const EnumTokenTypeWithAggregatesFilterSchema: z.ZodType<Prisma.EnumTokenTypeWithAggregatesFilter> = z.object({
  equals: z.lazy(() => TokenTypeSchema).optional(),
  in: z.lazy(() => TokenTypeSchema).array().optional(),
  notIn: z.lazy(() => TokenTypeSchema).array().optional(),
  not: z.union([ z.lazy(() => TokenTypeSchema),z.lazy(() => NestedEnumTokenTypeWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumTokenTypeFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumTokenTypeFilterSchema).optional()
}).strict();

export const UserNullableRelationFilterSchema: z.ZodType<Prisma.UserNullableRelationFilter> = z.object({
  is: z.lazy(() => UserWhereInputSchema).optional().nullable(),
  isNot: z.lazy(() => UserWhereInputSchema).optional().nullable()
}).strict();

export const InvitationCountOrderByAggregateInputSchema: z.ZodType<Prisma.InvitationCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  role: z.lazy(() => SortOrderSchema).optional(),
  token: z.lazy(() => SortOrderSchema).optional(),
  expires: z.lazy(() => SortOrderSchema).optional(),
  invitedById: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const InvitationMaxOrderByAggregateInputSchema: z.ZodType<Prisma.InvitationMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  role: z.lazy(() => SortOrderSchema).optional(),
  token: z.lazy(() => SortOrderSchema).optional(),
  expires: z.lazy(() => SortOrderSchema).optional(),
  invitedById: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const InvitationMinOrderByAggregateInputSchema: z.ZodType<Prisma.InvitationMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  role: z.lazy(() => SortOrderSchema).optional(),
  token: z.lazy(() => SortOrderSchema).optional(),
  expires: z.lazy(() => SortOrderSchema).optional(),
  invitedById: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const EnumStatusFilterSchema: z.ZodType<Prisma.EnumStatusFilter> = z.object({
  equals: z.lazy(() => StatusSchema).optional(),
  in: z.lazy(() => StatusSchema).array().optional(),
  notIn: z.lazy(() => StatusSchema).array().optional(),
  not: z.union([ z.lazy(() => StatusSchema),z.lazy(() => NestedEnumStatusFilterSchema) ]).optional(),
}).strict();

export const PatientCountOrderByAggregateInputSchema: z.ZodType<Prisma.PatientCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  firstName: z.lazy(() => SortOrderSchema).optional(),
  lastName: z.lazy(() => SortOrderSchema).optional(),
  gender: z.lazy(() => SortOrderSchema).optional(),
  dob: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  phone: z.lazy(() => SortOrderSchema).optional(),
  city: z.lazy(() => SortOrderSchema).optional(),
  county: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  smsNotifications: z.lazy(() => SortOrderSchema).optional(),
  emailNotifications: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  tenantId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const PatientMaxOrderByAggregateInputSchema: z.ZodType<Prisma.PatientMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  firstName: z.lazy(() => SortOrderSchema).optional(),
  lastName: z.lazy(() => SortOrderSchema).optional(),
  gender: z.lazy(() => SortOrderSchema).optional(),
  dob: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  phone: z.lazy(() => SortOrderSchema).optional(),
  city: z.lazy(() => SortOrderSchema).optional(),
  county: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  smsNotifications: z.lazy(() => SortOrderSchema).optional(),
  emailNotifications: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  tenantId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const PatientMinOrderByAggregateInputSchema: z.ZodType<Prisma.PatientMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  firstName: z.lazy(() => SortOrderSchema).optional(),
  lastName: z.lazy(() => SortOrderSchema).optional(),
  gender: z.lazy(() => SortOrderSchema).optional(),
  dob: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  phone: z.lazy(() => SortOrderSchema).optional(),
  city: z.lazy(() => SortOrderSchema).optional(),
  county: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  smsNotifications: z.lazy(() => SortOrderSchema).optional(),
  emailNotifications: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  tenantId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const EnumStatusWithAggregatesFilterSchema: z.ZodType<Prisma.EnumStatusWithAggregatesFilter> = z.object({
  equals: z.lazy(() => StatusSchema).optional(),
  in: z.lazy(() => StatusSchema).array().optional(),
  notIn: z.lazy(() => StatusSchema).array().optional(),
  not: z.union([ z.lazy(() => StatusSchema),z.lazy(() => NestedEnumStatusWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumStatusFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumStatusFilterSchema).optional()
}).strict();

export const SpecializationCountOrderByAggregateInputSchema: z.ZodType<Prisma.SpecializationCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  tenantId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const SpecializationMaxOrderByAggregateInputSchema: z.ZodType<Prisma.SpecializationMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  tenantId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const SpecializationMinOrderByAggregateInputSchema: z.ZodType<Prisma.SpecializationMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  tenantId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const EnumEventTypeFilterSchema: z.ZodType<Prisma.EnumEventTypeFilter> = z.object({
  equals: z.lazy(() => EventTypeSchema).optional(),
  in: z.lazy(() => EventTypeSchema).array().optional(),
  notIn: z.lazy(() => EventTypeSchema).array().optional(),
  not: z.union([ z.lazy(() => EventTypeSchema),z.lazy(() => NestedEnumEventTypeFilterSchema) ]).optional(),
}).strict();

export const EnumEventStatusFilterSchema: z.ZodType<Prisma.EnumEventStatusFilter> = z.object({
  equals: z.lazy(() => EventStatusSchema).optional(),
  in: z.lazy(() => EventStatusSchema).array().optional(),
  notIn: z.lazy(() => EventStatusSchema).array().optional(),
  not: z.union([ z.lazy(() => EventStatusSchema),z.lazy(() => NestedEnumEventStatusFilterSchema) ]).optional(),
}).strict();

export const TreatmentListRelationFilterSchema: z.ZodType<Prisma.TreatmentListRelationFilter> = z.object({
  every: z.lazy(() => TreatmentWhereInputSchema).optional(),
  some: z.lazy(() => TreatmentWhereInputSchema).optional(),
  none: z.lazy(() => TreatmentWhereInputSchema).optional()
}).strict();

export const PatientNullableRelationFilterSchema: z.ZodType<Prisma.PatientNullableRelationFilter> = z.object({
  is: z.lazy(() => PatientWhereInputSchema).optional().nullable(),
  isNot: z.lazy(() => PatientWhereInputSchema).optional().nullable()
}).strict();

export const TreatmentOrderByRelationAggregateInputSchema: z.ZodType<Prisma.TreatmentOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const EventCountOrderByAggregateInputSchema: z.ZodType<Prisma.EventCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  title: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  date: z.lazy(() => SortOrderSchema).optional(),
  start: z.lazy(() => SortOrderSchema).optional(),
  end: z.lazy(() => SortOrderSchema).optional(),
  allDay: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  patientId: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  tenantId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const EventMaxOrderByAggregateInputSchema: z.ZodType<Prisma.EventMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  title: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  date: z.lazy(() => SortOrderSchema).optional(),
  start: z.lazy(() => SortOrderSchema).optional(),
  end: z.lazy(() => SortOrderSchema).optional(),
  allDay: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  patientId: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  tenantId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const EventMinOrderByAggregateInputSchema: z.ZodType<Prisma.EventMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  title: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  date: z.lazy(() => SortOrderSchema).optional(),
  start: z.lazy(() => SortOrderSchema).optional(),
  end: z.lazy(() => SortOrderSchema).optional(),
  allDay: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  patientId: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  tenantId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const EnumEventTypeWithAggregatesFilterSchema: z.ZodType<Prisma.EnumEventTypeWithAggregatesFilter> = z.object({
  equals: z.lazy(() => EventTypeSchema).optional(),
  in: z.lazy(() => EventTypeSchema).array().optional(),
  notIn: z.lazy(() => EventTypeSchema).array().optional(),
  not: z.union([ z.lazy(() => EventTypeSchema),z.lazy(() => NestedEnumEventTypeWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumEventTypeFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumEventTypeFilterSchema).optional()
}).strict();

export const EnumEventStatusWithAggregatesFilterSchema: z.ZodType<Prisma.EnumEventStatusWithAggregatesFilter> = z.object({
  equals: z.lazy(() => EventStatusSchema).optional(),
  in: z.lazy(() => EventStatusSchema).array().optional(),
  notIn: z.lazy(() => EventStatusSchema).array().optional(),
  not: z.union([ z.lazy(() => EventStatusSchema),z.lazy(() => NestedEnumEventStatusWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumEventStatusFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumEventStatusFilterSchema).optional()
}).strict();

export const EventRelationFilterSchema: z.ZodType<Prisma.EventRelationFilter> = z.object({
  is: z.lazy(() => EventWhereInputSchema).optional(),
  isNot: z.lazy(() => EventWhereInputSchema).optional()
}).strict();

export const EventActionCountOrderByAggregateInputSchema: z.ZodType<Prisma.EventActionCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  data: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  eventId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const EventActionMaxOrderByAggregateInputSchema: z.ZodType<Prisma.EventActionMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  eventId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const EventActionMinOrderByAggregateInputSchema: z.ZodType<Prisma.EventActionMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  eventId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const StringNullableListFilterSchema: z.ZodType<Prisma.StringNullableListFilter> = z.object({
  equals: z.string().array().optional().nullable(),
  has: z.string().optional().nullable(),
  hasEvery: z.string().array().optional(),
  hasSome: z.string().array().optional(),
  isEmpty: z.boolean().optional()
}).strict();

export const PriceListRelationFilterSchema: z.ZodType<Prisma.PriceListRelationFilter> = z.object({
  every: z.lazy(() => PriceWhereInputSchema).optional(),
  some: z.lazy(() => PriceWhereInputSchema).optional(),
  none: z.lazy(() => PriceWhereInputSchema).optional()
}).strict();

export const ProductCategoryNullableRelationFilterSchema: z.ZodType<Prisma.ProductCategoryNullableRelationFilter> = z.object({
  is: z.lazy(() => ProductCategoryWhereInputSchema).optional().nullable(),
  isNot: z.lazy(() => ProductCategoryWhereInputSchema).optional().nullable()
}).strict();

export const PriceOrderByRelationAggregateInputSchema: z.ZodType<Prisma.PriceOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ProductCountOrderByAggregateInputSchema: z.ZodType<Prisma.ProductCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  price: z.lazy(() => SortOrderSchema).optional(),
  image: z.lazy(() => SortOrderSchema).optional(),
  tags: z.lazy(() => SortOrderSchema).optional(),
  isActive: z.lazy(() => SortOrderSchema).optional(),
  isDeleted: z.lazy(() => SortOrderSchema).optional(),
  categoryId: z.lazy(() => SortOrderSchema).optional(),
  tenantId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ProductAvgOrderByAggregateInputSchema: z.ZodType<Prisma.ProductAvgOrderByAggregateInput> = z.object({
  price: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ProductMaxOrderByAggregateInputSchema: z.ZodType<Prisma.ProductMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  price: z.lazy(() => SortOrderSchema).optional(),
  image: z.lazy(() => SortOrderSchema).optional(),
  isActive: z.lazy(() => SortOrderSchema).optional(),
  isDeleted: z.lazy(() => SortOrderSchema).optional(),
  categoryId: z.lazy(() => SortOrderSchema).optional(),
  tenantId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ProductMinOrderByAggregateInputSchema: z.ZodType<Prisma.ProductMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  price: z.lazy(() => SortOrderSchema).optional(),
  image: z.lazy(() => SortOrderSchema).optional(),
  isActive: z.lazy(() => SortOrderSchema).optional(),
  isDeleted: z.lazy(() => SortOrderSchema).optional(),
  categoryId: z.lazy(() => SortOrderSchema).optional(),
  tenantId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ProductSumOrderByAggregateInputSchema: z.ZodType<Prisma.ProductSumOrderByAggregateInput> = z.object({
  price: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ProductRelationFilterSchema: z.ZodType<Prisma.ProductRelationFilter> = z.object({
  is: z.lazy(() => ProductWhereInputSchema).optional(),
  isNot: z.lazy(() => ProductWhereInputSchema).optional()
}).strict();

export const PriceCountOrderByAggregateInputSchema: z.ZodType<Prisma.PriceCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  value: z.lazy(() => SortOrderSchema).optional(),
  productId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const PriceAvgOrderByAggregateInputSchema: z.ZodType<Prisma.PriceAvgOrderByAggregateInput> = z.object({
  value: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const PriceMaxOrderByAggregateInputSchema: z.ZodType<Prisma.PriceMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  value: z.lazy(() => SortOrderSchema).optional(),
  productId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const PriceMinOrderByAggregateInputSchema: z.ZodType<Prisma.PriceMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  value: z.lazy(() => SortOrderSchema).optional(),
  productId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const PriceSumOrderByAggregateInputSchema: z.ZodType<Prisma.PriceSumOrderByAggregateInput> = z.object({
  value: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ProductCategoryListRelationFilterSchema: z.ZodType<Prisma.ProductCategoryListRelationFilter> = z.object({
  every: z.lazy(() => ProductCategoryWhereInputSchema).optional(),
  some: z.lazy(() => ProductCategoryWhereInputSchema).optional(),
  none: z.lazy(() => ProductCategoryWhereInputSchema).optional()
}).strict();

export const ProductCategoryOrderByRelationAggregateInputSchema: z.ZodType<Prisma.ProductCategoryOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ProductCategoryCountOrderByAggregateInputSchema: z.ZodType<Prisma.ProductCategoryCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  parentCategoryId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ProductCategoryMaxOrderByAggregateInputSchema: z.ZodType<Prisma.ProductCategoryMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  parentCategoryId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ProductCategoryMinOrderByAggregateInputSchema: z.ZodType<Prisma.ProductCategoryMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  parentCategoryId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const EnumTreatmentStatusFilterSchema: z.ZodType<Prisma.EnumTreatmentStatusFilter> = z.object({
  equals: z.lazy(() => TreatmentStatusSchema).optional(),
  in: z.lazy(() => TreatmentStatusSchema).array().optional(),
  notIn: z.lazy(() => TreatmentStatusSchema).array().optional(),
  not: z.union([ z.lazy(() => TreatmentStatusSchema),z.lazy(() => NestedEnumTreatmentStatusFilterSchema) ]).optional(),
}).strict();

export const TreatmentPlanNullableRelationFilterSchema: z.ZodType<Prisma.TreatmentPlanNullableRelationFilter> = z.object({
  is: z.lazy(() => TreatmentPlanWhereInputSchema).optional().nullable(),
  isNot: z.lazy(() => TreatmentPlanWhereInputSchema).optional().nullable()
}).strict();

export const EventNullableRelationFilterSchema: z.ZodType<Prisma.EventNullableRelationFilter> = z.object({
  is: z.lazy(() => EventWhereInputSchema).optional().nullable(),
  isNot: z.lazy(() => EventWhereInputSchema).optional().nullable()
}).strict();

export const TreatmentCountOrderByAggregateInputSchema: z.ZodType<Prisma.TreatmentCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  price: z.lazy(() => SortOrderSchema).optional(),
  toothNumber: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  productId: z.lazy(() => SortOrderSchema).optional(),
  treatmentPlanId: z.lazy(() => SortOrderSchema).optional(),
  eventId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const TreatmentAvgOrderByAggregateInputSchema: z.ZodType<Prisma.TreatmentAvgOrderByAggregateInput> = z.object({
  price: z.lazy(() => SortOrderSchema).optional(),
  toothNumber: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const TreatmentMaxOrderByAggregateInputSchema: z.ZodType<Prisma.TreatmentMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  price: z.lazy(() => SortOrderSchema).optional(),
  toothNumber: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  productId: z.lazy(() => SortOrderSchema).optional(),
  treatmentPlanId: z.lazy(() => SortOrderSchema).optional(),
  eventId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const TreatmentMinOrderByAggregateInputSchema: z.ZodType<Prisma.TreatmentMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  price: z.lazy(() => SortOrderSchema).optional(),
  toothNumber: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  productId: z.lazy(() => SortOrderSchema).optional(),
  treatmentPlanId: z.lazy(() => SortOrderSchema).optional(),
  eventId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const TreatmentSumOrderByAggregateInputSchema: z.ZodType<Prisma.TreatmentSumOrderByAggregateInput> = z.object({
  price: z.lazy(() => SortOrderSchema).optional(),
  toothNumber: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const EnumTreatmentStatusWithAggregatesFilterSchema: z.ZodType<Prisma.EnumTreatmentStatusWithAggregatesFilter> = z.object({
  equals: z.lazy(() => TreatmentStatusSchema).optional(),
  in: z.lazy(() => TreatmentStatusSchema).array().optional(),
  notIn: z.lazy(() => TreatmentStatusSchema).array().optional(),
  not: z.union([ z.lazy(() => TreatmentStatusSchema),z.lazy(() => NestedEnumTreatmentStatusWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumTreatmentStatusFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumTreatmentStatusFilterSchema).optional()
}).strict();

export const PatientRelationFilterSchema: z.ZodType<Prisma.PatientRelationFilter> = z.object({
  is: z.lazy(() => PatientWhereInputSchema).optional(),
  isNot: z.lazy(() => PatientWhereInputSchema).optional()
}).strict();

export const TreatmentPlanCountOrderByAggregateInputSchema: z.ZodType<Prisma.TreatmentPlanCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  isDone: z.lazy(() => SortOrderSchema).optional(),
  patientId: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const TreatmentPlanMaxOrderByAggregateInputSchema: z.ZodType<Prisma.TreatmentPlanMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  isDone: z.lazy(() => SortOrderSchema).optional(),
  patientId: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const TreatmentPlanMinOrderByAggregateInputSchema: z.ZodType<Prisma.TreatmentPlanMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  isDone: z.lazy(() => SortOrderSchema).optional(),
  patientId: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const CityListRelationFilterSchema: z.ZodType<Prisma.CityListRelationFilter> = z.object({
  every: z.lazy(() => CityWhereInputSchema).optional(),
  some: z.lazy(() => CityWhereInputSchema).optional(),
  none: z.lazy(() => CityWhereInputSchema).optional()
}).strict();

export const CityOrderByRelationAggregateInputSchema: z.ZodType<Prisma.CityOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const CountyCountOrderByAggregateInputSchema: z.ZodType<Prisma.CountyCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  code: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const CountyMaxOrderByAggregateInputSchema: z.ZodType<Prisma.CountyMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  code: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const CountyMinOrderByAggregateInputSchema: z.ZodType<Prisma.CountyMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  code: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const CountyRelationFilterSchema: z.ZodType<Prisma.CountyRelationFilter> = z.object({
  is: z.lazy(() => CountyWhereInputSchema).optional(),
  isNot: z.lazy(() => CountyWhereInputSchema).optional()
}).strict();

export const CityCountOrderByAggregateInputSchema: z.ZodType<Prisma.CityCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  countyId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const CityMaxOrderByAggregateInputSchema: z.ZodType<Prisma.CityMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  countyId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const CityMinOrderByAggregateInputSchema: z.ZodType<Prisma.CityMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  countyId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const UserCreateNestedManyWithoutTenantInputSchema: z.ZodType<Prisma.UserCreateNestedManyWithoutTenantInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutTenantInputSchema),z.lazy(() => UserCreateWithoutTenantInputSchema).array(),z.lazy(() => UserUncheckedCreateWithoutTenantInputSchema),z.lazy(() => UserUncheckedCreateWithoutTenantInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => UserCreateOrConnectWithoutTenantInputSchema),z.lazy(() => UserCreateOrConnectWithoutTenantInputSchema).array() ]).optional(),
  createMany: z.lazy(() => UserCreateManyTenantInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => UserWhereUniqueInputSchema),z.lazy(() => UserWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const TenantProfileCreateNestedOneWithoutTenantInputSchema: z.ZodType<Prisma.TenantProfileCreateNestedOneWithoutTenantInput> = z.object({
  create: z.union([ z.lazy(() => TenantProfileCreateWithoutTenantInputSchema),z.lazy(() => TenantProfileUncheckedCreateWithoutTenantInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => TenantProfileCreateOrConnectWithoutTenantInputSchema).optional(),
  connect: z.lazy(() => TenantProfileWhereUniqueInputSchema).optional()
}).strict();

export const SpecializationCreateNestedManyWithoutTenantInputSchema: z.ZodType<Prisma.SpecializationCreateNestedManyWithoutTenantInput> = z.object({
  create: z.union([ z.lazy(() => SpecializationCreateWithoutTenantInputSchema),z.lazy(() => SpecializationCreateWithoutTenantInputSchema).array(),z.lazy(() => SpecializationUncheckedCreateWithoutTenantInputSchema),z.lazy(() => SpecializationUncheckedCreateWithoutTenantInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => SpecializationCreateOrConnectWithoutTenantInputSchema),z.lazy(() => SpecializationCreateOrConnectWithoutTenantInputSchema).array() ]).optional(),
  createMany: z.lazy(() => SpecializationCreateManyTenantInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => SpecializationWhereUniqueInputSchema),z.lazy(() => SpecializationWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ProfileCreateNestedManyWithoutPreferredTenantInputSchema: z.ZodType<Prisma.ProfileCreateNestedManyWithoutPreferredTenantInput> = z.object({
  create: z.union([ z.lazy(() => ProfileCreateWithoutPreferredTenantInputSchema),z.lazy(() => ProfileCreateWithoutPreferredTenantInputSchema).array(),z.lazy(() => ProfileUncheckedCreateWithoutPreferredTenantInputSchema),z.lazy(() => ProfileUncheckedCreateWithoutPreferredTenantInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ProfileCreateOrConnectWithoutPreferredTenantInputSchema),z.lazy(() => ProfileCreateOrConnectWithoutPreferredTenantInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ProfileCreateManyPreferredTenantInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ProfileWhereUniqueInputSchema),z.lazy(() => ProfileWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const PatientCreateNestedManyWithoutTenantInputSchema: z.ZodType<Prisma.PatientCreateNestedManyWithoutTenantInput> = z.object({
  create: z.union([ z.lazy(() => PatientCreateWithoutTenantInputSchema),z.lazy(() => PatientCreateWithoutTenantInputSchema).array(),z.lazy(() => PatientUncheckedCreateWithoutTenantInputSchema),z.lazy(() => PatientUncheckedCreateWithoutTenantInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => PatientCreateOrConnectWithoutTenantInputSchema),z.lazy(() => PatientCreateOrConnectWithoutTenantInputSchema).array() ]).optional(),
  createMany: z.lazy(() => PatientCreateManyTenantInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => PatientWhereUniqueInputSchema),z.lazy(() => PatientWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ProductCreateNestedManyWithoutTenantInputSchema: z.ZodType<Prisma.ProductCreateNestedManyWithoutTenantInput> = z.object({
  create: z.union([ z.lazy(() => ProductCreateWithoutTenantInputSchema),z.lazy(() => ProductCreateWithoutTenantInputSchema).array(),z.lazy(() => ProductUncheckedCreateWithoutTenantInputSchema),z.lazy(() => ProductUncheckedCreateWithoutTenantInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ProductCreateOrConnectWithoutTenantInputSchema),z.lazy(() => ProductCreateOrConnectWithoutTenantInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ProductCreateManyTenantInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ProductWhereUniqueInputSchema),z.lazy(() => ProductWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const EventCreateNestedManyWithoutTenantInputSchema: z.ZodType<Prisma.EventCreateNestedManyWithoutTenantInput> = z.object({
  create: z.union([ z.lazy(() => EventCreateWithoutTenantInputSchema),z.lazy(() => EventCreateWithoutTenantInputSchema).array(),z.lazy(() => EventUncheckedCreateWithoutTenantInputSchema),z.lazy(() => EventUncheckedCreateWithoutTenantInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => EventCreateOrConnectWithoutTenantInputSchema),z.lazy(() => EventCreateOrConnectWithoutTenantInputSchema).array() ]).optional(),
  createMany: z.lazy(() => EventCreateManyTenantInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => EventWhereUniqueInputSchema),z.lazy(() => EventWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const UserUncheckedCreateNestedManyWithoutTenantInputSchema: z.ZodType<Prisma.UserUncheckedCreateNestedManyWithoutTenantInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutTenantInputSchema),z.lazy(() => UserCreateWithoutTenantInputSchema).array(),z.lazy(() => UserUncheckedCreateWithoutTenantInputSchema),z.lazy(() => UserUncheckedCreateWithoutTenantInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => UserCreateOrConnectWithoutTenantInputSchema),z.lazy(() => UserCreateOrConnectWithoutTenantInputSchema).array() ]).optional(),
  createMany: z.lazy(() => UserCreateManyTenantInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => UserWhereUniqueInputSchema),z.lazy(() => UserWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const SpecializationUncheckedCreateNestedManyWithoutTenantInputSchema: z.ZodType<Prisma.SpecializationUncheckedCreateNestedManyWithoutTenantInput> = z.object({
  create: z.union([ z.lazy(() => SpecializationCreateWithoutTenantInputSchema),z.lazy(() => SpecializationCreateWithoutTenantInputSchema).array(),z.lazy(() => SpecializationUncheckedCreateWithoutTenantInputSchema),z.lazy(() => SpecializationUncheckedCreateWithoutTenantInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => SpecializationCreateOrConnectWithoutTenantInputSchema),z.lazy(() => SpecializationCreateOrConnectWithoutTenantInputSchema).array() ]).optional(),
  createMany: z.lazy(() => SpecializationCreateManyTenantInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => SpecializationWhereUniqueInputSchema),z.lazy(() => SpecializationWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ProfileUncheckedCreateNestedManyWithoutPreferredTenantInputSchema: z.ZodType<Prisma.ProfileUncheckedCreateNestedManyWithoutPreferredTenantInput> = z.object({
  create: z.union([ z.lazy(() => ProfileCreateWithoutPreferredTenantInputSchema),z.lazy(() => ProfileCreateWithoutPreferredTenantInputSchema).array(),z.lazy(() => ProfileUncheckedCreateWithoutPreferredTenantInputSchema),z.lazy(() => ProfileUncheckedCreateWithoutPreferredTenantInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ProfileCreateOrConnectWithoutPreferredTenantInputSchema),z.lazy(() => ProfileCreateOrConnectWithoutPreferredTenantInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ProfileCreateManyPreferredTenantInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ProfileWhereUniqueInputSchema),z.lazy(() => ProfileWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const PatientUncheckedCreateNestedManyWithoutTenantInputSchema: z.ZodType<Prisma.PatientUncheckedCreateNestedManyWithoutTenantInput> = z.object({
  create: z.union([ z.lazy(() => PatientCreateWithoutTenantInputSchema),z.lazy(() => PatientCreateWithoutTenantInputSchema).array(),z.lazy(() => PatientUncheckedCreateWithoutTenantInputSchema),z.lazy(() => PatientUncheckedCreateWithoutTenantInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => PatientCreateOrConnectWithoutTenantInputSchema),z.lazy(() => PatientCreateOrConnectWithoutTenantInputSchema).array() ]).optional(),
  createMany: z.lazy(() => PatientCreateManyTenantInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => PatientWhereUniqueInputSchema),z.lazy(() => PatientWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ProductUncheckedCreateNestedManyWithoutTenantInputSchema: z.ZodType<Prisma.ProductUncheckedCreateNestedManyWithoutTenantInput> = z.object({
  create: z.union([ z.lazy(() => ProductCreateWithoutTenantInputSchema),z.lazy(() => ProductCreateWithoutTenantInputSchema).array(),z.lazy(() => ProductUncheckedCreateWithoutTenantInputSchema),z.lazy(() => ProductUncheckedCreateWithoutTenantInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ProductCreateOrConnectWithoutTenantInputSchema),z.lazy(() => ProductCreateOrConnectWithoutTenantInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ProductCreateManyTenantInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ProductWhereUniqueInputSchema),z.lazy(() => ProductWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const EventUncheckedCreateNestedManyWithoutTenantInputSchema: z.ZodType<Prisma.EventUncheckedCreateNestedManyWithoutTenantInput> = z.object({
  create: z.union([ z.lazy(() => EventCreateWithoutTenantInputSchema),z.lazy(() => EventCreateWithoutTenantInputSchema).array(),z.lazy(() => EventUncheckedCreateWithoutTenantInputSchema),z.lazy(() => EventUncheckedCreateWithoutTenantInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => EventCreateOrConnectWithoutTenantInputSchema),z.lazy(() => EventCreateOrConnectWithoutTenantInputSchema).array() ]).optional(),
  createMany: z.lazy(() => EventCreateManyTenantInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => EventWhereUniqueInputSchema),z.lazy(() => EventWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const StringFieldUpdateOperationsInputSchema: z.ZodType<Prisma.StringFieldUpdateOperationsInput> = z.object({
  set: z.string().optional()
}).strict();

export const NullableDateTimeFieldUpdateOperationsInputSchema: z.ZodType<Prisma.NullableDateTimeFieldUpdateOperationsInput> = z.object({
  set: z.coerce.date().optional().nullable()
}).strict();

export const DateTimeFieldUpdateOperationsInputSchema: z.ZodType<Prisma.DateTimeFieldUpdateOperationsInput> = z.object({
  set: z.coerce.date().optional()
}).strict();

export const UserUpdateManyWithoutTenantNestedInputSchema: z.ZodType<Prisma.UserUpdateManyWithoutTenantNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutTenantInputSchema),z.lazy(() => UserCreateWithoutTenantInputSchema).array(),z.lazy(() => UserUncheckedCreateWithoutTenantInputSchema),z.lazy(() => UserUncheckedCreateWithoutTenantInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => UserCreateOrConnectWithoutTenantInputSchema),z.lazy(() => UserCreateOrConnectWithoutTenantInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => UserUpsertWithWhereUniqueWithoutTenantInputSchema),z.lazy(() => UserUpsertWithWhereUniqueWithoutTenantInputSchema).array() ]).optional(),
  createMany: z.lazy(() => UserCreateManyTenantInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => UserWhereUniqueInputSchema),z.lazy(() => UserWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => UserWhereUniqueInputSchema),z.lazy(() => UserWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => UserWhereUniqueInputSchema),z.lazy(() => UserWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => UserWhereUniqueInputSchema),z.lazy(() => UserWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => UserUpdateWithWhereUniqueWithoutTenantInputSchema),z.lazy(() => UserUpdateWithWhereUniqueWithoutTenantInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => UserUpdateManyWithWhereWithoutTenantInputSchema),z.lazy(() => UserUpdateManyWithWhereWithoutTenantInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => UserScalarWhereInputSchema),z.lazy(() => UserScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const TenantProfileUpdateOneRequiredWithoutTenantNestedInputSchema: z.ZodType<Prisma.TenantProfileUpdateOneRequiredWithoutTenantNestedInput> = z.object({
  create: z.union([ z.lazy(() => TenantProfileCreateWithoutTenantInputSchema),z.lazy(() => TenantProfileUncheckedCreateWithoutTenantInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => TenantProfileCreateOrConnectWithoutTenantInputSchema).optional(),
  upsert: z.lazy(() => TenantProfileUpsertWithoutTenantInputSchema).optional(),
  connect: z.lazy(() => TenantProfileWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => TenantProfileUpdateToOneWithWhereWithoutTenantInputSchema),z.lazy(() => TenantProfileUpdateWithoutTenantInputSchema),z.lazy(() => TenantProfileUncheckedUpdateWithoutTenantInputSchema) ]).optional(),
}).strict();

export const SpecializationUpdateManyWithoutTenantNestedInputSchema: z.ZodType<Prisma.SpecializationUpdateManyWithoutTenantNestedInput> = z.object({
  create: z.union([ z.lazy(() => SpecializationCreateWithoutTenantInputSchema),z.lazy(() => SpecializationCreateWithoutTenantInputSchema).array(),z.lazy(() => SpecializationUncheckedCreateWithoutTenantInputSchema),z.lazy(() => SpecializationUncheckedCreateWithoutTenantInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => SpecializationCreateOrConnectWithoutTenantInputSchema),z.lazy(() => SpecializationCreateOrConnectWithoutTenantInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => SpecializationUpsertWithWhereUniqueWithoutTenantInputSchema),z.lazy(() => SpecializationUpsertWithWhereUniqueWithoutTenantInputSchema).array() ]).optional(),
  createMany: z.lazy(() => SpecializationCreateManyTenantInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => SpecializationWhereUniqueInputSchema),z.lazy(() => SpecializationWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => SpecializationWhereUniqueInputSchema),z.lazy(() => SpecializationWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => SpecializationWhereUniqueInputSchema),z.lazy(() => SpecializationWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => SpecializationWhereUniqueInputSchema),z.lazy(() => SpecializationWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => SpecializationUpdateWithWhereUniqueWithoutTenantInputSchema),z.lazy(() => SpecializationUpdateWithWhereUniqueWithoutTenantInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => SpecializationUpdateManyWithWhereWithoutTenantInputSchema),z.lazy(() => SpecializationUpdateManyWithWhereWithoutTenantInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => SpecializationScalarWhereInputSchema),z.lazy(() => SpecializationScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ProfileUpdateManyWithoutPreferredTenantNestedInputSchema: z.ZodType<Prisma.ProfileUpdateManyWithoutPreferredTenantNestedInput> = z.object({
  create: z.union([ z.lazy(() => ProfileCreateWithoutPreferredTenantInputSchema),z.lazy(() => ProfileCreateWithoutPreferredTenantInputSchema).array(),z.lazy(() => ProfileUncheckedCreateWithoutPreferredTenantInputSchema),z.lazy(() => ProfileUncheckedCreateWithoutPreferredTenantInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ProfileCreateOrConnectWithoutPreferredTenantInputSchema),z.lazy(() => ProfileCreateOrConnectWithoutPreferredTenantInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ProfileUpsertWithWhereUniqueWithoutPreferredTenantInputSchema),z.lazy(() => ProfileUpsertWithWhereUniqueWithoutPreferredTenantInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ProfileCreateManyPreferredTenantInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ProfileWhereUniqueInputSchema),z.lazy(() => ProfileWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ProfileWhereUniqueInputSchema),z.lazy(() => ProfileWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ProfileWhereUniqueInputSchema),z.lazy(() => ProfileWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ProfileWhereUniqueInputSchema),z.lazy(() => ProfileWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ProfileUpdateWithWhereUniqueWithoutPreferredTenantInputSchema),z.lazy(() => ProfileUpdateWithWhereUniqueWithoutPreferredTenantInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ProfileUpdateManyWithWhereWithoutPreferredTenantInputSchema),z.lazy(() => ProfileUpdateManyWithWhereWithoutPreferredTenantInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ProfileScalarWhereInputSchema),z.lazy(() => ProfileScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const PatientUpdateManyWithoutTenantNestedInputSchema: z.ZodType<Prisma.PatientUpdateManyWithoutTenantNestedInput> = z.object({
  create: z.union([ z.lazy(() => PatientCreateWithoutTenantInputSchema),z.lazy(() => PatientCreateWithoutTenantInputSchema).array(),z.lazy(() => PatientUncheckedCreateWithoutTenantInputSchema),z.lazy(() => PatientUncheckedCreateWithoutTenantInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => PatientCreateOrConnectWithoutTenantInputSchema),z.lazy(() => PatientCreateOrConnectWithoutTenantInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => PatientUpsertWithWhereUniqueWithoutTenantInputSchema),z.lazy(() => PatientUpsertWithWhereUniqueWithoutTenantInputSchema).array() ]).optional(),
  createMany: z.lazy(() => PatientCreateManyTenantInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => PatientWhereUniqueInputSchema),z.lazy(() => PatientWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => PatientWhereUniqueInputSchema),z.lazy(() => PatientWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => PatientWhereUniqueInputSchema),z.lazy(() => PatientWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => PatientWhereUniqueInputSchema),z.lazy(() => PatientWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => PatientUpdateWithWhereUniqueWithoutTenantInputSchema),z.lazy(() => PatientUpdateWithWhereUniqueWithoutTenantInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => PatientUpdateManyWithWhereWithoutTenantInputSchema),z.lazy(() => PatientUpdateManyWithWhereWithoutTenantInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => PatientScalarWhereInputSchema),z.lazy(() => PatientScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ProductUpdateManyWithoutTenantNestedInputSchema: z.ZodType<Prisma.ProductUpdateManyWithoutTenantNestedInput> = z.object({
  create: z.union([ z.lazy(() => ProductCreateWithoutTenantInputSchema),z.lazy(() => ProductCreateWithoutTenantInputSchema).array(),z.lazy(() => ProductUncheckedCreateWithoutTenantInputSchema),z.lazy(() => ProductUncheckedCreateWithoutTenantInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ProductCreateOrConnectWithoutTenantInputSchema),z.lazy(() => ProductCreateOrConnectWithoutTenantInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ProductUpsertWithWhereUniqueWithoutTenantInputSchema),z.lazy(() => ProductUpsertWithWhereUniqueWithoutTenantInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ProductCreateManyTenantInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ProductWhereUniqueInputSchema),z.lazy(() => ProductWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ProductWhereUniqueInputSchema),z.lazy(() => ProductWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ProductWhereUniqueInputSchema),z.lazy(() => ProductWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ProductWhereUniqueInputSchema),z.lazy(() => ProductWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ProductUpdateWithWhereUniqueWithoutTenantInputSchema),z.lazy(() => ProductUpdateWithWhereUniqueWithoutTenantInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ProductUpdateManyWithWhereWithoutTenantInputSchema),z.lazy(() => ProductUpdateManyWithWhereWithoutTenantInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ProductScalarWhereInputSchema),z.lazy(() => ProductScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const EventUpdateManyWithoutTenantNestedInputSchema: z.ZodType<Prisma.EventUpdateManyWithoutTenantNestedInput> = z.object({
  create: z.union([ z.lazy(() => EventCreateWithoutTenantInputSchema),z.lazy(() => EventCreateWithoutTenantInputSchema).array(),z.lazy(() => EventUncheckedCreateWithoutTenantInputSchema),z.lazy(() => EventUncheckedCreateWithoutTenantInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => EventCreateOrConnectWithoutTenantInputSchema),z.lazy(() => EventCreateOrConnectWithoutTenantInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => EventUpsertWithWhereUniqueWithoutTenantInputSchema),z.lazy(() => EventUpsertWithWhereUniqueWithoutTenantInputSchema).array() ]).optional(),
  createMany: z.lazy(() => EventCreateManyTenantInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => EventWhereUniqueInputSchema),z.lazy(() => EventWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => EventWhereUniqueInputSchema),z.lazy(() => EventWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => EventWhereUniqueInputSchema),z.lazy(() => EventWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => EventWhereUniqueInputSchema),z.lazy(() => EventWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => EventUpdateWithWhereUniqueWithoutTenantInputSchema),z.lazy(() => EventUpdateWithWhereUniqueWithoutTenantInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => EventUpdateManyWithWhereWithoutTenantInputSchema),z.lazy(() => EventUpdateManyWithWhereWithoutTenantInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => EventScalarWhereInputSchema),z.lazy(() => EventScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const UserUncheckedUpdateManyWithoutTenantNestedInputSchema: z.ZodType<Prisma.UserUncheckedUpdateManyWithoutTenantNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutTenantInputSchema),z.lazy(() => UserCreateWithoutTenantInputSchema).array(),z.lazy(() => UserUncheckedCreateWithoutTenantInputSchema),z.lazy(() => UserUncheckedCreateWithoutTenantInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => UserCreateOrConnectWithoutTenantInputSchema),z.lazy(() => UserCreateOrConnectWithoutTenantInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => UserUpsertWithWhereUniqueWithoutTenantInputSchema),z.lazy(() => UserUpsertWithWhereUniqueWithoutTenantInputSchema).array() ]).optional(),
  createMany: z.lazy(() => UserCreateManyTenantInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => UserWhereUniqueInputSchema),z.lazy(() => UserWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => UserWhereUniqueInputSchema),z.lazy(() => UserWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => UserWhereUniqueInputSchema),z.lazy(() => UserWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => UserWhereUniqueInputSchema),z.lazy(() => UserWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => UserUpdateWithWhereUniqueWithoutTenantInputSchema),z.lazy(() => UserUpdateWithWhereUniqueWithoutTenantInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => UserUpdateManyWithWhereWithoutTenantInputSchema),z.lazy(() => UserUpdateManyWithWhereWithoutTenantInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => UserScalarWhereInputSchema),z.lazy(() => UserScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const SpecializationUncheckedUpdateManyWithoutTenantNestedInputSchema: z.ZodType<Prisma.SpecializationUncheckedUpdateManyWithoutTenantNestedInput> = z.object({
  create: z.union([ z.lazy(() => SpecializationCreateWithoutTenantInputSchema),z.lazy(() => SpecializationCreateWithoutTenantInputSchema).array(),z.lazy(() => SpecializationUncheckedCreateWithoutTenantInputSchema),z.lazy(() => SpecializationUncheckedCreateWithoutTenantInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => SpecializationCreateOrConnectWithoutTenantInputSchema),z.lazy(() => SpecializationCreateOrConnectWithoutTenantInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => SpecializationUpsertWithWhereUniqueWithoutTenantInputSchema),z.lazy(() => SpecializationUpsertWithWhereUniqueWithoutTenantInputSchema).array() ]).optional(),
  createMany: z.lazy(() => SpecializationCreateManyTenantInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => SpecializationWhereUniqueInputSchema),z.lazy(() => SpecializationWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => SpecializationWhereUniqueInputSchema),z.lazy(() => SpecializationWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => SpecializationWhereUniqueInputSchema),z.lazy(() => SpecializationWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => SpecializationWhereUniqueInputSchema),z.lazy(() => SpecializationWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => SpecializationUpdateWithWhereUniqueWithoutTenantInputSchema),z.lazy(() => SpecializationUpdateWithWhereUniqueWithoutTenantInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => SpecializationUpdateManyWithWhereWithoutTenantInputSchema),z.lazy(() => SpecializationUpdateManyWithWhereWithoutTenantInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => SpecializationScalarWhereInputSchema),z.lazy(() => SpecializationScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ProfileUncheckedUpdateManyWithoutPreferredTenantNestedInputSchema: z.ZodType<Prisma.ProfileUncheckedUpdateManyWithoutPreferredTenantNestedInput> = z.object({
  create: z.union([ z.lazy(() => ProfileCreateWithoutPreferredTenantInputSchema),z.lazy(() => ProfileCreateWithoutPreferredTenantInputSchema).array(),z.lazy(() => ProfileUncheckedCreateWithoutPreferredTenantInputSchema),z.lazy(() => ProfileUncheckedCreateWithoutPreferredTenantInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ProfileCreateOrConnectWithoutPreferredTenantInputSchema),z.lazy(() => ProfileCreateOrConnectWithoutPreferredTenantInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ProfileUpsertWithWhereUniqueWithoutPreferredTenantInputSchema),z.lazy(() => ProfileUpsertWithWhereUniqueWithoutPreferredTenantInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ProfileCreateManyPreferredTenantInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ProfileWhereUniqueInputSchema),z.lazy(() => ProfileWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ProfileWhereUniqueInputSchema),z.lazy(() => ProfileWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ProfileWhereUniqueInputSchema),z.lazy(() => ProfileWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ProfileWhereUniqueInputSchema),z.lazy(() => ProfileWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ProfileUpdateWithWhereUniqueWithoutPreferredTenantInputSchema),z.lazy(() => ProfileUpdateWithWhereUniqueWithoutPreferredTenantInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ProfileUpdateManyWithWhereWithoutPreferredTenantInputSchema),z.lazy(() => ProfileUpdateManyWithWhereWithoutPreferredTenantInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ProfileScalarWhereInputSchema),z.lazy(() => ProfileScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const PatientUncheckedUpdateManyWithoutTenantNestedInputSchema: z.ZodType<Prisma.PatientUncheckedUpdateManyWithoutTenantNestedInput> = z.object({
  create: z.union([ z.lazy(() => PatientCreateWithoutTenantInputSchema),z.lazy(() => PatientCreateWithoutTenantInputSchema).array(),z.lazy(() => PatientUncheckedCreateWithoutTenantInputSchema),z.lazy(() => PatientUncheckedCreateWithoutTenantInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => PatientCreateOrConnectWithoutTenantInputSchema),z.lazy(() => PatientCreateOrConnectWithoutTenantInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => PatientUpsertWithWhereUniqueWithoutTenantInputSchema),z.lazy(() => PatientUpsertWithWhereUniqueWithoutTenantInputSchema).array() ]).optional(),
  createMany: z.lazy(() => PatientCreateManyTenantInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => PatientWhereUniqueInputSchema),z.lazy(() => PatientWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => PatientWhereUniqueInputSchema),z.lazy(() => PatientWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => PatientWhereUniqueInputSchema),z.lazy(() => PatientWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => PatientWhereUniqueInputSchema),z.lazy(() => PatientWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => PatientUpdateWithWhereUniqueWithoutTenantInputSchema),z.lazy(() => PatientUpdateWithWhereUniqueWithoutTenantInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => PatientUpdateManyWithWhereWithoutTenantInputSchema),z.lazy(() => PatientUpdateManyWithWhereWithoutTenantInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => PatientScalarWhereInputSchema),z.lazy(() => PatientScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ProductUncheckedUpdateManyWithoutTenantNestedInputSchema: z.ZodType<Prisma.ProductUncheckedUpdateManyWithoutTenantNestedInput> = z.object({
  create: z.union([ z.lazy(() => ProductCreateWithoutTenantInputSchema),z.lazy(() => ProductCreateWithoutTenantInputSchema).array(),z.lazy(() => ProductUncheckedCreateWithoutTenantInputSchema),z.lazy(() => ProductUncheckedCreateWithoutTenantInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ProductCreateOrConnectWithoutTenantInputSchema),z.lazy(() => ProductCreateOrConnectWithoutTenantInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ProductUpsertWithWhereUniqueWithoutTenantInputSchema),z.lazy(() => ProductUpsertWithWhereUniqueWithoutTenantInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ProductCreateManyTenantInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ProductWhereUniqueInputSchema),z.lazy(() => ProductWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ProductWhereUniqueInputSchema),z.lazy(() => ProductWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ProductWhereUniqueInputSchema),z.lazy(() => ProductWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ProductWhereUniqueInputSchema),z.lazy(() => ProductWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ProductUpdateWithWhereUniqueWithoutTenantInputSchema),z.lazy(() => ProductUpdateWithWhereUniqueWithoutTenantInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ProductUpdateManyWithWhereWithoutTenantInputSchema),z.lazy(() => ProductUpdateManyWithWhereWithoutTenantInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ProductScalarWhereInputSchema),z.lazy(() => ProductScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const EventUncheckedUpdateManyWithoutTenantNestedInputSchema: z.ZodType<Prisma.EventUncheckedUpdateManyWithoutTenantNestedInput> = z.object({
  create: z.union([ z.lazy(() => EventCreateWithoutTenantInputSchema),z.lazy(() => EventCreateWithoutTenantInputSchema).array(),z.lazy(() => EventUncheckedCreateWithoutTenantInputSchema),z.lazy(() => EventUncheckedCreateWithoutTenantInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => EventCreateOrConnectWithoutTenantInputSchema),z.lazy(() => EventCreateOrConnectWithoutTenantInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => EventUpsertWithWhereUniqueWithoutTenantInputSchema),z.lazy(() => EventUpsertWithWhereUniqueWithoutTenantInputSchema).array() ]).optional(),
  createMany: z.lazy(() => EventCreateManyTenantInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => EventWhereUniqueInputSchema),z.lazy(() => EventWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => EventWhereUniqueInputSchema),z.lazy(() => EventWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => EventWhereUniqueInputSchema),z.lazy(() => EventWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => EventWhereUniqueInputSchema),z.lazy(() => EventWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => EventUpdateWithWhereUniqueWithoutTenantInputSchema),z.lazy(() => EventUpdateWithWhereUniqueWithoutTenantInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => EventUpdateManyWithWhereWithoutTenantInputSchema),z.lazy(() => EventUpdateManyWithWhereWithoutTenantInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => EventScalarWhereInputSchema),z.lazy(() => EventScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const PlanCreateNestedOneWithoutTenantProfilesInputSchema: z.ZodType<Prisma.PlanCreateNestedOneWithoutTenantProfilesInput> = z.object({
  create: z.union([ z.lazy(() => PlanCreateWithoutTenantProfilesInputSchema),z.lazy(() => PlanUncheckedCreateWithoutTenantProfilesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => PlanCreateOrConnectWithoutTenantProfilesInputSchema).optional(),
  connect: z.lazy(() => PlanWhereUniqueInputSchema).optional()
}).strict();

export const TenantCreateNestedOneWithoutProfileInputSchema: z.ZodType<Prisma.TenantCreateNestedOneWithoutProfileInput> = z.object({
  create: z.union([ z.lazy(() => TenantCreateWithoutProfileInputSchema),z.lazy(() => TenantUncheckedCreateWithoutProfileInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => TenantCreateOrConnectWithoutProfileInputSchema).optional(),
  connect: z.lazy(() => TenantWhereUniqueInputSchema).optional()
}).strict();

export const TenantUncheckedCreateNestedOneWithoutProfileInputSchema: z.ZodType<Prisma.TenantUncheckedCreateNestedOneWithoutProfileInput> = z.object({
  create: z.union([ z.lazy(() => TenantCreateWithoutProfileInputSchema),z.lazy(() => TenantUncheckedCreateWithoutProfileInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => TenantCreateOrConnectWithoutProfileInputSchema).optional(),
  connect: z.lazy(() => TenantWhereUniqueInputSchema).optional()
}).strict();

export const NullableStringFieldUpdateOperationsInputSchema: z.ZodType<Prisma.NullableStringFieldUpdateOperationsInput> = z.object({
  set: z.string().optional().nullable()
}).strict();

export const BoolFieldUpdateOperationsInputSchema: z.ZodType<Prisma.BoolFieldUpdateOperationsInput> = z.object({
  set: z.boolean().optional()
}).strict();

export const PlanUpdateOneRequiredWithoutTenantProfilesNestedInputSchema: z.ZodType<Prisma.PlanUpdateOneRequiredWithoutTenantProfilesNestedInput> = z.object({
  create: z.union([ z.lazy(() => PlanCreateWithoutTenantProfilesInputSchema),z.lazy(() => PlanUncheckedCreateWithoutTenantProfilesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => PlanCreateOrConnectWithoutTenantProfilesInputSchema).optional(),
  upsert: z.lazy(() => PlanUpsertWithoutTenantProfilesInputSchema).optional(),
  connect: z.lazy(() => PlanWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => PlanUpdateToOneWithWhereWithoutTenantProfilesInputSchema),z.lazy(() => PlanUpdateWithoutTenantProfilesInputSchema),z.lazy(() => PlanUncheckedUpdateWithoutTenantProfilesInputSchema) ]).optional(),
}).strict();

export const TenantUpdateOneWithoutProfileNestedInputSchema: z.ZodType<Prisma.TenantUpdateOneWithoutProfileNestedInput> = z.object({
  create: z.union([ z.lazy(() => TenantCreateWithoutProfileInputSchema),z.lazy(() => TenantUncheckedCreateWithoutProfileInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => TenantCreateOrConnectWithoutProfileInputSchema).optional(),
  upsert: z.lazy(() => TenantUpsertWithoutProfileInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => TenantWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => TenantWhereInputSchema) ]).optional(),
  connect: z.lazy(() => TenantWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => TenantUpdateToOneWithWhereWithoutProfileInputSchema),z.lazy(() => TenantUpdateWithoutProfileInputSchema),z.lazy(() => TenantUncheckedUpdateWithoutProfileInputSchema) ]).optional(),
}).strict();

export const TenantUncheckedUpdateOneWithoutProfileNestedInputSchema: z.ZodType<Prisma.TenantUncheckedUpdateOneWithoutProfileNestedInput> = z.object({
  create: z.union([ z.lazy(() => TenantCreateWithoutProfileInputSchema),z.lazy(() => TenantUncheckedCreateWithoutProfileInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => TenantCreateOrConnectWithoutProfileInputSchema).optional(),
  upsert: z.lazy(() => TenantUpsertWithoutProfileInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => TenantWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => TenantWhereInputSchema) ]).optional(),
  connect: z.lazy(() => TenantWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => TenantUpdateToOneWithWhereWithoutProfileInputSchema),z.lazy(() => TenantUpdateWithoutProfileInputSchema),z.lazy(() => TenantUncheckedUpdateWithoutProfileInputSchema) ]).optional(),
}).strict();

export const SpecializationCreateNestedOneWithoutUsersInputSchema: z.ZodType<Prisma.SpecializationCreateNestedOneWithoutUsersInput> = z.object({
  create: z.union([ z.lazy(() => SpecializationCreateWithoutUsersInputSchema),z.lazy(() => SpecializationUncheckedCreateWithoutUsersInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => SpecializationCreateOrConnectWithoutUsersInputSchema).optional(),
  connect: z.lazy(() => SpecializationWhereUniqueInputSchema).optional()
}).strict();

export const ProfileCreateNestedOneWithoutUsersInputSchema: z.ZodType<Prisma.ProfileCreateNestedOneWithoutUsersInput> = z.object({
  create: z.union([ z.lazy(() => ProfileCreateWithoutUsersInputSchema),z.lazy(() => ProfileUncheckedCreateWithoutUsersInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ProfileCreateOrConnectWithoutUsersInputSchema).optional(),
  connect: z.lazy(() => ProfileWhereUniqueInputSchema).optional()
}).strict();

export const TenantCreateNestedOneWithoutUsersInputSchema: z.ZodType<Prisma.TenantCreateNestedOneWithoutUsersInput> = z.object({
  create: z.union([ z.lazy(() => TenantCreateWithoutUsersInputSchema),z.lazy(() => TenantUncheckedCreateWithoutUsersInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => TenantCreateOrConnectWithoutUsersInputSchema).optional(),
  connect: z.lazy(() => TenantWhereUniqueInputSchema).optional()
}).strict();

export const InvitationCreateNestedOneWithoutUserInputSchema: z.ZodType<Prisma.InvitationCreateNestedOneWithoutUserInput> = z.object({
  create: z.union([ z.lazy(() => InvitationCreateWithoutUserInputSchema),z.lazy(() => InvitationUncheckedCreateWithoutUserInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => InvitationCreateOrConnectWithoutUserInputSchema).optional(),
  connect: z.lazy(() => InvitationWhereUniqueInputSchema).optional()
}).strict();

export const TokenCreateNestedManyWithoutUserInputSchema: z.ZodType<Prisma.TokenCreateNestedManyWithoutUserInput> = z.object({
  create: z.union([ z.lazy(() => TokenCreateWithoutUserInputSchema),z.lazy(() => TokenCreateWithoutUserInputSchema).array(),z.lazy(() => TokenUncheckedCreateWithoutUserInputSchema),z.lazy(() => TokenUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TokenCreateOrConnectWithoutUserInputSchema),z.lazy(() => TokenCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TokenCreateManyUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => TokenWhereUniqueInputSchema),z.lazy(() => TokenWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const PatientCreateNestedManyWithoutUserInputSchema: z.ZodType<Prisma.PatientCreateNestedManyWithoutUserInput> = z.object({
  create: z.union([ z.lazy(() => PatientCreateWithoutUserInputSchema),z.lazy(() => PatientCreateWithoutUserInputSchema).array(),z.lazy(() => PatientUncheckedCreateWithoutUserInputSchema),z.lazy(() => PatientUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => PatientCreateOrConnectWithoutUserInputSchema),z.lazy(() => PatientCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => PatientCreateManyUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => PatientWhereUniqueInputSchema),z.lazy(() => PatientWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const EventCreateNestedManyWithoutUserInputSchema: z.ZodType<Prisma.EventCreateNestedManyWithoutUserInput> = z.object({
  create: z.union([ z.lazy(() => EventCreateWithoutUserInputSchema),z.lazy(() => EventCreateWithoutUserInputSchema).array(),z.lazy(() => EventUncheckedCreateWithoutUserInputSchema),z.lazy(() => EventUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => EventCreateOrConnectWithoutUserInputSchema),z.lazy(() => EventCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => EventCreateManyUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => EventWhereUniqueInputSchema),z.lazy(() => EventWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const EventActionCreateNestedManyWithoutUserInputSchema: z.ZodType<Prisma.EventActionCreateNestedManyWithoutUserInput> = z.object({
  create: z.union([ z.lazy(() => EventActionCreateWithoutUserInputSchema),z.lazy(() => EventActionCreateWithoutUserInputSchema).array(),z.lazy(() => EventActionUncheckedCreateWithoutUserInputSchema),z.lazy(() => EventActionUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => EventActionCreateOrConnectWithoutUserInputSchema),z.lazy(() => EventActionCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => EventActionCreateManyUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => EventActionWhereUniqueInputSchema),z.lazy(() => EventActionWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const TreatmentPlanCreateNestedManyWithoutUserInputSchema: z.ZodType<Prisma.TreatmentPlanCreateNestedManyWithoutUserInput> = z.object({
  create: z.union([ z.lazy(() => TreatmentPlanCreateWithoutUserInputSchema),z.lazy(() => TreatmentPlanCreateWithoutUserInputSchema).array(),z.lazy(() => TreatmentPlanUncheckedCreateWithoutUserInputSchema),z.lazy(() => TreatmentPlanUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TreatmentPlanCreateOrConnectWithoutUserInputSchema),z.lazy(() => TreatmentPlanCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TreatmentPlanCreateManyUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => TreatmentPlanWhereUniqueInputSchema),z.lazy(() => TreatmentPlanWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const InvitationCreateNestedManyWithoutInvitedByInputSchema: z.ZodType<Prisma.InvitationCreateNestedManyWithoutInvitedByInput> = z.object({
  create: z.union([ z.lazy(() => InvitationCreateWithoutInvitedByInputSchema),z.lazy(() => InvitationCreateWithoutInvitedByInputSchema).array(),z.lazy(() => InvitationUncheckedCreateWithoutInvitedByInputSchema),z.lazy(() => InvitationUncheckedCreateWithoutInvitedByInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => InvitationCreateOrConnectWithoutInvitedByInputSchema),z.lazy(() => InvitationCreateOrConnectWithoutInvitedByInputSchema).array() ]).optional(),
  createMany: z.lazy(() => InvitationCreateManyInvitedByInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => InvitationWhereUniqueInputSchema),z.lazy(() => InvitationWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const InvitationUncheckedCreateNestedOneWithoutUserInputSchema: z.ZodType<Prisma.InvitationUncheckedCreateNestedOneWithoutUserInput> = z.object({
  create: z.union([ z.lazy(() => InvitationCreateWithoutUserInputSchema),z.lazy(() => InvitationUncheckedCreateWithoutUserInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => InvitationCreateOrConnectWithoutUserInputSchema).optional(),
  connect: z.lazy(() => InvitationWhereUniqueInputSchema).optional()
}).strict();

export const TokenUncheckedCreateNestedManyWithoutUserInputSchema: z.ZodType<Prisma.TokenUncheckedCreateNestedManyWithoutUserInput> = z.object({
  create: z.union([ z.lazy(() => TokenCreateWithoutUserInputSchema),z.lazy(() => TokenCreateWithoutUserInputSchema).array(),z.lazy(() => TokenUncheckedCreateWithoutUserInputSchema),z.lazy(() => TokenUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TokenCreateOrConnectWithoutUserInputSchema),z.lazy(() => TokenCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TokenCreateManyUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => TokenWhereUniqueInputSchema),z.lazy(() => TokenWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const PatientUncheckedCreateNestedManyWithoutUserInputSchema: z.ZodType<Prisma.PatientUncheckedCreateNestedManyWithoutUserInput> = z.object({
  create: z.union([ z.lazy(() => PatientCreateWithoutUserInputSchema),z.lazy(() => PatientCreateWithoutUserInputSchema).array(),z.lazy(() => PatientUncheckedCreateWithoutUserInputSchema),z.lazy(() => PatientUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => PatientCreateOrConnectWithoutUserInputSchema),z.lazy(() => PatientCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => PatientCreateManyUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => PatientWhereUniqueInputSchema),z.lazy(() => PatientWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const EventUncheckedCreateNestedManyWithoutUserInputSchema: z.ZodType<Prisma.EventUncheckedCreateNestedManyWithoutUserInput> = z.object({
  create: z.union([ z.lazy(() => EventCreateWithoutUserInputSchema),z.lazy(() => EventCreateWithoutUserInputSchema).array(),z.lazy(() => EventUncheckedCreateWithoutUserInputSchema),z.lazy(() => EventUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => EventCreateOrConnectWithoutUserInputSchema),z.lazy(() => EventCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => EventCreateManyUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => EventWhereUniqueInputSchema),z.lazy(() => EventWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const EventActionUncheckedCreateNestedManyWithoutUserInputSchema: z.ZodType<Prisma.EventActionUncheckedCreateNestedManyWithoutUserInput> = z.object({
  create: z.union([ z.lazy(() => EventActionCreateWithoutUserInputSchema),z.lazy(() => EventActionCreateWithoutUserInputSchema).array(),z.lazy(() => EventActionUncheckedCreateWithoutUserInputSchema),z.lazy(() => EventActionUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => EventActionCreateOrConnectWithoutUserInputSchema),z.lazy(() => EventActionCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => EventActionCreateManyUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => EventActionWhereUniqueInputSchema),z.lazy(() => EventActionWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const TreatmentPlanUncheckedCreateNestedManyWithoutUserInputSchema: z.ZodType<Prisma.TreatmentPlanUncheckedCreateNestedManyWithoutUserInput> = z.object({
  create: z.union([ z.lazy(() => TreatmentPlanCreateWithoutUserInputSchema),z.lazy(() => TreatmentPlanCreateWithoutUserInputSchema).array(),z.lazy(() => TreatmentPlanUncheckedCreateWithoutUserInputSchema),z.lazy(() => TreatmentPlanUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TreatmentPlanCreateOrConnectWithoutUserInputSchema),z.lazy(() => TreatmentPlanCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TreatmentPlanCreateManyUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => TreatmentPlanWhereUniqueInputSchema),z.lazy(() => TreatmentPlanWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const InvitationUncheckedCreateNestedManyWithoutInvitedByInputSchema: z.ZodType<Prisma.InvitationUncheckedCreateNestedManyWithoutInvitedByInput> = z.object({
  create: z.union([ z.lazy(() => InvitationCreateWithoutInvitedByInputSchema),z.lazy(() => InvitationCreateWithoutInvitedByInputSchema).array(),z.lazy(() => InvitationUncheckedCreateWithoutInvitedByInputSchema),z.lazy(() => InvitationUncheckedCreateWithoutInvitedByInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => InvitationCreateOrConnectWithoutInvitedByInputSchema),z.lazy(() => InvitationCreateOrConnectWithoutInvitedByInputSchema).array() ]).optional(),
  createMany: z.lazy(() => InvitationCreateManyInvitedByInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => InvitationWhereUniqueInputSchema),z.lazy(() => InvitationWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const IntFieldUpdateOperationsInputSchema: z.ZodType<Prisma.IntFieldUpdateOperationsInput> = z.object({
  set: z.number().optional(),
  increment: z.number().optional(),
  decrement: z.number().optional(),
  multiply: z.number().optional(),
  divide: z.number().optional()
}).strict();

export const EnumRoleFieldUpdateOperationsInputSchema: z.ZodType<Prisma.EnumRoleFieldUpdateOperationsInput> = z.object({
  set: z.lazy(() => RoleSchema).optional()
}).strict();

export const SpecializationUpdateOneWithoutUsersNestedInputSchema: z.ZodType<Prisma.SpecializationUpdateOneWithoutUsersNestedInput> = z.object({
  create: z.union([ z.lazy(() => SpecializationCreateWithoutUsersInputSchema),z.lazy(() => SpecializationUncheckedCreateWithoutUsersInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => SpecializationCreateOrConnectWithoutUsersInputSchema).optional(),
  upsert: z.lazy(() => SpecializationUpsertWithoutUsersInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => SpecializationWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => SpecializationWhereInputSchema) ]).optional(),
  connect: z.lazy(() => SpecializationWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => SpecializationUpdateToOneWithWhereWithoutUsersInputSchema),z.lazy(() => SpecializationUpdateWithoutUsersInputSchema),z.lazy(() => SpecializationUncheckedUpdateWithoutUsersInputSchema) ]).optional(),
}).strict();

export const ProfileUpdateOneRequiredWithoutUsersNestedInputSchema: z.ZodType<Prisma.ProfileUpdateOneRequiredWithoutUsersNestedInput> = z.object({
  create: z.union([ z.lazy(() => ProfileCreateWithoutUsersInputSchema),z.lazy(() => ProfileUncheckedCreateWithoutUsersInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ProfileCreateOrConnectWithoutUsersInputSchema).optional(),
  upsert: z.lazy(() => ProfileUpsertWithoutUsersInputSchema).optional(),
  connect: z.lazy(() => ProfileWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => ProfileUpdateToOneWithWhereWithoutUsersInputSchema),z.lazy(() => ProfileUpdateWithoutUsersInputSchema),z.lazy(() => ProfileUncheckedUpdateWithoutUsersInputSchema) ]).optional(),
}).strict();

export const TenantUpdateOneRequiredWithoutUsersNestedInputSchema: z.ZodType<Prisma.TenantUpdateOneRequiredWithoutUsersNestedInput> = z.object({
  create: z.union([ z.lazy(() => TenantCreateWithoutUsersInputSchema),z.lazy(() => TenantUncheckedCreateWithoutUsersInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => TenantCreateOrConnectWithoutUsersInputSchema).optional(),
  upsert: z.lazy(() => TenantUpsertWithoutUsersInputSchema).optional(),
  connect: z.lazy(() => TenantWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => TenantUpdateToOneWithWhereWithoutUsersInputSchema),z.lazy(() => TenantUpdateWithoutUsersInputSchema),z.lazy(() => TenantUncheckedUpdateWithoutUsersInputSchema) ]).optional(),
}).strict();

export const InvitationUpdateOneWithoutUserNestedInputSchema: z.ZodType<Prisma.InvitationUpdateOneWithoutUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => InvitationCreateWithoutUserInputSchema),z.lazy(() => InvitationUncheckedCreateWithoutUserInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => InvitationCreateOrConnectWithoutUserInputSchema).optional(),
  upsert: z.lazy(() => InvitationUpsertWithoutUserInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => InvitationWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => InvitationWhereInputSchema) ]).optional(),
  connect: z.lazy(() => InvitationWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => InvitationUpdateToOneWithWhereWithoutUserInputSchema),z.lazy(() => InvitationUpdateWithoutUserInputSchema),z.lazy(() => InvitationUncheckedUpdateWithoutUserInputSchema) ]).optional(),
}).strict();

export const TokenUpdateManyWithoutUserNestedInputSchema: z.ZodType<Prisma.TokenUpdateManyWithoutUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => TokenCreateWithoutUserInputSchema),z.lazy(() => TokenCreateWithoutUserInputSchema).array(),z.lazy(() => TokenUncheckedCreateWithoutUserInputSchema),z.lazy(() => TokenUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TokenCreateOrConnectWithoutUserInputSchema),z.lazy(() => TokenCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => TokenUpsertWithWhereUniqueWithoutUserInputSchema),z.lazy(() => TokenUpsertWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TokenCreateManyUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => TokenWhereUniqueInputSchema),z.lazy(() => TokenWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => TokenWhereUniqueInputSchema),z.lazy(() => TokenWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => TokenWhereUniqueInputSchema),z.lazy(() => TokenWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => TokenWhereUniqueInputSchema),z.lazy(() => TokenWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => TokenUpdateWithWhereUniqueWithoutUserInputSchema),z.lazy(() => TokenUpdateWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => TokenUpdateManyWithWhereWithoutUserInputSchema),z.lazy(() => TokenUpdateManyWithWhereWithoutUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => TokenScalarWhereInputSchema),z.lazy(() => TokenScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const PatientUpdateManyWithoutUserNestedInputSchema: z.ZodType<Prisma.PatientUpdateManyWithoutUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => PatientCreateWithoutUserInputSchema),z.lazy(() => PatientCreateWithoutUserInputSchema).array(),z.lazy(() => PatientUncheckedCreateWithoutUserInputSchema),z.lazy(() => PatientUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => PatientCreateOrConnectWithoutUserInputSchema),z.lazy(() => PatientCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => PatientUpsertWithWhereUniqueWithoutUserInputSchema),z.lazy(() => PatientUpsertWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => PatientCreateManyUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => PatientWhereUniqueInputSchema),z.lazy(() => PatientWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => PatientWhereUniqueInputSchema),z.lazy(() => PatientWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => PatientWhereUniqueInputSchema),z.lazy(() => PatientWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => PatientWhereUniqueInputSchema),z.lazy(() => PatientWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => PatientUpdateWithWhereUniqueWithoutUserInputSchema),z.lazy(() => PatientUpdateWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => PatientUpdateManyWithWhereWithoutUserInputSchema),z.lazy(() => PatientUpdateManyWithWhereWithoutUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => PatientScalarWhereInputSchema),z.lazy(() => PatientScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const EventUpdateManyWithoutUserNestedInputSchema: z.ZodType<Prisma.EventUpdateManyWithoutUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => EventCreateWithoutUserInputSchema),z.lazy(() => EventCreateWithoutUserInputSchema).array(),z.lazy(() => EventUncheckedCreateWithoutUserInputSchema),z.lazy(() => EventUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => EventCreateOrConnectWithoutUserInputSchema),z.lazy(() => EventCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => EventUpsertWithWhereUniqueWithoutUserInputSchema),z.lazy(() => EventUpsertWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => EventCreateManyUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => EventWhereUniqueInputSchema),z.lazy(() => EventWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => EventWhereUniqueInputSchema),z.lazy(() => EventWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => EventWhereUniqueInputSchema),z.lazy(() => EventWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => EventWhereUniqueInputSchema),z.lazy(() => EventWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => EventUpdateWithWhereUniqueWithoutUserInputSchema),z.lazy(() => EventUpdateWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => EventUpdateManyWithWhereWithoutUserInputSchema),z.lazy(() => EventUpdateManyWithWhereWithoutUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => EventScalarWhereInputSchema),z.lazy(() => EventScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const EventActionUpdateManyWithoutUserNestedInputSchema: z.ZodType<Prisma.EventActionUpdateManyWithoutUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => EventActionCreateWithoutUserInputSchema),z.lazy(() => EventActionCreateWithoutUserInputSchema).array(),z.lazy(() => EventActionUncheckedCreateWithoutUserInputSchema),z.lazy(() => EventActionUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => EventActionCreateOrConnectWithoutUserInputSchema),z.lazy(() => EventActionCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => EventActionUpsertWithWhereUniqueWithoutUserInputSchema),z.lazy(() => EventActionUpsertWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => EventActionCreateManyUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => EventActionWhereUniqueInputSchema),z.lazy(() => EventActionWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => EventActionWhereUniqueInputSchema),z.lazy(() => EventActionWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => EventActionWhereUniqueInputSchema),z.lazy(() => EventActionWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => EventActionWhereUniqueInputSchema),z.lazy(() => EventActionWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => EventActionUpdateWithWhereUniqueWithoutUserInputSchema),z.lazy(() => EventActionUpdateWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => EventActionUpdateManyWithWhereWithoutUserInputSchema),z.lazy(() => EventActionUpdateManyWithWhereWithoutUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => EventActionScalarWhereInputSchema),z.lazy(() => EventActionScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const TreatmentPlanUpdateManyWithoutUserNestedInputSchema: z.ZodType<Prisma.TreatmentPlanUpdateManyWithoutUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => TreatmentPlanCreateWithoutUserInputSchema),z.lazy(() => TreatmentPlanCreateWithoutUserInputSchema).array(),z.lazy(() => TreatmentPlanUncheckedCreateWithoutUserInputSchema),z.lazy(() => TreatmentPlanUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TreatmentPlanCreateOrConnectWithoutUserInputSchema),z.lazy(() => TreatmentPlanCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => TreatmentPlanUpsertWithWhereUniqueWithoutUserInputSchema),z.lazy(() => TreatmentPlanUpsertWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TreatmentPlanCreateManyUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => TreatmentPlanWhereUniqueInputSchema),z.lazy(() => TreatmentPlanWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => TreatmentPlanWhereUniqueInputSchema),z.lazy(() => TreatmentPlanWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => TreatmentPlanWhereUniqueInputSchema),z.lazy(() => TreatmentPlanWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => TreatmentPlanWhereUniqueInputSchema),z.lazy(() => TreatmentPlanWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => TreatmentPlanUpdateWithWhereUniqueWithoutUserInputSchema),z.lazy(() => TreatmentPlanUpdateWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => TreatmentPlanUpdateManyWithWhereWithoutUserInputSchema),z.lazy(() => TreatmentPlanUpdateManyWithWhereWithoutUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => TreatmentPlanScalarWhereInputSchema),z.lazy(() => TreatmentPlanScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const InvitationUpdateManyWithoutInvitedByNestedInputSchema: z.ZodType<Prisma.InvitationUpdateManyWithoutInvitedByNestedInput> = z.object({
  create: z.union([ z.lazy(() => InvitationCreateWithoutInvitedByInputSchema),z.lazy(() => InvitationCreateWithoutInvitedByInputSchema).array(),z.lazy(() => InvitationUncheckedCreateWithoutInvitedByInputSchema),z.lazy(() => InvitationUncheckedCreateWithoutInvitedByInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => InvitationCreateOrConnectWithoutInvitedByInputSchema),z.lazy(() => InvitationCreateOrConnectWithoutInvitedByInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => InvitationUpsertWithWhereUniqueWithoutInvitedByInputSchema),z.lazy(() => InvitationUpsertWithWhereUniqueWithoutInvitedByInputSchema).array() ]).optional(),
  createMany: z.lazy(() => InvitationCreateManyInvitedByInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => InvitationWhereUniqueInputSchema),z.lazy(() => InvitationWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => InvitationWhereUniqueInputSchema),z.lazy(() => InvitationWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => InvitationWhereUniqueInputSchema),z.lazy(() => InvitationWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => InvitationWhereUniqueInputSchema),z.lazy(() => InvitationWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => InvitationUpdateWithWhereUniqueWithoutInvitedByInputSchema),z.lazy(() => InvitationUpdateWithWhereUniqueWithoutInvitedByInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => InvitationUpdateManyWithWhereWithoutInvitedByInputSchema),z.lazy(() => InvitationUpdateManyWithWhereWithoutInvitedByInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => InvitationScalarWhereInputSchema),z.lazy(() => InvitationScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const InvitationUncheckedUpdateOneWithoutUserNestedInputSchema: z.ZodType<Prisma.InvitationUncheckedUpdateOneWithoutUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => InvitationCreateWithoutUserInputSchema),z.lazy(() => InvitationUncheckedCreateWithoutUserInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => InvitationCreateOrConnectWithoutUserInputSchema).optional(),
  upsert: z.lazy(() => InvitationUpsertWithoutUserInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => InvitationWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => InvitationWhereInputSchema) ]).optional(),
  connect: z.lazy(() => InvitationWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => InvitationUpdateToOneWithWhereWithoutUserInputSchema),z.lazy(() => InvitationUpdateWithoutUserInputSchema),z.lazy(() => InvitationUncheckedUpdateWithoutUserInputSchema) ]).optional(),
}).strict();

export const TokenUncheckedUpdateManyWithoutUserNestedInputSchema: z.ZodType<Prisma.TokenUncheckedUpdateManyWithoutUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => TokenCreateWithoutUserInputSchema),z.lazy(() => TokenCreateWithoutUserInputSchema).array(),z.lazy(() => TokenUncheckedCreateWithoutUserInputSchema),z.lazy(() => TokenUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TokenCreateOrConnectWithoutUserInputSchema),z.lazy(() => TokenCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => TokenUpsertWithWhereUniqueWithoutUserInputSchema),z.lazy(() => TokenUpsertWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TokenCreateManyUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => TokenWhereUniqueInputSchema),z.lazy(() => TokenWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => TokenWhereUniqueInputSchema),z.lazy(() => TokenWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => TokenWhereUniqueInputSchema),z.lazy(() => TokenWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => TokenWhereUniqueInputSchema),z.lazy(() => TokenWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => TokenUpdateWithWhereUniqueWithoutUserInputSchema),z.lazy(() => TokenUpdateWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => TokenUpdateManyWithWhereWithoutUserInputSchema),z.lazy(() => TokenUpdateManyWithWhereWithoutUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => TokenScalarWhereInputSchema),z.lazy(() => TokenScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const PatientUncheckedUpdateManyWithoutUserNestedInputSchema: z.ZodType<Prisma.PatientUncheckedUpdateManyWithoutUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => PatientCreateWithoutUserInputSchema),z.lazy(() => PatientCreateWithoutUserInputSchema).array(),z.lazy(() => PatientUncheckedCreateWithoutUserInputSchema),z.lazy(() => PatientUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => PatientCreateOrConnectWithoutUserInputSchema),z.lazy(() => PatientCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => PatientUpsertWithWhereUniqueWithoutUserInputSchema),z.lazy(() => PatientUpsertWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => PatientCreateManyUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => PatientWhereUniqueInputSchema),z.lazy(() => PatientWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => PatientWhereUniqueInputSchema),z.lazy(() => PatientWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => PatientWhereUniqueInputSchema),z.lazy(() => PatientWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => PatientWhereUniqueInputSchema),z.lazy(() => PatientWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => PatientUpdateWithWhereUniqueWithoutUserInputSchema),z.lazy(() => PatientUpdateWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => PatientUpdateManyWithWhereWithoutUserInputSchema),z.lazy(() => PatientUpdateManyWithWhereWithoutUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => PatientScalarWhereInputSchema),z.lazy(() => PatientScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const EventUncheckedUpdateManyWithoutUserNestedInputSchema: z.ZodType<Prisma.EventUncheckedUpdateManyWithoutUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => EventCreateWithoutUserInputSchema),z.lazy(() => EventCreateWithoutUserInputSchema).array(),z.lazy(() => EventUncheckedCreateWithoutUserInputSchema),z.lazy(() => EventUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => EventCreateOrConnectWithoutUserInputSchema),z.lazy(() => EventCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => EventUpsertWithWhereUniqueWithoutUserInputSchema),z.lazy(() => EventUpsertWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => EventCreateManyUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => EventWhereUniqueInputSchema),z.lazy(() => EventWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => EventWhereUniqueInputSchema),z.lazy(() => EventWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => EventWhereUniqueInputSchema),z.lazy(() => EventWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => EventWhereUniqueInputSchema),z.lazy(() => EventWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => EventUpdateWithWhereUniqueWithoutUserInputSchema),z.lazy(() => EventUpdateWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => EventUpdateManyWithWhereWithoutUserInputSchema),z.lazy(() => EventUpdateManyWithWhereWithoutUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => EventScalarWhereInputSchema),z.lazy(() => EventScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const EventActionUncheckedUpdateManyWithoutUserNestedInputSchema: z.ZodType<Prisma.EventActionUncheckedUpdateManyWithoutUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => EventActionCreateWithoutUserInputSchema),z.lazy(() => EventActionCreateWithoutUserInputSchema).array(),z.lazy(() => EventActionUncheckedCreateWithoutUserInputSchema),z.lazy(() => EventActionUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => EventActionCreateOrConnectWithoutUserInputSchema),z.lazy(() => EventActionCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => EventActionUpsertWithWhereUniqueWithoutUserInputSchema),z.lazy(() => EventActionUpsertWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => EventActionCreateManyUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => EventActionWhereUniqueInputSchema),z.lazy(() => EventActionWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => EventActionWhereUniqueInputSchema),z.lazy(() => EventActionWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => EventActionWhereUniqueInputSchema),z.lazy(() => EventActionWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => EventActionWhereUniqueInputSchema),z.lazy(() => EventActionWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => EventActionUpdateWithWhereUniqueWithoutUserInputSchema),z.lazy(() => EventActionUpdateWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => EventActionUpdateManyWithWhereWithoutUserInputSchema),z.lazy(() => EventActionUpdateManyWithWhereWithoutUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => EventActionScalarWhereInputSchema),z.lazy(() => EventActionScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const TreatmentPlanUncheckedUpdateManyWithoutUserNestedInputSchema: z.ZodType<Prisma.TreatmentPlanUncheckedUpdateManyWithoutUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => TreatmentPlanCreateWithoutUserInputSchema),z.lazy(() => TreatmentPlanCreateWithoutUserInputSchema).array(),z.lazy(() => TreatmentPlanUncheckedCreateWithoutUserInputSchema),z.lazy(() => TreatmentPlanUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TreatmentPlanCreateOrConnectWithoutUserInputSchema),z.lazy(() => TreatmentPlanCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => TreatmentPlanUpsertWithWhereUniqueWithoutUserInputSchema),z.lazy(() => TreatmentPlanUpsertWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TreatmentPlanCreateManyUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => TreatmentPlanWhereUniqueInputSchema),z.lazy(() => TreatmentPlanWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => TreatmentPlanWhereUniqueInputSchema),z.lazy(() => TreatmentPlanWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => TreatmentPlanWhereUniqueInputSchema),z.lazy(() => TreatmentPlanWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => TreatmentPlanWhereUniqueInputSchema),z.lazy(() => TreatmentPlanWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => TreatmentPlanUpdateWithWhereUniqueWithoutUserInputSchema),z.lazy(() => TreatmentPlanUpdateWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => TreatmentPlanUpdateManyWithWhereWithoutUserInputSchema),z.lazy(() => TreatmentPlanUpdateManyWithWhereWithoutUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => TreatmentPlanScalarWhereInputSchema),z.lazy(() => TreatmentPlanScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const InvitationUncheckedUpdateManyWithoutInvitedByNestedInputSchema: z.ZodType<Prisma.InvitationUncheckedUpdateManyWithoutInvitedByNestedInput> = z.object({
  create: z.union([ z.lazy(() => InvitationCreateWithoutInvitedByInputSchema),z.lazy(() => InvitationCreateWithoutInvitedByInputSchema).array(),z.lazy(() => InvitationUncheckedCreateWithoutInvitedByInputSchema),z.lazy(() => InvitationUncheckedCreateWithoutInvitedByInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => InvitationCreateOrConnectWithoutInvitedByInputSchema),z.lazy(() => InvitationCreateOrConnectWithoutInvitedByInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => InvitationUpsertWithWhereUniqueWithoutInvitedByInputSchema),z.lazy(() => InvitationUpsertWithWhereUniqueWithoutInvitedByInputSchema).array() ]).optional(),
  createMany: z.lazy(() => InvitationCreateManyInvitedByInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => InvitationWhereUniqueInputSchema),z.lazy(() => InvitationWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => InvitationWhereUniqueInputSchema),z.lazy(() => InvitationWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => InvitationWhereUniqueInputSchema),z.lazy(() => InvitationWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => InvitationWhereUniqueInputSchema),z.lazy(() => InvitationWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => InvitationUpdateWithWhereUniqueWithoutInvitedByInputSchema),z.lazy(() => InvitationUpdateWithWhereUniqueWithoutInvitedByInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => InvitationUpdateManyWithWhereWithoutInvitedByInputSchema),z.lazy(() => InvitationUpdateManyWithWhereWithoutInvitedByInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => InvitationScalarWhereInputSchema),z.lazy(() => InvitationScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const TenantCreateNestedOneWithoutPreferedByProfilesInputSchema: z.ZodType<Prisma.TenantCreateNestedOneWithoutPreferedByProfilesInput> = z.object({
  create: z.union([ z.lazy(() => TenantCreateWithoutPreferedByProfilesInputSchema),z.lazy(() => TenantUncheckedCreateWithoutPreferedByProfilesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => TenantCreateOrConnectWithoutPreferedByProfilesInputSchema).optional(),
  connect: z.lazy(() => TenantWhereUniqueInputSchema).optional()
}).strict();

export const UserCreateNestedManyWithoutProfileInputSchema: z.ZodType<Prisma.UserCreateNestedManyWithoutProfileInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutProfileInputSchema),z.lazy(() => UserCreateWithoutProfileInputSchema).array(),z.lazy(() => UserUncheckedCreateWithoutProfileInputSchema),z.lazy(() => UserUncheckedCreateWithoutProfileInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => UserCreateOrConnectWithoutProfileInputSchema),z.lazy(() => UserCreateOrConnectWithoutProfileInputSchema).array() ]).optional(),
  createMany: z.lazy(() => UserCreateManyProfileInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => UserWhereUniqueInputSchema),z.lazy(() => UserWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const AccountAuthCreateNestedManyWithoutProfileInputSchema: z.ZodType<Prisma.AccountAuthCreateNestedManyWithoutProfileInput> = z.object({
  create: z.union([ z.lazy(() => AccountAuthCreateWithoutProfileInputSchema),z.lazy(() => AccountAuthCreateWithoutProfileInputSchema).array(),z.lazy(() => AccountAuthUncheckedCreateWithoutProfileInputSchema),z.lazy(() => AccountAuthUncheckedCreateWithoutProfileInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => AccountAuthCreateOrConnectWithoutProfileInputSchema),z.lazy(() => AccountAuthCreateOrConnectWithoutProfileInputSchema).array() ]).optional(),
  createMany: z.lazy(() => AccountAuthCreateManyProfileInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => AccountAuthWhereUniqueInputSchema),z.lazy(() => AccountAuthWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const UserUncheckedCreateNestedManyWithoutProfileInputSchema: z.ZodType<Prisma.UserUncheckedCreateNestedManyWithoutProfileInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutProfileInputSchema),z.lazy(() => UserCreateWithoutProfileInputSchema).array(),z.lazy(() => UserUncheckedCreateWithoutProfileInputSchema),z.lazy(() => UserUncheckedCreateWithoutProfileInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => UserCreateOrConnectWithoutProfileInputSchema),z.lazy(() => UserCreateOrConnectWithoutProfileInputSchema).array() ]).optional(),
  createMany: z.lazy(() => UserCreateManyProfileInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => UserWhereUniqueInputSchema),z.lazy(() => UserWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const AccountAuthUncheckedCreateNestedManyWithoutProfileInputSchema: z.ZodType<Prisma.AccountAuthUncheckedCreateNestedManyWithoutProfileInput> = z.object({
  create: z.union([ z.lazy(() => AccountAuthCreateWithoutProfileInputSchema),z.lazy(() => AccountAuthCreateWithoutProfileInputSchema).array(),z.lazy(() => AccountAuthUncheckedCreateWithoutProfileInputSchema),z.lazy(() => AccountAuthUncheckedCreateWithoutProfileInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => AccountAuthCreateOrConnectWithoutProfileInputSchema),z.lazy(() => AccountAuthCreateOrConnectWithoutProfileInputSchema).array() ]).optional(),
  createMany: z.lazy(() => AccountAuthCreateManyProfileInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => AccountAuthWhereUniqueInputSchema),z.lazy(() => AccountAuthWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const TenantUpdateOneWithoutPreferedByProfilesNestedInputSchema: z.ZodType<Prisma.TenantUpdateOneWithoutPreferedByProfilesNestedInput> = z.object({
  create: z.union([ z.lazy(() => TenantCreateWithoutPreferedByProfilesInputSchema),z.lazy(() => TenantUncheckedCreateWithoutPreferedByProfilesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => TenantCreateOrConnectWithoutPreferedByProfilesInputSchema).optional(),
  upsert: z.lazy(() => TenantUpsertWithoutPreferedByProfilesInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => TenantWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => TenantWhereInputSchema) ]).optional(),
  connect: z.lazy(() => TenantWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => TenantUpdateToOneWithWhereWithoutPreferedByProfilesInputSchema),z.lazy(() => TenantUpdateWithoutPreferedByProfilesInputSchema),z.lazy(() => TenantUncheckedUpdateWithoutPreferedByProfilesInputSchema) ]).optional(),
}).strict();

export const UserUpdateManyWithoutProfileNestedInputSchema: z.ZodType<Prisma.UserUpdateManyWithoutProfileNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutProfileInputSchema),z.lazy(() => UserCreateWithoutProfileInputSchema).array(),z.lazy(() => UserUncheckedCreateWithoutProfileInputSchema),z.lazy(() => UserUncheckedCreateWithoutProfileInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => UserCreateOrConnectWithoutProfileInputSchema),z.lazy(() => UserCreateOrConnectWithoutProfileInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => UserUpsertWithWhereUniqueWithoutProfileInputSchema),z.lazy(() => UserUpsertWithWhereUniqueWithoutProfileInputSchema).array() ]).optional(),
  createMany: z.lazy(() => UserCreateManyProfileInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => UserWhereUniqueInputSchema),z.lazy(() => UserWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => UserWhereUniqueInputSchema),z.lazy(() => UserWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => UserWhereUniqueInputSchema),z.lazy(() => UserWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => UserWhereUniqueInputSchema),z.lazy(() => UserWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => UserUpdateWithWhereUniqueWithoutProfileInputSchema),z.lazy(() => UserUpdateWithWhereUniqueWithoutProfileInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => UserUpdateManyWithWhereWithoutProfileInputSchema),z.lazy(() => UserUpdateManyWithWhereWithoutProfileInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => UserScalarWhereInputSchema),z.lazy(() => UserScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const AccountAuthUpdateManyWithoutProfileNestedInputSchema: z.ZodType<Prisma.AccountAuthUpdateManyWithoutProfileNestedInput> = z.object({
  create: z.union([ z.lazy(() => AccountAuthCreateWithoutProfileInputSchema),z.lazy(() => AccountAuthCreateWithoutProfileInputSchema).array(),z.lazy(() => AccountAuthUncheckedCreateWithoutProfileInputSchema),z.lazy(() => AccountAuthUncheckedCreateWithoutProfileInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => AccountAuthCreateOrConnectWithoutProfileInputSchema),z.lazy(() => AccountAuthCreateOrConnectWithoutProfileInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => AccountAuthUpsertWithWhereUniqueWithoutProfileInputSchema),z.lazy(() => AccountAuthUpsertWithWhereUniqueWithoutProfileInputSchema).array() ]).optional(),
  createMany: z.lazy(() => AccountAuthCreateManyProfileInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => AccountAuthWhereUniqueInputSchema),z.lazy(() => AccountAuthWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => AccountAuthWhereUniqueInputSchema),z.lazy(() => AccountAuthWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => AccountAuthWhereUniqueInputSchema),z.lazy(() => AccountAuthWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => AccountAuthWhereUniqueInputSchema),z.lazy(() => AccountAuthWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => AccountAuthUpdateWithWhereUniqueWithoutProfileInputSchema),z.lazy(() => AccountAuthUpdateWithWhereUniqueWithoutProfileInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => AccountAuthUpdateManyWithWhereWithoutProfileInputSchema),z.lazy(() => AccountAuthUpdateManyWithWhereWithoutProfileInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => AccountAuthScalarWhereInputSchema),z.lazy(() => AccountAuthScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const UserUncheckedUpdateManyWithoutProfileNestedInputSchema: z.ZodType<Prisma.UserUncheckedUpdateManyWithoutProfileNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutProfileInputSchema),z.lazy(() => UserCreateWithoutProfileInputSchema).array(),z.lazy(() => UserUncheckedCreateWithoutProfileInputSchema),z.lazy(() => UserUncheckedCreateWithoutProfileInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => UserCreateOrConnectWithoutProfileInputSchema),z.lazy(() => UserCreateOrConnectWithoutProfileInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => UserUpsertWithWhereUniqueWithoutProfileInputSchema),z.lazy(() => UserUpsertWithWhereUniqueWithoutProfileInputSchema).array() ]).optional(),
  createMany: z.lazy(() => UserCreateManyProfileInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => UserWhereUniqueInputSchema),z.lazy(() => UserWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => UserWhereUniqueInputSchema),z.lazy(() => UserWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => UserWhereUniqueInputSchema),z.lazy(() => UserWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => UserWhereUniqueInputSchema),z.lazy(() => UserWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => UserUpdateWithWhereUniqueWithoutProfileInputSchema),z.lazy(() => UserUpdateWithWhereUniqueWithoutProfileInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => UserUpdateManyWithWhereWithoutProfileInputSchema),z.lazy(() => UserUpdateManyWithWhereWithoutProfileInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => UserScalarWhereInputSchema),z.lazy(() => UserScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const AccountAuthUncheckedUpdateManyWithoutProfileNestedInputSchema: z.ZodType<Prisma.AccountAuthUncheckedUpdateManyWithoutProfileNestedInput> = z.object({
  create: z.union([ z.lazy(() => AccountAuthCreateWithoutProfileInputSchema),z.lazy(() => AccountAuthCreateWithoutProfileInputSchema).array(),z.lazy(() => AccountAuthUncheckedCreateWithoutProfileInputSchema),z.lazy(() => AccountAuthUncheckedCreateWithoutProfileInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => AccountAuthCreateOrConnectWithoutProfileInputSchema),z.lazy(() => AccountAuthCreateOrConnectWithoutProfileInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => AccountAuthUpsertWithWhereUniqueWithoutProfileInputSchema),z.lazy(() => AccountAuthUpsertWithWhereUniqueWithoutProfileInputSchema).array() ]).optional(),
  createMany: z.lazy(() => AccountAuthCreateManyProfileInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => AccountAuthWhereUniqueInputSchema),z.lazy(() => AccountAuthWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => AccountAuthWhereUniqueInputSchema),z.lazy(() => AccountAuthWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => AccountAuthWhereUniqueInputSchema),z.lazy(() => AccountAuthWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => AccountAuthWhereUniqueInputSchema),z.lazy(() => AccountAuthWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => AccountAuthUpdateWithWhereUniqueWithoutProfileInputSchema),z.lazy(() => AccountAuthUpdateWithWhereUniqueWithoutProfileInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => AccountAuthUpdateManyWithWhereWithoutProfileInputSchema),z.lazy(() => AccountAuthUpdateManyWithWhereWithoutProfileInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => AccountAuthScalarWhereInputSchema),z.lazy(() => AccountAuthScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ProfileCreateNestedOneWithoutAuthInputSchema: z.ZodType<Prisma.ProfileCreateNestedOneWithoutAuthInput> = z.object({
  create: z.union([ z.lazy(() => ProfileCreateWithoutAuthInputSchema),z.lazy(() => ProfileUncheckedCreateWithoutAuthInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ProfileCreateOrConnectWithoutAuthInputSchema).optional(),
  connect: z.lazy(() => ProfileWhereUniqueInputSchema).optional()
}).strict();

export const NullableIntFieldUpdateOperationsInputSchema: z.ZodType<Prisma.NullableIntFieldUpdateOperationsInput> = z.object({
  set: z.number().optional().nullable(),
  increment: z.number().optional(),
  decrement: z.number().optional(),
  multiply: z.number().optional(),
  divide: z.number().optional()
}).strict();

export const ProfileUpdateOneRequiredWithoutAuthNestedInputSchema: z.ZodType<Prisma.ProfileUpdateOneRequiredWithoutAuthNestedInput> = z.object({
  create: z.union([ z.lazy(() => ProfileCreateWithoutAuthInputSchema),z.lazy(() => ProfileUncheckedCreateWithoutAuthInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ProfileCreateOrConnectWithoutAuthInputSchema).optional(),
  upsert: z.lazy(() => ProfileUpsertWithoutAuthInputSchema).optional(),
  connect: z.lazy(() => ProfileWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => ProfileUpdateToOneWithWhereWithoutAuthInputSchema),z.lazy(() => ProfileUpdateWithoutAuthInputSchema),z.lazy(() => ProfileUncheckedUpdateWithoutAuthInputSchema) ]).optional(),
}).strict();

export const TenantProfileCreateNestedManyWithoutPlanInputSchema: z.ZodType<Prisma.TenantProfileCreateNestedManyWithoutPlanInput> = z.object({
  create: z.union([ z.lazy(() => TenantProfileCreateWithoutPlanInputSchema),z.lazy(() => TenantProfileCreateWithoutPlanInputSchema).array(),z.lazy(() => TenantProfileUncheckedCreateWithoutPlanInputSchema),z.lazy(() => TenantProfileUncheckedCreateWithoutPlanInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TenantProfileCreateOrConnectWithoutPlanInputSchema),z.lazy(() => TenantProfileCreateOrConnectWithoutPlanInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TenantProfileCreateManyPlanInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => TenantProfileWhereUniqueInputSchema),z.lazy(() => TenantProfileWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const TenantProfileUncheckedCreateNestedManyWithoutPlanInputSchema: z.ZodType<Prisma.TenantProfileUncheckedCreateNestedManyWithoutPlanInput> = z.object({
  create: z.union([ z.lazy(() => TenantProfileCreateWithoutPlanInputSchema),z.lazy(() => TenantProfileCreateWithoutPlanInputSchema).array(),z.lazy(() => TenantProfileUncheckedCreateWithoutPlanInputSchema),z.lazy(() => TenantProfileUncheckedCreateWithoutPlanInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TenantProfileCreateOrConnectWithoutPlanInputSchema),z.lazy(() => TenantProfileCreateOrConnectWithoutPlanInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TenantProfileCreateManyPlanInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => TenantProfileWhereUniqueInputSchema),z.lazy(() => TenantProfileWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const TenantProfileUpdateManyWithoutPlanNestedInputSchema: z.ZodType<Prisma.TenantProfileUpdateManyWithoutPlanNestedInput> = z.object({
  create: z.union([ z.lazy(() => TenantProfileCreateWithoutPlanInputSchema),z.lazy(() => TenantProfileCreateWithoutPlanInputSchema).array(),z.lazy(() => TenantProfileUncheckedCreateWithoutPlanInputSchema),z.lazy(() => TenantProfileUncheckedCreateWithoutPlanInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TenantProfileCreateOrConnectWithoutPlanInputSchema),z.lazy(() => TenantProfileCreateOrConnectWithoutPlanInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => TenantProfileUpsertWithWhereUniqueWithoutPlanInputSchema),z.lazy(() => TenantProfileUpsertWithWhereUniqueWithoutPlanInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TenantProfileCreateManyPlanInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => TenantProfileWhereUniqueInputSchema),z.lazy(() => TenantProfileWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => TenantProfileWhereUniqueInputSchema),z.lazy(() => TenantProfileWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => TenantProfileWhereUniqueInputSchema),z.lazy(() => TenantProfileWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => TenantProfileWhereUniqueInputSchema),z.lazy(() => TenantProfileWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => TenantProfileUpdateWithWhereUniqueWithoutPlanInputSchema),z.lazy(() => TenantProfileUpdateWithWhereUniqueWithoutPlanInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => TenantProfileUpdateManyWithWhereWithoutPlanInputSchema),z.lazy(() => TenantProfileUpdateManyWithWhereWithoutPlanInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => TenantProfileScalarWhereInputSchema),z.lazy(() => TenantProfileScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const TenantProfileUncheckedUpdateManyWithoutPlanNestedInputSchema: z.ZodType<Prisma.TenantProfileUncheckedUpdateManyWithoutPlanNestedInput> = z.object({
  create: z.union([ z.lazy(() => TenantProfileCreateWithoutPlanInputSchema),z.lazy(() => TenantProfileCreateWithoutPlanInputSchema).array(),z.lazy(() => TenantProfileUncheckedCreateWithoutPlanInputSchema),z.lazy(() => TenantProfileUncheckedCreateWithoutPlanInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TenantProfileCreateOrConnectWithoutPlanInputSchema),z.lazy(() => TenantProfileCreateOrConnectWithoutPlanInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => TenantProfileUpsertWithWhereUniqueWithoutPlanInputSchema),z.lazy(() => TenantProfileUpsertWithWhereUniqueWithoutPlanInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TenantProfileCreateManyPlanInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => TenantProfileWhereUniqueInputSchema),z.lazy(() => TenantProfileWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => TenantProfileWhereUniqueInputSchema),z.lazy(() => TenantProfileWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => TenantProfileWhereUniqueInputSchema),z.lazy(() => TenantProfileWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => TenantProfileWhereUniqueInputSchema),z.lazy(() => TenantProfileWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => TenantProfileUpdateWithWhereUniqueWithoutPlanInputSchema),z.lazy(() => TenantProfileUpdateWithWhereUniqueWithoutPlanInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => TenantProfileUpdateManyWithWhereWithoutPlanInputSchema),z.lazy(() => TenantProfileUpdateManyWithWhereWithoutPlanInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => TenantProfileScalarWhereInputSchema),z.lazy(() => TenantProfileScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const UserCreateNestedOneWithoutTokensInputSchema: z.ZodType<Prisma.UserCreateNestedOneWithoutTokensInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutTokensInputSchema),z.lazy(() => UserUncheckedCreateWithoutTokensInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutTokensInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional()
}).strict();

export const EnumTokenTypeFieldUpdateOperationsInputSchema: z.ZodType<Prisma.EnumTokenTypeFieldUpdateOperationsInput> = z.object({
  set: z.lazy(() => TokenTypeSchema).optional()
}).strict();

export const UserUpdateOneRequiredWithoutTokensNestedInputSchema: z.ZodType<Prisma.UserUpdateOneRequiredWithoutTokensNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutTokensInputSchema),z.lazy(() => UserUncheckedCreateWithoutTokensInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutTokensInputSchema).optional(),
  upsert: z.lazy(() => UserUpsertWithoutTokensInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => UserUpdateToOneWithWhereWithoutTokensInputSchema),z.lazy(() => UserUpdateWithoutTokensInputSchema),z.lazy(() => UserUncheckedUpdateWithoutTokensInputSchema) ]).optional(),
}).strict();

export const UserCreateNestedOneWithoutInvitationsInputSchema: z.ZodType<Prisma.UserCreateNestedOneWithoutInvitationsInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutInvitationsInputSchema),z.lazy(() => UserUncheckedCreateWithoutInvitationsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutInvitationsInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional()
}).strict();

export const UserCreateNestedOneWithoutInvitationInputSchema: z.ZodType<Prisma.UserCreateNestedOneWithoutInvitationInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutInvitationInputSchema),z.lazy(() => UserUncheckedCreateWithoutInvitationInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutInvitationInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional()
}).strict();

export const UserUpdateOneRequiredWithoutInvitationsNestedInputSchema: z.ZodType<Prisma.UserUpdateOneRequiredWithoutInvitationsNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutInvitationsInputSchema),z.lazy(() => UserUncheckedCreateWithoutInvitationsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutInvitationsInputSchema).optional(),
  upsert: z.lazy(() => UserUpsertWithoutInvitationsInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => UserUpdateToOneWithWhereWithoutInvitationsInputSchema),z.lazy(() => UserUpdateWithoutInvitationsInputSchema),z.lazy(() => UserUncheckedUpdateWithoutInvitationsInputSchema) ]).optional(),
}).strict();

export const UserUpdateOneWithoutInvitationNestedInputSchema: z.ZodType<Prisma.UserUpdateOneWithoutInvitationNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutInvitationInputSchema),z.lazy(() => UserUncheckedCreateWithoutInvitationInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutInvitationInputSchema).optional(),
  upsert: z.lazy(() => UserUpsertWithoutInvitationInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => UserWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => UserWhereInputSchema) ]).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => UserUpdateToOneWithWhereWithoutInvitationInputSchema),z.lazy(() => UserUpdateWithoutInvitationInputSchema),z.lazy(() => UserUncheckedUpdateWithoutInvitationInputSchema) ]).optional(),
}).strict();

export const UserCreateNestedOneWithoutPatientsInputSchema: z.ZodType<Prisma.UserCreateNestedOneWithoutPatientsInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutPatientsInputSchema),z.lazy(() => UserUncheckedCreateWithoutPatientsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutPatientsInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional()
}).strict();

export const TenantCreateNestedOneWithoutPatientsInputSchema: z.ZodType<Prisma.TenantCreateNestedOneWithoutPatientsInput> = z.object({
  create: z.union([ z.lazy(() => TenantCreateWithoutPatientsInputSchema),z.lazy(() => TenantUncheckedCreateWithoutPatientsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => TenantCreateOrConnectWithoutPatientsInputSchema).optional(),
  connect: z.lazy(() => TenantWhereUniqueInputSchema).optional()
}).strict();

export const EventCreateNestedManyWithoutPatientInputSchema: z.ZodType<Prisma.EventCreateNestedManyWithoutPatientInput> = z.object({
  create: z.union([ z.lazy(() => EventCreateWithoutPatientInputSchema),z.lazy(() => EventCreateWithoutPatientInputSchema).array(),z.lazy(() => EventUncheckedCreateWithoutPatientInputSchema),z.lazy(() => EventUncheckedCreateWithoutPatientInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => EventCreateOrConnectWithoutPatientInputSchema),z.lazy(() => EventCreateOrConnectWithoutPatientInputSchema).array() ]).optional(),
  createMany: z.lazy(() => EventCreateManyPatientInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => EventWhereUniqueInputSchema),z.lazy(() => EventWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const TreatmentPlanCreateNestedManyWithoutPatientInputSchema: z.ZodType<Prisma.TreatmentPlanCreateNestedManyWithoutPatientInput> = z.object({
  create: z.union([ z.lazy(() => TreatmentPlanCreateWithoutPatientInputSchema),z.lazy(() => TreatmentPlanCreateWithoutPatientInputSchema).array(),z.lazy(() => TreatmentPlanUncheckedCreateWithoutPatientInputSchema),z.lazy(() => TreatmentPlanUncheckedCreateWithoutPatientInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TreatmentPlanCreateOrConnectWithoutPatientInputSchema),z.lazy(() => TreatmentPlanCreateOrConnectWithoutPatientInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TreatmentPlanCreateManyPatientInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => TreatmentPlanWhereUniqueInputSchema),z.lazy(() => TreatmentPlanWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const EventUncheckedCreateNestedManyWithoutPatientInputSchema: z.ZodType<Prisma.EventUncheckedCreateNestedManyWithoutPatientInput> = z.object({
  create: z.union([ z.lazy(() => EventCreateWithoutPatientInputSchema),z.lazy(() => EventCreateWithoutPatientInputSchema).array(),z.lazy(() => EventUncheckedCreateWithoutPatientInputSchema),z.lazy(() => EventUncheckedCreateWithoutPatientInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => EventCreateOrConnectWithoutPatientInputSchema),z.lazy(() => EventCreateOrConnectWithoutPatientInputSchema).array() ]).optional(),
  createMany: z.lazy(() => EventCreateManyPatientInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => EventWhereUniqueInputSchema),z.lazy(() => EventWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const TreatmentPlanUncheckedCreateNestedManyWithoutPatientInputSchema: z.ZodType<Prisma.TreatmentPlanUncheckedCreateNestedManyWithoutPatientInput> = z.object({
  create: z.union([ z.lazy(() => TreatmentPlanCreateWithoutPatientInputSchema),z.lazy(() => TreatmentPlanCreateWithoutPatientInputSchema).array(),z.lazy(() => TreatmentPlanUncheckedCreateWithoutPatientInputSchema),z.lazy(() => TreatmentPlanUncheckedCreateWithoutPatientInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TreatmentPlanCreateOrConnectWithoutPatientInputSchema),z.lazy(() => TreatmentPlanCreateOrConnectWithoutPatientInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TreatmentPlanCreateManyPatientInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => TreatmentPlanWhereUniqueInputSchema),z.lazy(() => TreatmentPlanWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const EnumStatusFieldUpdateOperationsInputSchema: z.ZodType<Prisma.EnumStatusFieldUpdateOperationsInput> = z.object({
  set: z.lazy(() => StatusSchema).optional()
}).strict();

export const UserUpdateOneRequiredWithoutPatientsNestedInputSchema: z.ZodType<Prisma.UserUpdateOneRequiredWithoutPatientsNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutPatientsInputSchema),z.lazy(() => UserUncheckedCreateWithoutPatientsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutPatientsInputSchema).optional(),
  upsert: z.lazy(() => UserUpsertWithoutPatientsInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => UserUpdateToOneWithWhereWithoutPatientsInputSchema),z.lazy(() => UserUpdateWithoutPatientsInputSchema),z.lazy(() => UserUncheckedUpdateWithoutPatientsInputSchema) ]).optional(),
}).strict();

export const TenantUpdateOneRequiredWithoutPatientsNestedInputSchema: z.ZodType<Prisma.TenantUpdateOneRequiredWithoutPatientsNestedInput> = z.object({
  create: z.union([ z.lazy(() => TenantCreateWithoutPatientsInputSchema),z.lazy(() => TenantUncheckedCreateWithoutPatientsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => TenantCreateOrConnectWithoutPatientsInputSchema).optional(),
  upsert: z.lazy(() => TenantUpsertWithoutPatientsInputSchema).optional(),
  connect: z.lazy(() => TenantWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => TenantUpdateToOneWithWhereWithoutPatientsInputSchema),z.lazy(() => TenantUpdateWithoutPatientsInputSchema),z.lazy(() => TenantUncheckedUpdateWithoutPatientsInputSchema) ]).optional(),
}).strict();

export const EventUpdateManyWithoutPatientNestedInputSchema: z.ZodType<Prisma.EventUpdateManyWithoutPatientNestedInput> = z.object({
  create: z.union([ z.lazy(() => EventCreateWithoutPatientInputSchema),z.lazy(() => EventCreateWithoutPatientInputSchema).array(),z.lazy(() => EventUncheckedCreateWithoutPatientInputSchema),z.lazy(() => EventUncheckedCreateWithoutPatientInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => EventCreateOrConnectWithoutPatientInputSchema),z.lazy(() => EventCreateOrConnectWithoutPatientInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => EventUpsertWithWhereUniqueWithoutPatientInputSchema),z.lazy(() => EventUpsertWithWhereUniqueWithoutPatientInputSchema).array() ]).optional(),
  createMany: z.lazy(() => EventCreateManyPatientInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => EventWhereUniqueInputSchema),z.lazy(() => EventWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => EventWhereUniqueInputSchema),z.lazy(() => EventWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => EventWhereUniqueInputSchema),z.lazy(() => EventWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => EventWhereUniqueInputSchema),z.lazy(() => EventWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => EventUpdateWithWhereUniqueWithoutPatientInputSchema),z.lazy(() => EventUpdateWithWhereUniqueWithoutPatientInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => EventUpdateManyWithWhereWithoutPatientInputSchema),z.lazy(() => EventUpdateManyWithWhereWithoutPatientInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => EventScalarWhereInputSchema),z.lazy(() => EventScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const TreatmentPlanUpdateManyWithoutPatientNestedInputSchema: z.ZodType<Prisma.TreatmentPlanUpdateManyWithoutPatientNestedInput> = z.object({
  create: z.union([ z.lazy(() => TreatmentPlanCreateWithoutPatientInputSchema),z.lazy(() => TreatmentPlanCreateWithoutPatientInputSchema).array(),z.lazy(() => TreatmentPlanUncheckedCreateWithoutPatientInputSchema),z.lazy(() => TreatmentPlanUncheckedCreateWithoutPatientInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TreatmentPlanCreateOrConnectWithoutPatientInputSchema),z.lazy(() => TreatmentPlanCreateOrConnectWithoutPatientInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => TreatmentPlanUpsertWithWhereUniqueWithoutPatientInputSchema),z.lazy(() => TreatmentPlanUpsertWithWhereUniqueWithoutPatientInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TreatmentPlanCreateManyPatientInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => TreatmentPlanWhereUniqueInputSchema),z.lazy(() => TreatmentPlanWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => TreatmentPlanWhereUniqueInputSchema),z.lazy(() => TreatmentPlanWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => TreatmentPlanWhereUniqueInputSchema),z.lazy(() => TreatmentPlanWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => TreatmentPlanWhereUniqueInputSchema),z.lazy(() => TreatmentPlanWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => TreatmentPlanUpdateWithWhereUniqueWithoutPatientInputSchema),z.lazy(() => TreatmentPlanUpdateWithWhereUniqueWithoutPatientInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => TreatmentPlanUpdateManyWithWhereWithoutPatientInputSchema),z.lazy(() => TreatmentPlanUpdateManyWithWhereWithoutPatientInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => TreatmentPlanScalarWhereInputSchema),z.lazy(() => TreatmentPlanScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const EventUncheckedUpdateManyWithoutPatientNestedInputSchema: z.ZodType<Prisma.EventUncheckedUpdateManyWithoutPatientNestedInput> = z.object({
  create: z.union([ z.lazy(() => EventCreateWithoutPatientInputSchema),z.lazy(() => EventCreateWithoutPatientInputSchema).array(),z.lazy(() => EventUncheckedCreateWithoutPatientInputSchema),z.lazy(() => EventUncheckedCreateWithoutPatientInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => EventCreateOrConnectWithoutPatientInputSchema),z.lazy(() => EventCreateOrConnectWithoutPatientInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => EventUpsertWithWhereUniqueWithoutPatientInputSchema),z.lazy(() => EventUpsertWithWhereUniqueWithoutPatientInputSchema).array() ]).optional(),
  createMany: z.lazy(() => EventCreateManyPatientInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => EventWhereUniqueInputSchema),z.lazy(() => EventWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => EventWhereUniqueInputSchema),z.lazy(() => EventWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => EventWhereUniqueInputSchema),z.lazy(() => EventWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => EventWhereUniqueInputSchema),z.lazy(() => EventWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => EventUpdateWithWhereUniqueWithoutPatientInputSchema),z.lazy(() => EventUpdateWithWhereUniqueWithoutPatientInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => EventUpdateManyWithWhereWithoutPatientInputSchema),z.lazy(() => EventUpdateManyWithWhereWithoutPatientInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => EventScalarWhereInputSchema),z.lazy(() => EventScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const TreatmentPlanUncheckedUpdateManyWithoutPatientNestedInputSchema: z.ZodType<Prisma.TreatmentPlanUncheckedUpdateManyWithoutPatientNestedInput> = z.object({
  create: z.union([ z.lazy(() => TreatmentPlanCreateWithoutPatientInputSchema),z.lazy(() => TreatmentPlanCreateWithoutPatientInputSchema).array(),z.lazy(() => TreatmentPlanUncheckedCreateWithoutPatientInputSchema),z.lazy(() => TreatmentPlanUncheckedCreateWithoutPatientInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TreatmentPlanCreateOrConnectWithoutPatientInputSchema),z.lazy(() => TreatmentPlanCreateOrConnectWithoutPatientInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => TreatmentPlanUpsertWithWhereUniqueWithoutPatientInputSchema),z.lazy(() => TreatmentPlanUpsertWithWhereUniqueWithoutPatientInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TreatmentPlanCreateManyPatientInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => TreatmentPlanWhereUniqueInputSchema),z.lazy(() => TreatmentPlanWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => TreatmentPlanWhereUniqueInputSchema),z.lazy(() => TreatmentPlanWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => TreatmentPlanWhereUniqueInputSchema),z.lazy(() => TreatmentPlanWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => TreatmentPlanWhereUniqueInputSchema),z.lazy(() => TreatmentPlanWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => TreatmentPlanUpdateWithWhereUniqueWithoutPatientInputSchema),z.lazy(() => TreatmentPlanUpdateWithWhereUniqueWithoutPatientInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => TreatmentPlanUpdateManyWithWhereWithoutPatientInputSchema),z.lazy(() => TreatmentPlanUpdateManyWithWhereWithoutPatientInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => TreatmentPlanScalarWhereInputSchema),z.lazy(() => TreatmentPlanScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const UserCreateNestedManyWithoutSpecializationInputSchema: z.ZodType<Prisma.UserCreateNestedManyWithoutSpecializationInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutSpecializationInputSchema),z.lazy(() => UserCreateWithoutSpecializationInputSchema).array(),z.lazy(() => UserUncheckedCreateWithoutSpecializationInputSchema),z.lazy(() => UserUncheckedCreateWithoutSpecializationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => UserCreateOrConnectWithoutSpecializationInputSchema),z.lazy(() => UserCreateOrConnectWithoutSpecializationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => UserCreateManySpecializationInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => UserWhereUniqueInputSchema),z.lazy(() => UserWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const TenantCreateNestedOneWithoutSpecializationsInputSchema: z.ZodType<Prisma.TenantCreateNestedOneWithoutSpecializationsInput> = z.object({
  create: z.union([ z.lazy(() => TenantCreateWithoutSpecializationsInputSchema),z.lazy(() => TenantUncheckedCreateWithoutSpecializationsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => TenantCreateOrConnectWithoutSpecializationsInputSchema).optional(),
  connect: z.lazy(() => TenantWhereUniqueInputSchema).optional()
}).strict();

export const UserUncheckedCreateNestedManyWithoutSpecializationInputSchema: z.ZodType<Prisma.UserUncheckedCreateNestedManyWithoutSpecializationInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutSpecializationInputSchema),z.lazy(() => UserCreateWithoutSpecializationInputSchema).array(),z.lazy(() => UserUncheckedCreateWithoutSpecializationInputSchema),z.lazy(() => UserUncheckedCreateWithoutSpecializationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => UserCreateOrConnectWithoutSpecializationInputSchema),z.lazy(() => UserCreateOrConnectWithoutSpecializationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => UserCreateManySpecializationInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => UserWhereUniqueInputSchema),z.lazy(() => UserWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const UserUpdateManyWithoutSpecializationNestedInputSchema: z.ZodType<Prisma.UserUpdateManyWithoutSpecializationNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutSpecializationInputSchema),z.lazy(() => UserCreateWithoutSpecializationInputSchema).array(),z.lazy(() => UserUncheckedCreateWithoutSpecializationInputSchema),z.lazy(() => UserUncheckedCreateWithoutSpecializationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => UserCreateOrConnectWithoutSpecializationInputSchema),z.lazy(() => UserCreateOrConnectWithoutSpecializationInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => UserUpsertWithWhereUniqueWithoutSpecializationInputSchema),z.lazy(() => UserUpsertWithWhereUniqueWithoutSpecializationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => UserCreateManySpecializationInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => UserWhereUniqueInputSchema),z.lazy(() => UserWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => UserWhereUniqueInputSchema),z.lazy(() => UserWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => UserWhereUniqueInputSchema),z.lazy(() => UserWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => UserWhereUniqueInputSchema),z.lazy(() => UserWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => UserUpdateWithWhereUniqueWithoutSpecializationInputSchema),z.lazy(() => UserUpdateWithWhereUniqueWithoutSpecializationInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => UserUpdateManyWithWhereWithoutSpecializationInputSchema),z.lazy(() => UserUpdateManyWithWhereWithoutSpecializationInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => UserScalarWhereInputSchema),z.lazy(() => UserScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const TenantUpdateOneRequiredWithoutSpecializationsNestedInputSchema: z.ZodType<Prisma.TenantUpdateOneRequiredWithoutSpecializationsNestedInput> = z.object({
  create: z.union([ z.lazy(() => TenantCreateWithoutSpecializationsInputSchema),z.lazy(() => TenantUncheckedCreateWithoutSpecializationsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => TenantCreateOrConnectWithoutSpecializationsInputSchema).optional(),
  upsert: z.lazy(() => TenantUpsertWithoutSpecializationsInputSchema).optional(),
  connect: z.lazy(() => TenantWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => TenantUpdateToOneWithWhereWithoutSpecializationsInputSchema),z.lazy(() => TenantUpdateWithoutSpecializationsInputSchema),z.lazy(() => TenantUncheckedUpdateWithoutSpecializationsInputSchema) ]).optional(),
}).strict();

export const UserUncheckedUpdateManyWithoutSpecializationNestedInputSchema: z.ZodType<Prisma.UserUncheckedUpdateManyWithoutSpecializationNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutSpecializationInputSchema),z.lazy(() => UserCreateWithoutSpecializationInputSchema).array(),z.lazy(() => UserUncheckedCreateWithoutSpecializationInputSchema),z.lazy(() => UserUncheckedCreateWithoutSpecializationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => UserCreateOrConnectWithoutSpecializationInputSchema),z.lazy(() => UserCreateOrConnectWithoutSpecializationInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => UserUpsertWithWhereUniqueWithoutSpecializationInputSchema),z.lazy(() => UserUpsertWithWhereUniqueWithoutSpecializationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => UserCreateManySpecializationInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => UserWhereUniqueInputSchema),z.lazy(() => UserWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => UserWhereUniqueInputSchema),z.lazy(() => UserWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => UserWhereUniqueInputSchema),z.lazy(() => UserWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => UserWhereUniqueInputSchema),z.lazy(() => UserWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => UserUpdateWithWhereUniqueWithoutSpecializationInputSchema),z.lazy(() => UserUpdateWithWhereUniqueWithoutSpecializationInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => UserUpdateManyWithWhereWithoutSpecializationInputSchema),z.lazy(() => UserUpdateManyWithWhereWithoutSpecializationInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => UserScalarWhereInputSchema),z.lazy(() => UserScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const EventActionCreateNestedManyWithoutEventInputSchema: z.ZodType<Prisma.EventActionCreateNestedManyWithoutEventInput> = z.object({
  create: z.union([ z.lazy(() => EventActionCreateWithoutEventInputSchema),z.lazy(() => EventActionCreateWithoutEventInputSchema).array(),z.lazy(() => EventActionUncheckedCreateWithoutEventInputSchema),z.lazy(() => EventActionUncheckedCreateWithoutEventInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => EventActionCreateOrConnectWithoutEventInputSchema),z.lazy(() => EventActionCreateOrConnectWithoutEventInputSchema).array() ]).optional(),
  createMany: z.lazy(() => EventActionCreateManyEventInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => EventActionWhereUniqueInputSchema),z.lazy(() => EventActionWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const TreatmentCreateNestedManyWithoutEventInputSchema: z.ZodType<Prisma.TreatmentCreateNestedManyWithoutEventInput> = z.object({
  create: z.union([ z.lazy(() => TreatmentCreateWithoutEventInputSchema),z.lazy(() => TreatmentCreateWithoutEventInputSchema).array(),z.lazy(() => TreatmentUncheckedCreateWithoutEventInputSchema),z.lazy(() => TreatmentUncheckedCreateWithoutEventInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TreatmentCreateOrConnectWithoutEventInputSchema),z.lazy(() => TreatmentCreateOrConnectWithoutEventInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TreatmentCreateManyEventInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => TreatmentWhereUniqueInputSchema),z.lazy(() => TreatmentWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const PatientCreateNestedOneWithoutAppointmentsInputSchema: z.ZodType<Prisma.PatientCreateNestedOneWithoutAppointmentsInput> = z.object({
  create: z.union([ z.lazy(() => PatientCreateWithoutAppointmentsInputSchema),z.lazy(() => PatientUncheckedCreateWithoutAppointmentsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => PatientCreateOrConnectWithoutAppointmentsInputSchema).optional(),
  connect: z.lazy(() => PatientWhereUniqueInputSchema).optional()
}).strict();

export const UserCreateNestedOneWithoutEventsInputSchema: z.ZodType<Prisma.UserCreateNestedOneWithoutEventsInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutEventsInputSchema),z.lazy(() => UserUncheckedCreateWithoutEventsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutEventsInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional()
}).strict();

export const TenantCreateNestedOneWithoutEventsInputSchema: z.ZodType<Prisma.TenantCreateNestedOneWithoutEventsInput> = z.object({
  create: z.union([ z.lazy(() => TenantCreateWithoutEventsInputSchema),z.lazy(() => TenantUncheckedCreateWithoutEventsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => TenantCreateOrConnectWithoutEventsInputSchema).optional(),
  connect: z.lazy(() => TenantWhereUniqueInputSchema).optional()
}).strict();

export const EventActionUncheckedCreateNestedManyWithoutEventInputSchema: z.ZodType<Prisma.EventActionUncheckedCreateNestedManyWithoutEventInput> = z.object({
  create: z.union([ z.lazy(() => EventActionCreateWithoutEventInputSchema),z.lazy(() => EventActionCreateWithoutEventInputSchema).array(),z.lazy(() => EventActionUncheckedCreateWithoutEventInputSchema),z.lazy(() => EventActionUncheckedCreateWithoutEventInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => EventActionCreateOrConnectWithoutEventInputSchema),z.lazy(() => EventActionCreateOrConnectWithoutEventInputSchema).array() ]).optional(),
  createMany: z.lazy(() => EventActionCreateManyEventInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => EventActionWhereUniqueInputSchema),z.lazy(() => EventActionWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const TreatmentUncheckedCreateNestedManyWithoutEventInputSchema: z.ZodType<Prisma.TreatmentUncheckedCreateNestedManyWithoutEventInput> = z.object({
  create: z.union([ z.lazy(() => TreatmentCreateWithoutEventInputSchema),z.lazy(() => TreatmentCreateWithoutEventInputSchema).array(),z.lazy(() => TreatmentUncheckedCreateWithoutEventInputSchema),z.lazy(() => TreatmentUncheckedCreateWithoutEventInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TreatmentCreateOrConnectWithoutEventInputSchema),z.lazy(() => TreatmentCreateOrConnectWithoutEventInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TreatmentCreateManyEventInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => TreatmentWhereUniqueInputSchema),z.lazy(() => TreatmentWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const EnumEventTypeFieldUpdateOperationsInputSchema: z.ZodType<Prisma.EnumEventTypeFieldUpdateOperationsInput> = z.object({
  set: z.lazy(() => EventTypeSchema).optional()
}).strict();

export const EnumEventStatusFieldUpdateOperationsInputSchema: z.ZodType<Prisma.EnumEventStatusFieldUpdateOperationsInput> = z.object({
  set: z.lazy(() => EventStatusSchema).optional()
}).strict();

export const EventActionUpdateManyWithoutEventNestedInputSchema: z.ZodType<Prisma.EventActionUpdateManyWithoutEventNestedInput> = z.object({
  create: z.union([ z.lazy(() => EventActionCreateWithoutEventInputSchema),z.lazy(() => EventActionCreateWithoutEventInputSchema).array(),z.lazy(() => EventActionUncheckedCreateWithoutEventInputSchema),z.lazy(() => EventActionUncheckedCreateWithoutEventInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => EventActionCreateOrConnectWithoutEventInputSchema),z.lazy(() => EventActionCreateOrConnectWithoutEventInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => EventActionUpsertWithWhereUniqueWithoutEventInputSchema),z.lazy(() => EventActionUpsertWithWhereUniqueWithoutEventInputSchema).array() ]).optional(),
  createMany: z.lazy(() => EventActionCreateManyEventInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => EventActionWhereUniqueInputSchema),z.lazy(() => EventActionWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => EventActionWhereUniqueInputSchema),z.lazy(() => EventActionWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => EventActionWhereUniqueInputSchema),z.lazy(() => EventActionWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => EventActionWhereUniqueInputSchema),z.lazy(() => EventActionWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => EventActionUpdateWithWhereUniqueWithoutEventInputSchema),z.lazy(() => EventActionUpdateWithWhereUniqueWithoutEventInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => EventActionUpdateManyWithWhereWithoutEventInputSchema),z.lazy(() => EventActionUpdateManyWithWhereWithoutEventInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => EventActionScalarWhereInputSchema),z.lazy(() => EventActionScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const TreatmentUpdateManyWithoutEventNestedInputSchema: z.ZodType<Prisma.TreatmentUpdateManyWithoutEventNestedInput> = z.object({
  create: z.union([ z.lazy(() => TreatmentCreateWithoutEventInputSchema),z.lazy(() => TreatmentCreateWithoutEventInputSchema).array(),z.lazy(() => TreatmentUncheckedCreateWithoutEventInputSchema),z.lazy(() => TreatmentUncheckedCreateWithoutEventInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TreatmentCreateOrConnectWithoutEventInputSchema),z.lazy(() => TreatmentCreateOrConnectWithoutEventInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => TreatmentUpsertWithWhereUniqueWithoutEventInputSchema),z.lazy(() => TreatmentUpsertWithWhereUniqueWithoutEventInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TreatmentCreateManyEventInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => TreatmentWhereUniqueInputSchema),z.lazy(() => TreatmentWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => TreatmentWhereUniqueInputSchema),z.lazy(() => TreatmentWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => TreatmentWhereUniqueInputSchema),z.lazy(() => TreatmentWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => TreatmentWhereUniqueInputSchema),z.lazy(() => TreatmentWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => TreatmentUpdateWithWhereUniqueWithoutEventInputSchema),z.lazy(() => TreatmentUpdateWithWhereUniqueWithoutEventInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => TreatmentUpdateManyWithWhereWithoutEventInputSchema),z.lazy(() => TreatmentUpdateManyWithWhereWithoutEventInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => TreatmentScalarWhereInputSchema),z.lazy(() => TreatmentScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const PatientUpdateOneWithoutAppointmentsNestedInputSchema: z.ZodType<Prisma.PatientUpdateOneWithoutAppointmentsNestedInput> = z.object({
  create: z.union([ z.lazy(() => PatientCreateWithoutAppointmentsInputSchema),z.lazy(() => PatientUncheckedCreateWithoutAppointmentsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => PatientCreateOrConnectWithoutAppointmentsInputSchema).optional(),
  upsert: z.lazy(() => PatientUpsertWithoutAppointmentsInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => PatientWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => PatientWhereInputSchema) ]).optional(),
  connect: z.lazy(() => PatientWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => PatientUpdateToOneWithWhereWithoutAppointmentsInputSchema),z.lazy(() => PatientUpdateWithoutAppointmentsInputSchema),z.lazy(() => PatientUncheckedUpdateWithoutAppointmentsInputSchema) ]).optional(),
}).strict();

export const UserUpdateOneRequiredWithoutEventsNestedInputSchema: z.ZodType<Prisma.UserUpdateOneRequiredWithoutEventsNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutEventsInputSchema),z.lazy(() => UserUncheckedCreateWithoutEventsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutEventsInputSchema).optional(),
  upsert: z.lazy(() => UserUpsertWithoutEventsInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => UserUpdateToOneWithWhereWithoutEventsInputSchema),z.lazy(() => UserUpdateWithoutEventsInputSchema),z.lazy(() => UserUncheckedUpdateWithoutEventsInputSchema) ]).optional(),
}).strict();

export const TenantUpdateOneRequiredWithoutEventsNestedInputSchema: z.ZodType<Prisma.TenantUpdateOneRequiredWithoutEventsNestedInput> = z.object({
  create: z.union([ z.lazy(() => TenantCreateWithoutEventsInputSchema),z.lazy(() => TenantUncheckedCreateWithoutEventsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => TenantCreateOrConnectWithoutEventsInputSchema).optional(),
  upsert: z.lazy(() => TenantUpsertWithoutEventsInputSchema).optional(),
  connect: z.lazy(() => TenantWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => TenantUpdateToOneWithWhereWithoutEventsInputSchema),z.lazy(() => TenantUpdateWithoutEventsInputSchema),z.lazy(() => TenantUncheckedUpdateWithoutEventsInputSchema) ]).optional(),
}).strict();

export const EventActionUncheckedUpdateManyWithoutEventNestedInputSchema: z.ZodType<Prisma.EventActionUncheckedUpdateManyWithoutEventNestedInput> = z.object({
  create: z.union([ z.lazy(() => EventActionCreateWithoutEventInputSchema),z.lazy(() => EventActionCreateWithoutEventInputSchema).array(),z.lazy(() => EventActionUncheckedCreateWithoutEventInputSchema),z.lazy(() => EventActionUncheckedCreateWithoutEventInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => EventActionCreateOrConnectWithoutEventInputSchema),z.lazy(() => EventActionCreateOrConnectWithoutEventInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => EventActionUpsertWithWhereUniqueWithoutEventInputSchema),z.lazy(() => EventActionUpsertWithWhereUniqueWithoutEventInputSchema).array() ]).optional(),
  createMany: z.lazy(() => EventActionCreateManyEventInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => EventActionWhereUniqueInputSchema),z.lazy(() => EventActionWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => EventActionWhereUniqueInputSchema),z.lazy(() => EventActionWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => EventActionWhereUniqueInputSchema),z.lazy(() => EventActionWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => EventActionWhereUniqueInputSchema),z.lazy(() => EventActionWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => EventActionUpdateWithWhereUniqueWithoutEventInputSchema),z.lazy(() => EventActionUpdateWithWhereUniqueWithoutEventInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => EventActionUpdateManyWithWhereWithoutEventInputSchema),z.lazy(() => EventActionUpdateManyWithWhereWithoutEventInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => EventActionScalarWhereInputSchema),z.lazy(() => EventActionScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const TreatmentUncheckedUpdateManyWithoutEventNestedInputSchema: z.ZodType<Prisma.TreatmentUncheckedUpdateManyWithoutEventNestedInput> = z.object({
  create: z.union([ z.lazy(() => TreatmentCreateWithoutEventInputSchema),z.lazy(() => TreatmentCreateWithoutEventInputSchema).array(),z.lazy(() => TreatmentUncheckedCreateWithoutEventInputSchema),z.lazy(() => TreatmentUncheckedCreateWithoutEventInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TreatmentCreateOrConnectWithoutEventInputSchema),z.lazy(() => TreatmentCreateOrConnectWithoutEventInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => TreatmentUpsertWithWhereUniqueWithoutEventInputSchema),z.lazy(() => TreatmentUpsertWithWhereUniqueWithoutEventInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TreatmentCreateManyEventInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => TreatmentWhereUniqueInputSchema),z.lazy(() => TreatmentWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => TreatmentWhereUniqueInputSchema),z.lazy(() => TreatmentWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => TreatmentWhereUniqueInputSchema),z.lazy(() => TreatmentWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => TreatmentWhereUniqueInputSchema),z.lazy(() => TreatmentWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => TreatmentUpdateWithWhereUniqueWithoutEventInputSchema),z.lazy(() => TreatmentUpdateWithWhereUniqueWithoutEventInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => TreatmentUpdateManyWithWhereWithoutEventInputSchema),z.lazy(() => TreatmentUpdateManyWithWhereWithoutEventInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => TreatmentScalarWhereInputSchema),z.lazy(() => TreatmentScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const UserCreateNestedOneWithoutEventActionsInputSchema: z.ZodType<Prisma.UserCreateNestedOneWithoutEventActionsInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutEventActionsInputSchema),z.lazy(() => UserUncheckedCreateWithoutEventActionsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutEventActionsInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional()
}).strict();

export const EventCreateNestedOneWithoutActionsInputSchema: z.ZodType<Prisma.EventCreateNestedOneWithoutActionsInput> = z.object({
  create: z.union([ z.lazy(() => EventCreateWithoutActionsInputSchema),z.lazy(() => EventUncheckedCreateWithoutActionsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => EventCreateOrConnectWithoutActionsInputSchema).optional(),
  connect: z.lazy(() => EventWhereUniqueInputSchema).optional()
}).strict();

export const UserUpdateOneRequiredWithoutEventActionsNestedInputSchema: z.ZodType<Prisma.UserUpdateOneRequiredWithoutEventActionsNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutEventActionsInputSchema),z.lazy(() => UserUncheckedCreateWithoutEventActionsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutEventActionsInputSchema).optional(),
  upsert: z.lazy(() => UserUpsertWithoutEventActionsInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => UserUpdateToOneWithWhereWithoutEventActionsInputSchema),z.lazy(() => UserUpdateWithoutEventActionsInputSchema),z.lazy(() => UserUncheckedUpdateWithoutEventActionsInputSchema) ]).optional(),
}).strict();

export const EventUpdateOneRequiredWithoutActionsNestedInputSchema: z.ZodType<Prisma.EventUpdateOneRequiredWithoutActionsNestedInput> = z.object({
  create: z.union([ z.lazy(() => EventCreateWithoutActionsInputSchema),z.lazy(() => EventUncheckedCreateWithoutActionsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => EventCreateOrConnectWithoutActionsInputSchema).optional(),
  upsert: z.lazy(() => EventUpsertWithoutActionsInputSchema).optional(),
  connect: z.lazy(() => EventWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => EventUpdateToOneWithWhereWithoutActionsInputSchema),z.lazy(() => EventUpdateWithoutActionsInputSchema),z.lazy(() => EventUncheckedUpdateWithoutActionsInputSchema) ]).optional(),
}).strict();

export const ProductCreatetagsInputSchema: z.ZodType<Prisma.ProductCreatetagsInput> = z.object({
  set: z.string().array()
}).strict();

export const PriceCreateNestedManyWithoutProductInputSchema: z.ZodType<Prisma.PriceCreateNestedManyWithoutProductInput> = z.object({
  create: z.union([ z.lazy(() => PriceCreateWithoutProductInputSchema),z.lazy(() => PriceCreateWithoutProductInputSchema).array(),z.lazy(() => PriceUncheckedCreateWithoutProductInputSchema),z.lazy(() => PriceUncheckedCreateWithoutProductInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => PriceCreateOrConnectWithoutProductInputSchema),z.lazy(() => PriceCreateOrConnectWithoutProductInputSchema).array() ]).optional(),
  createMany: z.lazy(() => PriceCreateManyProductInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => PriceWhereUniqueInputSchema),z.lazy(() => PriceWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const TreatmentCreateNestedManyWithoutProductInputSchema: z.ZodType<Prisma.TreatmentCreateNestedManyWithoutProductInput> = z.object({
  create: z.union([ z.lazy(() => TreatmentCreateWithoutProductInputSchema),z.lazy(() => TreatmentCreateWithoutProductInputSchema).array(),z.lazy(() => TreatmentUncheckedCreateWithoutProductInputSchema),z.lazy(() => TreatmentUncheckedCreateWithoutProductInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TreatmentCreateOrConnectWithoutProductInputSchema),z.lazy(() => TreatmentCreateOrConnectWithoutProductInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TreatmentCreateManyProductInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => TreatmentWhereUniqueInputSchema),z.lazy(() => TreatmentWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ProductCategoryCreateNestedOneWithoutProductsInputSchema: z.ZodType<Prisma.ProductCategoryCreateNestedOneWithoutProductsInput> = z.object({
  create: z.union([ z.lazy(() => ProductCategoryCreateWithoutProductsInputSchema),z.lazy(() => ProductCategoryUncheckedCreateWithoutProductsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ProductCategoryCreateOrConnectWithoutProductsInputSchema).optional(),
  connect: z.lazy(() => ProductCategoryWhereUniqueInputSchema).optional()
}).strict();

export const TenantCreateNestedOneWithoutProductsInputSchema: z.ZodType<Prisma.TenantCreateNestedOneWithoutProductsInput> = z.object({
  create: z.union([ z.lazy(() => TenantCreateWithoutProductsInputSchema),z.lazy(() => TenantUncheckedCreateWithoutProductsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => TenantCreateOrConnectWithoutProductsInputSchema).optional(),
  connect: z.lazy(() => TenantWhereUniqueInputSchema).optional()
}).strict();

export const PriceUncheckedCreateNestedManyWithoutProductInputSchema: z.ZodType<Prisma.PriceUncheckedCreateNestedManyWithoutProductInput> = z.object({
  create: z.union([ z.lazy(() => PriceCreateWithoutProductInputSchema),z.lazy(() => PriceCreateWithoutProductInputSchema).array(),z.lazy(() => PriceUncheckedCreateWithoutProductInputSchema),z.lazy(() => PriceUncheckedCreateWithoutProductInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => PriceCreateOrConnectWithoutProductInputSchema),z.lazy(() => PriceCreateOrConnectWithoutProductInputSchema).array() ]).optional(),
  createMany: z.lazy(() => PriceCreateManyProductInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => PriceWhereUniqueInputSchema),z.lazy(() => PriceWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const TreatmentUncheckedCreateNestedManyWithoutProductInputSchema: z.ZodType<Prisma.TreatmentUncheckedCreateNestedManyWithoutProductInput> = z.object({
  create: z.union([ z.lazy(() => TreatmentCreateWithoutProductInputSchema),z.lazy(() => TreatmentCreateWithoutProductInputSchema).array(),z.lazy(() => TreatmentUncheckedCreateWithoutProductInputSchema),z.lazy(() => TreatmentUncheckedCreateWithoutProductInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TreatmentCreateOrConnectWithoutProductInputSchema),z.lazy(() => TreatmentCreateOrConnectWithoutProductInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TreatmentCreateManyProductInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => TreatmentWhereUniqueInputSchema),z.lazy(() => TreatmentWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ProductUpdatetagsInputSchema: z.ZodType<Prisma.ProductUpdatetagsInput> = z.object({
  set: z.string().array().optional(),
  push: z.union([ z.string(),z.string().array() ]).optional(),
}).strict();

export const PriceUpdateManyWithoutProductNestedInputSchema: z.ZodType<Prisma.PriceUpdateManyWithoutProductNestedInput> = z.object({
  create: z.union([ z.lazy(() => PriceCreateWithoutProductInputSchema),z.lazy(() => PriceCreateWithoutProductInputSchema).array(),z.lazy(() => PriceUncheckedCreateWithoutProductInputSchema),z.lazy(() => PriceUncheckedCreateWithoutProductInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => PriceCreateOrConnectWithoutProductInputSchema),z.lazy(() => PriceCreateOrConnectWithoutProductInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => PriceUpsertWithWhereUniqueWithoutProductInputSchema),z.lazy(() => PriceUpsertWithWhereUniqueWithoutProductInputSchema).array() ]).optional(),
  createMany: z.lazy(() => PriceCreateManyProductInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => PriceWhereUniqueInputSchema),z.lazy(() => PriceWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => PriceWhereUniqueInputSchema),z.lazy(() => PriceWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => PriceWhereUniqueInputSchema),z.lazy(() => PriceWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => PriceWhereUniqueInputSchema),z.lazy(() => PriceWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => PriceUpdateWithWhereUniqueWithoutProductInputSchema),z.lazy(() => PriceUpdateWithWhereUniqueWithoutProductInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => PriceUpdateManyWithWhereWithoutProductInputSchema),z.lazy(() => PriceUpdateManyWithWhereWithoutProductInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => PriceScalarWhereInputSchema),z.lazy(() => PriceScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const TreatmentUpdateManyWithoutProductNestedInputSchema: z.ZodType<Prisma.TreatmentUpdateManyWithoutProductNestedInput> = z.object({
  create: z.union([ z.lazy(() => TreatmentCreateWithoutProductInputSchema),z.lazy(() => TreatmentCreateWithoutProductInputSchema).array(),z.lazy(() => TreatmentUncheckedCreateWithoutProductInputSchema),z.lazy(() => TreatmentUncheckedCreateWithoutProductInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TreatmentCreateOrConnectWithoutProductInputSchema),z.lazy(() => TreatmentCreateOrConnectWithoutProductInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => TreatmentUpsertWithWhereUniqueWithoutProductInputSchema),z.lazy(() => TreatmentUpsertWithWhereUniqueWithoutProductInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TreatmentCreateManyProductInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => TreatmentWhereUniqueInputSchema),z.lazy(() => TreatmentWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => TreatmentWhereUniqueInputSchema),z.lazy(() => TreatmentWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => TreatmentWhereUniqueInputSchema),z.lazy(() => TreatmentWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => TreatmentWhereUniqueInputSchema),z.lazy(() => TreatmentWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => TreatmentUpdateWithWhereUniqueWithoutProductInputSchema),z.lazy(() => TreatmentUpdateWithWhereUniqueWithoutProductInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => TreatmentUpdateManyWithWhereWithoutProductInputSchema),z.lazy(() => TreatmentUpdateManyWithWhereWithoutProductInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => TreatmentScalarWhereInputSchema),z.lazy(() => TreatmentScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ProductCategoryUpdateOneWithoutProductsNestedInputSchema: z.ZodType<Prisma.ProductCategoryUpdateOneWithoutProductsNestedInput> = z.object({
  create: z.union([ z.lazy(() => ProductCategoryCreateWithoutProductsInputSchema),z.lazy(() => ProductCategoryUncheckedCreateWithoutProductsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ProductCategoryCreateOrConnectWithoutProductsInputSchema).optional(),
  upsert: z.lazy(() => ProductCategoryUpsertWithoutProductsInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => ProductCategoryWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => ProductCategoryWhereInputSchema) ]).optional(),
  connect: z.lazy(() => ProductCategoryWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => ProductCategoryUpdateToOneWithWhereWithoutProductsInputSchema),z.lazy(() => ProductCategoryUpdateWithoutProductsInputSchema),z.lazy(() => ProductCategoryUncheckedUpdateWithoutProductsInputSchema) ]).optional(),
}).strict();

export const TenantUpdateOneRequiredWithoutProductsNestedInputSchema: z.ZodType<Prisma.TenantUpdateOneRequiredWithoutProductsNestedInput> = z.object({
  create: z.union([ z.lazy(() => TenantCreateWithoutProductsInputSchema),z.lazy(() => TenantUncheckedCreateWithoutProductsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => TenantCreateOrConnectWithoutProductsInputSchema).optional(),
  upsert: z.lazy(() => TenantUpsertWithoutProductsInputSchema).optional(),
  connect: z.lazy(() => TenantWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => TenantUpdateToOneWithWhereWithoutProductsInputSchema),z.lazy(() => TenantUpdateWithoutProductsInputSchema),z.lazy(() => TenantUncheckedUpdateWithoutProductsInputSchema) ]).optional(),
}).strict();

export const PriceUncheckedUpdateManyWithoutProductNestedInputSchema: z.ZodType<Prisma.PriceUncheckedUpdateManyWithoutProductNestedInput> = z.object({
  create: z.union([ z.lazy(() => PriceCreateWithoutProductInputSchema),z.lazy(() => PriceCreateWithoutProductInputSchema).array(),z.lazy(() => PriceUncheckedCreateWithoutProductInputSchema),z.lazy(() => PriceUncheckedCreateWithoutProductInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => PriceCreateOrConnectWithoutProductInputSchema),z.lazy(() => PriceCreateOrConnectWithoutProductInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => PriceUpsertWithWhereUniqueWithoutProductInputSchema),z.lazy(() => PriceUpsertWithWhereUniqueWithoutProductInputSchema).array() ]).optional(),
  createMany: z.lazy(() => PriceCreateManyProductInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => PriceWhereUniqueInputSchema),z.lazy(() => PriceWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => PriceWhereUniqueInputSchema),z.lazy(() => PriceWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => PriceWhereUniqueInputSchema),z.lazy(() => PriceWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => PriceWhereUniqueInputSchema),z.lazy(() => PriceWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => PriceUpdateWithWhereUniqueWithoutProductInputSchema),z.lazy(() => PriceUpdateWithWhereUniqueWithoutProductInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => PriceUpdateManyWithWhereWithoutProductInputSchema),z.lazy(() => PriceUpdateManyWithWhereWithoutProductInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => PriceScalarWhereInputSchema),z.lazy(() => PriceScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const TreatmentUncheckedUpdateManyWithoutProductNestedInputSchema: z.ZodType<Prisma.TreatmentUncheckedUpdateManyWithoutProductNestedInput> = z.object({
  create: z.union([ z.lazy(() => TreatmentCreateWithoutProductInputSchema),z.lazy(() => TreatmentCreateWithoutProductInputSchema).array(),z.lazy(() => TreatmentUncheckedCreateWithoutProductInputSchema),z.lazy(() => TreatmentUncheckedCreateWithoutProductInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TreatmentCreateOrConnectWithoutProductInputSchema),z.lazy(() => TreatmentCreateOrConnectWithoutProductInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => TreatmentUpsertWithWhereUniqueWithoutProductInputSchema),z.lazy(() => TreatmentUpsertWithWhereUniqueWithoutProductInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TreatmentCreateManyProductInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => TreatmentWhereUniqueInputSchema),z.lazy(() => TreatmentWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => TreatmentWhereUniqueInputSchema),z.lazy(() => TreatmentWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => TreatmentWhereUniqueInputSchema),z.lazy(() => TreatmentWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => TreatmentWhereUniqueInputSchema),z.lazy(() => TreatmentWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => TreatmentUpdateWithWhereUniqueWithoutProductInputSchema),z.lazy(() => TreatmentUpdateWithWhereUniqueWithoutProductInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => TreatmentUpdateManyWithWhereWithoutProductInputSchema),z.lazy(() => TreatmentUpdateManyWithWhereWithoutProductInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => TreatmentScalarWhereInputSchema),z.lazy(() => TreatmentScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ProductCreateNestedOneWithoutPriceHistoryInputSchema: z.ZodType<Prisma.ProductCreateNestedOneWithoutPriceHistoryInput> = z.object({
  create: z.union([ z.lazy(() => ProductCreateWithoutPriceHistoryInputSchema),z.lazy(() => ProductUncheckedCreateWithoutPriceHistoryInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ProductCreateOrConnectWithoutPriceHistoryInputSchema).optional(),
  connect: z.lazy(() => ProductWhereUniqueInputSchema).optional()
}).strict();

export const ProductUpdateOneRequiredWithoutPriceHistoryNestedInputSchema: z.ZodType<Prisma.ProductUpdateOneRequiredWithoutPriceHistoryNestedInput> = z.object({
  create: z.union([ z.lazy(() => ProductCreateWithoutPriceHistoryInputSchema),z.lazy(() => ProductUncheckedCreateWithoutPriceHistoryInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ProductCreateOrConnectWithoutPriceHistoryInputSchema).optional(),
  upsert: z.lazy(() => ProductUpsertWithoutPriceHistoryInputSchema).optional(),
  connect: z.lazy(() => ProductWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => ProductUpdateToOneWithWhereWithoutPriceHistoryInputSchema),z.lazy(() => ProductUpdateWithoutPriceHistoryInputSchema),z.lazy(() => ProductUncheckedUpdateWithoutPriceHistoryInputSchema) ]).optional(),
}).strict();

export const ProductCategoryCreateNestedOneWithoutSubcategoriesInputSchema: z.ZodType<Prisma.ProductCategoryCreateNestedOneWithoutSubcategoriesInput> = z.object({
  create: z.union([ z.lazy(() => ProductCategoryCreateWithoutSubcategoriesInputSchema),z.lazy(() => ProductCategoryUncheckedCreateWithoutSubcategoriesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ProductCategoryCreateOrConnectWithoutSubcategoriesInputSchema).optional(),
  connect: z.lazy(() => ProductCategoryWhereUniqueInputSchema).optional()
}).strict();

export const ProductCategoryCreateNestedManyWithoutParentCategoryInputSchema: z.ZodType<Prisma.ProductCategoryCreateNestedManyWithoutParentCategoryInput> = z.object({
  create: z.union([ z.lazy(() => ProductCategoryCreateWithoutParentCategoryInputSchema),z.lazy(() => ProductCategoryCreateWithoutParentCategoryInputSchema).array(),z.lazy(() => ProductCategoryUncheckedCreateWithoutParentCategoryInputSchema),z.lazy(() => ProductCategoryUncheckedCreateWithoutParentCategoryInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ProductCategoryCreateOrConnectWithoutParentCategoryInputSchema),z.lazy(() => ProductCategoryCreateOrConnectWithoutParentCategoryInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ProductCategoryCreateManyParentCategoryInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ProductCategoryWhereUniqueInputSchema),z.lazy(() => ProductCategoryWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ProductCreateNestedManyWithoutCategoryInputSchema: z.ZodType<Prisma.ProductCreateNestedManyWithoutCategoryInput> = z.object({
  create: z.union([ z.lazy(() => ProductCreateWithoutCategoryInputSchema),z.lazy(() => ProductCreateWithoutCategoryInputSchema).array(),z.lazy(() => ProductUncheckedCreateWithoutCategoryInputSchema),z.lazy(() => ProductUncheckedCreateWithoutCategoryInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ProductCreateOrConnectWithoutCategoryInputSchema),z.lazy(() => ProductCreateOrConnectWithoutCategoryInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ProductCreateManyCategoryInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ProductWhereUniqueInputSchema),z.lazy(() => ProductWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ProductCategoryUncheckedCreateNestedManyWithoutParentCategoryInputSchema: z.ZodType<Prisma.ProductCategoryUncheckedCreateNestedManyWithoutParentCategoryInput> = z.object({
  create: z.union([ z.lazy(() => ProductCategoryCreateWithoutParentCategoryInputSchema),z.lazy(() => ProductCategoryCreateWithoutParentCategoryInputSchema).array(),z.lazy(() => ProductCategoryUncheckedCreateWithoutParentCategoryInputSchema),z.lazy(() => ProductCategoryUncheckedCreateWithoutParentCategoryInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ProductCategoryCreateOrConnectWithoutParentCategoryInputSchema),z.lazy(() => ProductCategoryCreateOrConnectWithoutParentCategoryInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ProductCategoryCreateManyParentCategoryInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ProductCategoryWhereUniqueInputSchema),z.lazy(() => ProductCategoryWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ProductUncheckedCreateNestedManyWithoutCategoryInputSchema: z.ZodType<Prisma.ProductUncheckedCreateNestedManyWithoutCategoryInput> = z.object({
  create: z.union([ z.lazy(() => ProductCreateWithoutCategoryInputSchema),z.lazy(() => ProductCreateWithoutCategoryInputSchema).array(),z.lazy(() => ProductUncheckedCreateWithoutCategoryInputSchema),z.lazy(() => ProductUncheckedCreateWithoutCategoryInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ProductCreateOrConnectWithoutCategoryInputSchema),z.lazy(() => ProductCreateOrConnectWithoutCategoryInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ProductCreateManyCategoryInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ProductWhereUniqueInputSchema),z.lazy(() => ProductWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ProductCategoryUpdateOneWithoutSubcategoriesNestedInputSchema: z.ZodType<Prisma.ProductCategoryUpdateOneWithoutSubcategoriesNestedInput> = z.object({
  create: z.union([ z.lazy(() => ProductCategoryCreateWithoutSubcategoriesInputSchema),z.lazy(() => ProductCategoryUncheckedCreateWithoutSubcategoriesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ProductCategoryCreateOrConnectWithoutSubcategoriesInputSchema).optional(),
  upsert: z.lazy(() => ProductCategoryUpsertWithoutSubcategoriesInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => ProductCategoryWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => ProductCategoryWhereInputSchema) ]).optional(),
  connect: z.lazy(() => ProductCategoryWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => ProductCategoryUpdateToOneWithWhereWithoutSubcategoriesInputSchema),z.lazy(() => ProductCategoryUpdateWithoutSubcategoriesInputSchema),z.lazy(() => ProductCategoryUncheckedUpdateWithoutSubcategoriesInputSchema) ]).optional(),
}).strict();

export const ProductCategoryUpdateManyWithoutParentCategoryNestedInputSchema: z.ZodType<Prisma.ProductCategoryUpdateManyWithoutParentCategoryNestedInput> = z.object({
  create: z.union([ z.lazy(() => ProductCategoryCreateWithoutParentCategoryInputSchema),z.lazy(() => ProductCategoryCreateWithoutParentCategoryInputSchema).array(),z.lazy(() => ProductCategoryUncheckedCreateWithoutParentCategoryInputSchema),z.lazy(() => ProductCategoryUncheckedCreateWithoutParentCategoryInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ProductCategoryCreateOrConnectWithoutParentCategoryInputSchema),z.lazy(() => ProductCategoryCreateOrConnectWithoutParentCategoryInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ProductCategoryUpsertWithWhereUniqueWithoutParentCategoryInputSchema),z.lazy(() => ProductCategoryUpsertWithWhereUniqueWithoutParentCategoryInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ProductCategoryCreateManyParentCategoryInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ProductCategoryWhereUniqueInputSchema),z.lazy(() => ProductCategoryWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ProductCategoryWhereUniqueInputSchema),z.lazy(() => ProductCategoryWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ProductCategoryWhereUniqueInputSchema),z.lazy(() => ProductCategoryWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ProductCategoryWhereUniqueInputSchema),z.lazy(() => ProductCategoryWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ProductCategoryUpdateWithWhereUniqueWithoutParentCategoryInputSchema),z.lazy(() => ProductCategoryUpdateWithWhereUniqueWithoutParentCategoryInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ProductCategoryUpdateManyWithWhereWithoutParentCategoryInputSchema),z.lazy(() => ProductCategoryUpdateManyWithWhereWithoutParentCategoryInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ProductCategoryScalarWhereInputSchema),z.lazy(() => ProductCategoryScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ProductUpdateManyWithoutCategoryNestedInputSchema: z.ZodType<Prisma.ProductUpdateManyWithoutCategoryNestedInput> = z.object({
  create: z.union([ z.lazy(() => ProductCreateWithoutCategoryInputSchema),z.lazy(() => ProductCreateWithoutCategoryInputSchema).array(),z.lazy(() => ProductUncheckedCreateWithoutCategoryInputSchema),z.lazy(() => ProductUncheckedCreateWithoutCategoryInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ProductCreateOrConnectWithoutCategoryInputSchema),z.lazy(() => ProductCreateOrConnectWithoutCategoryInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ProductUpsertWithWhereUniqueWithoutCategoryInputSchema),z.lazy(() => ProductUpsertWithWhereUniqueWithoutCategoryInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ProductCreateManyCategoryInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ProductWhereUniqueInputSchema),z.lazy(() => ProductWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ProductWhereUniqueInputSchema),z.lazy(() => ProductWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ProductWhereUniqueInputSchema),z.lazy(() => ProductWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ProductWhereUniqueInputSchema),z.lazy(() => ProductWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ProductUpdateWithWhereUniqueWithoutCategoryInputSchema),z.lazy(() => ProductUpdateWithWhereUniqueWithoutCategoryInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ProductUpdateManyWithWhereWithoutCategoryInputSchema),z.lazy(() => ProductUpdateManyWithWhereWithoutCategoryInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ProductScalarWhereInputSchema),z.lazy(() => ProductScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ProductCategoryUncheckedUpdateManyWithoutParentCategoryNestedInputSchema: z.ZodType<Prisma.ProductCategoryUncheckedUpdateManyWithoutParentCategoryNestedInput> = z.object({
  create: z.union([ z.lazy(() => ProductCategoryCreateWithoutParentCategoryInputSchema),z.lazy(() => ProductCategoryCreateWithoutParentCategoryInputSchema).array(),z.lazy(() => ProductCategoryUncheckedCreateWithoutParentCategoryInputSchema),z.lazy(() => ProductCategoryUncheckedCreateWithoutParentCategoryInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ProductCategoryCreateOrConnectWithoutParentCategoryInputSchema),z.lazy(() => ProductCategoryCreateOrConnectWithoutParentCategoryInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ProductCategoryUpsertWithWhereUniqueWithoutParentCategoryInputSchema),z.lazy(() => ProductCategoryUpsertWithWhereUniqueWithoutParentCategoryInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ProductCategoryCreateManyParentCategoryInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ProductCategoryWhereUniqueInputSchema),z.lazy(() => ProductCategoryWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ProductCategoryWhereUniqueInputSchema),z.lazy(() => ProductCategoryWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ProductCategoryWhereUniqueInputSchema),z.lazy(() => ProductCategoryWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ProductCategoryWhereUniqueInputSchema),z.lazy(() => ProductCategoryWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ProductCategoryUpdateWithWhereUniqueWithoutParentCategoryInputSchema),z.lazy(() => ProductCategoryUpdateWithWhereUniqueWithoutParentCategoryInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ProductCategoryUpdateManyWithWhereWithoutParentCategoryInputSchema),z.lazy(() => ProductCategoryUpdateManyWithWhereWithoutParentCategoryInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ProductCategoryScalarWhereInputSchema),z.lazy(() => ProductCategoryScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ProductUncheckedUpdateManyWithoutCategoryNestedInputSchema: z.ZodType<Prisma.ProductUncheckedUpdateManyWithoutCategoryNestedInput> = z.object({
  create: z.union([ z.lazy(() => ProductCreateWithoutCategoryInputSchema),z.lazy(() => ProductCreateWithoutCategoryInputSchema).array(),z.lazy(() => ProductUncheckedCreateWithoutCategoryInputSchema),z.lazy(() => ProductUncheckedCreateWithoutCategoryInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ProductCreateOrConnectWithoutCategoryInputSchema),z.lazy(() => ProductCreateOrConnectWithoutCategoryInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ProductUpsertWithWhereUniqueWithoutCategoryInputSchema),z.lazy(() => ProductUpsertWithWhereUniqueWithoutCategoryInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ProductCreateManyCategoryInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ProductWhereUniqueInputSchema),z.lazy(() => ProductWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ProductWhereUniqueInputSchema),z.lazy(() => ProductWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ProductWhereUniqueInputSchema),z.lazy(() => ProductWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ProductWhereUniqueInputSchema),z.lazy(() => ProductWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ProductUpdateWithWhereUniqueWithoutCategoryInputSchema),z.lazy(() => ProductUpdateWithWhereUniqueWithoutCategoryInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ProductUpdateManyWithWhereWithoutCategoryInputSchema),z.lazy(() => ProductUpdateManyWithWhereWithoutCategoryInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ProductScalarWhereInputSchema),z.lazy(() => ProductScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ProductCreateNestedOneWithoutTreatmentsInputSchema: z.ZodType<Prisma.ProductCreateNestedOneWithoutTreatmentsInput> = z.object({
  create: z.union([ z.lazy(() => ProductCreateWithoutTreatmentsInputSchema),z.lazy(() => ProductUncheckedCreateWithoutTreatmentsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ProductCreateOrConnectWithoutTreatmentsInputSchema).optional(),
  connect: z.lazy(() => ProductWhereUniqueInputSchema).optional()
}).strict();

export const TreatmentPlanCreateNestedOneWithoutTreatmentsInputSchema: z.ZodType<Prisma.TreatmentPlanCreateNestedOneWithoutTreatmentsInput> = z.object({
  create: z.union([ z.lazy(() => TreatmentPlanCreateWithoutTreatmentsInputSchema),z.lazy(() => TreatmentPlanUncheckedCreateWithoutTreatmentsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => TreatmentPlanCreateOrConnectWithoutTreatmentsInputSchema).optional(),
  connect: z.lazy(() => TreatmentPlanWhereUniqueInputSchema).optional()
}).strict();

export const EventCreateNestedOneWithoutTreatmentsInputSchema: z.ZodType<Prisma.EventCreateNestedOneWithoutTreatmentsInput> = z.object({
  create: z.union([ z.lazy(() => EventCreateWithoutTreatmentsInputSchema),z.lazy(() => EventUncheckedCreateWithoutTreatmentsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => EventCreateOrConnectWithoutTreatmentsInputSchema).optional(),
  connect: z.lazy(() => EventWhereUniqueInputSchema).optional()
}).strict();

export const EnumTreatmentStatusFieldUpdateOperationsInputSchema: z.ZodType<Prisma.EnumTreatmentStatusFieldUpdateOperationsInput> = z.object({
  set: z.lazy(() => TreatmentStatusSchema).optional()
}).strict();

export const ProductUpdateOneRequiredWithoutTreatmentsNestedInputSchema: z.ZodType<Prisma.ProductUpdateOneRequiredWithoutTreatmentsNestedInput> = z.object({
  create: z.union([ z.lazy(() => ProductCreateWithoutTreatmentsInputSchema),z.lazy(() => ProductUncheckedCreateWithoutTreatmentsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ProductCreateOrConnectWithoutTreatmentsInputSchema).optional(),
  upsert: z.lazy(() => ProductUpsertWithoutTreatmentsInputSchema).optional(),
  connect: z.lazy(() => ProductWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => ProductUpdateToOneWithWhereWithoutTreatmentsInputSchema),z.lazy(() => ProductUpdateWithoutTreatmentsInputSchema),z.lazy(() => ProductUncheckedUpdateWithoutTreatmentsInputSchema) ]).optional(),
}).strict();

export const TreatmentPlanUpdateOneWithoutTreatmentsNestedInputSchema: z.ZodType<Prisma.TreatmentPlanUpdateOneWithoutTreatmentsNestedInput> = z.object({
  create: z.union([ z.lazy(() => TreatmentPlanCreateWithoutTreatmentsInputSchema),z.lazy(() => TreatmentPlanUncheckedCreateWithoutTreatmentsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => TreatmentPlanCreateOrConnectWithoutTreatmentsInputSchema).optional(),
  upsert: z.lazy(() => TreatmentPlanUpsertWithoutTreatmentsInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => TreatmentPlanWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => TreatmentPlanWhereInputSchema) ]).optional(),
  connect: z.lazy(() => TreatmentPlanWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => TreatmentPlanUpdateToOneWithWhereWithoutTreatmentsInputSchema),z.lazy(() => TreatmentPlanUpdateWithoutTreatmentsInputSchema),z.lazy(() => TreatmentPlanUncheckedUpdateWithoutTreatmentsInputSchema) ]).optional(),
}).strict();

export const EventUpdateOneWithoutTreatmentsNestedInputSchema: z.ZodType<Prisma.EventUpdateOneWithoutTreatmentsNestedInput> = z.object({
  create: z.union([ z.lazy(() => EventCreateWithoutTreatmentsInputSchema),z.lazy(() => EventUncheckedCreateWithoutTreatmentsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => EventCreateOrConnectWithoutTreatmentsInputSchema).optional(),
  upsert: z.lazy(() => EventUpsertWithoutTreatmentsInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => EventWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => EventWhereInputSchema) ]).optional(),
  connect: z.lazy(() => EventWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => EventUpdateToOneWithWhereWithoutTreatmentsInputSchema),z.lazy(() => EventUpdateWithoutTreatmentsInputSchema),z.lazy(() => EventUncheckedUpdateWithoutTreatmentsInputSchema) ]).optional(),
}).strict();

export const TreatmentCreateNestedManyWithoutTreatmentPlanInputSchema: z.ZodType<Prisma.TreatmentCreateNestedManyWithoutTreatmentPlanInput> = z.object({
  create: z.union([ z.lazy(() => TreatmentCreateWithoutTreatmentPlanInputSchema),z.lazy(() => TreatmentCreateWithoutTreatmentPlanInputSchema).array(),z.lazy(() => TreatmentUncheckedCreateWithoutTreatmentPlanInputSchema),z.lazy(() => TreatmentUncheckedCreateWithoutTreatmentPlanInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TreatmentCreateOrConnectWithoutTreatmentPlanInputSchema),z.lazy(() => TreatmentCreateOrConnectWithoutTreatmentPlanInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TreatmentCreateManyTreatmentPlanInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => TreatmentWhereUniqueInputSchema),z.lazy(() => TreatmentWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const PatientCreateNestedOneWithoutTreatmentPlansInputSchema: z.ZodType<Prisma.PatientCreateNestedOneWithoutTreatmentPlansInput> = z.object({
  create: z.union([ z.lazy(() => PatientCreateWithoutTreatmentPlansInputSchema),z.lazy(() => PatientUncheckedCreateWithoutTreatmentPlansInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => PatientCreateOrConnectWithoutTreatmentPlansInputSchema).optional(),
  connect: z.lazy(() => PatientWhereUniqueInputSchema).optional()
}).strict();

export const UserCreateNestedOneWithoutTreatmentPlansInputSchema: z.ZodType<Prisma.UserCreateNestedOneWithoutTreatmentPlansInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutTreatmentPlansInputSchema),z.lazy(() => UserUncheckedCreateWithoutTreatmentPlansInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutTreatmentPlansInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional()
}).strict();

export const TreatmentUncheckedCreateNestedManyWithoutTreatmentPlanInputSchema: z.ZodType<Prisma.TreatmentUncheckedCreateNestedManyWithoutTreatmentPlanInput> = z.object({
  create: z.union([ z.lazy(() => TreatmentCreateWithoutTreatmentPlanInputSchema),z.lazy(() => TreatmentCreateWithoutTreatmentPlanInputSchema).array(),z.lazy(() => TreatmentUncheckedCreateWithoutTreatmentPlanInputSchema),z.lazy(() => TreatmentUncheckedCreateWithoutTreatmentPlanInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TreatmentCreateOrConnectWithoutTreatmentPlanInputSchema),z.lazy(() => TreatmentCreateOrConnectWithoutTreatmentPlanInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TreatmentCreateManyTreatmentPlanInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => TreatmentWhereUniqueInputSchema),z.lazy(() => TreatmentWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const TreatmentUpdateManyWithoutTreatmentPlanNestedInputSchema: z.ZodType<Prisma.TreatmentUpdateManyWithoutTreatmentPlanNestedInput> = z.object({
  create: z.union([ z.lazy(() => TreatmentCreateWithoutTreatmentPlanInputSchema),z.lazy(() => TreatmentCreateWithoutTreatmentPlanInputSchema).array(),z.lazy(() => TreatmentUncheckedCreateWithoutTreatmentPlanInputSchema),z.lazy(() => TreatmentUncheckedCreateWithoutTreatmentPlanInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TreatmentCreateOrConnectWithoutTreatmentPlanInputSchema),z.lazy(() => TreatmentCreateOrConnectWithoutTreatmentPlanInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => TreatmentUpsertWithWhereUniqueWithoutTreatmentPlanInputSchema),z.lazy(() => TreatmentUpsertWithWhereUniqueWithoutTreatmentPlanInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TreatmentCreateManyTreatmentPlanInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => TreatmentWhereUniqueInputSchema),z.lazy(() => TreatmentWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => TreatmentWhereUniqueInputSchema),z.lazy(() => TreatmentWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => TreatmentWhereUniqueInputSchema),z.lazy(() => TreatmentWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => TreatmentWhereUniqueInputSchema),z.lazy(() => TreatmentWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => TreatmentUpdateWithWhereUniqueWithoutTreatmentPlanInputSchema),z.lazy(() => TreatmentUpdateWithWhereUniqueWithoutTreatmentPlanInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => TreatmentUpdateManyWithWhereWithoutTreatmentPlanInputSchema),z.lazy(() => TreatmentUpdateManyWithWhereWithoutTreatmentPlanInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => TreatmentScalarWhereInputSchema),z.lazy(() => TreatmentScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const PatientUpdateOneRequiredWithoutTreatmentPlansNestedInputSchema: z.ZodType<Prisma.PatientUpdateOneRequiredWithoutTreatmentPlansNestedInput> = z.object({
  create: z.union([ z.lazy(() => PatientCreateWithoutTreatmentPlansInputSchema),z.lazy(() => PatientUncheckedCreateWithoutTreatmentPlansInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => PatientCreateOrConnectWithoutTreatmentPlansInputSchema).optional(),
  upsert: z.lazy(() => PatientUpsertWithoutTreatmentPlansInputSchema).optional(),
  connect: z.lazy(() => PatientWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => PatientUpdateToOneWithWhereWithoutTreatmentPlansInputSchema),z.lazy(() => PatientUpdateWithoutTreatmentPlansInputSchema),z.lazy(() => PatientUncheckedUpdateWithoutTreatmentPlansInputSchema) ]).optional(),
}).strict();

export const UserUpdateOneRequiredWithoutTreatmentPlansNestedInputSchema: z.ZodType<Prisma.UserUpdateOneRequiredWithoutTreatmentPlansNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutTreatmentPlansInputSchema),z.lazy(() => UserUncheckedCreateWithoutTreatmentPlansInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutTreatmentPlansInputSchema).optional(),
  upsert: z.lazy(() => UserUpsertWithoutTreatmentPlansInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => UserUpdateToOneWithWhereWithoutTreatmentPlansInputSchema),z.lazy(() => UserUpdateWithoutTreatmentPlansInputSchema),z.lazy(() => UserUncheckedUpdateWithoutTreatmentPlansInputSchema) ]).optional(),
}).strict();

export const TreatmentUncheckedUpdateManyWithoutTreatmentPlanNestedInputSchema: z.ZodType<Prisma.TreatmentUncheckedUpdateManyWithoutTreatmentPlanNestedInput> = z.object({
  create: z.union([ z.lazy(() => TreatmentCreateWithoutTreatmentPlanInputSchema),z.lazy(() => TreatmentCreateWithoutTreatmentPlanInputSchema).array(),z.lazy(() => TreatmentUncheckedCreateWithoutTreatmentPlanInputSchema),z.lazy(() => TreatmentUncheckedCreateWithoutTreatmentPlanInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TreatmentCreateOrConnectWithoutTreatmentPlanInputSchema),z.lazy(() => TreatmentCreateOrConnectWithoutTreatmentPlanInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => TreatmentUpsertWithWhereUniqueWithoutTreatmentPlanInputSchema),z.lazy(() => TreatmentUpsertWithWhereUniqueWithoutTreatmentPlanInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TreatmentCreateManyTreatmentPlanInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => TreatmentWhereUniqueInputSchema),z.lazy(() => TreatmentWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => TreatmentWhereUniqueInputSchema),z.lazy(() => TreatmentWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => TreatmentWhereUniqueInputSchema),z.lazy(() => TreatmentWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => TreatmentWhereUniqueInputSchema),z.lazy(() => TreatmentWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => TreatmentUpdateWithWhereUniqueWithoutTreatmentPlanInputSchema),z.lazy(() => TreatmentUpdateWithWhereUniqueWithoutTreatmentPlanInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => TreatmentUpdateManyWithWhereWithoutTreatmentPlanInputSchema),z.lazy(() => TreatmentUpdateManyWithWhereWithoutTreatmentPlanInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => TreatmentScalarWhereInputSchema),z.lazy(() => TreatmentScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const CityCreateNestedManyWithoutCountyInputSchema: z.ZodType<Prisma.CityCreateNestedManyWithoutCountyInput> = z.object({
  create: z.union([ z.lazy(() => CityCreateWithoutCountyInputSchema),z.lazy(() => CityCreateWithoutCountyInputSchema).array(),z.lazy(() => CityUncheckedCreateWithoutCountyInputSchema),z.lazy(() => CityUncheckedCreateWithoutCountyInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CityCreateOrConnectWithoutCountyInputSchema),z.lazy(() => CityCreateOrConnectWithoutCountyInputSchema).array() ]).optional(),
  createMany: z.lazy(() => CityCreateManyCountyInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => CityWhereUniqueInputSchema),z.lazy(() => CityWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const CityUncheckedCreateNestedManyWithoutCountyInputSchema: z.ZodType<Prisma.CityUncheckedCreateNestedManyWithoutCountyInput> = z.object({
  create: z.union([ z.lazy(() => CityCreateWithoutCountyInputSchema),z.lazy(() => CityCreateWithoutCountyInputSchema).array(),z.lazy(() => CityUncheckedCreateWithoutCountyInputSchema),z.lazy(() => CityUncheckedCreateWithoutCountyInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CityCreateOrConnectWithoutCountyInputSchema),z.lazy(() => CityCreateOrConnectWithoutCountyInputSchema).array() ]).optional(),
  createMany: z.lazy(() => CityCreateManyCountyInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => CityWhereUniqueInputSchema),z.lazy(() => CityWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const CityUpdateManyWithoutCountyNestedInputSchema: z.ZodType<Prisma.CityUpdateManyWithoutCountyNestedInput> = z.object({
  create: z.union([ z.lazy(() => CityCreateWithoutCountyInputSchema),z.lazy(() => CityCreateWithoutCountyInputSchema).array(),z.lazy(() => CityUncheckedCreateWithoutCountyInputSchema),z.lazy(() => CityUncheckedCreateWithoutCountyInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CityCreateOrConnectWithoutCountyInputSchema),z.lazy(() => CityCreateOrConnectWithoutCountyInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => CityUpsertWithWhereUniqueWithoutCountyInputSchema),z.lazy(() => CityUpsertWithWhereUniqueWithoutCountyInputSchema).array() ]).optional(),
  createMany: z.lazy(() => CityCreateManyCountyInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => CityWhereUniqueInputSchema),z.lazy(() => CityWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => CityWhereUniqueInputSchema),z.lazy(() => CityWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => CityWhereUniqueInputSchema),z.lazy(() => CityWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => CityWhereUniqueInputSchema),z.lazy(() => CityWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => CityUpdateWithWhereUniqueWithoutCountyInputSchema),z.lazy(() => CityUpdateWithWhereUniqueWithoutCountyInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => CityUpdateManyWithWhereWithoutCountyInputSchema),z.lazy(() => CityUpdateManyWithWhereWithoutCountyInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => CityScalarWhereInputSchema),z.lazy(() => CityScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const CityUncheckedUpdateManyWithoutCountyNestedInputSchema: z.ZodType<Prisma.CityUncheckedUpdateManyWithoutCountyNestedInput> = z.object({
  create: z.union([ z.lazy(() => CityCreateWithoutCountyInputSchema),z.lazy(() => CityCreateWithoutCountyInputSchema).array(),z.lazy(() => CityUncheckedCreateWithoutCountyInputSchema),z.lazy(() => CityUncheckedCreateWithoutCountyInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CityCreateOrConnectWithoutCountyInputSchema),z.lazy(() => CityCreateOrConnectWithoutCountyInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => CityUpsertWithWhereUniqueWithoutCountyInputSchema),z.lazy(() => CityUpsertWithWhereUniqueWithoutCountyInputSchema).array() ]).optional(),
  createMany: z.lazy(() => CityCreateManyCountyInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => CityWhereUniqueInputSchema),z.lazy(() => CityWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => CityWhereUniqueInputSchema),z.lazy(() => CityWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => CityWhereUniqueInputSchema),z.lazy(() => CityWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => CityWhereUniqueInputSchema),z.lazy(() => CityWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => CityUpdateWithWhereUniqueWithoutCountyInputSchema),z.lazy(() => CityUpdateWithWhereUniqueWithoutCountyInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => CityUpdateManyWithWhereWithoutCountyInputSchema),z.lazy(() => CityUpdateManyWithWhereWithoutCountyInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => CityScalarWhereInputSchema),z.lazy(() => CityScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const CountyCreateNestedOneWithoutCitiesInputSchema: z.ZodType<Prisma.CountyCreateNestedOneWithoutCitiesInput> = z.object({
  create: z.union([ z.lazy(() => CountyCreateWithoutCitiesInputSchema),z.lazy(() => CountyUncheckedCreateWithoutCitiesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => CountyCreateOrConnectWithoutCitiesInputSchema).optional(),
  connect: z.lazy(() => CountyWhereUniqueInputSchema).optional()
}).strict();

export const CountyUpdateOneRequiredWithoutCitiesNestedInputSchema: z.ZodType<Prisma.CountyUpdateOneRequiredWithoutCitiesNestedInput> = z.object({
  create: z.union([ z.lazy(() => CountyCreateWithoutCitiesInputSchema),z.lazy(() => CountyUncheckedCreateWithoutCitiesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => CountyCreateOrConnectWithoutCitiesInputSchema).optional(),
  upsert: z.lazy(() => CountyUpsertWithoutCitiesInputSchema).optional(),
  connect: z.lazy(() => CountyWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => CountyUpdateToOneWithWhereWithoutCitiesInputSchema),z.lazy(() => CountyUpdateWithoutCitiesInputSchema),z.lazy(() => CountyUncheckedUpdateWithoutCitiesInputSchema) ]).optional(),
}).strict();

export const NestedStringFilterSchema: z.ZodType<Prisma.NestedStringFilter> = z.object({
  equals: z.string().optional(),
  in: z.string().array().optional(),
  notIn: z.string().array().optional(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  contains: z.string().optional(),
  startsWith: z.string().optional(),
  endsWith: z.string().optional(),
  not: z.union([ z.string(),z.lazy(() => NestedStringFilterSchema) ]).optional(),
}).strict();

export const NestedDateTimeNullableFilterSchema: z.ZodType<Prisma.NestedDateTimeNullableFilter> = z.object({
  equals: z.coerce.date().optional().nullable(),
  in: z.coerce.date().array().optional().nullable(),
  notIn: z.coerce.date().array().optional().nullable(),
  lt: z.coerce.date().optional(),
  lte: z.coerce.date().optional(),
  gt: z.coerce.date().optional(),
  gte: z.coerce.date().optional(),
  not: z.union([ z.coerce.date(),z.lazy(() => NestedDateTimeNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const NestedDateTimeFilterSchema: z.ZodType<Prisma.NestedDateTimeFilter> = z.object({
  equals: z.coerce.date().optional(),
  in: z.coerce.date().array().optional(),
  notIn: z.coerce.date().array().optional(),
  lt: z.coerce.date().optional(),
  lte: z.coerce.date().optional(),
  gt: z.coerce.date().optional(),
  gte: z.coerce.date().optional(),
  not: z.union([ z.coerce.date(),z.lazy(() => NestedDateTimeFilterSchema) ]).optional(),
}).strict();

export const NestedStringWithAggregatesFilterSchema: z.ZodType<Prisma.NestedStringWithAggregatesFilter> = z.object({
  equals: z.string().optional(),
  in: z.string().array().optional(),
  notIn: z.string().array().optional(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  contains: z.string().optional(),
  startsWith: z.string().optional(),
  endsWith: z.string().optional(),
  not: z.union([ z.string(),z.lazy(() => NestedStringWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedStringFilterSchema).optional(),
  _max: z.lazy(() => NestedStringFilterSchema).optional()
}).strict();

export const NestedIntFilterSchema: z.ZodType<Prisma.NestedIntFilter> = z.object({
  equals: z.number().optional(),
  in: z.number().array().optional(),
  notIn: z.number().array().optional(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedIntFilterSchema) ]).optional(),
}).strict();

export const NestedDateTimeNullableWithAggregatesFilterSchema: z.ZodType<Prisma.NestedDateTimeNullableWithAggregatesFilter> = z.object({
  equals: z.coerce.date().optional().nullable(),
  in: z.coerce.date().array().optional().nullable(),
  notIn: z.coerce.date().array().optional().nullable(),
  lt: z.coerce.date().optional(),
  lte: z.coerce.date().optional(),
  gt: z.coerce.date().optional(),
  gte: z.coerce.date().optional(),
  not: z.union([ z.coerce.date(),z.lazy(() => NestedDateTimeNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedDateTimeNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedDateTimeNullableFilterSchema).optional()
}).strict();

export const NestedIntNullableFilterSchema: z.ZodType<Prisma.NestedIntNullableFilter> = z.object({
  equals: z.number().optional().nullable(),
  in: z.number().array().optional().nullable(),
  notIn: z.number().array().optional().nullable(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedIntNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const NestedDateTimeWithAggregatesFilterSchema: z.ZodType<Prisma.NestedDateTimeWithAggregatesFilter> = z.object({
  equals: z.coerce.date().optional(),
  in: z.coerce.date().array().optional(),
  notIn: z.coerce.date().array().optional(),
  lt: z.coerce.date().optional(),
  lte: z.coerce.date().optional(),
  gt: z.coerce.date().optional(),
  gte: z.coerce.date().optional(),
  not: z.union([ z.coerce.date(),z.lazy(() => NestedDateTimeWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedDateTimeFilterSchema).optional(),
  _max: z.lazy(() => NestedDateTimeFilterSchema).optional()
}).strict();

export const NestedStringNullableFilterSchema: z.ZodType<Prisma.NestedStringNullableFilter> = z.object({
  equals: z.string().optional().nullable(),
  in: z.string().array().optional().nullable(),
  notIn: z.string().array().optional().nullable(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  contains: z.string().optional(),
  startsWith: z.string().optional(),
  endsWith: z.string().optional(),
  not: z.union([ z.string(),z.lazy(() => NestedStringNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const NestedBoolFilterSchema: z.ZodType<Prisma.NestedBoolFilter> = z.object({
  equals: z.boolean().optional(),
  not: z.union([ z.boolean(),z.lazy(() => NestedBoolFilterSchema) ]).optional(),
}).strict();

export const NestedStringNullableWithAggregatesFilterSchema: z.ZodType<Prisma.NestedStringNullableWithAggregatesFilter> = z.object({
  equals: z.string().optional().nullable(),
  in: z.string().array().optional().nullable(),
  notIn: z.string().array().optional().nullable(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  contains: z.string().optional(),
  startsWith: z.string().optional(),
  endsWith: z.string().optional(),
  not: z.union([ z.string(),z.lazy(() => NestedStringNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedStringNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedStringNullableFilterSchema).optional()
}).strict();

export const NestedBoolWithAggregatesFilterSchema: z.ZodType<Prisma.NestedBoolWithAggregatesFilter> = z.object({
  equals: z.boolean().optional(),
  not: z.union([ z.boolean(),z.lazy(() => NestedBoolWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedBoolFilterSchema).optional(),
  _max: z.lazy(() => NestedBoolFilterSchema).optional()
}).strict();

export const NestedEnumRoleFilterSchema: z.ZodType<Prisma.NestedEnumRoleFilter> = z.object({
  equals: z.lazy(() => RoleSchema).optional(),
  in: z.lazy(() => RoleSchema).array().optional(),
  notIn: z.lazy(() => RoleSchema).array().optional(),
  not: z.union([ z.lazy(() => RoleSchema),z.lazy(() => NestedEnumRoleFilterSchema) ]).optional(),
}).strict();

export const NestedIntWithAggregatesFilterSchema: z.ZodType<Prisma.NestedIntWithAggregatesFilter> = z.object({
  equals: z.number().optional(),
  in: z.number().array().optional(),
  notIn: z.number().array().optional(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedIntWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _avg: z.lazy(() => NestedFloatFilterSchema).optional(),
  _sum: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedIntFilterSchema).optional(),
  _max: z.lazy(() => NestedIntFilterSchema).optional()
}).strict();

export const NestedFloatFilterSchema: z.ZodType<Prisma.NestedFloatFilter> = z.object({
  equals: z.number().optional(),
  in: z.number().array().optional(),
  notIn: z.number().array().optional(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedFloatFilterSchema) ]).optional(),
}).strict();

export const NestedEnumRoleWithAggregatesFilterSchema: z.ZodType<Prisma.NestedEnumRoleWithAggregatesFilter> = z.object({
  equals: z.lazy(() => RoleSchema).optional(),
  in: z.lazy(() => RoleSchema).array().optional(),
  notIn: z.lazy(() => RoleSchema).array().optional(),
  not: z.union([ z.lazy(() => RoleSchema),z.lazy(() => NestedEnumRoleWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumRoleFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumRoleFilterSchema).optional()
}).strict();

export const NestedJsonFilterSchema: z.ZodType<Prisma.NestedJsonFilter> = z.object({
  equals: InputJsonValueSchema.optional(),
  path: z.string().array().optional(),
  string_contains: z.string().optional(),
  string_starts_with: z.string().optional(),
  string_ends_with: z.string().optional(),
  array_contains: InputJsonValueSchema.optional().nullable(),
  array_starts_with: InputJsonValueSchema.optional().nullable(),
  array_ends_with: InputJsonValueSchema.optional().nullable(),
  lt: InputJsonValueSchema.optional(),
  lte: InputJsonValueSchema.optional(),
  gt: InputJsonValueSchema.optional(),
  gte: InputJsonValueSchema.optional(),
  not: InputJsonValueSchema.optional()
}).strict();

export const NestedIntNullableWithAggregatesFilterSchema: z.ZodType<Prisma.NestedIntNullableWithAggregatesFilter> = z.object({
  equals: z.number().optional().nullable(),
  in: z.number().array().optional().nullable(),
  notIn: z.number().array().optional().nullable(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedIntNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _avg: z.lazy(() => NestedFloatNullableFilterSchema).optional(),
  _sum: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedIntNullableFilterSchema).optional()
}).strict();

export const NestedFloatNullableFilterSchema: z.ZodType<Prisma.NestedFloatNullableFilter> = z.object({
  equals: z.number().optional().nullable(),
  in: z.number().array().optional().nullable(),
  notIn: z.number().array().optional().nullable(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedFloatNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const NestedEnumTokenTypeFilterSchema: z.ZodType<Prisma.NestedEnumTokenTypeFilter> = z.object({
  equals: z.lazy(() => TokenTypeSchema).optional(),
  in: z.lazy(() => TokenTypeSchema).array().optional(),
  notIn: z.lazy(() => TokenTypeSchema).array().optional(),
  not: z.union([ z.lazy(() => TokenTypeSchema),z.lazy(() => NestedEnumTokenTypeFilterSchema) ]).optional(),
}).strict();

export const NestedEnumTokenTypeWithAggregatesFilterSchema: z.ZodType<Prisma.NestedEnumTokenTypeWithAggregatesFilter> = z.object({
  equals: z.lazy(() => TokenTypeSchema).optional(),
  in: z.lazy(() => TokenTypeSchema).array().optional(),
  notIn: z.lazy(() => TokenTypeSchema).array().optional(),
  not: z.union([ z.lazy(() => TokenTypeSchema),z.lazy(() => NestedEnumTokenTypeWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumTokenTypeFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumTokenTypeFilterSchema).optional()
}).strict();

export const NestedEnumStatusFilterSchema: z.ZodType<Prisma.NestedEnumStatusFilter> = z.object({
  equals: z.lazy(() => StatusSchema).optional(),
  in: z.lazy(() => StatusSchema).array().optional(),
  notIn: z.lazy(() => StatusSchema).array().optional(),
  not: z.union([ z.lazy(() => StatusSchema),z.lazy(() => NestedEnumStatusFilterSchema) ]).optional(),
}).strict();

export const NestedEnumStatusWithAggregatesFilterSchema: z.ZodType<Prisma.NestedEnumStatusWithAggregatesFilter> = z.object({
  equals: z.lazy(() => StatusSchema).optional(),
  in: z.lazy(() => StatusSchema).array().optional(),
  notIn: z.lazy(() => StatusSchema).array().optional(),
  not: z.union([ z.lazy(() => StatusSchema),z.lazy(() => NestedEnumStatusWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumStatusFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumStatusFilterSchema).optional()
}).strict();

export const NestedEnumEventTypeFilterSchema: z.ZodType<Prisma.NestedEnumEventTypeFilter> = z.object({
  equals: z.lazy(() => EventTypeSchema).optional(),
  in: z.lazy(() => EventTypeSchema).array().optional(),
  notIn: z.lazy(() => EventTypeSchema).array().optional(),
  not: z.union([ z.lazy(() => EventTypeSchema),z.lazy(() => NestedEnumEventTypeFilterSchema) ]).optional(),
}).strict();

export const NestedEnumEventStatusFilterSchema: z.ZodType<Prisma.NestedEnumEventStatusFilter> = z.object({
  equals: z.lazy(() => EventStatusSchema).optional(),
  in: z.lazy(() => EventStatusSchema).array().optional(),
  notIn: z.lazy(() => EventStatusSchema).array().optional(),
  not: z.union([ z.lazy(() => EventStatusSchema),z.lazy(() => NestedEnumEventStatusFilterSchema) ]).optional(),
}).strict();

export const NestedEnumEventTypeWithAggregatesFilterSchema: z.ZodType<Prisma.NestedEnumEventTypeWithAggregatesFilter> = z.object({
  equals: z.lazy(() => EventTypeSchema).optional(),
  in: z.lazy(() => EventTypeSchema).array().optional(),
  notIn: z.lazy(() => EventTypeSchema).array().optional(),
  not: z.union([ z.lazy(() => EventTypeSchema),z.lazy(() => NestedEnumEventTypeWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumEventTypeFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumEventTypeFilterSchema).optional()
}).strict();

export const NestedEnumEventStatusWithAggregatesFilterSchema: z.ZodType<Prisma.NestedEnumEventStatusWithAggregatesFilter> = z.object({
  equals: z.lazy(() => EventStatusSchema).optional(),
  in: z.lazy(() => EventStatusSchema).array().optional(),
  notIn: z.lazy(() => EventStatusSchema).array().optional(),
  not: z.union([ z.lazy(() => EventStatusSchema),z.lazy(() => NestedEnumEventStatusWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumEventStatusFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumEventStatusFilterSchema).optional()
}).strict();

export const NestedEnumTreatmentStatusFilterSchema: z.ZodType<Prisma.NestedEnumTreatmentStatusFilter> = z.object({
  equals: z.lazy(() => TreatmentStatusSchema).optional(),
  in: z.lazy(() => TreatmentStatusSchema).array().optional(),
  notIn: z.lazy(() => TreatmentStatusSchema).array().optional(),
  not: z.union([ z.lazy(() => TreatmentStatusSchema),z.lazy(() => NestedEnumTreatmentStatusFilterSchema) ]).optional(),
}).strict();

export const NestedEnumTreatmentStatusWithAggregatesFilterSchema: z.ZodType<Prisma.NestedEnumTreatmentStatusWithAggregatesFilter> = z.object({
  equals: z.lazy(() => TreatmentStatusSchema).optional(),
  in: z.lazy(() => TreatmentStatusSchema).array().optional(),
  notIn: z.lazy(() => TreatmentStatusSchema).array().optional(),
  not: z.union([ z.lazy(() => TreatmentStatusSchema),z.lazy(() => NestedEnumTreatmentStatusWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumTreatmentStatusFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumTreatmentStatusFilterSchema).optional()
}).strict();

export const UserCreateWithoutTenantInputSchema: z.ZodType<Prisma.UserCreateWithoutTenantInput> = z.object({
  id: z.string().cuid().optional(),
  index: z.number().int().optional(),
  role: z.lazy(() => RoleSchema).optional(),
  workingHours: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  deletedAt: z.coerce.date().optional().nullable(),
  activatedAt: z.coerce.date().optional().nullable(),
  lastLoginAt: z.coerce.date().optional().nullable(),
  bannedAt: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  specialization: z.lazy(() => SpecializationCreateNestedOneWithoutUsersInputSchema).optional(),
  profile: z.lazy(() => ProfileCreateNestedOneWithoutUsersInputSchema),
  invitation: z.lazy(() => InvitationCreateNestedOneWithoutUserInputSchema).optional(),
  tokens: z.lazy(() => TokenCreateNestedManyWithoutUserInputSchema).optional(),
  patients: z.lazy(() => PatientCreateNestedManyWithoutUserInputSchema).optional(),
  events: z.lazy(() => EventCreateNestedManyWithoutUserInputSchema).optional(),
  eventActions: z.lazy(() => EventActionCreateNestedManyWithoutUserInputSchema).optional(),
  treatmentPlans: z.lazy(() => TreatmentPlanCreateNestedManyWithoutUserInputSchema).optional(),
  invitations: z.lazy(() => InvitationCreateNestedManyWithoutInvitedByInputSchema).optional()
}).strict();

export const UserUncheckedCreateWithoutTenantInputSchema: z.ZodType<Prisma.UserUncheckedCreateWithoutTenantInput> = z.object({
  id: z.string().cuid().optional(),
  index: z.number().int().optional(),
  role: z.lazy(() => RoleSchema).optional(),
  workingHours: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  specializationId: z.string().optional().nullable(),
  profileId: z.string(),
  deletedAt: z.coerce.date().optional().nullable(),
  activatedAt: z.coerce.date().optional().nullable(),
  lastLoginAt: z.coerce.date().optional().nullable(),
  bannedAt: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  invitation: z.lazy(() => InvitationUncheckedCreateNestedOneWithoutUserInputSchema).optional(),
  tokens: z.lazy(() => TokenUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  patients: z.lazy(() => PatientUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  events: z.lazy(() => EventUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  eventActions: z.lazy(() => EventActionUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  treatmentPlans: z.lazy(() => TreatmentPlanUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedCreateNestedManyWithoutInvitedByInputSchema).optional()
}).strict();

export const UserCreateOrConnectWithoutTenantInputSchema: z.ZodType<Prisma.UserCreateOrConnectWithoutTenantInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UserCreateWithoutTenantInputSchema),z.lazy(() => UserUncheckedCreateWithoutTenantInputSchema) ]),
}).strict();

export const UserCreateManyTenantInputEnvelopeSchema: z.ZodType<Prisma.UserCreateManyTenantInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => UserCreateManyTenantInputSchema),z.lazy(() => UserCreateManyTenantInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const TenantProfileCreateWithoutTenantInputSchema: z.ZodType<Prisma.TenantProfileCreateWithoutTenantInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  county: z.string().optional().nullable(),
  address: z.string().optional().nullable(),
  zip: z.string().optional().nullable(),
  phone: z.string().optional().nullable(),
  avatar: z.string().optional().nullable(),
  size: z.string().optional().nullable(),
  stripeSubscriptionId: z.string(),
  activeSubscription: z.boolean().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  plan: z.lazy(() => PlanCreateNestedOneWithoutTenantProfilesInputSchema)
}).strict();

export const TenantProfileUncheckedCreateWithoutTenantInputSchema: z.ZodType<Prisma.TenantProfileUncheckedCreateWithoutTenantInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  county: z.string().optional().nullable(),
  address: z.string().optional().nullable(),
  zip: z.string().optional().nullable(),
  phone: z.string().optional().nullable(),
  avatar: z.string().optional().nullable(),
  size: z.string().optional().nullable(),
  stripeSubscriptionId: z.string(),
  activeSubscription: z.boolean().optional(),
  planId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const TenantProfileCreateOrConnectWithoutTenantInputSchema: z.ZodType<Prisma.TenantProfileCreateOrConnectWithoutTenantInput> = z.object({
  where: z.lazy(() => TenantProfileWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => TenantProfileCreateWithoutTenantInputSchema),z.lazy(() => TenantProfileUncheckedCreateWithoutTenantInputSchema) ]),
}).strict();

export const SpecializationCreateWithoutTenantInputSchema: z.ZodType<Prisma.SpecializationCreateWithoutTenantInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  users: z.lazy(() => UserCreateNestedManyWithoutSpecializationInputSchema).optional()
}).strict();

export const SpecializationUncheckedCreateWithoutTenantInputSchema: z.ZodType<Prisma.SpecializationUncheckedCreateWithoutTenantInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  users: z.lazy(() => UserUncheckedCreateNestedManyWithoutSpecializationInputSchema).optional()
}).strict();

export const SpecializationCreateOrConnectWithoutTenantInputSchema: z.ZodType<Prisma.SpecializationCreateOrConnectWithoutTenantInput> = z.object({
  where: z.lazy(() => SpecializationWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => SpecializationCreateWithoutTenantInputSchema),z.lazy(() => SpecializationUncheckedCreateWithoutTenantInputSchema) ]),
}).strict();

export const SpecializationCreateManyTenantInputEnvelopeSchema: z.ZodType<Prisma.SpecializationCreateManyTenantInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => SpecializationCreateManyTenantInputSchema),z.lazy(() => SpecializationCreateManyTenantInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const ProfileCreateWithoutPreferredTenantInputSchema: z.ZodType<Prisma.ProfileCreateWithoutPreferredTenantInput> = z.object({
  id: z.string().cuid().optional(),
  title: z.string().optional().nullable(),
  firstName: z.string(),
  lastName: z.string(),
  email: z.string(),
  phone: z.string().optional().nullable(),
  avatar: z.string().optional().nullable(),
  stripeCustomerId: z.string(),
  stripeFreeTrialUsed: z.boolean().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  users: z.lazy(() => UserCreateNestedManyWithoutProfileInputSchema).optional(),
  auth: z.lazy(() => AccountAuthCreateNestedManyWithoutProfileInputSchema).optional()
}).strict();

export const ProfileUncheckedCreateWithoutPreferredTenantInputSchema: z.ZodType<Prisma.ProfileUncheckedCreateWithoutPreferredTenantInput> = z.object({
  id: z.string().cuid().optional(),
  title: z.string().optional().nullable(),
  firstName: z.string(),
  lastName: z.string(),
  email: z.string(),
  phone: z.string().optional().nullable(),
  avatar: z.string().optional().nullable(),
  stripeCustomerId: z.string(),
  stripeFreeTrialUsed: z.boolean().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  users: z.lazy(() => UserUncheckedCreateNestedManyWithoutProfileInputSchema).optional(),
  auth: z.lazy(() => AccountAuthUncheckedCreateNestedManyWithoutProfileInputSchema).optional()
}).strict();

export const ProfileCreateOrConnectWithoutPreferredTenantInputSchema: z.ZodType<Prisma.ProfileCreateOrConnectWithoutPreferredTenantInput> = z.object({
  where: z.lazy(() => ProfileWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ProfileCreateWithoutPreferredTenantInputSchema),z.lazy(() => ProfileUncheckedCreateWithoutPreferredTenantInputSchema) ]),
}).strict();

export const ProfileCreateManyPreferredTenantInputEnvelopeSchema: z.ZodType<Prisma.ProfileCreateManyPreferredTenantInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => ProfileCreateManyPreferredTenantInputSchema),z.lazy(() => ProfileCreateManyPreferredTenantInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const PatientCreateWithoutTenantInputSchema: z.ZodType<Prisma.PatientCreateWithoutTenantInput> = z.object({
  id: z.string().cuid().optional(),
  firstName: z.string(),
  lastName: z.string(),
  gender: z.string().optional().nullable(),
  dob: z.coerce.date().optional().nullable(),
  email: z.string().optional().nullable(),
  phone: z.string().optional().nullable(),
  city: z.string().optional().nullable(),
  county: z.string().optional().nullable(),
  status: z.lazy(() => StatusSchema).optional(),
  smsNotifications: z.boolean().optional(),
  emailNotifications: z.boolean().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  user: z.lazy(() => UserCreateNestedOneWithoutPatientsInputSchema),
  appointments: z.lazy(() => EventCreateNestedManyWithoutPatientInputSchema).optional(),
  treatmentPlans: z.lazy(() => TreatmentPlanCreateNestedManyWithoutPatientInputSchema).optional()
}).strict();

export const PatientUncheckedCreateWithoutTenantInputSchema: z.ZodType<Prisma.PatientUncheckedCreateWithoutTenantInput> = z.object({
  id: z.string().cuid().optional(),
  firstName: z.string(),
  lastName: z.string(),
  gender: z.string().optional().nullable(),
  dob: z.coerce.date().optional().nullable(),
  email: z.string().optional().nullable(),
  phone: z.string().optional().nullable(),
  city: z.string().optional().nullable(),
  county: z.string().optional().nullable(),
  status: z.lazy(() => StatusSchema).optional(),
  smsNotifications: z.boolean().optional(),
  emailNotifications: z.boolean().optional(),
  userId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  appointments: z.lazy(() => EventUncheckedCreateNestedManyWithoutPatientInputSchema).optional(),
  treatmentPlans: z.lazy(() => TreatmentPlanUncheckedCreateNestedManyWithoutPatientInputSchema).optional()
}).strict();

export const PatientCreateOrConnectWithoutTenantInputSchema: z.ZodType<Prisma.PatientCreateOrConnectWithoutTenantInput> = z.object({
  where: z.lazy(() => PatientWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => PatientCreateWithoutTenantInputSchema),z.lazy(() => PatientUncheckedCreateWithoutTenantInputSchema) ]),
}).strict();

export const PatientCreateManyTenantInputEnvelopeSchema: z.ZodType<Prisma.PatientCreateManyTenantInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => PatientCreateManyTenantInputSchema),z.lazy(() => PatientCreateManyTenantInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const ProductCreateWithoutTenantInputSchema: z.ZodType<Prisma.ProductCreateWithoutTenantInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  price: z.number().int(),
  image: z.string().optional().nullable(),
  tags: z.union([ z.lazy(() => ProductCreatetagsInputSchema),z.string().array() ]).optional(),
  isActive: z.boolean().optional(),
  isDeleted: z.boolean().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  priceHistory: z.lazy(() => PriceCreateNestedManyWithoutProductInputSchema).optional(),
  treatments: z.lazy(() => TreatmentCreateNestedManyWithoutProductInputSchema).optional(),
  category: z.lazy(() => ProductCategoryCreateNestedOneWithoutProductsInputSchema).optional()
}).strict();

export const ProductUncheckedCreateWithoutTenantInputSchema: z.ZodType<Prisma.ProductUncheckedCreateWithoutTenantInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  price: z.number().int(),
  image: z.string().optional().nullable(),
  tags: z.union([ z.lazy(() => ProductCreatetagsInputSchema),z.string().array() ]).optional(),
  isActive: z.boolean().optional(),
  isDeleted: z.boolean().optional(),
  categoryId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  priceHistory: z.lazy(() => PriceUncheckedCreateNestedManyWithoutProductInputSchema).optional(),
  treatments: z.lazy(() => TreatmentUncheckedCreateNestedManyWithoutProductInputSchema).optional()
}).strict();

export const ProductCreateOrConnectWithoutTenantInputSchema: z.ZodType<Prisma.ProductCreateOrConnectWithoutTenantInput> = z.object({
  where: z.lazy(() => ProductWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ProductCreateWithoutTenantInputSchema),z.lazy(() => ProductUncheckedCreateWithoutTenantInputSchema) ]),
}).strict();

export const ProductCreateManyTenantInputEnvelopeSchema: z.ZodType<Prisma.ProductCreateManyTenantInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => ProductCreateManyTenantInputSchema),z.lazy(() => ProductCreateManyTenantInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const EventCreateWithoutTenantInputSchema: z.ZodType<Prisma.EventCreateWithoutTenantInput> = z.object({
  id: z.string().cuid().optional(),
  title: z.string(),
  description: z.string().optional().nullable(),
  date: z.coerce.date(),
  start: z.coerce.date().optional().nullable(),
  end: z.coerce.date().optional().nullable(),
  allDay: z.boolean().optional(),
  type: z.lazy(() => EventTypeSchema).optional(),
  status: z.lazy(() => EventStatusSchema).optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  actions: z.lazy(() => EventActionCreateNestedManyWithoutEventInputSchema).optional(),
  treatments: z.lazy(() => TreatmentCreateNestedManyWithoutEventInputSchema).optional(),
  patient: z.lazy(() => PatientCreateNestedOneWithoutAppointmentsInputSchema).optional(),
  user: z.lazy(() => UserCreateNestedOneWithoutEventsInputSchema)
}).strict();

export const EventUncheckedCreateWithoutTenantInputSchema: z.ZodType<Prisma.EventUncheckedCreateWithoutTenantInput> = z.object({
  id: z.string().cuid().optional(),
  title: z.string(),
  description: z.string().optional().nullable(),
  date: z.coerce.date(),
  start: z.coerce.date().optional().nullable(),
  end: z.coerce.date().optional().nullable(),
  allDay: z.boolean().optional(),
  type: z.lazy(() => EventTypeSchema).optional(),
  status: z.lazy(() => EventStatusSchema).optional(),
  patientId: z.string().optional().nullable(),
  userId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  actions: z.lazy(() => EventActionUncheckedCreateNestedManyWithoutEventInputSchema).optional(),
  treatments: z.lazy(() => TreatmentUncheckedCreateNestedManyWithoutEventInputSchema).optional()
}).strict();

export const EventCreateOrConnectWithoutTenantInputSchema: z.ZodType<Prisma.EventCreateOrConnectWithoutTenantInput> = z.object({
  where: z.lazy(() => EventWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => EventCreateWithoutTenantInputSchema),z.lazy(() => EventUncheckedCreateWithoutTenantInputSchema) ]),
}).strict();

export const EventCreateManyTenantInputEnvelopeSchema: z.ZodType<Prisma.EventCreateManyTenantInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => EventCreateManyTenantInputSchema),z.lazy(() => EventCreateManyTenantInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const UserUpsertWithWhereUniqueWithoutTenantInputSchema: z.ZodType<Prisma.UserUpsertWithWhereUniqueWithoutTenantInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => UserUpdateWithoutTenantInputSchema),z.lazy(() => UserUncheckedUpdateWithoutTenantInputSchema) ]),
  create: z.union([ z.lazy(() => UserCreateWithoutTenantInputSchema),z.lazy(() => UserUncheckedCreateWithoutTenantInputSchema) ]),
}).strict();

export const UserUpdateWithWhereUniqueWithoutTenantInputSchema: z.ZodType<Prisma.UserUpdateWithWhereUniqueWithoutTenantInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => UserUpdateWithoutTenantInputSchema),z.lazy(() => UserUncheckedUpdateWithoutTenantInputSchema) ]),
}).strict();

export const UserUpdateManyWithWhereWithoutTenantInputSchema: z.ZodType<Prisma.UserUpdateManyWithWhereWithoutTenantInput> = z.object({
  where: z.lazy(() => UserScalarWhereInputSchema),
  data: z.union([ z.lazy(() => UserUpdateManyMutationInputSchema),z.lazy(() => UserUncheckedUpdateManyWithoutTenantInputSchema) ]),
}).strict();

export const UserScalarWhereInputSchema: z.ZodType<Prisma.UserScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => UserScalarWhereInputSchema),z.lazy(() => UserScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => UserScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => UserScalarWhereInputSchema),z.lazy(() => UserScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  index: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  role: z.union([ z.lazy(() => EnumRoleFilterSchema),z.lazy(() => RoleSchema) ]).optional(),
  workingHours: z.lazy(() => JsonFilterSchema).optional(),
  specializationId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  profileId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  tenantId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  deletedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  activatedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  lastLoginAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  bannedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const TenantProfileUpsertWithoutTenantInputSchema: z.ZodType<Prisma.TenantProfileUpsertWithoutTenantInput> = z.object({
  update: z.union([ z.lazy(() => TenantProfileUpdateWithoutTenantInputSchema),z.lazy(() => TenantProfileUncheckedUpdateWithoutTenantInputSchema) ]),
  create: z.union([ z.lazy(() => TenantProfileCreateWithoutTenantInputSchema),z.lazy(() => TenantProfileUncheckedCreateWithoutTenantInputSchema) ]),
  where: z.lazy(() => TenantProfileWhereInputSchema).optional()
}).strict();

export const TenantProfileUpdateToOneWithWhereWithoutTenantInputSchema: z.ZodType<Prisma.TenantProfileUpdateToOneWithWhereWithoutTenantInput> = z.object({
  where: z.lazy(() => TenantProfileWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => TenantProfileUpdateWithoutTenantInputSchema),z.lazy(() => TenantProfileUncheckedUpdateWithoutTenantInputSchema) ]),
}).strict();

export const TenantProfileUpdateWithoutTenantInputSchema: z.ZodType<Prisma.TenantProfileUpdateWithoutTenantInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  county: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  address: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  zip: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  avatar: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  size: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  stripeSubscriptionId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  activeSubscription: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  plan: z.lazy(() => PlanUpdateOneRequiredWithoutTenantProfilesNestedInputSchema).optional()
}).strict();

export const TenantProfileUncheckedUpdateWithoutTenantInputSchema: z.ZodType<Prisma.TenantProfileUncheckedUpdateWithoutTenantInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  county: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  address: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  zip: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  avatar: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  size: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  stripeSubscriptionId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  activeSubscription: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  planId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const SpecializationUpsertWithWhereUniqueWithoutTenantInputSchema: z.ZodType<Prisma.SpecializationUpsertWithWhereUniqueWithoutTenantInput> = z.object({
  where: z.lazy(() => SpecializationWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => SpecializationUpdateWithoutTenantInputSchema),z.lazy(() => SpecializationUncheckedUpdateWithoutTenantInputSchema) ]),
  create: z.union([ z.lazy(() => SpecializationCreateWithoutTenantInputSchema),z.lazy(() => SpecializationUncheckedCreateWithoutTenantInputSchema) ]),
}).strict();

export const SpecializationUpdateWithWhereUniqueWithoutTenantInputSchema: z.ZodType<Prisma.SpecializationUpdateWithWhereUniqueWithoutTenantInput> = z.object({
  where: z.lazy(() => SpecializationWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => SpecializationUpdateWithoutTenantInputSchema),z.lazy(() => SpecializationUncheckedUpdateWithoutTenantInputSchema) ]),
}).strict();

export const SpecializationUpdateManyWithWhereWithoutTenantInputSchema: z.ZodType<Prisma.SpecializationUpdateManyWithWhereWithoutTenantInput> = z.object({
  where: z.lazy(() => SpecializationScalarWhereInputSchema),
  data: z.union([ z.lazy(() => SpecializationUpdateManyMutationInputSchema),z.lazy(() => SpecializationUncheckedUpdateManyWithoutTenantInputSchema) ]),
}).strict();

export const SpecializationScalarWhereInputSchema: z.ZodType<Prisma.SpecializationScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => SpecializationScalarWhereInputSchema),z.lazy(() => SpecializationScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => SpecializationScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => SpecializationScalarWhereInputSchema),z.lazy(() => SpecializationScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  tenantId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const ProfileUpsertWithWhereUniqueWithoutPreferredTenantInputSchema: z.ZodType<Prisma.ProfileUpsertWithWhereUniqueWithoutPreferredTenantInput> = z.object({
  where: z.lazy(() => ProfileWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => ProfileUpdateWithoutPreferredTenantInputSchema),z.lazy(() => ProfileUncheckedUpdateWithoutPreferredTenantInputSchema) ]),
  create: z.union([ z.lazy(() => ProfileCreateWithoutPreferredTenantInputSchema),z.lazy(() => ProfileUncheckedCreateWithoutPreferredTenantInputSchema) ]),
}).strict();

export const ProfileUpdateWithWhereUniqueWithoutPreferredTenantInputSchema: z.ZodType<Prisma.ProfileUpdateWithWhereUniqueWithoutPreferredTenantInput> = z.object({
  where: z.lazy(() => ProfileWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => ProfileUpdateWithoutPreferredTenantInputSchema),z.lazy(() => ProfileUncheckedUpdateWithoutPreferredTenantInputSchema) ]),
}).strict();

export const ProfileUpdateManyWithWhereWithoutPreferredTenantInputSchema: z.ZodType<Prisma.ProfileUpdateManyWithWhereWithoutPreferredTenantInput> = z.object({
  where: z.lazy(() => ProfileScalarWhereInputSchema),
  data: z.union([ z.lazy(() => ProfileUpdateManyMutationInputSchema),z.lazy(() => ProfileUncheckedUpdateManyWithoutPreferredTenantInputSchema) ]),
}).strict();

export const ProfileScalarWhereInputSchema: z.ZodType<Prisma.ProfileScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => ProfileScalarWhereInputSchema),z.lazy(() => ProfileScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ProfileScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ProfileScalarWhereInputSchema),z.lazy(() => ProfileScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  title: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  firstName: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  lastName: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  email: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  phone: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  avatar: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  stripeCustomerId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  stripeFreeTrialUsed: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  preferredTenantId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const PatientUpsertWithWhereUniqueWithoutTenantInputSchema: z.ZodType<Prisma.PatientUpsertWithWhereUniqueWithoutTenantInput> = z.object({
  where: z.lazy(() => PatientWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => PatientUpdateWithoutTenantInputSchema),z.lazy(() => PatientUncheckedUpdateWithoutTenantInputSchema) ]),
  create: z.union([ z.lazy(() => PatientCreateWithoutTenantInputSchema),z.lazy(() => PatientUncheckedCreateWithoutTenantInputSchema) ]),
}).strict();

export const PatientUpdateWithWhereUniqueWithoutTenantInputSchema: z.ZodType<Prisma.PatientUpdateWithWhereUniqueWithoutTenantInput> = z.object({
  where: z.lazy(() => PatientWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => PatientUpdateWithoutTenantInputSchema),z.lazy(() => PatientUncheckedUpdateWithoutTenantInputSchema) ]),
}).strict();

export const PatientUpdateManyWithWhereWithoutTenantInputSchema: z.ZodType<Prisma.PatientUpdateManyWithWhereWithoutTenantInput> = z.object({
  where: z.lazy(() => PatientScalarWhereInputSchema),
  data: z.union([ z.lazy(() => PatientUpdateManyMutationInputSchema),z.lazy(() => PatientUncheckedUpdateManyWithoutTenantInputSchema) ]),
}).strict();

export const PatientScalarWhereInputSchema: z.ZodType<Prisma.PatientScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => PatientScalarWhereInputSchema),z.lazy(() => PatientScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => PatientScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => PatientScalarWhereInputSchema),z.lazy(() => PatientScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  firstName: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  lastName: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  gender: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  dob: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  email: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  phone: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  city: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  county: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  status: z.union([ z.lazy(() => EnumStatusFilterSchema),z.lazy(() => StatusSchema) ]).optional(),
  smsNotifications: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  emailNotifications: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  userId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  tenantId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const ProductUpsertWithWhereUniqueWithoutTenantInputSchema: z.ZodType<Prisma.ProductUpsertWithWhereUniqueWithoutTenantInput> = z.object({
  where: z.lazy(() => ProductWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => ProductUpdateWithoutTenantInputSchema),z.lazy(() => ProductUncheckedUpdateWithoutTenantInputSchema) ]),
  create: z.union([ z.lazy(() => ProductCreateWithoutTenantInputSchema),z.lazy(() => ProductUncheckedCreateWithoutTenantInputSchema) ]),
}).strict();

export const ProductUpdateWithWhereUniqueWithoutTenantInputSchema: z.ZodType<Prisma.ProductUpdateWithWhereUniqueWithoutTenantInput> = z.object({
  where: z.lazy(() => ProductWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => ProductUpdateWithoutTenantInputSchema),z.lazy(() => ProductUncheckedUpdateWithoutTenantInputSchema) ]),
}).strict();

export const ProductUpdateManyWithWhereWithoutTenantInputSchema: z.ZodType<Prisma.ProductUpdateManyWithWhereWithoutTenantInput> = z.object({
  where: z.lazy(() => ProductScalarWhereInputSchema),
  data: z.union([ z.lazy(() => ProductUpdateManyMutationInputSchema),z.lazy(() => ProductUncheckedUpdateManyWithoutTenantInputSchema) ]),
}).strict();

export const ProductScalarWhereInputSchema: z.ZodType<Prisma.ProductScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => ProductScalarWhereInputSchema),z.lazy(() => ProductScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ProductScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ProductScalarWhereInputSchema),z.lazy(() => ProductScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  price: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  image: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  tags: z.lazy(() => StringNullableListFilterSchema).optional(),
  isActive: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  isDeleted: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  categoryId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  tenantId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const EventUpsertWithWhereUniqueWithoutTenantInputSchema: z.ZodType<Prisma.EventUpsertWithWhereUniqueWithoutTenantInput> = z.object({
  where: z.lazy(() => EventWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => EventUpdateWithoutTenantInputSchema),z.lazy(() => EventUncheckedUpdateWithoutTenantInputSchema) ]),
  create: z.union([ z.lazy(() => EventCreateWithoutTenantInputSchema),z.lazy(() => EventUncheckedCreateWithoutTenantInputSchema) ]),
}).strict();

export const EventUpdateWithWhereUniqueWithoutTenantInputSchema: z.ZodType<Prisma.EventUpdateWithWhereUniqueWithoutTenantInput> = z.object({
  where: z.lazy(() => EventWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => EventUpdateWithoutTenantInputSchema),z.lazy(() => EventUncheckedUpdateWithoutTenantInputSchema) ]),
}).strict();

export const EventUpdateManyWithWhereWithoutTenantInputSchema: z.ZodType<Prisma.EventUpdateManyWithWhereWithoutTenantInput> = z.object({
  where: z.lazy(() => EventScalarWhereInputSchema),
  data: z.union([ z.lazy(() => EventUpdateManyMutationInputSchema),z.lazy(() => EventUncheckedUpdateManyWithoutTenantInputSchema) ]),
}).strict();

export const EventScalarWhereInputSchema: z.ZodType<Prisma.EventScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => EventScalarWhereInputSchema),z.lazy(() => EventScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => EventScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => EventScalarWhereInputSchema),z.lazy(() => EventScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  title: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  date: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  start: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  end: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  allDay: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  type: z.union([ z.lazy(() => EnumEventTypeFilterSchema),z.lazy(() => EventTypeSchema) ]).optional(),
  status: z.union([ z.lazy(() => EnumEventStatusFilterSchema),z.lazy(() => EventStatusSchema) ]).optional(),
  patientId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  userId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  tenantId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const PlanCreateWithoutTenantProfilesInputSchema: z.ZodType<Prisma.PlanCreateWithoutTenantProfilesInput> = z.object({
  id: z.string().cuid().optional(),
  stripeProductId: z.string(),
  stripePriceId: z.string(),
  name: z.string(),
  maxUsers: z.number().int(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const PlanUncheckedCreateWithoutTenantProfilesInputSchema: z.ZodType<Prisma.PlanUncheckedCreateWithoutTenantProfilesInput> = z.object({
  id: z.string().cuid().optional(),
  stripeProductId: z.string(),
  stripePriceId: z.string(),
  name: z.string(),
  maxUsers: z.number().int(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const PlanCreateOrConnectWithoutTenantProfilesInputSchema: z.ZodType<Prisma.PlanCreateOrConnectWithoutTenantProfilesInput> = z.object({
  where: z.lazy(() => PlanWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => PlanCreateWithoutTenantProfilesInputSchema),z.lazy(() => PlanUncheckedCreateWithoutTenantProfilesInputSchema) ]),
}).strict();

export const TenantCreateWithoutProfileInputSchema: z.ZodType<Prisma.TenantCreateWithoutProfileInput> = z.object({
  id: z.string().cuid().optional(),
  email: z.string(),
  deletedAt: z.coerce.date().optional().nullable(),
  disabledAt: z.coerce.date().optional().nullable(),
  trialExpiresAt: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  users: z.lazy(() => UserCreateNestedManyWithoutTenantInputSchema).optional(),
  specializations: z.lazy(() => SpecializationCreateNestedManyWithoutTenantInputSchema).optional(),
  preferedByProfiles: z.lazy(() => ProfileCreateNestedManyWithoutPreferredTenantInputSchema).optional(),
  patients: z.lazy(() => PatientCreateNestedManyWithoutTenantInputSchema).optional(),
  products: z.lazy(() => ProductCreateNestedManyWithoutTenantInputSchema).optional(),
  events: z.lazy(() => EventCreateNestedManyWithoutTenantInputSchema).optional()
}).strict();

export const TenantUncheckedCreateWithoutProfileInputSchema: z.ZodType<Prisma.TenantUncheckedCreateWithoutProfileInput> = z.object({
  id: z.string().cuid().optional(),
  email: z.string(),
  deletedAt: z.coerce.date().optional().nullable(),
  disabledAt: z.coerce.date().optional().nullable(),
  trialExpiresAt: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  users: z.lazy(() => UserUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  specializations: z.lazy(() => SpecializationUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  preferedByProfiles: z.lazy(() => ProfileUncheckedCreateNestedManyWithoutPreferredTenantInputSchema).optional(),
  patients: z.lazy(() => PatientUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  products: z.lazy(() => ProductUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  events: z.lazy(() => EventUncheckedCreateNestedManyWithoutTenantInputSchema).optional()
}).strict();

export const TenantCreateOrConnectWithoutProfileInputSchema: z.ZodType<Prisma.TenantCreateOrConnectWithoutProfileInput> = z.object({
  where: z.lazy(() => TenantWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => TenantCreateWithoutProfileInputSchema),z.lazy(() => TenantUncheckedCreateWithoutProfileInputSchema) ]),
}).strict();

export const PlanUpsertWithoutTenantProfilesInputSchema: z.ZodType<Prisma.PlanUpsertWithoutTenantProfilesInput> = z.object({
  update: z.union([ z.lazy(() => PlanUpdateWithoutTenantProfilesInputSchema),z.lazy(() => PlanUncheckedUpdateWithoutTenantProfilesInputSchema) ]),
  create: z.union([ z.lazy(() => PlanCreateWithoutTenantProfilesInputSchema),z.lazy(() => PlanUncheckedCreateWithoutTenantProfilesInputSchema) ]),
  where: z.lazy(() => PlanWhereInputSchema).optional()
}).strict();

export const PlanUpdateToOneWithWhereWithoutTenantProfilesInputSchema: z.ZodType<Prisma.PlanUpdateToOneWithWhereWithoutTenantProfilesInput> = z.object({
  where: z.lazy(() => PlanWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => PlanUpdateWithoutTenantProfilesInputSchema),z.lazy(() => PlanUncheckedUpdateWithoutTenantProfilesInputSchema) ]),
}).strict();

export const PlanUpdateWithoutTenantProfilesInputSchema: z.ZodType<Prisma.PlanUpdateWithoutTenantProfilesInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  stripeProductId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  stripePriceId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  maxUsers: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const PlanUncheckedUpdateWithoutTenantProfilesInputSchema: z.ZodType<Prisma.PlanUncheckedUpdateWithoutTenantProfilesInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  stripeProductId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  stripePriceId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  maxUsers: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const TenantUpsertWithoutProfileInputSchema: z.ZodType<Prisma.TenantUpsertWithoutProfileInput> = z.object({
  update: z.union([ z.lazy(() => TenantUpdateWithoutProfileInputSchema),z.lazy(() => TenantUncheckedUpdateWithoutProfileInputSchema) ]),
  create: z.union([ z.lazy(() => TenantCreateWithoutProfileInputSchema),z.lazy(() => TenantUncheckedCreateWithoutProfileInputSchema) ]),
  where: z.lazy(() => TenantWhereInputSchema).optional()
}).strict();

export const TenantUpdateToOneWithWhereWithoutProfileInputSchema: z.ZodType<Prisma.TenantUpdateToOneWithWhereWithoutProfileInput> = z.object({
  where: z.lazy(() => TenantWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => TenantUpdateWithoutProfileInputSchema),z.lazy(() => TenantUncheckedUpdateWithoutProfileInputSchema) ]),
}).strict();

export const TenantUpdateWithoutProfileInputSchema: z.ZodType<Prisma.TenantUpdateWithoutProfileInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  disabledAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  trialExpiresAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  users: z.lazy(() => UserUpdateManyWithoutTenantNestedInputSchema).optional(),
  specializations: z.lazy(() => SpecializationUpdateManyWithoutTenantNestedInputSchema).optional(),
  preferedByProfiles: z.lazy(() => ProfileUpdateManyWithoutPreferredTenantNestedInputSchema).optional(),
  patients: z.lazy(() => PatientUpdateManyWithoutTenantNestedInputSchema).optional(),
  products: z.lazy(() => ProductUpdateManyWithoutTenantNestedInputSchema).optional(),
  events: z.lazy(() => EventUpdateManyWithoutTenantNestedInputSchema).optional()
}).strict();

export const TenantUncheckedUpdateWithoutProfileInputSchema: z.ZodType<Prisma.TenantUncheckedUpdateWithoutProfileInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  disabledAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  trialExpiresAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  users: z.lazy(() => UserUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  specializations: z.lazy(() => SpecializationUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  preferedByProfiles: z.lazy(() => ProfileUncheckedUpdateManyWithoutPreferredTenantNestedInputSchema).optional(),
  patients: z.lazy(() => PatientUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  products: z.lazy(() => ProductUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  events: z.lazy(() => EventUncheckedUpdateManyWithoutTenantNestedInputSchema).optional()
}).strict();

export const SpecializationCreateWithoutUsersInputSchema: z.ZodType<Prisma.SpecializationCreateWithoutUsersInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  tenant: z.lazy(() => TenantCreateNestedOneWithoutSpecializationsInputSchema)
}).strict();

export const SpecializationUncheckedCreateWithoutUsersInputSchema: z.ZodType<Prisma.SpecializationUncheckedCreateWithoutUsersInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  tenantId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const SpecializationCreateOrConnectWithoutUsersInputSchema: z.ZodType<Prisma.SpecializationCreateOrConnectWithoutUsersInput> = z.object({
  where: z.lazy(() => SpecializationWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => SpecializationCreateWithoutUsersInputSchema),z.lazy(() => SpecializationUncheckedCreateWithoutUsersInputSchema) ]),
}).strict();

export const ProfileCreateWithoutUsersInputSchema: z.ZodType<Prisma.ProfileCreateWithoutUsersInput> = z.object({
  id: z.string().cuid().optional(),
  title: z.string().optional().nullable(),
  firstName: z.string(),
  lastName: z.string(),
  email: z.string(),
  phone: z.string().optional().nullable(),
  avatar: z.string().optional().nullable(),
  stripeCustomerId: z.string(),
  stripeFreeTrialUsed: z.boolean().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  preferredTenant: z.lazy(() => TenantCreateNestedOneWithoutPreferedByProfilesInputSchema).optional(),
  auth: z.lazy(() => AccountAuthCreateNestedManyWithoutProfileInputSchema).optional()
}).strict();

export const ProfileUncheckedCreateWithoutUsersInputSchema: z.ZodType<Prisma.ProfileUncheckedCreateWithoutUsersInput> = z.object({
  id: z.string().cuid().optional(),
  title: z.string().optional().nullable(),
  firstName: z.string(),
  lastName: z.string(),
  email: z.string(),
  phone: z.string().optional().nullable(),
  avatar: z.string().optional().nullable(),
  stripeCustomerId: z.string(),
  stripeFreeTrialUsed: z.boolean().optional(),
  preferredTenantId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  auth: z.lazy(() => AccountAuthUncheckedCreateNestedManyWithoutProfileInputSchema).optional()
}).strict();

export const ProfileCreateOrConnectWithoutUsersInputSchema: z.ZodType<Prisma.ProfileCreateOrConnectWithoutUsersInput> = z.object({
  where: z.lazy(() => ProfileWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ProfileCreateWithoutUsersInputSchema),z.lazy(() => ProfileUncheckedCreateWithoutUsersInputSchema) ]),
}).strict();

export const TenantCreateWithoutUsersInputSchema: z.ZodType<Prisma.TenantCreateWithoutUsersInput> = z.object({
  id: z.string().cuid().optional(),
  email: z.string(),
  deletedAt: z.coerce.date().optional().nullable(),
  disabledAt: z.coerce.date().optional().nullable(),
  trialExpiresAt: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  profile: z.lazy(() => TenantProfileCreateNestedOneWithoutTenantInputSchema),
  specializations: z.lazy(() => SpecializationCreateNestedManyWithoutTenantInputSchema).optional(),
  preferedByProfiles: z.lazy(() => ProfileCreateNestedManyWithoutPreferredTenantInputSchema).optional(),
  patients: z.lazy(() => PatientCreateNestedManyWithoutTenantInputSchema).optional(),
  products: z.lazy(() => ProductCreateNestedManyWithoutTenantInputSchema).optional(),
  events: z.lazy(() => EventCreateNestedManyWithoutTenantInputSchema).optional()
}).strict();

export const TenantUncheckedCreateWithoutUsersInputSchema: z.ZodType<Prisma.TenantUncheckedCreateWithoutUsersInput> = z.object({
  id: z.string().cuid().optional(),
  email: z.string(),
  profileId: z.string(),
  deletedAt: z.coerce.date().optional().nullable(),
  disabledAt: z.coerce.date().optional().nullable(),
  trialExpiresAt: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  specializations: z.lazy(() => SpecializationUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  preferedByProfiles: z.lazy(() => ProfileUncheckedCreateNestedManyWithoutPreferredTenantInputSchema).optional(),
  patients: z.lazy(() => PatientUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  products: z.lazy(() => ProductUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  events: z.lazy(() => EventUncheckedCreateNestedManyWithoutTenantInputSchema).optional()
}).strict();

export const TenantCreateOrConnectWithoutUsersInputSchema: z.ZodType<Prisma.TenantCreateOrConnectWithoutUsersInput> = z.object({
  where: z.lazy(() => TenantWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => TenantCreateWithoutUsersInputSchema),z.lazy(() => TenantUncheckedCreateWithoutUsersInputSchema) ]),
}).strict();

export const InvitationCreateWithoutUserInputSchema: z.ZodType<Prisma.InvitationCreateWithoutUserInput> = z.object({
  id: z.string().cuid().optional(),
  email: z.string(),
  role: z.lazy(() => RoleSchema),
  token: z.string(),
  expires: z.coerce.date(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  invitedBy: z.lazy(() => UserCreateNestedOneWithoutInvitationsInputSchema)
}).strict();

export const InvitationUncheckedCreateWithoutUserInputSchema: z.ZodType<Prisma.InvitationUncheckedCreateWithoutUserInput> = z.object({
  id: z.string().cuid().optional(),
  email: z.string(),
  role: z.lazy(() => RoleSchema),
  token: z.string(),
  expires: z.coerce.date(),
  invitedById: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const InvitationCreateOrConnectWithoutUserInputSchema: z.ZodType<Prisma.InvitationCreateOrConnectWithoutUserInput> = z.object({
  where: z.lazy(() => InvitationWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => InvitationCreateWithoutUserInputSchema),z.lazy(() => InvitationUncheckedCreateWithoutUserInputSchema) ]),
}).strict();

export const TokenCreateWithoutUserInputSchema: z.ZodType<Prisma.TokenCreateWithoutUserInput> = z.object({
  id: z.string().cuid().optional(),
  type: z.lazy(() => TokenTypeSchema),
  token: z.string(),
  expires: z.coerce.date()
}).strict();

export const TokenUncheckedCreateWithoutUserInputSchema: z.ZodType<Prisma.TokenUncheckedCreateWithoutUserInput> = z.object({
  id: z.string().cuid().optional(),
  type: z.lazy(() => TokenTypeSchema),
  token: z.string(),
  expires: z.coerce.date()
}).strict();

export const TokenCreateOrConnectWithoutUserInputSchema: z.ZodType<Prisma.TokenCreateOrConnectWithoutUserInput> = z.object({
  where: z.lazy(() => TokenWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => TokenCreateWithoutUserInputSchema),z.lazy(() => TokenUncheckedCreateWithoutUserInputSchema) ]),
}).strict();

export const TokenCreateManyUserInputEnvelopeSchema: z.ZodType<Prisma.TokenCreateManyUserInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => TokenCreateManyUserInputSchema),z.lazy(() => TokenCreateManyUserInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const PatientCreateWithoutUserInputSchema: z.ZodType<Prisma.PatientCreateWithoutUserInput> = z.object({
  id: z.string().cuid().optional(),
  firstName: z.string(),
  lastName: z.string(),
  gender: z.string().optional().nullable(),
  dob: z.coerce.date().optional().nullable(),
  email: z.string().optional().nullable(),
  phone: z.string().optional().nullable(),
  city: z.string().optional().nullable(),
  county: z.string().optional().nullable(),
  status: z.lazy(() => StatusSchema).optional(),
  smsNotifications: z.boolean().optional(),
  emailNotifications: z.boolean().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  tenant: z.lazy(() => TenantCreateNestedOneWithoutPatientsInputSchema),
  appointments: z.lazy(() => EventCreateNestedManyWithoutPatientInputSchema).optional(),
  treatmentPlans: z.lazy(() => TreatmentPlanCreateNestedManyWithoutPatientInputSchema).optional()
}).strict();

export const PatientUncheckedCreateWithoutUserInputSchema: z.ZodType<Prisma.PatientUncheckedCreateWithoutUserInput> = z.object({
  id: z.string().cuid().optional(),
  firstName: z.string(),
  lastName: z.string(),
  gender: z.string().optional().nullable(),
  dob: z.coerce.date().optional().nullable(),
  email: z.string().optional().nullable(),
  phone: z.string().optional().nullable(),
  city: z.string().optional().nullable(),
  county: z.string().optional().nullable(),
  status: z.lazy(() => StatusSchema).optional(),
  smsNotifications: z.boolean().optional(),
  emailNotifications: z.boolean().optional(),
  tenantId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  appointments: z.lazy(() => EventUncheckedCreateNestedManyWithoutPatientInputSchema).optional(),
  treatmentPlans: z.lazy(() => TreatmentPlanUncheckedCreateNestedManyWithoutPatientInputSchema).optional()
}).strict();

export const PatientCreateOrConnectWithoutUserInputSchema: z.ZodType<Prisma.PatientCreateOrConnectWithoutUserInput> = z.object({
  where: z.lazy(() => PatientWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => PatientCreateWithoutUserInputSchema),z.lazy(() => PatientUncheckedCreateWithoutUserInputSchema) ]),
}).strict();

export const PatientCreateManyUserInputEnvelopeSchema: z.ZodType<Prisma.PatientCreateManyUserInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => PatientCreateManyUserInputSchema),z.lazy(() => PatientCreateManyUserInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const EventCreateWithoutUserInputSchema: z.ZodType<Prisma.EventCreateWithoutUserInput> = z.object({
  id: z.string().cuid().optional(),
  title: z.string(),
  description: z.string().optional().nullable(),
  date: z.coerce.date(),
  start: z.coerce.date().optional().nullable(),
  end: z.coerce.date().optional().nullable(),
  allDay: z.boolean().optional(),
  type: z.lazy(() => EventTypeSchema).optional(),
  status: z.lazy(() => EventStatusSchema).optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  actions: z.lazy(() => EventActionCreateNestedManyWithoutEventInputSchema).optional(),
  treatments: z.lazy(() => TreatmentCreateNestedManyWithoutEventInputSchema).optional(),
  patient: z.lazy(() => PatientCreateNestedOneWithoutAppointmentsInputSchema).optional(),
  tenant: z.lazy(() => TenantCreateNestedOneWithoutEventsInputSchema)
}).strict();

export const EventUncheckedCreateWithoutUserInputSchema: z.ZodType<Prisma.EventUncheckedCreateWithoutUserInput> = z.object({
  id: z.string().cuid().optional(),
  title: z.string(),
  description: z.string().optional().nullable(),
  date: z.coerce.date(),
  start: z.coerce.date().optional().nullable(),
  end: z.coerce.date().optional().nullable(),
  allDay: z.boolean().optional(),
  type: z.lazy(() => EventTypeSchema).optional(),
  status: z.lazy(() => EventStatusSchema).optional(),
  patientId: z.string().optional().nullable(),
  tenantId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  actions: z.lazy(() => EventActionUncheckedCreateNestedManyWithoutEventInputSchema).optional(),
  treatments: z.lazy(() => TreatmentUncheckedCreateNestedManyWithoutEventInputSchema).optional()
}).strict();

export const EventCreateOrConnectWithoutUserInputSchema: z.ZodType<Prisma.EventCreateOrConnectWithoutUserInput> = z.object({
  where: z.lazy(() => EventWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => EventCreateWithoutUserInputSchema),z.lazy(() => EventUncheckedCreateWithoutUserInputSchema) ]),
}).strict();

export const EventCreateManyUserInputEnvelopeSchema: z.ZodType<Prisma.EventCreateManyUserInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => EventCreateManyUserInputSchema),z.lazy(() => EventCreateManyUserInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const EventActionCreateWithoutUserInputSchema: z.ZodType<Prisma.EventActionCreateWithoutUserInput> = z.object({
  id: z.string().cuid().optional(),
  data: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  event: z.lazy(() => EventCreateNestedOneWithoutActionsInputSchema)
}).strict();

export const EventActionUncheckedCreateWithoutUserInputSchema: z.ZodType<Prisma.EventActionUncheckedCreateWithoutUserInput> = z.object({
  id: z.string().cuid().optional(),
  data: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  eventId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const EventActionCreateOrConnectWithoutUserInputSchema: z.ZodType<Prisma.EventActionCreateOrConnectWithoutUserInput> = z.object({
  where: z.lazy(() => EventActionWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => EventActionCreateWithoutUserInputSchema),z.lazy(() => EventActionUncheckedCreateWithoutUserInputSchema) ]),
}).strict();

export const EventActionCreateManyUserInputEnvelopeSchema: z.ZodType<Prisma.EventActionCreateManyUserInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => EventActionCreateManyUserInputSchema),z.lazy(() => EventActionCreateManyUserInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const TreatmentPlanCreateWithoutUserInputSchema: z.ZodType<Prisma.TreatmentPlanCreateWithoutUserInput> = z.object({
  id: z.string().cuid().optional(),
  description: z.string().optional().nullable(),
  isDone: z.boolean().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  treatments: z.lazy(() => TreatmentCreateNestedManyWithoutTreatmentPlanInputSchema).optional(),
  patient: z.lazy(() => PatientCreateNestedOneWithoutTreatmentPlansInputSchema)
}).strict();

export const TreatmentPlanUncheckedCreateWithoutUserInputSchema: z.ZodType<Prisma.TreatmentPlanUncheckedCreateWithoutUserInput> = z.object({
  id: z.string().cuid().optional(),
  description: z.string().optional().nullable(),
  isDone: z.boolean().optional(),
  patientId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  treatments: z.lazy(() => TreatmentUncheckedCreateNestedManyWithoutTreatmentPlanInputSchema).optional()
}).strict();

export const TreatmentPlanCreateOrConnectWithoutUserInputSchema: z.ZodType<Prisma.TreatmentPlanCreateOrConnectWithoutUserInput> = z.object({
  where: z.lazy(() => TreatmentPlanWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => TreatmentPlanCreateWithoutUserInputSchema),z.lazy(() => TreatmentPlanUncheckedCreateWithoutUserInputSchema) ]),
}).strict();

export const TreatmentPlanCreateManyUserInputEnvelopeSchema: z.ZodType<Prisma.TreatmentPlanCreateManyUserInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => TreatmentPlanCreateManyUserInputSchema),z.lazy(() => TreatmentPlanCreateManyUserInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const InvitationCreateWithoutInvitedByInputSchema: z.ZodType<Prisma.InvitationCreateWithoutInvitedByInput> = z.object({
  id: z.string().cuid().optional(),
  email: z.string(),
  role: z.lazy(() => RoleSchema),
  token: z.string(),
  expires: z.coerce.date(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  user: z.lazy(() => UserCreateNestedOneWithoutInvitationInputSchema).optional()
}).strict();

export const InvitationUncheckedCreateWithoutInvitedByInputSchema: z.ZodType<Prisma.InvitationUncheckedCreateWithoutInvitedByInput> = z.object({
  id: z.string().cuid().optional(),
  email: z.string(),
  role: z.lazy(() => RoleSchema),
  token: z.string(),
  expires: z.coerce.date(),
  userId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const InvitationCreateOrConnectWithoutInvitedByInputSchema: z.ZodType<Prisma.InvitationCreateOrConnectWithoutInvitedByInput> = z.object({
  where: z.lazy(() => InvitationWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => InvitationCreateWithoutInvitedByInputSchema),z.lazy(() => InvitationUncheckedCreateWithoutInvitedByInputSchema) ]),
}).strict();

export const InvitationCreateManyInvitedByInputEnvelopeSchema: z.ZodType<Prisma.InvitationCreateManyInvitedByInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => InvitationCreateManyInvitedByInputSchema),z.lazy(() => InvitationCreateManyInvitedByInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const SpecializationUpsertWithoutUsersInputSchema: z.ZodType<Prisma.SpecializationUpsertWithoutUsersInput> = z.object({
  update: z.union([ z.lazy(() => SpecializationUpdateWithoutUsersInputSchema),z.lazy(() => SpecializationUncheckedUpdateWithoutUsersInputSchema) ]),
  create: z.union([ z.lazy(() => SpecializationCreateWithoutUsersInputSchema),z.lazy(() => SpecializationUncheckedCreateWithoutUsersInputSchema) ]),
  where: z.lazy(() => SpecializationWhereInputSchema).optional()
}).strict();

export const SpecializationUpdateToOneWithWhereWithoutUsersInputSchema: z.ZodType<Prisma.SpecializationUpdateToOneWithWhereWithoutUsersInput> = z.object({
  where: z.lazy(() => SpecializationWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => SpecializationUpdateWithoutUsersInputSchema),z.lazy(() => SpecializationUncheckedUpdateWithoutUsersInputSchema) ]),
}).strict();

export const SpecializationUpdateWithoutUsersInputSchema: z.ZodType<Prisma.SpecializationUpdateWithoutUsersInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  tenant: z.lazy(() => TenantUpdateOneRequiredWithoutSpecializationsNestedInputSchema).optional()
}).strict();

export const SpecializationUncheckedUpdateWithoutUsersInputSchema: z.ZodType<Prisma.SpecializationUncheckedUpdateWithoutUsersInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tenantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ProfileUpsertWithoutUsersInputSchema: z.ZodType<Prisma.ProfileUpsertWithoutUsersInput> = z.object({
  update: z.union([ z.lazy(() => ProfileUpdateWithoutUsersInputSchema),z.lazy(() => ProfileUncheckedUpdateWithoutUsersInputSchema) ]),
  create: z.union([ z.lazy(() => ProfileCreateWithoutUsersInputSchema),z.lazy(() => ProfileUncheckedCreateWithoutUsersInputSchema) ]),
  where: z.lazy(() => ProfileWhereInputSchema).optional()
}).strict();

export const ProfileUpdateToOneWithWhereWithoutUsersInputSchema: z.ZodType<Prisma.ProfileUpdateToOneWithWhereWithoutUsersInput> = z.object({
  where: z.lazy(() => ProfileWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => ProfileUpdateWithoutUsersInputSchema),z.lazy(() => ProfileUncheckedUpdateWithoutUsersInputSchema) ]),
}).strict();

export const ProfileUpdateWithoutUsersInputSchema: z.ZodType<Prisma.ProfileUpdateWithoutUsersInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  title: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  firstName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  lastName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  avatar: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  stripeCustomerId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  stripeFreeTrialUsed: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  preferredTenant: z.lazy(() => TenantUpdateOneWithoutPreferedByProfilesNestedInputSchema).optional(),
  auth: z.lazy(() => AccountAuthUpdateManyWithoutProfileNestedInputSchema).optional()
}).strict();

export const ProfileUncheckedUpdateWithoutUsersInputSchema: z.ZodType<Prisma.ProfileUncheckedUpdateWithoutUsersInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  title: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  firstName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  lastName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  avatar: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  stripeCustomerId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  stripeFreeTrialUsed: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  preferredTenantId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  auth: z.lazy(() => AccountAuthUncheckedUpdateManyWithoutProfileNestedInputSchema).optional()
}).strict();

export const TenantUpsertWithoutUsersInputSchema: z.ZodType<Prisma.TenantUpsertWithoutUsersInput> = z.object({
  update: z.union([ z.lazy(() => TenantUpdateWithoutUsersInputSchema),z.lazy(() => TenantUncheckedUpdateWithoutUsersInputSchema) ]),
  create: z.union([ z.lazy(() => TenantCreateWithoutUsersInputSchema),z.lazy(() => TenantUncheckedCreateWithoutUsersInputSchema) ]),
  where: z.lazy(() => TenantWhereInputSchema).optional()
}).strict();

export const TenantUpdateToOneWithWhereWithoutUsersInputSchema: z.ZodType<Prisma.TenantUpdateToOneWithWhereWithoutUsersInput> = z.object({
  where: z.lazy(() => TenantWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => TenantUpdateWithoutUsersInputSchema),z.lazy(() => TenantUncheckedUpdateWithoutUsersInputSchema) ]),
}).strict();

export const TenantUpdateWithoutUsersInputSchema: z.ZodType<Prisma.TenantUpdateWithoutUsersInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  disabledAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  trialExpiresAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  profile: z.lazy(() => TenantProfileUpdateOneRequiredWithoutTenantNestedInputSchema).optional(),
  specializations: z.lazy(() => SpecializationUpdateManyWithoutTenantNestedInputSchema).optional(),
  preferedByProfiles: z.lazy(() => ProfileUpdateManyWithoutPreferredTenantNestedInputSchema).optional(),
  patients: z.lazy(() => PatientUpdateManyWithoutTenantNestedInputSchema).optional(),
  products: z.lazy(() => ProductUpdateManyWithoutTenantNestedInputSchema).optional(),
  events: z.lazy(() => EventUpdateManyWithoutTenantNestedInputSchema).optional()
}).strict();

export const TenantUncheckedUpdateWithoutUsersInputSchema: z.ZodType<Prisma.TenantUncheckedUpdateWithoutUsersInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  profileId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  disabledAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  trialExpiresAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  specializations: z.lazy(() => SpecializationUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  preferedByProfiles: z.lazy(() => ProfileUncheckedUpdateManyWithoutPreferredTenantNestedInputSchema).optional(),
  patients: z.lazy(() => PatientUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  products: z.lazy(() => ProductUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  events: z.lazy(() => EventUncheckedUpdateManyWithoutTenantNestedInputSchema).optional()
}).strict();

export const InvitationUpsertWithoutUserInputSchema: z.ZodType<Prisma.InvitationUpsertWithoutUserInput> = z.object({
  update: z.union([ z.lazy(() => InvitationUpdateWithoutUserInputSchema),z.lazy(() => InvitationUncheckedUpdateWithoutUserInputSchema) ]),
  create: z.union([ z.lazy(() => InvitationCreateWithoutUserInputSchema),z.lazy(() => InvitationUncheckedCreateWithoutUserInputSchema) ]),
  where: z.lazy(() => InvitationWhereInputSchema).optional()
}).strict();

export const InvitationUpdateToOneWithWhereWithoutUserInputSchema: z.ZodType<Prisma.InvitationUpdateToOneWithWhereWithoutUserInput> = z.object({
  where: z.lazy(() => InvitationWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => InvitationUpdateWithoutUserInputSchema),z.lazy(() => InvitationUncheckedUpdateWithoutUserInputSchema) ]),
}).strict();

export const InvitationUpdateWithoutUserInputSchema: z.ZodType<Prisma.InvitationUpdateWithoutUserInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.lazy(() => RoleSchema),z.lazy(() => EnumRoleFieldUpdateOperationsInputSchema) ]).optional(),
  token: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  expires: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  invitedBy: z.lazy(() => UserUpdateOneRequiredWithoutInvitationsNestedInputSchema).optional()
}).strict();

export const InvitationUncheckedUpdateWithoutUserInputSchema: z.ZodType<Prisma.InvitationUncheckedUpdateWithoutUserInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.lazy(() => RoleSchema),z.lazy(() => EnumRoleFieldUpdateOperationsInputSchema) ]).optional(),
  token: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  expires: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  invitedById: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const TokenUpsertWithWhereUniqueWithoutUserInputSchema: z.ZodType<Prisma.TokenUpsertWithWhereUniqueWithoutUserInput> = z.object({
  where: z.lazy(() => TokenWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => TokenUpdateWithoutUserInputSchema),z.lazy(() => TokenUncheckedUpdateWithoutUserInputSchema) ]),
  create: z.union([ z.lazy(() => TokenCreateWithoutUserInputSchema),z.lazy(() => TokenUncheckedCreateWithoutUserInputSchema) ]),
}).strict();

export const TokenUpdateWithWhereUniqueWithoutUserInputSchema: z.ZodType<Prisma.TokenUpdateWithWhereUniqueWithoutUserInput> = z.object({
  where: z.lazy(() => TokenWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => TokenUpdateWithoutUserInputSchema),z.lazy(() => TokenUncheckedUpdateWithoutUserInputSchema) ]),
}).strict();

export const TokenUpdateManyWithWhereWithoutUserInputSchema: z.ZodType<Prisma.TokenUpdateManyWithWhereWithoutUserInput> = z.object({
  where: z.lazy(() => TokenScalarWhereInputSchema),
  data: z.union([ z.lazy(() => TokenUpdateManyMutationInputSchema),z.lazy(() => TokenUncheckedUpdateManyWithoutUserInputSchema) ]),
}).strict();

export const TokenScalarWhereInputSchema: z.ZodType<Prisma.TokenScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => TokenScalarWhereInputSchema),z.lazy(() => TokenScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => TokenScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => TokenScalarWhereInputSchema),z.lazy(() => TokenScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  type: z.union([ z.lazy(() => EnumTokenTypeFilterSchema),z.lazy(() => TokenTypeSchema) ]).optional(),
  token: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  expires: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  userId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
}).strict();

export const PatientUpsertWithWhereUniqueWithoutUserInputSchema: z.ZodType<Prisma.PatientUpsertWithWhereUniqueWithoutUserInput> = z.object({
  where: z.lazy(() => PatientWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => PatientUpdateWithoutUserInputSchema),z.lazy(() => PatientUncheckedUpdateWithoutUserInputSchema) ]),
  create: z.union([ z.lazy(() => PatientCreateWithoutUserInputSchema),z.lazy(() => PatientUncheckedCreateWithoutUserInputSchema) ]),
}).strict();

export const PatientUpdateWithWhereUniqueWithoutUserInputSchema: z.ZodType<Prisma.PatientUpdateWithWhereUniqueWithoutUserInput> = z.object({
  where: z.lazy(() => PatientWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => PatientUpdateWithoutUserInputSchema),z.lazy(() => PatientUncheckedUpdateWithoutUserInputSchema) ]),
}).strict();

export const PatientUpdateManyWithWhereWithoutUserInputSchema: z.ZodType<Prisma.PatientUpdateManyWithWhereWithoutUserInput> = z.object({
  where: z.lazy(() => PatientScalarWhereInputSchema),
  data: z.union([ z.lazy(() => PatientUpdateManyMutationInputSchema),z.lazy(() => PatientUncheckedUpdateManyWithoutUserInputSchema) ]),
}).strict();

export const EventUpsertWithWhereUniqueWithoutUserInputSchema: z.ZodType<Prisma.EventUpsertWithWhereUniqueWithoutUserInput> = z.object({
  where: z.lazy(() => EventWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => EventUpdateWithoutUserInputSchema),z.lazy(() => EventUncheckedUpdateWithoutUserInputSchema) ]),
  create: z.union([ z.lazy(() => EventCreateWithoutUserInputSchema),z.lazy(() => EventUncheckedCreateWithoutUserInputSchema) ]),
}).strict();

export const EventUpdateWithWhereUniqueWithoutUserInputSchema: z.ZodType<Prisma.EventUpdateWithWhereUniqueWithoutUserInput> = z.object({
  where: z.lazy(() => EventWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => EventUpdateWithoutUserInputSchema),z.lazy(() => EventUncheckedUpdateWithoutUserInputSchema) ]),
}).strict();

export const EventUpdateManyWithWhereWithoutUserInputSchema: z.ZodType<Prisma.EventUpdateManyWithWhereWithoutUserInput> = z.object({
  where: z.lazy(() => EventScalarWhereInputSchema),
  data: z.union([ z.lazy(() => EventUpdateManyMutationInputSchema),z.lazy(() => EventUncheckedUpdateManyWithoutUserInputSchema) ]),
}).strict();

export const EventActionUpsertWithWhereUniqueWithoutUserInputSchema: z.ZodType<Prisma.EventActionUpsertWithWhereUniqueWithoutUserInput> = z.object({
  where: z.lazy(() => EventActionWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => EventActionUpdateWithoutUserInputSchema),z.lazy(() => EventActionUncheckedUpdateWithoutUserInputSchema) ]),
  create: z.union([ z.lazy(() => EventActionCreateWithoutUserInputSchema),z.lazy(() => EventActionUncheckedCreateWithoutUserInputSchema) ]),
}).strict();

export const EventActionUpdateWithWhereUniqueWithoutUserInputSchema: z.ZodType<Prisma.EventActionUpdateWithWhereUniqueWithoutUserInput> = z.object({
  where: z.lazy(() => EventActionWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => EventActionUpdateWithoutUserInputSchema),z.lazy(() => EventActionUncheckedUpdateWithoutUserInputSchema) ]),
}).strict();

export const EventActionUpdateManyWithWhereWithoutUserInputSchema: z.ZodType<Prisma.EventActionUpdateManyWithWhereWithoutUserInput> = z.object({
  where: z.lazy(() => EventActionScalarWhereInputSchema),
  data: z.union([ z.lazy(() => EventActionUpdateManyMutationInputSchema),z.lazy(() => EventActionUncheckedUpdateManyWithoutUserInputSchema) ]),
}).strict();

export const EventActionScalarWhereInputSchema: z.ZodType<Prisma.EventActionScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => EventActionScalarWhereInputSchema),z.lazy(() => EventActionScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => EventActionScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => EventActionScalarWhereInputSchema),z.lazy(() => EventActionScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  data: z.lazy(() => JsonFilterSchema).optional(),
  userId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  eventId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const TreatmentPlanUpsertWithWhereUniqueWithoutUserInputSchema: z.ZodType<Prisma.TreatmentPlanUpsertWithWhereUniqueWithoutUserInput> = z.object({
  where: z.lazy(() => TreatmentPlanWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => TreatmentPlanUpdateWithoutUserInputSchema),z.lazy(() => TreatmentPlanUncheckedUpdateWithoutUserInputSchema) ]),
  create: z.union([ z.lazy(() => TreatmentPlanCreateWithoutUserInputSchema),z.lazy(() => TreatmentPlanUncheckedCreateWithoutUserInputSchema) ]),
}).strict();

export const TreatmentPlanUpdateWithWhereUniqueWithoutUserInputSchema: z.ZodType<Prisma.TreatmentPlanUpdateWithWhereUniqueWithoutUserInput> = z.object({
  where: z.lazy(() => TreatmentPlanWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => TreatmentPlanUpdateWithoutUserInputSchema),z.lazy(() => TreatmentPlanUncheckedUpdateWithoutUserInputSchema) ]),
}).strict();

export const TreatmentPlanUpdateManyWithWhereWithoutUserInputSchema: z.ZodType<Prisma.TreatmentPlanUpdateManyWithWhereWithoutUserInput> = z.object({
  where: z.lazy(() => TreatmentPlanScalarWhereInputSchema),
  data: z.union([ z.lazy(() => TreatmentPlanUpdateManyMutationInputSchema),z.lazy(() => TreatmentPlanUncheckedUpdateManyWithoutUserInputSchema) ]),
}).strict();

export const TreatmentPlanScalarWhereInputSchema: z.ZodType<Prisma.TreatmentPlanScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => TreatmentPlanScalarWhereInputSchema),z.lazy(() => TreatmentPlanScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => TreatmentPlanScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => TreatmentPlanScalarWhereInputSchema),z.lazy(() => TreatmentPlanScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  isDone: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  patientId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  userId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const InvitationUpsertWithWhereUniqueWithoutInvitedByInputSchema: z.ZodType<Prisma.InvitationUpsertWithWhereUniqueWithoutInvitedByInput> = z.object({
  where: z.lazy(() => InvitationWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => InvitationUpdateWithoutInvitedByInputSchema),z.lazy(() => InvitationUncheckedUpdateWithoutInvitedByInputSchema) ]),
  create: z.union([ z.lazy(() => InvitationCreateWithoutInvitedByInputSchema),z.lazy(() => InvitationUncheckedCreateWithoutInvitedByInputSchema) ]),
}).strict();

export const InvitationUpdateWithWhereUniqueWithoutInvitedByInputSchema: z.ZodType<Prisma.InvitationUpdateWithWhereUniqueWithoutInvitedByInput> = z.object({
  where: z.lazy(() => InvitationWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => InvitationUpdateWithoutInvitedByInputSchema),z.lazy(() => InvitationUncheckedUpdateWithoutInvitedByInputSchema) ]),
}).strict();

export const InvitationUpdateManyWithWhereWithoutInvitedByInputSchema: z.ZodType<Prisma.InvitationUpdateManyWithWhereWithoutInvitedByInput> = z.object({
  where: z.lazy(() => InvitationScalarWhereInputSchema),
  data: z.union([ z.lazy(() => InvitationUpdateManyMutationInputSchema),z.lazy(() => InvitationUncheckedUpdateManyWithoutInvitedByInputSchema) ]),
}).strict();

export const InvitationScalarWhereInputSchema: z.ZodType<Prisma.InvitationScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => InvitationScalarWhereInputSchema),z.lazy(() => InvitationScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => InvitationScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => InvitationScalarWhereInputSchema),z.lazy(() => InvitationScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  email: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  role: z.union([ z.lazy(() => EnumRoleFilterSchema),z.lazy(() => RoleSchema) ]).optional(),
  token: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  expires: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  invitedById: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  userId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const TenantCreateWithoutPreferedByProfilesInputSchema: z.ZodType<Prisma.TenantCreateWithoutPreferedByProfilesInput> = z.object({
  id: z.string().cuid().optional(),
  email: z.string(),
  deletedAt: z.coerce.date().optional().nullable(),
  disabledAt: z.coerce.date().optional().nullable(),
  trialExpiresAt: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  users: z.lazy(() => UserCreateNestedManyWithoutTenantInputSchema).optional(),
  profile: z.lazy(() => TenantProfileCreateNestedOneWithoutTenantInputSchema),
  specializations: z.lazy(() => SpecializationCreateNestedManyWithoutTenantInputSchema).optional(),
  patients: z.lazy(() => PatientCreateNestedManyWithoutTenantInputSchema).optional(),
  products: z.lazy(() => ProductCreateNestedManyWithoutTenantInputSchema).optional(),
  events: z.lazy(() => EventCreateNestedManyWithoutTenantInputSchema).optional()
}).strict();

export const TenantUncheckedCreateWithoutPreferedByProfilesInputSchema: z.ZodType<Prisma.TenantUncheckedCreateWithoutPreferedByProfilesInput> = z.object({
  id: z.string().cuid().optional(),
  email: z.string(),
  profileId: z.string(),
  deletedAt: z.coerce.date().optional().nullable(),
  disabledAt: z.coerce.date().optional().nullable(),
  trialExpiresAt: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  users: z.lazy(() => UserUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  specializations: z.lazy(() => SpecializationUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  patients: z.lazy(() => PatientUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  products: z.lazy(() => ProductUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  events: z.lazy(() => EventUncheckedCreateNestedManyWithoutTenantInputSchema).optional()
}).strict();

export const TenantCreateOrConnectWithoutPreferedByProfilesInputSchema: z.ZodType<Prisma.TenantCreateOrConnectWithoutPreferedByProfilesInput> = z.object({
  where: z.lazy(() => TenantWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => TenantCreateWithoutPreferedByProfilesInputSchema),z.lazy(() => TenantUncheckedCreateWithoutPreferedByProfilesInputSchema) ]),
}).strict();

export const UserCreateWithoutProfileInputSchema: z.ZodType<Prisma.UserCreateWithoutProfileInput> = z.object({
  id: z.string().cuid().optional(),
  index: z.number().int().optional(),
  role: z.lazy(() => RoleSchema).optional(),
  workingHours: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  deletedAt: z.coerce.date().optional().nullable(),
  activatedAt: z.coerce.date().optional().nullable(),
  lastLoginAt: z.coerce.date().optional().nullable(),
  bannedAt: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  specialization: z.lazy(() => SpecializationCreateNestedOneWithoutUsersInputSchema).optional(),
  tenant: z.lazy(() => TenantCreateNestedOneWithoutUsersInputSchema),
  invitation: z.lazy(() => InvitationCreateNestedOneWithoutUserInputSchema).optional(),
  tokens: z.lazy(() => TokenCreateNestedManyWithoutUserInputSchema).optional(),
  patients: z.lazy(() => PatientCreateNestedManyWithoutUserInputSchema).optional(),
  events: z.lazy(() => EventCreateNestedManyWithoutUserInputSchema).optional(),
  eventActions: z.lazy(() => EventActionCreateNestedManyWithoutUserInputSchema).optional(),
  treatmentPlans: z.lazy(() => TreatmentPlanCreateNestedManyWithoutUserInputSchema).optional(),
  invitations: z.lazy(() => InvitationCreateNestedManyWithoutInvitedByInputSchema).optional()
}).strict();

export const UserUncheckedCreateWithoutProfileInputSchema: z.ZodType<Prisma.UserUncheckedCreateWithoutProfileInput> = z.object({
  id: z.string().cuid().optional(),
  index: z.number().int().optional(),
  role: z.lazy(() => RoleSchema).optional(),
  workingHours: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  specializationId: z.string().optional().nullable(),
  tenantId: z.string(),
  deletedAt: z.coerce.date().optional().nullable(),
  activatedAt: z.coerce.date().optional().nullable(),
  lastLoginAt: z.coerce.date().optional().nullable(),
  bannedAt: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  invitation: z.lazy(() => InvitationUncheckedCreateNestedOneWithoutUserInputSchema).optional(),
  tokens: z.lazy(() => TokenUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  patients: z.lazy(() => PatientUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  events: z.lazy(() => EventUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  eventActions: z.lazy(() => EventActionUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  treatmentPlans: z.lazy(() => TreatmentPlanUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedCreateNestedManyWithoutInvitedByInputSchema).optional()
}).strict();

export const UserCreateOrConnectWithoutProfileInputSchema: z.ZodType<Prisma.UserCreateOrConnectWithoutProfileInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UserCreateWithoutProfileInputSchema),z.lazy(() => UserUncheckedCreateWithoutProfileInputSchema) ]),
}).strict();

export const UserCreateManyProfileInputEnvelopeSchema: z.ZodType<Prisma.UserCreateManyProfileInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => UserCreateManyProfileInputSchema),z.lazy(() => UserCreateManyProfileInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const AccountAuthCreateWithoutProfileInputSchema: z.ZodType<Prisma.AccountAuthCreateWithoutProfileInput> = z.object({
  id: z.string().cuid().optional(),
  type: z.string(),
  provider: z.string(),
  passwordHash: z.string().optional().nullable(),
  refresh_token: z.string().optional().nullable(),
  access_token: z.string().optional().nullable(),
  expires_at: z.coerce.date().optional().nullable(),
  refresh_token_expires_in: z.number().int().optional().nullable(),
  token_type: z.string().optional().nullable(),
  scope: z.string().optional().nullable(),
  id_token: z.string().optional().nullable(),
  session_state: z.string().optional().nullable()
}).strict();

export const AccountAuthUncheckedCreateWithoutProfileInputSchema: z.ZodType<Prisma.AccountAuthUncheckedCreateWithoutProfileInput> = z.object({
  id: z.string().cuid().optional(),
  type: z.string(),
  provider: z.string(),
  passwordHash: z.string().optional().nullable(),
  refresh_token: z.string().optional().nullable(),
  access_token: z.string().optional().nullable(),
  expires_at: z.coerce.date().optional().nullable(),
  refresh_token_expires_in: z.number().int().optional().nullable(),
  token_type: z.string().optional().nullable(),
  scope: z.string().optional().nullable(),
  id_token: z.string().optional().nullable(),
  session_state: z.string().optional().nullable()
}).strict();

export const AccountAuthCreateOrConnectWithoutProfileInputSchema: z.ZodType<Prisma.AccountAuthCreateOrConnectWithoutProfileInput> = z.object({
  where: z.lazy(() => AccountAuthWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => AccountAuthCreateWithoutProfileInputSchema),z.lazy(() => AccountAuthUncheckedCreateWithoutProfileInputSchema) ]),
}).strict();

export const AccountAuthCreateManyProfileInputEnvelopeSchema: z.ZodType<Prisma.AccountAuthCreateManyProfileInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => AccountAuthCreateManyProfileInputSchema),z.lazy(() => AccountAuthCreateManyProfileInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const TenantUpsertWithoutPreferedByProfilesInputSchema: z.ZodType<Prisma.TenantUpsertWithoutPreferedByProfilesInput> = z.object({
  update: z.union([ z.lazy(() => TenantUpdateWithoutPreferedByProfilesInputSchema),z.lazy(() => TenantUncheckedUpdateWithoutPreferedByProfilesInputSchema) ]),
  create: z.union([ z.lazy(() => TenantCreateWithoutPreferedByProfilesInputSchema),z.lazy(() => TenantUncheckedCreateWithoutPreferedByProfilesInputSchema) ]),
  where: z.lazy(() => TenantWhereInputSchema).optional()
}).strict();

export const TenantUpdateToOneWithWhereWithoutPreferedByProfilesInputSchema: z.ZodType<Prisma.TenantUpdateToOneWithWhereWithoutPreferedByProfilesInput> = z.object({
  where: z.lazy(() => TenantWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => TenantUpdateWithoutPreferedByProfilesInputSchema),z.lazy(() => TenantUncheckedUpdateWithoutPreferedByProfilesInputSchema) ]),
}).strict();

export const TenantUpdateWithoutPreferedByProfilesInputSchema: z.ZodType<Prisma.TenantUpdateWithoutPreferedByProfilesInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  disabledAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  trialExpiresAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  users: z.lazy(() => UserUpdateManyWithoutTenantNestedInputSchema).optional(),
  profile: z.lazy(() => TenantProfileUpdateOneRequiredWithoutTenantNestedInputSchema).optional(),
  specializations: z.lazy(() => SpecializationUpdateManyWithoutTenantNestedInputSchema).optional(),
  patients: z.lazy(() => PatientUpdateManyWithoutTenantNestedInputSchema).optional(),
  products: z.lazy(() => ProductUpdateManyWithoutTenantNestedInputSchema).optional(),
  events: z.lazy(() => EventUpdateManyWithoutTenantNestedInputSchema).optional()
}).strict();

export const TenantUncheckedUpdateWithoutPreferedByProfilesInputSchema: z.ZodType<Prisma.TenantUncheckedUpdateWithoutPreferedByProfilesInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  profileId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  disabledAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  trialExpiresAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  users: z.lazy(() => UserUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  specializations: z.lazy(() => SpecializationUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  patients: z.lazy(() => PatientUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  products: z.lazy(() => ProductUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  events: z.lazy(() => EventUncheckedUpdateManyWithoutTenantNestedInputSchema).optional()
}).strict();

export const UserUpsertWithWhereUniqueWithoutProfileInputSchema: z.ZodType<Prisma.UserUpsertWithWhereUniqueWithoutProfileInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => UserUpdateWithoutProfileInputSchema),z.lazy(() => UserUncheckedUpdateWithoutProfileInputSchema) ]),
  create: z.union([ z.lazy(() => UserCreateWithoutProfileInputSchema),z.lazy(() => UserUncheckedCreateWithoutProfileInputSchema) ]),
}).strict();

export const UserUpdateWithWhereUniqueWithoutProfileInputSchema: z.ZodType<Prisma.UserUpdateWithWhereUniqueWithoutProfileInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => UserUpdateWithoutProfileInputSchema),z.lazy(() => UserUncheckedUpdateWithoutProfileInputSchema) ]),
}).strict();

export const UserUpdateManyWithWhereWithoutProfileInputSchema: z.ZodType<Prisma.UserUpdateManyWithWhereWithoutProfileInput> = z.object({
  where: z.lazy(() => UserScalarWhereInputSchema),
  data: z.union([ z.lazy(() => UserUpdateManyMutationInputSchema),z.lazy(() => UserUncheckedUpdateManyWithoutProfileInputSchema) ]),
}).strict();

export const AccountAuthUpsertWithWhereUniqueWithoutProfileInputSchema: z.ZodType<Prisma.AccountAuthUpsertWithWhereUniqueWithoutProfileInput> = z.object({
  where: z.lazy(() => AccountAuthWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => AccountAuthUpdateWithoutProfileInputSchema),z.lazy(() => AccountAuthUncheckedUpdateWithoutProfileInputSchema) ]),
  create: z.union([ z.lazy(() => AccountAuthCreateWithoutProfileInputSchema),z.lazy(() => AccountAuthUncheckedCreateWithoutProfileInputSchema) ]),
}).strict();

export const AccountAuthUpdateWithWhereUniqueWithoutProfileInputSchema: z.ZodType<Prisma.AccountAuthUpdateWithWhereUniqueWithoutProfileInput> = z.object({
  where: z.lazy(() => AccountAuthWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => AccountAuthUpdateWithoutProfileInputSchema),z.lazy(() => AccountAuthUncheckedUpdateWithoutProfileInputSchema) ]),
}).strict();

export const AccountAuthUpdateManyWithWhereWithoutProfileInputSchema: z.ZodType<Prisma.AccountAuthUpdateManyWithWhereWithoutProfileInput> = z.object({
  where: z.lazy(() => AccountAuthScalarWhereInputSchema),
  data: z.union([ z.lazy(() => AccountAuthUpdateManyMutationInputSchema),z.lazy(() => AccountAuthUncheckedUpdateManyWithoutProfileInputSchema) ]),
}).strict();

export const AccountAuthScalarWhereInputSchema: z.ZodType<Prisma.AccountAuthScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => AccountAuthScalarWhereInputSchema),z.lazy(() => AccountAuthScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => AccountAuthScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => AccountAuthScalarWhereInputSchema),z.lazy(() => AccountAuthScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  profileId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  type: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  provider: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  passwordHash: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  refresh_token: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  access_token: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  expires_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  refresh_token_expires_in: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  token_type: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  scope: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  id_token: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  session_state: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
}).strict();

export const ProfileCreateWithoutAuthInputSchema: z.ZodType<Prisma.ProfileCreateWithoutAuthInput> = z.object({
  id: z.string().cuid().optional(),
  title: z.string().optional().nullable(),
  firstName: z.string(),
  lastName: z.string(),
  email: z.string(),
  phone: z.string().optional().nullable(),
  avatar: z.string().optional().nullable(),
  stripeCustomerId: z.string(),
  stripeFreeTrialUsed: z.boolean().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  preferredTenant: z.lazy(() => TenantCreateNestedOneWithoutPreferedByProfilesInputSchema).optional(),
  users: z.lazy(() => UserCreateNestedManyWithoutProfileInputSchema).optional()
}).strict();

export const ProfileUncheckedCreateWithoutAuthInputSchema: z.ZodType<Prisma.ProfileUncheckedCreateWithoutAuthInput> = z.object({
  id: z.string().cuid().optional(),
  title: z.string().optional().nullable(),
  firstName: z.string(),
  lastName: z.string(),
  email: z.string(),
  phone: z.string().optional().nullable(),
  avatar: z.string().optional().nullable(),
  stripeCustomerId: z.string(),
  stripeFreeTrialUsed: z.boolean().optional(),
  preferredTenantId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  users: z.lazy(() => UserUncheckedCreateNestedManyWithoutProfileInputSchema).optional()
}).strict();

export const ProfileCreateOrConnectWithoutAuthInputSchema: z.ZodType<Prisma.ProfileCreateOrConnectWithoutAuthInput> = z.object({
  where: z.lazy(() => ProfileWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ProfileCreateWithoutAuthInputSchema),z.lazy(() => ProfileUncheckedCreateWithoutAuthInputSchema) ]),
}).strict();

export const ProfileUpsertWithoutAuthInputSchema: z.ZodType<Prisma.ProfileUpsertWithoutAuthInput> = z.object({
  update: z.union([ z.lazy(() => ProfileUpdateWithoutAuthInputSchema),z.lazy(() => ProfileUncheckedUpdateWithoutAuthInputSchema) ]),
  create: z.union([ z.lazy(() => ProfileCreateWithoutAuthInputSchema),z.lazy(() => ProfileUncheckedCreateWithoutAuthInputSchema) ]),
  where: z.lazy(() => ProfileWhereInputSchema).optional()
}).strict();

export const ProfileUpdateToOneWithWhereWithoutAuthInputSchema: z.ZodType<Prisma.ProfileUpdateToOneWithWhereWithoutAuthInput> = z.object({
  where: z.lazy(() => ProfileWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => ProfileUpdateWithoutAuthInputSchema),z.lazy(() => ProfileUncheckedUpdateWithoutAuthInputSchema) ]),
}).strict();

export const ProfileUpdateWithoutAuthInputSchema: z.ZodType<Prisma.ProfileUpdateWithoutAuthInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  title: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  firstName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  lastName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  avatar: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  stripeCustomerId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  stripeFreeTrialUsed: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  preferredTenant: z.lazy(() => TenantUpdateOneWithoutPreferedByProfilesNestedInputSchema).optional(),
  users: z.lazy(() => UserUpdateManyWithoutProfileNestedInputSchema).optional()
}).strict();

export const ProfileUncheckedUpdateWithoutAuthInputSchema: z.ZodType<Prisma.ProfileUncheckedUpdateWithoutAuthInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  title: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  firstName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  lastName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  avatar: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  stripeCustomerId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  stripeFreeTrialUsed: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  preferredTenantId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  users: z.lazy(() => UserUncheckedUpdateManyWithoutProfileNestedInputSchema).optional()
}).strict();

export const TenantProfileCreateWithoutPlanInputSchema: z.ZodType<Prisma.TenantProfileCreateWithoutPlanInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  county: z.string().optional().nullable(),
  address: z.string().optional().nullable(),
  zip: z.string().optional().nullable(),
  phone: z.string().optional().nullable(),
  avatar: z.string().optional().nullable(),
  size: z.string().optional().nullable(),
  stripeSubscriptionId: z.string(),
  activeSubscription: z.boolean().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  tenant: z.lazy(() => TenantCreateNestedOneWithoutProfileInputSchema).optional()
}).strict();

export const TenantProfileUncheckedCreateWithoutPlanInputSchema: z.ZodType<Prisma.TenantProfileUncheckedCreateWithoutPlanInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  county: z.string().optional().nullable(),
  address: z.string().optional().nullable(),
  zip: z.string().optional().nullable(),
  phone: z.string().optional().nullable(),
  avatar: z.string().optional().nullable(),
  size: z.string().optional().nullable(),
  stripeSubscriptionId: z.string(),
  activeSubscription: z.boolean().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  tenant: z.lazy(() => TenantUncheckedCreateNestedOneWithoutProfileInputSchema).optional()
}).strict();

export const TenantProfileCreateOrConnectWithoutPlanInputSchema: z.ZodType<Prisma.TenantProfileCreateOrConnectWithoutPlanInput> = z.object({
  where: z.lazy(() => TenantProfileWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => TenantProfileCreateWithoutPlanInputSchema),z.lazy(() => TenantProfileUncheckedCreateWithoutPlanInputSchema) ]),
}).strict();

export const TenantProfileCreateManyPlanInputEnvelopeSchema: z.ZodType<Prisma.TenantProfileCreateManyPlanInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => TenantProfileCreateManyPlanInputSchema),z.lazy(() => TenantProfileCreateManyPlanInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const TenantProfileUpsertWithWhereUniqueWithoutPlanInputSchema: z.ZodType<Prisma.TenantProfileUpsertWithWhereUniqueWithoutPlanInput> = z.object({
  where: z.lazy(() => TenantProfileWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => TenantProfileUpdateWithoutPlanInputSchema),z.lazy(() => TenantProfileUncheckedUpdateWithoutPlanInputSchema) ]),
  create: z.union([ z.lazy(() => TenantProfileCreateWithoutPlanInputSchema),z.lazy(() => TenantProfileUncheckedCreateWithoutPlanInputSchema) ]),
}).strict();

export const TenantProfileUpdateWithWhereUniqueWithoutPlanInputSchema: z.ZodType<Prisma.TenantProfileUpdateWithWhereUniqueWithoutPlanInput> = z.object({
  where: z.lazy(() => TenantProfileWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => TenantProfileUpdateWithoutPlanInputSchema),z.lazy(() => TenantProfileUncheckedUpdateWithoutPlanInputSchema) ]),
}).strict();

export const TenantProfileUpdateManyWithWhereWithoutPlanInputSchema: z.ZodType<Prisma.TenantProfileUpdateManyWithWhereWithoutPlanInput> = z.object({
  where: z.lazy(() => TenantProfileScalarWhereInputSchema),
  data: z.union([ z.lazy(() => TenantProfileUpdateManyMutationInputSchema),z.lazy(() => TenantProfileUncheckedUpdateManyWithoutPlanInputSchema) ]),
}).strict();

export const TenantProfileScalarWhereInputSchema: z.ZodType<Prisma.TenantProfileScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => TenantProfileScalarWhereInputSchema),z.lazy(() => TenantProfileScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => TenantProfileScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => TenantProfileScalarWhereInputSchema),z.lazy(() => TenantProfileScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  county: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  address: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  zip: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  phone: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  avatar: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  size: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  stripeSubscriptionId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  activeSubscription: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  planId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const UserCreateWithoutTokensInputSchema: z.ZodType<Prisma.UserCreateWithoutTokensInput> = z.object({
  id: z.string().cuid().optional(),
  index: z.number().int().optional(),
  role: z.lazy(() => RoleSchema).optional(),
  workingHours: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  deletedAt: z.coerce.date().optional().nullable(),
  activatedAt: z.coerce.date().optional().nullable(),
  lastLoginAt: z.coerce.date().optional().nullable(),
  bannedAt: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  specialization: z.lazy(() => SpecializationCreateNestedOneWithoutUsersInputSchema).optional(),
  profile: z.lazy(() => ProfileCreateNestedOneWithoutUsersInputSchema),
  tenant: z.lazy(() => TenantCreateNestedOneWithoutUsersInputSchema),
  invitation: z.lazy(() => InvitationCreateNestedOneWithoutUserInputSchema).optional(),
  patients: z.lazy(() => PatientCreateNestedManyWithoutUserInputSchema).optional(),
  events: z.lazy(() => EventCreateNestedManyWithoutUserInputSchema).optional(),
  eventActions: z.lazy(() => EventActionCreateNestedManyWithoutUserInputSchema).optional(),
  treatmentPlans: z.lazy(() => TreatmentPlanCreateNestedManyWithoutUserInputSchema).optional(),
  invitations: z.lazy(() => InvitationCreateNestedManyWithoutInvitedByInputSchema).optional()
}).strict();

export const UserUncheckedCreateWithoutTokensInputSchema: z.ZodType<Prisma.UserUncheckedCreateWithoutTokensInput> = z.object({
  id: z.string().cuid().optional(),
  index: z.number().int().optional(),
  role: z.lazy(() => RoleSchema).optional(),
  workingHours: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  specializationId: z.string().optional().nullable(),
  profileId: z.string(),
  tenantId: z.string(),
  deletedAt: z.coerce.date().optional().nullable(),
  activatedAt: z.coerce.date().optional().nullable(),
  lastLoginAt: z.coerce.date().optional().nullable(),
  bannedAt: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  invitation: z.lazy(() => InvitationUncheckedCreateNestedOneWithoutUserInputSchema).optional(),
  patients: z.lazy(() => PatientUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  events: z.lazy(() => EventUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  eventActions: z.lazy(() => EventActionUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  treatmentPlans: z.lazy(() => TreatmentPlanUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedCreateNestedManyWithoutInvitedByInputSchema).optional()
}).strict();

export const UserCreateOrConnectWithoutTokensInputSchema: z.ZodType<Prisma.UserCreateOrConnectWithoutTokensInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UserCreateWithoutTokensInputSchema),z.lazy(() => UserUncheckedCreateWithoutTokensInputSchema) ]),
}).strict();

export const UserUpsertWithoutTokensInputSchema: z.ZodType<Prisma.UserUpsertWithoutTokensInput> = z.object({
  update: z.union([ z.lazy(() => UserUpdateWithoutTokensInputSchema),z.lazy(() => UserUncheckedUpdateWithoutTokensInputSchema) ]),
  create: z.union([ z.lazy(() => UserCreateWithoutTokensInputSchema),z.lazy(() => UserUncheckedCreateWithoutTokensInputSchema) ]),
  where: z.lazy(() => UserWhereInputSchema).optional()
}).strict();

export const UserUpdateToOneWithWhereWithoutTokensInputSchema: z.ZodType<Prisma.UserUpdateToOneWithWhereWithoutTokensInput> = z.object({
  where: z.lazy(() => UserWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => UserUpdateWithoutTokensInputSchema),z.lazy(() => UserUncheckedUpdateWithoutTokensInputSchema) ]),
}).strict();

export const UserUpdateWithoutTokensInputSchema: z.ZodType<Prisma.UserUpdateWithoutTokensInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  index: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.lazy(() => RoleSchema),z.lazy(() => EnumRoleFieldUpdateOperationsInputSchema) ]).optional(),
  workingHours: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  activatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastLoginAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bannedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  specialization: z.lazy(() => SpecializationUpdateOneWithoutUsersNestedInputSchema).optional(),
  profile: z.lazy(() => ProfileUpdateOneRequiredWithoutUsersNestedInputSchema).optional(),
  tenant: z.lazy(() => TenantUpdateOneRequiredWithoutUsersNestedInputSchema).optional(),
  invitation: z.lazy(() => InvitationUpdateOneWithoutUserNestedInputSchema).optional(),
  patients: z.lazy(() => PatientUpdateManyWithoutUserNestedInputSchema).optional(),
  events: z.lazy(() => EventUpdateManyWithoutUserNestedInputSchema).optional(),
  eventActions: z.lazy(() => EventActionUpdateManyWithoutUserNestedInputSchema).optional(),
  treatmentPlans: z.lazy(() => TreatmentPlanUpdateManyWithoutUserNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUpdateManyWithoutInvitedByNestedInputSchema).optional()
}).strict();

export const UserUncheckedUpdateWithoutTokensInputSchema: z.ZodType<Prisma.UserUncheckedUpdateWithoutTokensInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  index: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.lazy(() => RoleSchema),z.lazy(() => EnumRoleFieldUpdateOperationsInputSchema) ]).optional(),
  workingHours: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  specializationId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  profileId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  tenantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  activatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastLoginAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bannedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  invitation: z.lazy(() => InvitationUncheckedUpdateOneWithoutUserNestedInputSchema).optional(),
  patients: z.lazy(() => PatientUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  events: z.lazy(() => EventUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  eventActions: z.lazy(() => EventActionUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  treatmentPlans: z.lazy(() => TreatmentPlanUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedUpdateManyWithoutInvitedByNestedInputSchema).optional()
}).strict();

export const UserCreateWithoutInvitationsInputSchema: z.ZodType<Prisma.UserCreateWithoutInvitationsInput> = z.object({
  id: z.string().cuid().optional(),
  index: z.number().int().optional(),
  role: z.lazy(() => RoleSchema).optional(),
  workingHours: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  deletedAt: z.coerce.date().optional().nullable(),
  activatedAt: z.coerce.date().optional().nullable(),
  lastLoginAt: z.coerce.date().optional().nullable(),
  bannedAt: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  specialization: z.lazy(() => SpecializationCreateNestedOneWithoutUsersInputSchema).optional(),
  profile: z.lazy(() => ProfileCreateNestedOneWithoutUsersInputSchema),
  tenant: z.lazy(() => TenantCreateNestedOneWithoutUsersInputSchema),
  invitation: z.lazy(() => InvitationCreateNestedOneWithoutUserInputSchema).optional(),
  tokens: z.lazy(() => TokenCreateNestedManyWithoutUserInputSchema).optional(),
  patients: z.lazy(() => PatientCreateNestedManyWithoutUserInputSchema).optional(),
  events: z.lazy(() => EventCreateNestedManyWithoutUserInputSchema).optional(),
  eventActions: z.lazy(() => EventActionCreateNestedManyWithoutUserInputSchema).optional(),
  treatmentPlans: z.lazy(() => TreatmentPlanCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const UserUncheckedCreateWithoutInvitationsInputSchema: z.ZodType<Prisma.UserUncheckedCreateWithoutInvitationsInput> = z.object({
  id: z.string().cuid().optional(),
  index: z.number().int().optional(),
  role: z.lazy(() => RoleSchema).optional(),
  workingHours: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  specializationId: z.string().optional().nullable(),
  profileId: z.string(),
  tenantId: z.string(),
  deletedAt: z.coerce.date().optional().nullable(),
  activatedAt: z.coerce.date().optional().nullable(),
  lastLoginAt: z.coerce.date().optional().nullable(),
  bannedAt: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  invitation: z.lazy(() => InvitationUncheckedCreateNestedOneWithoutUserInputSchema).optional(),
  tokens: z.lazy(() => TokenUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  patients: z.lazy(() => PatientUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  events: z.lazy(() => EventUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  eventActions: z.lazy(() => EventActionUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  treatmentPlans: z.lazy(() => TreatmentPlanUncheckedCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const UserCreateOrConnectWithoutInvitationsInputSchema: z.ZodType<Prisma.UserCreateOrConnectWithoutInvitationsInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UserCreateWithoutInvitationsInputSchema),z.lazy(() => UserUncheckedCreateWithoutInvitationsInputSchema) ]),
}).strict();

export const UserCreateWithoutInvitationInputSchema: z.ZodType<Prisma.UserCreateWithoutInvitationInput> = z.object({
  id: z.string().cuid().optional(),
  index: z.number().int().optional(),
  role: z.lazy(() => RoleSchema).optional(),
  workingHours: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  deletedAt: z.coerce.date().optional().nullable(),
  activatedAt: z.coerce.date().optional().nullable(),
  lastLoginAt: z.coerce.date().optional().nullable(),
  bannedAt: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  specialization: z.lazy(() => SpecializationCreateNestedOneWithoutUsersInputSchema).optional(),
  profile: z.lazy(() => ProfileCreateNestedOneWithoutUsersInputSchema),
  tenant: z.lazy(() => TenantCreateNestedOneWithoutUsersInputSchema),
  tokens: z.lazy(() => TokenCreateNestedManyWithoutUserInputSchema).optional(),
  patients: z.lazy(() => PatientCreateNestedManyWithoutUserInputSchema).optional(),
  events: z.lazy(() => EventCreateNestedManyWithoutUserInputSchema).optional(),
  eventActions: z.lazy(() => EventActionCreateNestedManyWithoutUserInputSchema).optional(),
  treatmentPlans: z.lazy(() => TreatmentPlanCreateNestedManyWithoutUserInputSchema).optional(),
  invitations: z.lazy(() => InvitationCreateNestedManyWithoutInvitedByInputSchema).optional()
}).strict();

export const UserUncheckedCreateWithoutInvitationInputSchema: z.ZodType<Prisma.UserUncheckedCreateWithoutInvitationInput> = z.object({
  id: z.string().cuid().optional(),
  index: z.number().int().optional(),
  role: z.lazy(() => RoleSchema).optional(),
  workingHours: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  specializationId: z.string().optional().nullable(),
  profileId: z.string(),
  tenantId: z.string(),
  deletedAt: z.coerce.date().optional().nullable(),
  activatedAt: z.coerce.date().optional().nullable(),
  lastLoginAt: z.coerce.date().optional().nullable(),
  bannedAt: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  tokens: z.lazy(() => TokenUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  patients: z.lazy(() => PatientUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  events: z.lazy(() => EventUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  eventActions: z.lazy(() => EventActionUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  treatmentPlans: z.lazy(() => TreatmentPlanUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedCreateNestedManyWithoutInvitedByInputSchema).optional()
}).strict();

export const UserCreateOrConnectWithoutInvitationInputSchema: z.ZodType<Prisma.UserCreateOrConnectWithoutInvitationInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UserCreateWithoutInvitationInputSchema),z.lazy(() => UserUncheckedCreateWithoutInvitationInputSchema) ]),
}).strict();

export const UserUpsertWithoutInvitationsInputSchema: z.ZodType<Prisma.UserUpsertWithoutInvitationsInput> = z.object({
  update: z.union([ z.lazy(() => UserUpdateWithoutInvitationsInputSchema),z.lazy(() => UserUncheckedUpdateWithoutInvitationsInputSchema) ]),
  create: z.union([ z.lazy(() => UserCreateWithoutInvitationsInputSchema),z.lazy(() => UserUncheckedCreateWithoutInvitationsInputSchema) ]),
  where: z.lazy(() => UserWhereInputSchema).optional()
}).strict();

export const UserUpdateToOneWithWhereWithoutInvitationsInputSchema: z.ZodType<Prisma.UserUpdateToOneWithWhereWithoutInvitationsInput> = z.object({
  where: z.lazy(() => UserWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => UserUpdateWithoutInvitationsInputSchema),z.lazy(() => UserUncheckedUpdateWithoutInvitationsInputSchema) ]),
}).strict();

export const UserUpdateWithoutInvitationsInputSchema: z.ZodType<Prisma.UserUpdateWithoutInvitationsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  index: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.lazy(() => RoleSchema),z.lazy(() => EnumRoleFieldUpdateOperationsInputSchema) ]).optional(),
  workingHours: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  activatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastLoginAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bannedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  specialization: z.lazy(() => SpecializationUpdateOneWithoutUsersNestedInputSchema).optional(),
  profile: z.lazy(() => ProfileUpdateOneRequiredWithoutUsersNestedInputSchema).optional(),
  tenant: z.lazy(() => TenantUpdateOneRequiredWithoutUsersNestedInputSchema).optional(),
  invitation: z.lazy(() => InvitationUpdateOneWithoutUserNestedInputSchema).optional(),
  tokens: z.lazy(() => TokenUpdateManyWithoutUserNestedInputSchema).optional(),
  patients: z.lazy(() => PatientUpdateManyWithoutUserNestedInputSchema).optional(),
  events: z.lazy(() => EventUpdateManyWithoutUserNestedInputSchema).optional(),
  eventActions: z.lazy(() => EventActionUpdateManyWithoutUserNestedInputSchema).optional(),
  treatmentPlans: z.lazy(() => TreatmentPlanUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const UserUncheckedUpdateWithoutInvitationsInputSchema: z.ZodType<Prisma.UserUncheckedUpdateWithoutInvitationsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  index: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.lazy(() => RoleSchema),z.lazy(() => EnumRoleFieldUpdateOperationsInputSchema) ]).optional(),
  workingHours: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  specializationId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  profileId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  tenantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  activatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastLoginAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bannedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  invitation: z.lazy(() => InvitationUncheckedUpdateOneWithoutUserNestedInputSchema).optional(),
  tokens: z.lazy(() => TokenUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  patients: z.lazy(() => PatientUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  events: z.lazy(() => EventUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  eventActions: z.lazy(() => EventActionUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  treatmentPlans: z.lazy(() => TreatmentPlanUncheckedUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const UserUpsertWithoutInvitationInputSchema: z.ZodType<Prisma.UserUpsertWithoutInvitationInput> = z.object({
  update: z.union([ z.lazy(() => UserUpdateWithoutInvitationInputSchema),z.lazy(() => UserUncheckedUpdateWithoutInvitationInputSchema) ]),
  create: z.union([ z.lazy(() => UserCreateWithoutInvitationInputSchema),z.lazy(() => UserUncheckedCreateWithoutInvitationInputSchema) ]),
  where: z.lazy(() => UserWhereInputSchema).optional()
}).strict();

export const UserUpdateToOneWithWhereWithoutInvitationInputSchema: z.ZodType<Prisma.UserUpdateToOneWithWhereWithoutInvitationInput> = z.object({
  where: z.lazy(() => UserWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => UserUpdateWithoutInvitationInputSchema),z.lazy(() => UserUncheckedUpdateWithoutInvitationInputSchema) ]),
}).strict();

export const UserUpdateWithoutInvitationInputSchema: z.ZodType<Prisma.UserUpdateWithoutInvitationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  index: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.lazy(() => RoleSchema),z.lazy(() => EnumRoleFieldUpdateOperationsInputSchema) ]).optional(),
  workingHours: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  activatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastLoginAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bannedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  specialization: z.lazy(() => SpecializationUpdateOneWithoutUsersNestedInputSchema).optional(),
  profile: z.lazy(() => ProfileUpdateOneRequiredWithoutUsersNestedInputSchema).optional(),
  tenant: z.lazy(() => TenantUpdateOneRequiredWithoutUsersNestedInputSchema).optional(),
  tokens: z.lazy(() => TokenUpdateManyWithoutUserNestedInputSchema).optional(),
  patients: z.lazy(() => PatientUpdateManyWithoutUserNestedInputSchema).optional(),
  events: z.lazy(() => EventUpdateManyWithoutUserNestedInputSchema).optional(),
  eventActions: z.lazy(() => EventActionUpdateManyWithoutUserNestedInputSchema).optional(),
  treatmentPlans: z.lazy(() => TreatmentPlanUpdateManyWithoutUserNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUpdateManyWithoutInvitedByNestedInputSchema).optional()
}).strict();

export const UserUncheckedUpdateWithoutInvitationInputSchema: z.ZodType<Prisma.UserUncheckedUpdateWithoutInvitationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  index: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.lazy(() => RoleSchema),z.lazy(() => EnumRoleFieldUpdateOperationsInputSchema) ]).optional(),
  workingHours: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  specializationId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  profileId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  tenantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  activatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastLoginAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bannedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  tokens: z.lazy(() => TokenUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  patients: z.lazy(() => PatientUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  events: z.lazy(() => EventUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  eventActions: z.lazy(() => EventActionUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  treatmentPlans: z.lazy(() => TreatmentPlanUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedUpdateManyWithoutInvitedByNestedInputSchema).optional()
}).strict();

export const UserCreateWithoutPatientsInputSchema: z.ZodType<Prisma.UserCreateWithoutPatientsInput> = z.object({
  id: z.string().cuid().optional(),
  index: z.number().int().optional(),
  role: z.lazy(() => RoleSchema).optional(),
  workingHours: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  deletedAt: z.coerce.date().optional().nullable(),
  activatedAt: z.coerce.date().optional().nullable(),
  lastLoginAt: z.coerce.date().optional().nullable(),
  bannedAt: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  specialization: z.lazy(() => SpecializationCreateNestedOneWithoutUsersInputSchema).optional(),
  profile: z.lazy(() => ProfileCreateNestedOneWithoutUsersInputSchema),
  tenant: z.lazy(() => TenantCreateNestedOneWithoutUsersInputSchema),
  invitation: z.lazy(() => InvitationCreateNestedOneWithoutUserInputSchema).optional(),
  tokens: z.lazy(() => TokenCreateNestedManyWithoutUserInputSchema).optional(),
  events: z.lazy(() => EventCreateNestedManyWithoutUserInputSchema).optional(),
  eventActions: z.lazy(() => EventActionCreateNestedManyWithoutUserInputSchema).optional(),
  treatmentPlans: z.lazy(() => TreatmentPlanCreateNestedManyWithoutUserInputSchema).optional(),
  invitations: z.lazy(() => InvitationCreateNestedManyWithoutInvitedByInputSchema).optional()
}).strict();

export const UserUncheckedCreateWithoutPatientsInputSchema: z.ZodType<Prisma.UserUncheckedCreateWithoutPatientsInput> = z.object({
  id: z.string().cuid().optional(),
  index: z.number().int().optional(),
  role: z.lazy(() => RoleSchema).optional(),
  workingHours: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  specializationId: z.string().optional().nullable(),
  profileId: z.string(),
  tenantId: z.string(),
  deletedAt: z.coerce.date().optional().nullable(),
  activatedAt: z.coerce.date().optional().nullable(),
  lastLoginAt: z.coerce.date().optional().nullable(),
  bannedAt: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  invitation: z.lazy(() => InvitationUncheckedCreateNestedOneWithoutUserInputSchema).optional(),
  tokens: z.lazy(() => TokenUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  events: z.lazy(() => EventUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  eventActions: z.lazy(() => EventActionUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  treatmentPlans: z.lazy(() => TreatmentPlanUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedCreateNestedManyWithoutInvitedByInputSchema).optional()
}).strict();

export const UserCreateOrConnectWithoutPatientsInputSchema: z.ZodType<Prisma.UserCreateOrConnectWithoutPatientsInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UserCreateWithoutPatientsInputSchema),z.lazy(() => UserUncheckedCreateWithoutPatientsInputSchema) ]),
}).strict();

export const TenantCreateWithoutPatientsInputSchema: z.ZodType<Prisma.TenantCreateWithoutPatientsInput> = z.object({
  id: z.string().cuid().optional(),
  email: z.string(),
  deletedAt: z.coerce.date().optional().nullable(),
  disabledAt: z.coerce.date().optional().nullable(),
  trialExpiresAt: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  users: z.lazy(() => UserCreateNestedManyWithoutTenantInputSchema).optional(),
  profile: z.lazy(() => TenantProfileCreateNestedOneWithoutTenantInputSchema),
  specializations: z.lazy(() => SpecializationCreateNestedManyWithoutTenantInputSchema).optional(),
  preferedByProfiles: z.lazy(() => ProfileCreateNestedManyWithoutPreferredTenantInputSchema).optional(),
  products: z.lazy(() => ProductCreateNestedManyWithoutTenantInputSchema).optional(),
  events: z.lazy(() => EventCreateNestedManyWithoutTenantInputSchema).optional()
}).strict();

export const TenantUncheckedCreateWithoutPatientsInputSchema: z.ZodType<Prisma.TenantUncheckedCreateWithoutPatientsInput> = z.object({
  id: z.string().cuid().optional(),
  email: z.string(),
  profileId: z.string(),
  deletedAt: z.coerce.date().optional().nullable(),
  disabledAt: z.coerce.date().optional().nullable(),
  trialExpiresAt: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  users: z.lazy(() => UserUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  specializations: z.lazy(() => SpecializationUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  preferedByProfiles: z.lazy(() => ProfileUncheckedCreateNestedManyWithoutPreferredTenantInputSchema).optional(),
  products: z.lazy(() => ProductUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  events: z.lazy(() => EventUncheckedCreateNestedManyWithoutTenantInputSchema).optional()
}).strict();

export const TenantCreateOrConnectWithoutPatientsInputSchema: z.ZodType<Prisma.TenantCreateOrConnectWithoutPatientsInput> = z.object({
  where: z.lazy(() => TenantWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => TenantCreateWithoutPatientsInputSchema),z.lazy(() => TenantUncheckedCreateWithoutPatientsInputSchema) ]),
}).strict();

export const EventCreateWithoutPatientInputSchema: z.ZodType<Prisma.EventCreateWithoutPatientInput> = z.object({
  id: z.string().cuid().optional(),
  title: z.string(),
  description: z.string().optional().nullable(),
  date: z.coerce.date(),
  start: z.coerce.date().optional().nullable(),
  end: z.coerce.date().optional().nullable(),
  allDay: z.boolean().optional(),
  type: z.lazy(() => EventTypeSchema).optional(),
  status: z.lazy(() => EventStatusSchema).optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  actions: z.lazy(() => EventActionCreateNestedManyWithoutEventInputSchema).optional(),
  treatments: z.lazy(() => TreatmentCreateNestedManyWithoutEventInputSchema).optional(),
  user: z.lazy(() => UserCreateNestedOneWithoutEventsInputSchema),
  tenant: z.lazy(() => TenantCreateNestedOneWithoutEventsInputSchema)
}).strict();

export const EventUncheckedCreateWithoutPatientInputSchema: z.ZodType<Prisma.EventUncheckedCreateWithoutPatientInput> = z.object({
  id: z.string().cuid().optional(),
  title: z.string(),
  description: z.string().optional().nullable(),
  date: z.coerce.date(),
  start: z.coerce.date().optional().nullable(),
  end: z.coerce.date().optional().nullable(),
  allDay: z.boolean().optional(),
  type: z.lazy(() => EventTypeSchema).optional(),
  status: z.lazy(() => EventStatusSchema).optional(),
  userId: z.string(),
  tenantId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  actions: z.lazy(() => EventActionUncheckedCreateNestedManyWithoutEventInputSchema).optional(),
  treatments: z.lazy(() => TreatmentUncheckedCreateNestedManyWithoutEventInputSchema).optional()
}).strict();

export const EventCreateOrConnectWithoutPatientInputSchema: z.ZodType<Prisma.EventCreateOrConnectWithoutPatientInput> = z.object({
  where: z.lazy(() => EventWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => EventCreateWithoutPatientInputSchema),z.lazy(() => EventUncheckedCreateWithoutPatientInputSchema) ]),
}).strict();

export const EventCreateManyPatientInputEnvelopeSchema: z.ZodType<Prisma.EventCreateManyPatientInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => EventCreateManyPatientInputSchema),z.lazy(() => EventCreateManyPatientInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const TreatmentPlanCreateWithoutPatientInputSchema: z.ZodType<Prisma.TreatmentPlanCreateWithoutPatientInput> = z.object({
  id: z.string().cuid().optional(),
  description: z.string().optional().nullable(),
  isDone: z.boolean().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  treatments: z.lazy(() => TreatmentCreateNestedManyWithoutTreatmentPlanInputSchema).optional(),
  user: z.lazy(() => UserCreateNestedOneWithoutTreatmentPlansInputSchema)
}).strict();

export const TreatmentPlanUncheckedCreateWithoutPatientInputSchema: z.ZodType<Prisma.TreatmentPlanUncheckedCreateWithoutPatientInput> = z.object({
  id: z.string().cuid().optional(),
  description: z.string().optional().nullable(),
  isDone: z.boolean().optional(),
  userId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  treatments: z.lazy(() => TreatmentUncheckedCreateNestedManyWithoutTreatmentPlanInputSchema).optional()
}).strict();

export const TreatmentPlanCreateOrConnectWithoutPatientInputSchema: z.ZodType<Prisma.TreatmentPlanCreateOrConnectWithoutPatientInput> = z.object({
  where: z.lazy(() => TreatmentPlanWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => TreatmentPlanCreateWithoutPatientInputSchema),z.lazy(() => TreatmentPlanUncheckedCreateWithoutPatientInputSchema) ]),
}).strict();

export const TreatmentPlanCreateManyPatientInputEnvelopeSchema: z.ZodType<Prisma.TreatmentPlanCreateManyPatientInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => TreatmentPlanCreateManyPatientInputSchema),z.lazy(() => TreatmentPlanCreateManyPatientInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const UserUpsertWithoutPatientsInputSchema: z.ZodType<Prisma.UserUpsertWithoutPatientsInput> = z.object({
  update: z.union([ z.lazy(() => UserUpdateWithoutPatientsInputSchema),z.lazy(() => UserUncheckedUpdateWithoutPatientsInputSchema) ]),
  create: z.union([ z.lazy(() => UserCreateWithoutPatientsInputSchema),z.lazy(() => UserUncheckedCreateWithoutPatientsInputSchema) ]),
  where: z.lazy(() => UserWhereInputSchema).optional()
}).strict();

export const UserUpdateToOneWithWhereWithoutPatientsInputSchema: z.ZodType<Prisma.UserUpdateToOneWithWhereWithoutPatientsInput> = z.object({
  where: z.lazy(() => UserWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => UserUpdateWithoutPatientsInputSchema),z.lazy(() => UserUncheckedUpdateWithoutPatientsInputSchema) ]),
}).strict();

export const UserUpdateWithoutPatientsInputSchema: z.ZodType<Prisma.UserUpdateWithoutPatientsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  index: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.lazy(() => RoleSchema),z.lazy(() => EnumRoleFieldUpdateOperationsInputSchema) ]).optional(),
  workingHours: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  activatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastLoginAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bannedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  specialization: z.lazy(() => SpecializationUpdateOneWithoutUsersNestedInputSchema).optional(),
  profile: z.lazy(() => ProfileUpdateOneRequiredWithoutUsersNestedInputSchema).optional(),
  tenant: z.lazy(() => TenantUpdateOneRequiredWithoutUsersNestedInputSchema).optional(),
  invitation: z.lazy(() => InvitationUpdateOneWithoutUserNestedInputSchema).optional(),
  tokens: z.lazy(() => TokenUpdateManyWithoutUserNestedInputSchema).optional(),
  events: z.lazy(() => EventUpdateManyWithoutUserNestedInputSchema).optional(),
  eventActions: z.lazy(() => EventActionUpdateManyWithoutUserNestedInputSchema).optional(),
  treatmentPlans: z.lazy(() => TreatmentPlanUpdateManyWithoutUserNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUpdateManyWithoutInvitedByNestedInputSchema).optional()
}).strict();

export const UserUncheckedUpdateWithoutPatientsInputSchema: z.ZodType<Prisma.UserUncheckedUpdateWithoutPatientsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  index: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.lazy(() => RoleSchema),z.lazy(() => EnumRoleFieldUpdateOperationsInputSchema) ]).optional(),
  workingHours: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  specializationId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  profileId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  tenantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  activatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastLoginAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bannedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  invitation: z.lazy(() => InvitationUncheckedUpdateOneWithoutUserNestedInputSchema).optional(),
  tokens: z.lazy(() => TokenUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  events: z.lazy(() => EventUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  eventActions: z.lazy(() => EventActionUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  treatmentPlans: z.lazy(() => TreatmentPlanUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedUpdateManyWithoutInvitedByNestedInputSchema).optional()
}).strict();

export const TenantUpsertWithoutPatientsInputSchema: z.ZodType<Prisma.TenantUpsertWithoutPatientsInput> = z.object({
  update: z.union([ z.lazy(() => TenantUpdateWithoutPatientsInputSchema),z.lazy(() => TenantUncheckedUpdateWithoutPatientsInputSchema) ]),
  create: z.union([ z.lazy(() => TenantCreateWithoutPatientsInputSchema),z.lazy(() => TenantUncheckedCreateWithoutPatientsInputSchema) ]),
  where: z.lazy(() => TenantWhereInputSchema).optional()
}).strict();

export const TenantUpdateToOneWithWhereWithoutPatientsInputSchema: z.ZodType<Prisma.TenantUpdateToOneWithWhereWithoutPatientsInput> = z.object({
  where: z.lazy(() => TenantWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => TenantUpdateWithoutPatientsInputSchema),z.lazy(() => TenantUncheckedUpdateWithoutPatientsInputSchema) ]),
}).strict();

export const TenantUpdateWithoutPatientsInputSchema: z.ZodType<Prisma.TenantUpdateWithoutPatientsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  disabledAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  trialExpiresAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  users: z.lazy(() => UserUpdateManyWithoutTenantNestedInputSchema).optional(),
  profile: z.lazy(() => TenantProfileUpdateOneRequiredWithoutTenantNestedInputSchema).optional(),
  specializations: z.lazy(() => SpecializationUpdateManyWithoutTenantNestedInputSchema).optional(),
  preferedByProfiles: z.lazy(() => ProfileUpdateManyWithoutPreferredTenantNestedInputSchema).optional(),
  products: z.lazy(() => ProductUpdateManyWithoutTenantNestedInputSchema).optional(),
  events: z.lazy(() => EventUpdateManyWithoutTenantNestedInputSchema).optional()
}).strict();

export const TenantUncheckedUpdateWithoutPatientsInputSchema: z.ZodType<Prisma.TenantUncheckedUpdateWithoutPatientsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  profileId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  disabledAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  trialExpiresAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  users: z.lazy(() => UserUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  specializations: z.lazy(() => SpecializationUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  preferedByProfiles: z.lazy(() => ProfileUncheckedUpdateManyWithoutPreferredTenantNestedInputSchema).optional(),
  products: z.lazy(() => ProductUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  events: z.lazy(() => EventUncheckedUpdateManyWithoutTenantNestedInputSchema).optional()
}).strict();

export const EventUpsertWithWhereUniqueWithoutPatientInputSchema: z.ZodType<Prisma.EventUpsertWithWhereUniqueWithoutPatientInput> = z.object({
  where: z.lazy(() => EventWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => EventUpdateWithoutPatientInputSchema),z.lazy(() => EventUncheckedUpdateWithoutPatientInputSchema) ]),
  create: z.union([ z.lazy(() => EventCreateWithoutPatientInputSchema),z.lazy(() => EventUncheckedCreateWithoutPatientInputSchema) ]),
}).strict();

export const EventUpdateWithWhereUniqueWithoutPatientInputSchema: z.ZodType<Prisma.EventUpdateWithWhereUniqueWithoutPatientInput> = z.object({
  where: z.lazy(() => EventWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => EventUpdateWithoutPatientInputSchema),z.lazy(() => EventUncheckedUpdateWithoutPatientInputSchema) ]),
}).strict();

export const EventUpdateManyWithWhereWithoutPatientInputSchema: z.ZodType<Prisma.EventUpdateManyWithWhereWithoutPatientInput> = z.object({
  where: z.lazy(() => EventScalarWhereInputSchema),
  data: z.union([ z.lazy(() => EventUpdateManyMutationInputSchema),z.lazy(() => EventUncheckedUpdateManyWithoutPatientInputSchema) ]),
}).strict();

export const TreatmentPlanUpsertWithWhereUniqueWithoutPatientInputSchema: z.ZodType<Prisma.TreatmentPlanUpsertWithWhereUniqueWithoutPatientInput> = z.object({
  where: z.lazy(() => TreatmentPlanWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => TreatmentPlanUpdateWithoutPatientInputSchema),z.lazy(() => TreatmentPlanUncheckedUpdateWithoutPatientInputSchema) ]),
  create: z.union([ z.lazy(() => TreatmentPlanCreateWithoutPatientInputSchema),z.lazy(() => TreatmentPlanUncheckedCreateWithoutPatientInputSchema) ]),
}).strict();

export const TreatmentPlanUpdateWithWhereUniqueWithoutPatientInputSchema: z.ZodType<Prisma.TreatmentPlanUpdateWithWhereUniqueWithoutPatientInput> = z.object({
  where: z.lazy(() => TreatmentPlanWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => TreatmentPlanUpdateWithoutPatientInputSchema),z.lazy(() => TreatmentPlanUncheckedUpdateWithoutPatientInputSchema) ]),
}).strict();

export const TreatmentPlanUpdateManyWithWhereWithoutPatientInputSchema: z.ZodType<Prisma.TreatmentPlanUpdateManyWithWhereWithoutPatientInput> = z.object({
  where: z.lazy(() => TreatmentPlanScalarWhereInputSchema),
  data: z.union([ z.lazy(() => TreatmentPlanUpdateManyMutationInputSchema),z.lazy(() => TreatmentPlanUncheckedUpdateManyWithoutPatientInputSchema) ]),
}).strict();

export const UserCreateWithoutSpecializationInputSchema: z.ZodType<Prisma.UserCreateWithoutSpecializationInput> = z.object({
  id: z.string().cuid().optional(),
  index: z.number().int().optional(),
  role: z.lazy(() => RoleSchema).optional(),
  workingHours: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  deletedAt: z.coerce.date().optional().nullable(),
  activatedAt: z.coerce.date().optional().nullable(),
  lastLoginAt: z.coerce.date().optional().nullable(),
  bannedAt: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  profile: z.lazy(() => ProfileCreateNestedOneWithoutUsersInputSchema),
  tenant: z.lazy(() => TenantCreateNestedOneWithoutUsersInputSchema),
  invitation: z.lazy(() => InvitationCreateNestedOneWithoutUserInputSchema).optional(),
  tokens: z.lazy(() => TokenCreateNestedManyWithoutUserInputSchema).optional(),
  patients: z.lazy(() => PatientCreateNestedManyWithoutUserInputSchema).optional(),
  events: z.lazy(() => EventCreateNestedManyWithoutUserInputSchema).optional(),
  eventActions: z.lazy(() => EventActionCreateNestedManyWithoutUserInputSchema).optional(),
  treatmentPlans: z.lazy(() => TreatmentPlanCreateNestedManyWithoutUserInputSchema).optional(),
  invitations: z.lazy(() => InvitationCreateNestedManyWithoutInvitedByInputSchema).optional()
}).strict();

export const UserUncheckedCreateWithoutSpecializationInputSchema: z.ZodType<Prisma.UserUncheckedCreateWithoutSpecializationInput> = z.object({
  id: z.string().cuid().optional(),
  index: z.number().int().optional(),
  role: z.lazy(() => RoleSchema).optional(),
  workingHours: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  profileId: z.string(),
  tenantId: z.string(),
  deletedAt: z.coerce.date().optional().nullable(),
  activatedAt: z.coerce.date().optional().nullable(),
  lastLoginAt: z.coerce.date().optional().nullable(),
  bannedAt: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  invitation: z.lazy(() => InvitationUncheckedCreateNestedOneWithoutUserInputSchema).optional(),
  tokens: z.lazy(() => TokenUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  patients: z.lazy(() => PatientUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  events: z.lazy(() => EventUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  eventActions: z.lazy(() => EventActionUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  treatmentPlans: z.lazy(() => TreatmentPlanUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedCreateNestedManyWithoutInvitedByInputSchema).optional()
}).strict();

export const UserCreateOrConnectWithoutSpecializationInputSchema: z.ZodType<Prisma.UserCreateOrConnectWithoutSpecializationInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UserCreateWithoutSpecializationInputSchema),z.lazy(() => UserUncheckedCreateWithoutSpecializationInputSchema) ]),
}).strict();

export const UserCreateManySpecializationInputEnvelopeSchema: z.ZodType<Prisma.UserCreateManySpecializationInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => UserCreateManySpecializationInputSchema),z.lazy(() => UserCreateManySpecializationInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const TenantCreateWithoutSpecializationsInputSchema: z.ZodType<Prisma.TenantCreateWithoutSpecializationsInput> = z.object({
  id: z.string().cuid().optional(),
  email: z.string(),
  deletedAt: z.coerce.date().optional().nullable(),
  disabledAt: z.coerce.date().optional().nullable(),
  trialExpiresAt: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  users: z.lazy(() => UserCreateNestedManyWithoutTenantInputSchema).optional(),
  profile: z.lazy(() => TenantProfileCreateNestedOneWithoutTenantInputSchema),
  preferedByProfiles: z.lazy(() => ProfileCreateNestedManyWithoutPreferredTenantInputSchema).optional(),
  patients: z.lazy(() => PatientCreateNestedManyWithoutTenantInputSchema).optional(),
  products: z.lazy(() => ProductCreateNestedManyWithoutTenantInputSchema).optional(),
  events: z.lazy(() => EventCreateNestedManyWithoutTenantInputSchema).optional()
}).strict();

export const TenantUncheckedCreateWithoutSpecializationsInputSchema: z.ZodType<Prisma.TenantUncheckedCreateWithoutSpecializationsInput> = z.object({
  id: z.string().cuid().optional(),
  email: z.string(),
  profileId: z.string(),
  deletedAt: z.coerce.date().optional().nullable(),
  disabledAt: z.coerce.date().optional().nullable(),
  trialExpiresAt: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  users: z.lazy(() => UserUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  preferedByProfiles: z.lazy(() => ProfileUncheckedCreateNestedManyWithoutPreferredTenantInputSchema).optional(),
  patients: z.lazy(() => PatientUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  products: z.lazy(() => ProductUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  events: z.lazy(() => EventUncheckedCreateNestedManyWithoutTenantInputSchema).optional()
}).strict();

export const TenantCreateOrConnectWithoutSpecializationsInputSchema: z.ZodType<Prisma.TenantCreateOrConnectWithoutSpecializationsInput> = z.object({
  where: z.lazy(() => TenantWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => TenantCreateWithoutSpecializationsInputSchema),z.lazy(() => TenantUncheckedCreateWithoutSpecializationsInputSchema) ]),
}).strict();

export const UserUpsertWithWhereUniqueWithoutSpecializationInputSchema: z.ZodType<Prisma.UserUpsertWithWhereUniqueWithoutSpecializationInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => UserUpdateWithoutSpecializationInputSchema),z.lazy(() => UserUncheckedUpdateWithoutSpecializationInputSchema) ]),
  create: z.union([ z.lazy(() => UserCreateWithoutSpecializationInputSchema),z.lazy(() => UserUncheckedCreateWithoutSpecializationInputSchema) ]),
}).strict();

export const UserUpdateWithWhereUniqueWithoutSpecializationInputSchema: z.ZodType<Prisma.UserUpdateWithWhereUniqueWithoutSpecializationInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => UserUpdateWithoutSpecializationInputSchema),z.lazy(() => UserUncheckedUpdateWithoutSpecializationInputSchema) ]),
}).strict();

export const UserUpdateManyWithWhereWithoutSpecializationInputSchema: z.ZodType<Prisma.UserUpdateManyWithWhereWithoutSpecializationInput> = z.object({
  where: z.lazy(() => UserScalarWhereInputSchema),
  data: z.union([ z.lazy(() => UserUpdateManyMutationInputSchema),z.lazy(() => UserUncheckedUpdateManyWithoutSpecializationInputSchema) ]),
}).strict();

export const TenantUpsertWithoutSpecializationsInputSchema: z.ZodType<Prisma.TenantUpsertWithoutSpecializationsInput> = z.object({
  update: z.union([ z.lazy(() => TenantUpdateWithoutSpecializationsInputSchema),z.lazy(() => TenantUncheckedUpdateWithoutSpecializationsInputSchema) ]),
  create: z.union([ z.lazy(() => TenantCreateWithoutSpecializationsInputSchema),z.lazy(() => TenantUncheckedCreateWithoutSpecializationsInputSchema) ]),
  where: z.lazy(() => TenantWhereInputSchema).optional()
}).strict();

export const TenantUpdateToOneWithWhereWithoutSpecializationsInputSchema: z.ZodType<Prisma.TenantUpdateToOneWithWhereWithoutSpecializationsInput> = z.object({
  where: z.lazy(() => TenantWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => TenantUpdateWithoutSpecializationsInputSchema),z.lazy(() => TenantUncheckedUpdateWithoutSpecializationsInputSchema) ]),
}).strict();

export const TenantUpdateWithoutSpecializationsInputSchema: z.ZodType<Prisma.TenantUpdateWithoutSpecializationsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  disabledAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  trialExpiresAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  users: z.lazy(() => UserUpdateManyWithoutTenantNestedInputSchema).optional(),
  profile: z.lazy(() => TenantProfileUpdateOneRequiredWithoutTenantNestedInputSchema).optional(),
  preferedByProfiles: z.lazy(() => ProfileUpdateManyWithoutPreferredTenantNestedInputSchema).optional(),
  patients: z.lazy(() => PatientUpdateManyWithoutTenantNestedInputSchema).optional(),
  products: z.lazy(() => ProductUpdateManyWithoutTenantNestedInputSchema).optional(),
  events: z.lazy(() => EventUpdateManyWithoutTenantNestedInputSchema).optional()
}).strict();

export const TenantUncheckedUpdateWithoutSpecializationsInputSchema: z.ZodType<Prisma.TenantUncheckedUpdateWithoutSpecializationsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  profileId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  disabledAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  trialExpiresAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  users: z.lazy(() => UserUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  preferedByProfiles: z.lazy(() => ProfileUncheckedUpdateManyWithoutPreferredTenantNestedInputSchema).optional(),
  patients: z.lazy(() => PatientUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  products: z.lazy(() => ProductUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  events: z.lazy(() => EventUncheckedUpdateManyWithoutTenantNestedInputSchema).optional()
}).strict();

export const EventActionCreateWithoutEventInputSchema: z.ZodType<Prisma.EventActionCreateWithoutEventInput> = z.object({
  id: z.string().cuid().optional(),
  data: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  user: z.lazy(() => UserCreateNestedOneWithoutEventActionsInputSchema)
}).strict();

export const EventActionUncheckedCreateWithoutEventInputSchema: z.ZodType<Prisma.EventActionUncheckedCreateWithoutEventInput> = z.object({
  id: z.string().cuid().optional(),
  data: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  userId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const EventActionCreateOrConnectWithoutEventInputSchema: z.ZodType<Prisma.EventActionCreateOrConnectWithoutEventInput> = z.object({
  where: z.lazy(() => EventActionWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => EventActionCreateWithoutEventInputSchema),z.lazy(() => EventActionUncheckedCreateWithoutEventInputSchema) ]),
}).strict();

export const EventActionCreateManyEventInputEnvelopeSchema: z.ZodType<Prisma.EventActionCreateManyEventInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => EventActionCreateManyEventInputSchema),z.lazy(() => EventActionCreateManyEventInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const TreatmentCreateWithoutEventInputSchema: z.ZodType<Prisma.TreatmentCreateWithoutEventInput> = z.object({
  id: z.string().cuid().optional(),
  price: z.number().int(),
  toothNumber: z.number().int(),
  status: z.lazy(() => TreatmentStatusSchema).optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  product: z.lazy(() => ProductCreateNestedOneWithoutTreatmentsInputSchema),
  treatmentPlan: z.lazy(() => TreatmentPlanCreateNestedOneWithoutTreatmentsInputSchema).optional()
}).strict();

export const TreatmentUncheckedCreateWithoutEventInputSchema: z.ZodType<Prisma.TreatmentUncheckedCreateWithoutEventInput> = z.object({
  id: z.string().cuid().optional(),
  price: z.number().int(),
  toothNumber: z.number().int(),
  status: z.lazy(() => TreatmentStatusSchema).optional(),
  productId: z.string(),
  treatmentPlanId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const TreatmentCreateOrConnectWithoutEventInputSchema: z.ZodType<Prisma.TreatmentCreateOrConnectWithoutEventInput> = z.object({
  where: z.lazy(() => TreatmentWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => TreatmentCreateWithoutEventInputSchema),z.lazy(() => TreatmentUncheckedCreateWithoutEventInputSchema) ]),
}).strict();

export const TreatmentCreateManyEventInputEnvelopeSchema: z.ZodType<Prisma.TreatmentCreateManyEventInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => TreatmentCreateManyEventInputSchema),z.lazy(() => TreatmentCreateManyEventInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const PatientCreateWithoutAppointmentsInputSchema: z.ZodType<Prisma.PatientCreateWithoutAppointmentsInput> = z.object({
  id: z.string().cuid().optional(),
  firstName: z.string(),
  lastName: z.string(),
  gender: z.string().optional().nullable(),
  dob: z.coerce.date().optional().nullable(),
  email: z.string().optional().nullable(),
  phone: z.string().optional().nullable(),
  city: z.string().optional().nullable(),
  county: z.string().optional().nullable(),
  status: z.lazy(() => StatusSchema).optional(),
  smsNotifications: z.boolean().optional(),
  emailNotifications: z.boolean().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  user: z.lazy(() => UserCreateNestedOneWithoutPatientsInputSchema),
  tenant: z.lazy(() => TenantCreateNestedOneWithoutPatientsInputSchema),
  treatmentPlans: z.lazy(() => TreatmentPlanCreateNestedManyWithoutPatientInputSchema).optional()
}).strict();

export const PatientUncheckedCreateWithoutAppointmentsInputSchema: z.ZodType<Prisma.PatientUncheckedCreateWithoutAppointmentsInput> = z.object({
  id: z.string().cuid().optional(),
  firstName: z.string(),
  lastName: z.string(),
  gender: z.string().optional().nullable(),
  dob: z.coerce.date().optional().nullable(),
  email: z.string().optional().nullable(),
  phone: z.string().optional().nullable(),
  city: z.string().optional().nullable(),
  county: z.string().optional().nullable(),
  status: z.lazy(() => StatusSchema).optional(),
  smsNotifications: z.boolean().optional(),
  emailNotifications: z.boolean().optional(),
  userId: z.string(),
  tenantId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  treatmentPlans: z.lazy(() => TreatmentPlanUncheckedCreateNestedManyWithoutPatientInputSchema).optional()
}).strict();

export const PatientCreateOrConnectWithoutAppointmentsInputSchema: z.ZodType<Prisma.PatientCreateOrConnectWithoutAppointmentsInput> = z.object({
  where: z.lazy(() => PatientWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => PatientCreateWithoutAppointmentsInputSchema),z.lazy(() => PatientUncheckedCreateWithoutAppointmentsInputSchema) ]),
}).strict();

export const UserCreateWithoutEventsInputSchema: z.ZodType<Prisma.UserCreateWithoutEventsInput> = z.object({
  id: z.string().cuid().optional(),
  index: z.number().int().optional(),
  role: z.lazy(() => RoleSchema).optional(),
  workingHours: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  deletedAt: z.coerce.date().optional().nullable(),
  activatedAt: z.coerce.date().optional().nullable(),
  lastLoginAt: z.coerce.date().optional().nullable(),
  bannedAt: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  specialization: z.lazy(() => SpecializationCreateNestedOneWithoutUsersInputSchema).optional(),
  profile: z.lazy(() => ProfileCreateNestedOneWithoutUsersInputSchema),
  tenant: z.lazy(() => TenantCreateNestedOneWithoutUsersInputSchema),
  invitation: z.lazy(() => InvitationCreateNestedOneWithoutUserInputSchema).optional(),
  tokens: z.lazy(() => TokenCreateNestedManyWithoutUserInputSchema).optional(),
  patients: z.lazy(() => PatientCreateNestedManyWithoutUserInputSchema).optional(),
  eventActions: z.lazy(() => EventActionCreateNestedManyWithoutUserInputSchema).optional(),
  treatmentPlans: z.lazy(() => TreatmentPlanCreateNestedManyWithoutUserInputSchema).optional(),
  invitations: z.lazy(() => InvitationCreateNestedManyWithoutInvitedByInputSchema).optional()
}).strict();

export const UserUncheckedCreateWithoutEventsInputSchema: z.ZodType<Prisma.UserUncheckedCreateWithoutEventsInput> = z.object({
  id: z.string().cuid().optional(),
  index: z.number().int().optional(),
  role: z.lazy(() => RoleSchema).optional(),
  workingHours: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  specializationId: z.string().optional().nullable(),
  profileId: z.string(),
  tenantId: z.string(),
  deletedAt: z.coerce.date().optional().nullable(),
  activatedAt: z.coerce.date().optional().nullable(),
  lastLoginAt: z.coerce.date().optional().nullable(),
  bannedAt: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  invitation: z.lazy(() => InvitationUncheckedCreateNestedOneWithoutUserInputSchema).optional(),
  tokens: z.lazy(() => TokenUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  patients: z.lazy(() => PatientUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  eventActions: z.lazy(() => EventActionUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  treatmentPlans: z.lazy(() => TreatmentPlanUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedCreateNestedManyWithoutInvitedByInputSchema).optional()
}).strict();

export const UserCreateOrConnectWithoutEventsInputSchema: z.ZodType<Prisma.UserCreateOrConnectWithoutEventsInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UserCreateWithoutEventsInputSchema),z.lazy(() => UserUncheckedCreateWithoutEventsInputSchema) ]),
}).strict();

export const TenantCreateWithoutEventsInputSchema: z.ZodType<Prisma.TenantCreateWithoutEventsInput> = z.object({
  id: z.string().cuid().optional(),
  email: z.string(),
  deletedAt: z.coerce.date().optional().nullable(),
  disabledAt: z.coerce.date().optional().nullable(),
  trialExpiresAt: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  users: z.lazy(() => UserCreateNestedManyWithoutTenantInputSchema).optional(),
  profile: z.lazy(() => TenantProfileCreateNestedOneWithoutTenantInputSchema),
  specializations: z.lazy(() => SpecializationCreateNestedManyWithoutTenantInputSchema).optional(),
  preferedByProfiles: z.lazy(() => ProfileCreateNestedManyWithoutPreferredTenantInputSchema).optional(),
  patients: z.lazy(() => PatientCreateNestedManyWithoutTenantInputSchema).optional(),
  products: z.lazy(() => ProductCreateNestedManyWithoutTenantInputSchema).optional()
}).strict();

export const TenantUncheckedCreateWithoutEventsInputSchema: z.ZodType<Prisma.TenantUncheckedCreateWithoutEventsInput> = z.object({
  id: z.string().cuid().optional(),
  email: z.string(),
  profileId: z.string(),
  deletedAt: z.coerce.date().optional().nullable(),
  disabledAt: z.coerce.date().optional().nullable(),
  trialExpiresAt: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  users: z.lazy(() => UserUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  specializations: z.lazy(() => SpecializationUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  preferedByProfiles: z.lazy(() => ProfileUncheckedCreateNestedManyWithoutPreferredTenantInputSchema).optional(),
  patients: z.lazy(() => PatientUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  products: z.lazy(() => ProductUncheckedCreateNestedManyWithoutTenantInputSchema).optional()
}).strict();

export const TenantCreateOrConnectWithoutEventsInputSchema: z.ZodType<Prisma.TenantCreateOrConnectWithoutEventsInput> = z.object({
  where: z.lazy(() => TenantWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => TenantCreateWithoutEventsInputSchema),z.lazy(() => TenantUncheckedCreateWithoutEventsInputSchema) ]),
}).strict();

export const EventActionUpsertWithWhereUniqueWithoutEventInputSchema: z.ZodType<Prisma.EventActionUpsertWithWhereUniqueWithoutEventInput> = z.object({
  where: z.lazy(() => EventActionWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => EventActionUpdateWithoutEventInputSchema),z.lazy(() => EventActionUncheckedUpdateWithoutEventInputSchema) ]),
  create: z.union([ z.lazy(() => EventActionCreateWithoutEventInputSchema),z.lazy(() => EventActionUncheckedCreateWithoutEventInputSchema) ]),
}).strict();

export const EventActionUpdateWithWhereUniqueWithoutEventInputSchema: z.ZodType<Prisma.EventActionUpdateWithWhereUniqueWithoutEventInput> = z.object({
  where: z.lazy(() => EventActionWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => EventActionUpdateWithoutEventInputSchema),z.lazy(() => EventActionUncheckedUpdateWithoutEventInputSchema) ]),
}).strict();

export const EventActionUpdateManyWithWhereWithoutEventInputSchema: z.ZodType<Prisma.EventActionUpdateManyWithWhereWithoutEventInput> = z.object({
  where: z.lazy(() => EventActionScalarWhereInputSchema),
  data: z.union([ z.lazy(() => EventActionUpdateManyMutationInputSchema),z.lazy(() => EventActionUncheckedUpdateManyWithoutEventInputSchema) ]),
}).strict();

export const TreatmentUpsertWithWhereUniqueWithoutEventInputSchema: z.ZodType<Prisma.TreatmentUpsertWithWhereUniqueWithoutEventInput> = z.object({
  where: z.lazy(() => TreatmentWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => TreatmentUpdateWithoutEventInputSchema),z.lazy(() => TreatmentUncheckedUpdateWithoutEventInputSchema) ]),
  create: z.union([ z.lazy(() => TreatmentCreateWithoutEventInputSchema),z.lazy(() => TreatmentUncheckedCreateWithoutEventInputSchema) ]),
}).strict();

export const TreatmentUpdateWithWhereUniqueWithoutEventInputSchema: z.ZodType<Prisma.TreatmentUpdateWithWhereUniqueWithoutEventInput> = z.object({
  where: z.lazy(() => TreatmentWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => TreatmentUpdateWithoutEventInputSchema),z.lazy(() => TreatmentUncheckedUpdateWithoutEventInputSchema) ]),
}).strict();

export const TreatmentUpdateManyWithWhereWithoutEventInputSchema: z.ZodType<Prisma.TreatmentUpdateManyWithWhereWithoutEventInput> = z.object({
  where: z.lazy(() => TreatmentScalarWhereInputSchema),
  data: z.union([ z.lazy(() => TreatmentUpdateManyMutationInputSchema),z.lazy(() => TreatmentUncheckedUpdateManyWithoutEventInputSchema) ]),
}).strict();

export const TreatmentScalarWhereInputSchema: z.ZodType<Prisma.TreatmentScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => TreatmentScalarWhereInputSchema),z.lazy(() => TreatmentScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => TreatmentScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => TreatmentScalarWhereInputSchema),z.lazy(() => TreatmentScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  price: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  toothNumber: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  status: z.union([ z.lazy(() => EnumTreatmentStatusFilterSchema),z.lazy(() => TreatmentStatusSchema) ]).optional(),
  productId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  treatmentPlanId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  eventId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const PatientUpsertWithoutAppointmentsInputSchema: z.ZodType<Prisma.PatientUpsertWithoutAppointmentsInput> = z.object({
  update: z.union([ z.lazy(() => PatientUpdateWithoutAppointmentsInputSchema),z.lazy(() => PatientUncheckedUpdateWithoutAppointmentsInputSchema) ]),
  create: z.union([ z.lazy(() => PatientCreateWithoutAppointmentsInputSchema),z.lazy(() => PatientUncheckedCreateWithoutAppointmentsInputSchema) ]),
  where: z.lazy(() => PatientWhereInputSchema).optional()
}).strict();

export const PatientUpdateToOneWithWhereWithoutAppointmentsInputSchema: z.ZodType<Prisma.PatientUpdateToOneWithWhereWithoutAppointmentsInput> = z.object({
  where: z.lazy(() => PatientWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => PatientUpdateWithoutAppointmentsInputSchema),z.lazy(() => PatientUncheckedUpdateWithoutAppointmentsInputSchema) ]),
}).strict();

export const PatientUpdateWithoutAppointmentsInputSchema: z.ZodType<Prisma.PatientUpdateWithoutAppointmentsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  firstName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  lastName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  gender: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  dob: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  city: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  county: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.lazy(() => StatusSchema),z.lazy(() => EnumStatusFieldUpdateOperationsInputSchema) ]).optional(),
  smsNotifications: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  emailNotifications: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  user: z.lazy(() => UserUpdateOneRequiredWithoutPatientsNestedInputSchema).optional(),
  tenant: z.lazy(() => TenantUpdateOneRequiredWithoutPatientsNestedInputSchema).optional(),
  treatmentPlans: z.lazy(() => TreatmentPlanUpdateManyWithoutPatientNestedInputSchema).optional()
}).strict();

export const PatientUncheckedUpdateWithoutAppointmentsInputSchema: z.ZodType<Prisma.PatientUncheckedUpdateWithoutAppointmentsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  firstName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  lastName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  gender: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  dob: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  city: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  county: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.lazy(() => StatusSchema),z.lazy(() => EnumStatusFieldUpdateOperationsInputSchema) ]).optional(),
  smsNotifications: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  emailNotifications: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  tenantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  treatmentPlans: z.lazy(() => TreatmentPlanUncheckedUpdateManyWithoutPatientNestedInputSchema).optional()
}).strict();

export const UserUpsertWithoutEventsInputSchema: z.ZodType<Prisma.UserUpsertWithoutEventsInput> = z.object({
  update: z.union([ z.lazy(() => UserUpdateWithoutEventsInputSchema),z.lazy(() => UserUncheckedUpdateWithoutEventsInputSchema) ]),
  create: z.union([ z.lazy(() => UserCreateWithoutEventsInputSchema),z.lazy(() => UserUncheckedCreateWithoutEventsInputSchema) ]),
  where: z.lazy(() => UserWhereInputSchema).optional()
}).strict();

export const UserUpdateToOneWithWhereWithoutEventsInputSchema: z.ZodType<Prisma.UserUpdateToOneWithWhereWithoutEventsInput> = z.object({
  where: z.lazy(() => UserWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => UserUpdateWithoutEventsInputSchema),z.lazy(() => UserUncheckedUpdateWithoutEventsInputSchema) ]),
}).strict();

export const UserUpdateWithoutEventsInputSchema: z.ZodType<Prisma.UserUpdateWithoutEventsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  index: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.lazy(() => RoleSchema),z.lazy(() => EnumRoleFieldUpdateOperationsInputSchema) ]).optional(),
  workingHours: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  activatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastLoginAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bannedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  specialization: z.lazy(() => SpecializationUpdateOneWithoutUsersNestedInputSchema).optional(),
  profile: z.lazy(() => ProfileUpdateOneRequiredWithoutUsersNestedInputSchema).optional(),
  tenant: z.lazy(() => TenantUpdateOneRequiredWithoutUsersNestedInputSchema).optional(),
  invitation: z.lazy(() => InvitationUpdateOneWithoutUserNestedInputSchema).optional(),
  tokens: z.lazy(() => TokenUpdateManyWithoutUserNestedInputSchema).optional(),
  patients: z.lazy(() => PatientUpdateManyWithoutUserNestedInputSchema).optional(),
  eventActions: z.lazy(() => EventActionUpdateManyWithoutUserNestedInputSchema).optional(),
  treatmentPlans: z.lazy(() => TreatmentPlanUpdateManyWithoutUserNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUpdateManyWithoutInvitedByNestedInputSchema).optional()
}).strict();

export const UserUncheckedUpdateWithoutEventsInputSchema: z.ZodType<Prisma.UserUncheckedUpdateWithoutEventsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  index: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.lazy(() => RoleSchema),z.lazy(() => EnumRoleFieldUpdateOperationsInputSchema) ]).optional(),
  workingHours: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  specializationId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  profileId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  tenantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  activatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastLoginAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bannedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  invitation: z.lazy(() => InvitationUncheckedUpdateOneWithoutUserNestedInputSchema).optional(),
  tokens: z.lazy(() => TokenUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  patients: z.lazy(() => PatientUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  eventActions: z.lazy(() => EventActionUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  treatmentPlans: z.lazy(() => TreatmentPlanUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedUpdateManyWithoutInvitedByNestedInputSchema).optional()
}).strict();

export const TenantUpsertWithoutEventsInputSchema: z.ZodType<Prisma.TenantUpsertWithoutEventsInput> = z.object({
  update: z.union([ z.lazy(() => TenantUpdateWithoutEventsInputSchema),z.lazy(() => TenantUncheckedUpdateWithoutEventsInputSchema) ]),
  create: z.union([ z.lazy(() => TenantCreateWithoutEventsInputSchema),z.lazy(() => TenantUncheckedCreateWithoutEventsInputSchema) ]),
  where: z.lazy(() => TenantWhereInputSchema).optional()
}).strict();

export const TenantUpdateToOneWithWhereWithoutEventsInputSchema: z.ZodType<Prisma.TenantUpdateToOneWithWhereWithoutEventsInput> = z.object({
  where: z.lazy(() => TenantWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => TenantUpdateWithoutEventsInputSchema),z.lazy(() => TenantUncheckedUpdateWithoutEventsInputSchema) ]),
}).strict();

export const TenantUpdateWithoutEventsInputSchema: z.ZodType<Prisma.TenantUpdateWithoutEventsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  disabledAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  trialExpiresAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  users: z.lazy(() => UserUpdateManyWithoutTenantNestedInputSchema).optional(),
  profile: z.lazy(() => TenantProfileUpdateOneRequiredWithoutTenantNestedInputSchema).optional(),
  specializations: z.lazy(() => SpecializationUpdateManyWithoutTenantNestedInputSchema).optional(),
  preferedByProfiles: z.lazy(() => ProfileUpdateManyWithoutPreferredTenantNestedInputSchema).optional(),
  patients: z.lazy(() => PatientUpdateManyWithoutTenantNestedInputSchema).optional(),
  products: z.lazy(() => ProductUpdateManyWithoutTenantNestedInputSchema).optional()
}).strict();

export const TenantUncheckedUpdateWithoutEventsInputSchema: z.ZodType<Prisma.TenantUncheckedUpdateWithoutEventsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  profileId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  disabledAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  trialExpiresAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  users: z.lazy(() => UserUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  specializations: z.lazy(() => SpecializationUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  preferedByProfiles: z.lazy(() => ProfileUncheckedUpdateManyWithoutPreferredTenantNestedInputSchema).optional(),
  patients: z.lazy(() => PatientUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  products: z.lazy(() => ProductUncheckedUpdateManyWithoutTenantNestedInputSchema).optional()
}).strict();

export const UserCreateWithoutEventActionsInputSchema: z.ZodType<Prisma.UserCreateWithoutEventActionsInput> = z.object({
  id: z.string().cuid().optional(),
  index: z.number().int().optional(),
  role: z.lazy(() => RoleSchema).optional(),
  workingHours: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  deletedAt: z.coerce.date().optional().nullable(),
  activatedAt: z.coerce.date().optional().nullable(),
  lastLoginAt: z.coerce.date().optional().nullable(),
  bannedAt: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  specialization: z.lazy(() => SpecializationCreateNestedOneWithoutUsersInputSchema).optional(),
  profile: z.lazy(() => ProfileCreateNestedOneWithoutUsersInputSchema),
  tenant: z.lazy(() => TenantCreateNestedOneWithoutUsersInputSchema),
  invitation: z.lazy(() => InvitationCreateNestedOneWithoutUserInputSchema).optional(),
  tokens: z.lazy(() => TokenCreateNestedManyWithoutUserInputSchema).optional(),
  patients: z.lazy(() => PatientCreateNestedManyWithoutUserInputSchema).optional(),
  events: z.lazy(() => EventCreateNestedManyWithoutUserInputSchema).optional(),
  treatmentPlans: z.lazy(() => TreatmentPlanCreateNestedManyWithoutUserInputSchema).optional(),
  invitations: z.lazy(() => InvitationCreateNestedManyWithoutInvitedByInputSchema).optional()
}).strict();

export const UserUncheckedCreateWithoutEventActionsInputSchema: z.ZodType<Prisma.UserUncheckedCreateWithoutEventActionsInput> = z.object({
  id: z.string().cuid().optional(),
  index: z.number().int().optional(),
  role: z.lazy(() => RoleSchema).optional(),
  workingHours: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  specializationId: z.string().optional().nullable(),
  profileId: z.string(),
  tenantId: z.string(),
  deletedAt: z.coerce.date().optional().nullable(),
  activatedAt: z.coerce.date().optional().nullable(),
  lastLoginAt: z.coerce.date().optional().nullable(),
  bannedAt: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  invitation: z.lazy(() => InvitationUncheckedCreateNestedOneWithoutUserInputSchema).optional(),
  tokens: z.lazy(() => TokenUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  patients: z.lazy(() => PatientUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  events: z.lazy(() => EventUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  treatmentPlans: z.lazy(() => TreatmentPlanUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedCreateNestedManyWithoutInvitedByInputSchema).optional()
}).strict();

export const UserCreateOrConnectWithoutEventActionsInputSchema: z.ZodType<Prisma.UserCreateOrConnectWithoutEventActionsInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UserCreateWithoutEventActionsInputSchema),z.lazy(() => UserUncheckedCreateWithoutEventActionsInputSchema) ]),
}).strict();

export const EventCreateWithoutActionsInputSchema: z.ZodType<Prisma.EventCreateWithoutActionsInput> = z.object({
  id: z.string().cuid().optional(),
  title: z.string(),
  description: z.string().optional().nullable(),
  date: z.coerce.date(),
  start: z.coerce.date().optional().nullable(),
  end: z.coerce.date().optional().nullable(),
  allDay: z.boolean().optional(),
  type: z.lazy(() => EventTypeSchema).optional(),
  status: z.lazy(() => EventStatusSchema).optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  treatments: z.lazy(() => TreatmentCreateNestedManyWithoutEventInputSchema).optional(),
  patient: z.lazy(() => PatientCreateNestedOneWithoutAppointmentsInputSchema).optional(),
  user: z.lazy(() => UserCreateNestedOneWithoutEventsInputSchema),
  tenant: z.lazy(() => TenantCreateNestedOneWithoutEventsInputSchema)
}).strict();

export const EventUncheckedCreateWithoutActionsInputSchema: z.ZodType<Prisma.EventUncheckedCreateWithoutActionsInput> = z.object({
  id: z.string().cuid().optional(),
  title: z.string(),
  description: z.string().optional().nullable(),
  date: z.coerce.date(),
  start: z.coerce.date().optional().nullable(),
  end: z.coerce.date().optional().nullable(),
  allDay: z.boolean().optional(),
  type: z.lazy(() => EventTypeSchema).optional(),
  status: z.lazy(() => EventStatusSchema).optional(),
  patientId: z.string().optional().nullable(),
  userId: z.string(),
  tenantId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  treatments: z.lazy(() => TreatmentUncheckedCreateNestedManyWithoutEventInputSchema).optional()
}).strict();

export const EventCreateOrConnectWithoutActionsInputSchema: z.ZodType<Prisma.EventCreateOrConnectWithoutActionsInput> = z.object({
  where: z.lazy(() => EventWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => EventCreateWithoutActionsInputSchema),z.lazy(() => EventUncheckedCreateWithoutActionsInputSchema) ]),
}).strict();

export const UserUpsertWithoutEventActionsInputSchema: z.ZodType<Prisma.UserUpsertWithoutEventActionsInput> = z.object({
  update: z.union([ z.lazy(() => UserUpdateWithoutEventActionsInputSchema),z.lazy(() => UserUncheckedUpdateWithoutEventActionsInputSchema) ]),
  create: z.union([ z.lazy(() => UserCreateWithoutEventActionsInputSchema),z.lazy(() => UserUncheckedCreateWithoutEventActionsInputSchema) ]),
  where: z.lazy(() => UserWhereInputSchema).optional()
}).strict();

export const UserUpdateToOneWithWhereWithoutEventActionsInputSchema: z.ZodType<Prisma.UserUpdateToOneWithWhereWithoutEventActionsInput> = z.object({
  where: z.lazy(() => UserWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => UserUpdateWithoutEventActionsInputSchema),z.lazy(() => UserUncheckedUpdateWithoutEventActionsInputSchema) ]),
}).strict();

export const UserUpdateWithoutEventActionsInputSchema: z.ZodType<Prisma.UserUpdateWithoutEventActionsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  index: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.lazy(() => RoleSchema),z.lazy(() => EnumRoleFieldUpdateOperationsInputSchema) ]).optional(),
  workingHours: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  activatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastLoginAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bannedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  specialization: z.lazy(() => SpecializationUpdateOneWithoutUsersNestedInputSchema).optional(),
  profile: z.lazy(() => ProfileUpdateOneRequiredWithoutUsersNestedInputSchema).optional(),
  tenant: z.lazy(() => TenantUpdateOneRequiredWithoutUsersNestedInputSchema).optional(),
  invitation: z.lazy(() => InvitationUpdateOneWithoutUserNestedInputSchema).optional(),
  tokens: z.lazy(() => TokenUpdateManyWithoutUserNestedInputSchema).optional(),
  patients: z.lazy(() => PatientUpdateManyWithoutUserNestedInputSchema).optional(),
  events: z.lazy(() => EventUpdateManyWithoutUserNestedInputSchema).optional(),
  treatmentPlans: z.lazy(() => TreatmentPlanUpdateManyWithoutUserNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUpdateManyWithoutInvitedByNestedInputSchema).optional()
}).strict();

export const UserUncheckedUpdateWithoutEventActionsInputSchema: z.ZodType<Prisma.UserUncheckedUpdateWithoutEventActionsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  index: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.lazy(() => RoleSchema),z.lazy(() => EnumRoleFieldUpdateOperationsInputSchema) ]).optional(),
  workingHours: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  specializationId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  profileId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  tenantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  activatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastLoginAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bannedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  invitation: z.lazy(() => InvitationUncheckedUpdateOneWithoutUserNestedInputSchema).optional(),
  tokens: z.lazy(() => TokenUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  patients: z.lazy(() => PatientUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  events: z.lazy(() => EventUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  treatmentPlans: z.lazy(() => TreatmentPlanUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedUpdateManyWithoutInvitedByNestedInputSchema).optional()
}).strict();

export const EventUpsertWithoutActionsInputSchema: z.ZodType<Prisma.EventUpsertWithoutActionsInput> = z.object({
  update: z.union([ z.lazy(() => EventUpdateWithoutActionsInputSchema),z.lazy(() => EventUncheckedUpdateWithoutActionsInputSchema) ]),
  create: z.union([ z.lazy(() => EventCreateWithoutActionsInputSchema),z.lazy(() => EventUncheckedCreateWithoutActionsInputSchema) ]),
  where: z.lazy(() => EventWhereInputSchema).optional()
}).strict();

export const EventUpdateToOneWithWhereWithoutActionsInputSchema: z.ZodType<Prisma.EventUpdateToOneWithWhereWithoutActionsInput> = z.object({
  where: z.lazy(() => EventWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => EventUpdateWithoutActionsInputSchema),z.lazy(() => EventUncheckedUpdateWithoutActionsInputSchema) ]),
}).strict();

export const EventUpdateWithoutActionsInputSchema: z.ZodType<Prisma.EventUpdateWithoutActionsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  title: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  start: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  end: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  allDay: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => EventTypeSchema),z.lazy(() => EnumEventTypeFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => EventStatusSchema),z.lazy(() => EnumEventStatusFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  treatments: z.lazy(() => TreatmentUpdateManyWithoutEventNestedInputSchema).optional(),
  patient: z.lazy(() => PatientUpdateOneWithoutAppointmentsNestedInputSchema).optional(),
  user: z.lazy(() => UserUpdateOneRequiredWithoutEventsNestedInputSchema).optional(),
  tenant: z.lazy(() => TenantUpdateOneRequiredWithoutEventsNestedInputSchema).optional()
}).strict();

export const EventUncheckedUpdateWithoutActionsInputSchema: z.ZodType<Prisma.EventUncheckedUpdateWithoutActionsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  title: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  start: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  end: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  allDay: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => EventTypeSchema),z.lazy(() => EnumEventTypeFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => EventStatusSchema),z.lazy(() => EnumEventStatusFieldUpdateOperationsInputSchema) ]).optional(),
  patientId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  tenantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  treatments: z.lazy(() => TreatmentUncheckedUpdateManyWithoutEventNestedInputSchema).optional()
}).strict();

export const PriceCreateWithoutProductInputSchema: z.ZodType<Prisma.PriceCreateWithoutProductInput> = z.object({
  id: z.string().cuid().optional(),
  value: z.number().int(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const PriceUncheckedCreateWithoutProductInputSchema: z.ZodType<Prisma.PriceUncheckedCreateWithoutProductInput> = z.object({
  id: z.string().cuid().optional(),
  value: z.number().int(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const PriceCreateOrConnectWithoutProductInputSchema: z.ZodType<Prisma.PriceCreateOrConnectWithoutProductInput> = z.object({
  where: z.lazy(() => PriceWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => PriceCreateWithoutProductInputSchema),z.lazy(() => PriceUncheckedCreateWithoutProductInputSchema) ]),
}).strict();

export const PriceCreateManyProductInputEnvelopeSchema: z.ZodType<Prisma.PriceCreateManyProductInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => PriceCreateManyProductInputSchema),z.lazy(() => PriceCreateManyProductInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const TreatmentCreateWithoutProductInputSchema: z.ZodType<Prisma.TreatmentCreateWithoutProductInput> = z.object({
  id: z.string().cuid().optional(),
  price: z.number().int(),
  toothNumber: z.number().int(),
  status: z.lazy(() => TreatmentStatusSchema).optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  treatmentPlan: z.lazy(() => TreatmentPlanCreateNestedOneWithoutTreatmentsInputSchema).optional(),
  event: z.lazy(() => EventCreateNestedOneWithoutTreatmentsInputSchema).optional()
}).strict();

export const TreatmentUncheckedCreateWithoutProductInputSchema: z.ZodType<Prisma.TreatmentUncheckedCreateWithoutProductInput> = z.object({
  id: z.string().cuid().optional(),
  price: z.number().int(),
  toothNumber: z.number().int(),
  status: z.lazy(() => TreatmentStatusSchema).optional(),
  treatmentPlanId: z.string().optional().nullable(),
  eventId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const TreatmentCreateOrConnectWithoutProductInputSchema: z.ZodType<Prisma.TreatmentCreateOrConnectWithoutProductInput> = z.object({
  where: z.lazy(() => TreatmentWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => TreatmentCreateWithoutProductInputSchema),z.lazy(() => TreatmentUncheckedCreateWithoutProductInputSchema) ]),
}).strict();

export const TreatmentCreateManyProductInputEnvelopeSchema: z.ZodType<Prisma.TreatmentCreateManyProductInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => TreatmentCreateManyProductInputSchema),z.lazy(() => TreatmentCreateManyProductInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const ProductCategoryCreateWithoutProductsInputSchema: z.ZodType<Prisma.ProductCategoryCreateWithoutProductsInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  parentCategory: z.lazy(() => ProductCategoryCreateNestedOneWithoutSubcategoriesInputSchema).optional(),
  subcategories: z.lazy(() => ProductCategoryCreateNestedManyWithoutParentCategoryInputSchema).optional()
}).strict();

export const ProductCategoryUncheckedCreateWithoutProductsInputSchema: z.ZodType<Prisma.ProductCategoryUncheckedCreateWithoutProductsInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  parentCategoryId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  subcategories: z.lazy(() => ProductCategoryUncheckedCreateNestedManyWithoutParentCategoryInputSchema).optional()
}).strict();

export const ProductCategoryCreateOrConnectWithoutProductsInputSchema: z.ZodType<Prisma.ProductCategoryCreateOrConnectWithoutProductsInput> = z.object({
  where: z.lazy(() => ProductCategoryWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ProductCategoryCreateWithoutProductsInputSchema),z.lazy(() => ProductCategoryUncheckedCreateWithoutProductsInputSchema) ]),
}).strict();

export const TenantCreateWithoutProductsInputSchema: z.ZodType<Prisma.TenantCreateWithoutProductsInput> = z.object({
  id: z.string().cuid().optional(),
  email: z.string(),
  deletedAt: z.coerce.date().optional().nullable(),
  disabledAt: z.coerce.date().optional().nullable(),
  trialExpiresAt: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  users: z.lazy(() => UserCreateNestedManyWithoutTenantInputSchema).optional(),
  profile: z.lazy(() => TenantProfileCreateNestedOneWithoutTenantInputSchema),
  specializations: z.lazy(() => SpecializationCreateNestedManyWithoutTenantInputSchema).optional(),
  preferedByProfiles: z.lazy(() => ProfileCreateNestedManyWithoutPreferredTenantInputSchema).optional(),
  patients: z.lazy(() => PatientCreateNestedManyWithoutTenantInputSchema).optional(),
  events: z.lazy(() => EventCreateNestedManyWithoutTenantInputSchema).optional()
}).strict();

export const TenantUncheckedCreateWithoutProductsInputSchema: z.ZodType<Prisma.TenantUncheckedCreateWithoutProductsInput> = z.object({
  id: z.string().cuid().optional(),
  email: z.string(),
  profileId: z.string(),
  deletedAt: z.coerce.date().optional().nullable(),
  disabledAt: z.coerce.date().optional().nullable(),
  trialExpiresAt: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  users: z.lazy(() => UserUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  specializations: z.lazy(() => SpecializationUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  preferedByProfiles: z.lazy(() => ProfileUncheckedCreateNestedManyWithoutPreferredTenantInputSchema).optional(),
  patients: z.lazy(() => PatientUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  events: z.lazy(() => EventUncheckedCreateNestedManyWithoutTenantInputSchema).optional()
}).strict();

export const TenantCreateOrConnectWithoutProductsInputSchema: z.ZodType<Prisma.TenantCreateOrConnectWithoutProductsInput> = z.object({
  where: z.lazy(() => TenantWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => TenantCreateWithoutProductsInputSchema),z.lazy(() => TenantUncheckedCreateWithoutProductsInputSchema) ]),
}).strict();

export const PriceUpsertWithWhereUniqueWithoutProductInputSchema: z.ZodType<Prisma.PriceUpsertWithWhereUniqueWithoutProductInput> = z.object({
  where: z.lazy(() => PriceWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => PriceUpdateWithoutProductInputSchema),z.lazy(() => PriceUncheckedUpdateWithoutProductInputSchema) ]),
  create: z.union([ z.lazy(() => PriceCreateWithoutProductInputSchema),z.lazy(() => PriceUncheckedCreateWithoutProductInputSchema) ]),
}).strict();

export const PriceUpdateWithWhereUniqueWithoutProductInputSchema: z.ZodType<Prisma.PriceUpdateWithWhereUniqueWithoutProductInput> = z.object({
  where: z.lazy(() => PriceWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => PriceUpdateWithoutProductInputSchema),z.lazy(() => PriceUncheckedUpdateWithoutProductInputSchema) ]),
}).strict();

export const PriceUpdateManyWithWhereWithoutProductInputSchema: z.ZodType<Prisma.PriceUpdateManyWithWhereWithoutProductInput> = z.object({
  where: z.lazy(() => PriceScalarWhereInputSchema),
  data: z.union([ z.lazy(() => PriceUpdateManyMutationInputSchema),z.lazy(() => PriceUncheckedUpdateManyWithoutProductInputSchema) ]),
}).strict();

export const PriceScalarWhereInputSchema: z.ZodType<Prisma.PriceScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => PriceScalarWhereInputSchema),z.lazy(() => PriceScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => PriceScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => PriceScalarWhereInputSchema),z.lazy(() => PriceScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  value: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  productId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const TreatmentUpsertWithWhereUniqueWithoutProductInputSchema: z.ZodType<Prisma.TreatmentUpsertWithWhereUniqueWithoutProductInput> = z.object({
  where: z.lazy(() => TreatmentWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => TreatmentUpdateWithoutProductInputSchema),z.lazy(() => TreatmentUncheckedUpdateWithoutProductInputSchema) ]),
  create: z.union([ z.lazy(() => TreatmentCreateWithoutProductInputSchema),z.lazy(() => TreatmentUncheckedCreateWithoutProductInputSchema) ]),
}).strict();

export const TreatmentUpdateWithWhereUniqueWithoutProductInputSchema: z.ZodType<Prisma.TreatmentUpdateWithWhereUniqueWithoutProductInput> = z.object({
  where: z.lazy(() => TreatmentWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => TreatmentUpdateWithoutProductInputSchema),z.lazy(() => TreatmentUncheckedUpdateWithoutProductInputSchema) ]),
}).strict();

export const TreatmentUpdateManyWithWhereWithoutProductInputSchema: z.ZodType<Prisma.TreatmentUpdateManyWithWhereWithoutProductInput> = z.object({
  where: z.lazy(() => TreatmentScalarWhereInputSchema),
  data: z.union([ z.lazy(() => TreatmentUpdateManyMutationInputSchema),z.lazy(() => TreatmentUncheckedUpdateManyWithoutProductInputSchema) ]),
}).strict();

export const ProductCategoryUpsertWithoutProductsInputSchema: z.ZodType<Prisma.ProductCategoryUpsertWithoutProductsInput> = z.object({
  update: z.union([ z.lazy(() => ProductCategoryUpdateWithoutProductsInputSchema),z.lazy(() => ProductCategoryUncheckedUpdateWithoutProductsInputSchema) ]),
  create: z.union([ z.lazy(() => ProductCategoryCreateWithoutProductsInputSchema),z.lazy(() => ProductCategoryUncheckedCreateWithoutProductsInputSchema) ]),
  where: z.lazy(() => ProductCategoryWhereInputSchema).optional()
}).strict();

export const ProductCategoryUpdateToOneWithWhereWithoutProductsInputSchema: z.ZodType<Prisma.ProductCategoryUpdateToOneWithWhereWithoutProductsInput> = z.object({
  where: z.lazy(() => ProductCategoryWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => ProductCategoryUpdateWithoutProductsInputSchema),z.lazy(() => ProductCategoryUncheckedUpdateWithoutProductsInputSchema) ]),
}).strict();

export const ProductCategoryUpdateWithoutProductsInputSchema: z.ZodType<Prisma.ProductCategoryUpdateWithoutProductsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  parentCategory: z.lazy(() => ProductCategoryUpdateOneWithoutSubcategoriesNestedInputSchema).optional(),
  subcategories: z.lazy(() => ProductCategoryUpdateManyWithoutParentCategoryNestedInputSchema).optional()
}).strict();

export const ProductCategoryUncheckedUpdateWithoutProductsInputSchema: z.ZodType<Prisma.ProductCategoryUncheckedUpdateWithoutProductsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  parentCategoryId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  subcategories: z.lazy(() => ProductCategoryUncheckedUpdateManyWithoutParentCategoryNestedInputSchema).optional()
}).strict();

export const TenantUpsertWithoutProductsInputSchema: z.ZodType<Prisma.TenantUpsertWithoutProductsInput> = z.object({
  update: z.union([ z.lazy(() => TenantUpdateWithoutProductsInputSchema),z.lazy(() => TenantUncheckedUpdateWithoutProductsInputSchema) ]),
  create: z.union([ z.lazy(() => TenantCreateWithoutProductsInputSchema),z.lazy(() => TenantUncheckedCreateWithoutProductsInputSchema) ]),
  where: z.lazy(() => TenantWhereInputSchema).optional()
}).strict();

export const TenantUpdateToOneWithWhereWithoutProductsInputSchema: z.ZodType<Prisma.TenantUpdateToOneWithWhereWithoutProductsInput> = z.object({
  where: z.lazy(() => TenantWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => TenantUpdateWithoutProductsInputSchema),z.lazy(() => TenantUncheckedUpdateWithoutProductsInputSchema) ]),
}).strict();

export const TenantUpdateWithoutProductsInputSchema: z.ZodType<Prisma.TenantUpdateWithoutProductsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  disabledAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  trialExpiresAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  users: z.lazy(() => UserUpdateManyWithoutTenantNestedInputSchema).optional(),
  profile: z.lazy(() => TenantProfileUpdateOneRequiredWithoutTenantNestedInputSchema).optional(),
  specializations: z.lazy(() => SpecializationUpdateManyWithoutTenantNestedInputSchema).optional(),
  preferedByProfiles: z.lazy(() => ProfileUpdateManyWithoutPreferredTenantNestedInputSchema).optional(),
  patients: z.lazy(() => PatientUpdateManyWithoutTenantNestedInputSchema).optional(),
  events: z.lazy(() => EventUpdateManyWithoutTenantNestedInputSchema).optional()
}).strict();

export const TenantUncheckedUpdateWithoutProductsInputSchema: z.ZodType<Prisma.TenantUncheckedUpdateWithoutProductsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  profileId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  disabledAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  trialExpiresAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  users: z.lazy(() => UserUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  specializations: z.lazy(() => SpecializationUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  preferedByProfiles: z.lazy(() => ProfileUncheckedUpdateManyWithoutPreferredTenantNestedInputSchema).optional(),
  patients: z.lazy(() => PatientUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  events: z.lazy(() => EventUncheckedUpdateManyWithoutTenantNestedInputSchema).optional()
}).strict();

export const ProductCreateWithoutPriceHistoryInputSchema: z.ZodType<Prisma.ProductCreateWithoutPriceHistoryInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  price: z.number().int(),
  image: z.string().optional().nullable(),
  tags: z.union([ z.lazy(() => ProductCreatetagsInputSchema),z.string().array() ]).optional(),
  isActive: z.boolean().optional(),
  isDeleted: z.boolean().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  treatments: z.lazy(() => TreatmentCreateNestedManyWithoutProductInputSchema).optional(),
  category: z.lazy(() => ProductCategoryCreateNestedOneWithoutProductsInputSchema).optional(),
  tenant: z.lazy(() => TenantCreateNestedOneWithoutProductsInputSchema)
}).strict();

export const ProductUncheckedCreateWithoutPriceHistoryInputSchema: z.ZodType<Prisma.ProductUncheckedCreateWithoutPriceHistoryInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  price: z.number().int(),
  image: z.string().optional().nullable(),
  tags: z.union([ z.lazy(() => ProductCreatetagsInputSchema),z.string().array() ]).optional(),
  isActive: z.boolean().optional(),
  isDeleted: z.boolean().optional(),
  categoryId: z.string().optional().nullable(),
  tenantId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  treatments: z.lazy(() => TreatmentUncheckedCreateNestedManyWithoutProductInputSchema).optional()
}).strict();

export const ProductCreateOrConnectWithoutPriceHistoryInputSchema: z.ZodType<Prisma.ProductCreateOrConnectWithoutPriceHistoryInput> = z.object({
  where: z.lazy(() => ProductWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ProductCreateWithoutPriceHistoryInputSchema),z.lazy(() => ProductUncheckedCreateWithoutPriceHistoryInputSchema) ]),
}).strict();

export const ProductUpsertWithoutPriceHistoryInputSchema: z.ZodType<Prisma.ProductUpsertWithoutPriceHistoryInput> = z.object({
  update: z.union([ z.lazy(() => ProductUpdateWithoutPriceHistoryInputSchema),z.lazy(() => ProductUncheckedUpdateWithoutPriceHistoryInputSchema) ]),
  create: z.union([ z.lazy(() => ProductCreateWithoutPriceHistoryInputSchema),z.lazy(() => ProductUncheckedCreateWithoutPriceHistoryInputSchema) ]),
  where: z.lazy(() => ProductWhereInputSchema).optional()
}).strict();

export const ProductUpdateToOneWithWhereWithoutPriceHistoryInputSchema: z.ZodType<Prisma.ProductUpdateToOneWithWhereWithoutPriceHistoryInput> = z.object({
  where: z.lazy(() => ProductWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => ProductUpdateWithoutPriceHistoryInputSchema),z.lazy(() => ProductUncheckedUpdateWithoutPriceHistoryInputSchema) ]),
}).strict();

export const ProductUpdateWithoutPriceHistoryInputSchema: z.ZodType<Prisma.ProductUpdateWithoutPriceHistoryInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  price: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  image: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tags: z.union([ z.lazy(() => ProductUpdatetagsInputSchema),z.string().array() ]).optional(),
  isActive: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  isDeleted: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  treatments: z.lazy(() => TreatmentUpdateManyWithoutProductNestedInputSchema).optional(),
  category: z.lazy(() => ProductCategoryUpdateOneWithoutProductsNestedInputSchema).optional(),
  tenant: z.lazy(() => TenantUpdateOneRequiredWithoutProductsNestedInputSchema).optional()
}).strict();

export const ProductUncheckedUpdateWithoutPriceHistoryInputSchema: z.ZodType<Prisma.ProductUncheckedUpdateWithoutPriceHistoryInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  price: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  image: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tags: z.union([ z.lazy(() => ProductUpdatetagsInputSchema),z.string().array() ]).optional(),
  isActive: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  isDeleted: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  categoryId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tenantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  treatments: z.lazy(() => TreatmentUncheckedUpdateManyWithoutProductNestedInputSchema).optional()
}).strict();

export const ProductCategoryCreateWithoutSubcategoriesInputSchema: z.ZodType<Prisma.ProductCategoryCreateWithoutSubcategoriesInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  parentCategory: z.lazy(() => ProductCategoryCreateNestedOneWithoutSubcategoriesInputSchema).optional(),
  products: z.lazy(() => ProductCreateNestedManyWithoutCategoryInputSchema).optional()
}).strict();

export const ProductCategoryUncheckedCreateWithoutSubcategoriesInputSchema: z.ZodType<Prisma.ProductCategoryUncheckedCreateWithoutSubcategoriesInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  parentCategoryId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  products: z.lazy(() => ProductUncheckedCreateNestedManyWithoutCategoryInputSchema).optional()
}).strict();

export const ProductCategoryCreateOrConnectWithoutSubcategoriesInputSchema: z.ZodType<Prisma.ProductCategoryCreateOrConnectWithoutSubcategoriesInput> = z.object({
  where: z.lazy(() => ProductCategoryWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ProductCategoryCreateWithoutSubcategoriesInputSchema),z.lazy(() => ProductCategoryUncheckedCreateWithoutSubcategoriesInputSchema) ]),
}).strict();

export const ProductCategoryCreateWithoutParentCategoryInputSchema: z.ZodType<Prisma.ProductCategoryCreateWithoutParentCategoryInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  subcategories: z.lazy(() => ProductCategoryCreateNestedManyWithoutParentCategoryInputSchema).optional(),
  products: z.lazy(() => ProductCreateNestedManyWithoutCategoryInputSchema).optional()
}).strict();

export const ProductCategoryUncheckedCreateWithoutParentCategoryInputSchema: z.ZodType<Prisma.ProductCategoryUncheckedCreateWithoutParentCategoryInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  subcategories: z.lazy(() => ProductCategoryUncheckedCreateNestedManyWithoutParentCategoryInputSchema).optional(),
  products: z.lazy(() => ProductUncheckedCreateNestedManyWithoutCategoryInputSchema).optional()
}).strict();

export const ProductCategoryCreateOrConnectWithoutParentCategoryInputSchema: z.ZodType<Prisma.ProductCategoryCreateOrConnectWithoutParentCategoryInput> = z.object({
  where: z.lazy(() => ProductCategoryWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ProductCategoryCreateWithoutParentCategoryInputSchema),z.lazy(() => ProductCategoryUncheckedCreateWithoutParentCategoryInputSchema) ]),
}).strict();

export const ProductCategoryCreateManyParentCategoryInputEnvelopeSchema: z.ZodType<Prisma.ProductCategoryCreateManyParentCategoryInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => ProductCategoryCreateManyParentCategoryInputSchema),z.lazy(() => ProductCategoryCreateManyParentCategoryInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const ProductCreateWithoutCategoryInputSchema: z.ZodType<Prisma.ProductCreateWithoutCategoryInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  price: z.number().int(),
  image: z.string().optional().nullable(),
  tags: z.union([ z.lazy(() => ProductCreatetagsInputSchema),z.string().array() ]).optional(),
  isActive: z.boolean().optional(),
  isDeleted: z.boolean().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  priceHistory: z.lazy(() => PriceCreateNestedManyWithoutProductInputSchema).optional(),
  treatments: z.lazy(() => TreatmentCreateNestedManyWithoutProductInputSchema).optional(),
  tenant: z.lazy(() => TenantCreateNestedOneWithoutProductsInputSchema)
}).strict();

export const ProductUncheckedCreateWithoutCategoryInputSchema: z.ZodType<Prisma.ProductUncheckedCreateWithoutCategoryInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  price: z.number().int(),
  image: z.string().optional().nullable(),
  tags: z.union([ z.lazy(() => ProductCreatetagsInputSchema),z.string().array() ]).optional(),
  isActive: z.boolean().optional(),
  isDeleted: z.boolean().optional(),
  tenantId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  priceHistory: z.lazy(() => PriceUncheckedCreateNestedManyWithoutProductInputSchema).optional(),
  treatments: z.lazy(() => TreatmentUncheckedCreateNestedManyWithoutProductInputSchema).optional()
}).strict();

export const ProductCreateOrConnectWithoutCategoryInputSchema: z.ZodType<Prisma.ProductCreateOrConnectWithoutCategoryInput> = z.object({
  where: z.lazy(() => ProductWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ProductCreateWithoutCategoryInputSchema),z.lazy(() => ProductUncheckedCreateWithoutCategoryInputSchema) ]),
}).strict();

export const ProductCreateManyCategoryInputEnvelopeSchema: z.ZodType<Prisma.ProductCreateManyCategoryInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => ProductCreateManyCategoryInputSchema),z.lazy(() => ProductCreateManyCategoryInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const ProductCategoryUpsertWithoutSubcategoriesInputSchema: z.ZodType<Prisma.ProductCategoryUpsertWithoutSubcategoriesInput> = z.object({
  update: z.union([ z.lazy(() => ProductCategoryUpdateWithoutSubcategoriesInputSchema),z.lazy(() => ProductCategoryUncheckedUpdateWithoutSubcategoriesInputSchema) ]),
  create: z.union([ z.lazy(() => ProductCategoryCreateWithoutSubcategoriesInputSchema),z.lazy(() => ProductCategoryUncheckedCreateWithoutSubcategoriesInputSchema) ]),
  where: z.lazy(() => ProductCategoryWhereInputSchema).optional()
}).strict();

export const ProductCategoryUpdateToOneWithWhereWithoutSubcategoriesInputSchema: z.ZodType<Prisma.ProductCategoryUpdateToOneWithWhereWithoutSubcategoriesInput> = z.object({
  where: z.lazy(() => ProductCategoryWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => ProductCategoryUpdateWithoutSubcategoriesInputSchema),z.lazy(() => ProductCategoryUncheckedUpdateWithoutSubcategoriesInputSchema) ]),
}).strict();

export const ProductCategoryUpdateWithoutSubcategoriesInputSchema: z.ZodType<Prisma.ProductCategoryUpdateWithoutSubcategoriesInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  parentCategory: z.lazy(() => ProductCategoryUpdateOneWithoutSubcategoriesNestedInputSchema).optional(),
  products: z.lazy(() => ProductUpdateManyWithoutCategoryNestedInputSchema).optional()
}).strict();

export const ProductCategoryUncheckedUpdateWithoutSubcategoriesInputSchema: z.ZodType<Prisma.ProductCategoryUncheckedUpdateWithoutSubcategoriesInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  parentCategoryId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  products: z.lazy(() => ProductUncheckedUpdateManyWithoutCategoryNestedInputSchema).optional()
}).strict();

export const ProductCategoryUpsertWithWhereUniqueWithoutParentCategoryInputSchema: z.ZodType<Prisma.ProductCategoryUpsertWithWhereUniqueWithoutParentCategoryInput> = z.object({
  where: z.lazy(() => ProductCategoryWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => ProductCategoryUpdateWithoutParentCategoryInputSchema),z.lazy(() => ProductCategoryUncheckedUpdateWithoutParentCategoryInputSchema) ]),
  create: z.union([ z.lazy(() => ProductCategoryCreateWithoutParentCategoryInputSchema),z.lazy(() => ProductCategoryUncheckedCreateWithoutParentCategoryInputSchema) ]),
}).strict();

export const ProductCategoryUpdateWithWhereUniqueWithoutParentCategoryInputSchema: z.ZodType<Prisma.ProductCategoryUpdateWithWhereUniqueWithoutParentCategoryInput> = z.object({
  where: z.lazy(() => ProductCategoryWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => ProductCategoryUpdateWithoutParentCategoryInputSchema),z.lazy(() => ProductCategoryUncheckedUpdateWithoutParentCategoryInputSchema) ]),
}).strict();

export const ProductCategoryUpdateManyWithWhereWithoutParentCategoryInputSchema: z.ZodType<Prisma.ProductCategoryUpdateManyWithWhereWithoutParentCategoryInput> = z.object({
  where: z.lazy(() => ProductCategoryScalarWhereInputSchema),
  data: z.union([ z.lazy(() => ProductCategoryUpdateManyMutationInputSchema),z.lazy(() => ProductCategoryUncheckedUpdateManyWithoutParentCategoryInputSchema) ]),
}).strict();

export const ProductCategoryScalarWhereInputSchema: z.ZodType<Prisma.ProductCategoryScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => ProductCategoryScalarWhereInputSchema),z.lazy(() => ProductCategoryScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ProductCategoryScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ProductCategoryScalarWhereInputSchema),z.lazy(() => ProductCategoryScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  parentCategoryId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const ProductUpsertWithWhereUniqueWithoutCategoryInputSchema: z.ZodType<Prisma.ProductUpsertWithWhereUniqueWithoutCategoryInput> = z.object({
  where: z.lazy(() => ProductWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => ProductUpdateWithoutCategoryInputSchema),z.lazy(() => ProductUncheckedUpdateWithoutCategoryInputSchema) ]),
  create: z.union([ z.lazy(() => ProductCreateWithoutCategoryInputSchema),z.lazy(() => ProductUncheckedCreateWithoutCategoryInputSchema) ]),
}).strict();

export const ProductUpdateWithWhereUniqueWithoutCategoryInputSchema: z.ZodType<Prisma.ProductUpdateWithWhereUniqueWithoutCategoryInput> = z.object({
  where: z.lazy(() => ProductWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => ProductUpdateWithoutCategoryInputSchema),z.lazy(() => ProductUncheckedUpdateWithoutCategoryInputSchema) ]),
}).strict();

export const ProductUpdateManyWithWhereWithoutCategoryInputSchema: z.ZodType<Prisma.ProductUpdateManyWithWhereWithoutCategoryInput> = z.object({
  where: z.lazy(() => ProductScalarWhereInputSchema),
  data: z.union([ z.lazy(() => ProductUpdateManyMutationInputSchema),z.lazy(() => ProductUncheckedUpdateManyWithoutCategoryInputSchema) ]),
}).strict();

export const ProductCreateWithoutTreatmentsInputSchema: z.ZodType<Prisma.ProductCreateWithoutTreatmentsInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  price: z.number().int(),
  image: z.string().optional().nullable(),
  tags: z.union([ z.lazy(() => ProductCreatetagsInputSchema),z.string().array() ]).optional(),
  isActive: z.boolean().optional(),
  isDeleted: z.boolean().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  priceHistory: z.lazy(() => PriceCreateNestedManyWithoutProductInputSchema).optional(),
  category: z.lazy(() => ProductCategoryCreateNestedOneWithoutProductsInputSchema).optional(),
  tenant: z.lazy(() => TenantCreateNestedOneWithoutProductsInputSchema)
}).strict();

export const ProductUncheckedCreateWithoutTreatmentsInputSchema: z.ZodType<Prisma.ProductUncheckedCreateWithoutTreatmentsInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  price: z.number().int(),
  image: z.string().optional().nullable(),
  tags: z.union([ z.lazy(() => ProductCreatetagsInputSchema),z.string().array() ]).optional(),
  isActive: z.boolean().optional(),
  isDeleted: z.boolean().optional(),
  categoryId: z.string().optional().nullable(),
  tenantId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  priceHistory: z.lazy(() => PriceUncheckedCreateNestedManyWithoutProductInputSchema).optional()
}).strict();

export const ProductCreateOrConnectWithoutTreatmentsInputSchema: z.ZodType<Prisma.ProductCreateOrConnectWithoutTreatmentsInput> = z.object({
  where: z.lazy(() => ProductWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ProductCreateWithoutTreatmentsInputSchema),z.lazy(() => ProductUncheckedCreateWithoutTreatmentsInputSchema) ]),
}).strict();

export const TreatmentPlanCreateWithoutTreatmentsInputSchema: z.ZodType<Prisma.TreatmentPlanCreateWithoutTreatmentsInput> = z.object({
  id: z.string().cuid().optional(),
  description: z.string().optional().nullable(),
  isDone: z.boolean().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  patient: z.lazy(() => PatientCreateNestedOneWithoutTreatmentPlansInputSchema),
  user: z.lazy(() => UserCreateNestedOneWithoutTreatmentPlansInputSchema)
}).strict();

export const TreatmentPlanUncheckedCreateWithoutTreatmentsInputSchema: z.ZodType<Prisma.TreatmentPlanUncheckedCreateWithoutTreatmentsInput> = z.object({
  id: z.string().cuid().optional(),
  description: z.string().optional().nullable(),
  isDone: z.boolean().optional(),
  patientId: z.string(),
  userId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const TreatmentPlanCreateOrConnectWithoutTreatmentsInputSchema: z.ZodType<Prisma.TreatmentPlanCreateOrConnectWithoutTreatmentsInput> = z.object({
  where: z.lazy(() => TreatmentPlanWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => TreatmentPlanCreateWithoutTreatmentsInputSchema),z.lazy(() => TreatmentPlanUncheckedCreateWithoutTreatmentsInputSchema) ]),
}).strict();

export const EventCreateWithoutTreatmentsInputSchema: z.ZodType<Prisma.EventCreateWithoutTreatmentsInput> = z.object({
  id: z.string().cuid().optional(),
  title: z.string(),
  description: z.string().optional().nullable(),
  date: z.coerce.date(),
  start: z.coerce.date().optional().nullable(),
  end: z.coerce.date().optional().nullable(),
  allDay: z.boolean().optional(),
  type: z.lazy(() => EventTypeSchema).optional(),
  status: z.lazy(() => EventStatusSchema).optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  actions: z.lazy(() => EventActionCreateNestedManyWithoutEventInputSchema).optional(),
  patient: z.lazy(() => PatientCreateNestedOneWithoutAppointmentsInputSchema).optional(),
  user: z.lazy(() => UserCreateNestedOneWithoutEventsInputSchema),
  tenant: z.lazy(() => TenantCreateNestedOneWithoutEventsInputSchema)
}).strict();

export const EventUncheckedCreateWithoutTreatmentsInputSchema: z.ZodType<Prisma.EventUncheckedCreateWithoutTreatmentsInput> = z.object({
  id: z.string().cuid().optional(),
  title: z.string(),
  description: z.string().optional().nullable(),
  date: z.coerce.date(),
  start: z.coerce.date().optional().nullable(),
  end: z.coerce.date().optional().nullable(),
  allDay: z.boolean().optional(),
  type: z.lazy(() => EventTypeSchema).optional(),
  status: z.lazy(() => EventStatusSchema).optional(),
  patientId: z.string().optional().nullable(),
  userId: z.string(),
  tenantId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  actions: z.lazy(() => EventActionUncheckedCreateNestedManyWithoutEventInputSchema).optional()
}).strict();

export const EventCreateOrConnectWithoutTreatmentsInputSchema: z.ZodType<Prisma.EventCreateOrConnectWithoutTreatmentsInput> = z.object({
  where: z.lazy(() => EventWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => EventCreateWithoutTreatmentsInputSchema),z.lazy(() => EventUncheckedCreateWithoutTreatmentsInputSchema) ]),
}).strict();

export const ProductUpsertWithoutTreatmentsInputSchema: z.ZodType<Prisma.ProductUpsertWithoutTreatmentsInput> = z.object({
  update: z.union([ z.lazy(() => ProductUpdateWithoutTreatmentsInputSchema),z.lazy(() => ProductUncheckedUpdateWithoutTreatmentsInputSchema) ]),
  create: z.union([ z.lazy(() => ProductCreateWithoutTreatmentsInputSchema),z.lazy(() => ProductUncheckedCreateWithoutTreatmentsInputSchema) ]),
  where: z.lazy(() => ProductWhereInputSchema).optional()
}).strict();

export const ProductUpdateToOneWithWhereWithoutTreatmentsInputSchema: z.ZodType<Prisma.ProductUpdateToOneWithWhereWithoutTreatmentsInput> = z.object({
  where: z.lazy(() => ProductWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => ProductUpdateWithoutTreatmentsInputSchema),z.lazy(() => ProductUncheckedUpdateWithoutTreatmentsInputSchema) ]),
}).strict();

export const ProductUpdateWithoutTreatmentsInputSchema: z.ZodType<Prisma.ProductUpdateWithoutTreatmentsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  price: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  image: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tags: z.union([ z.lazy(() => ProductUpdatetagsInputSchema),z.string().array() ]).optional(),
  isActive: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  isDeleted: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  priceHistory: z.lazy(() => PriceUpdateManyWithoutProductNestedInputSchema).optional(),
  category: z.lazy(() => ProductCategoryUpdateOneWithoutProductsNestedInputSchema).optional(),
  tenant: z.lazy(() => TenantUpdateOneRequiredWithoutProductsNestedInputSchema).optional()
}).strict();

export const ProductUncheckedUpdateWithoutTreatmentsInputSchema: z.ZodType<Prisma.ProductUncheckedUpdateWithoutTreatmentsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  price: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  image: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tags: z.union([ z.lazy(() => ProductUpdatetagsInputSchema),z.string().array() ]).optional(),
  isActive: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  isDeleted: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  categoryId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tenantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  priceHistory: z.lazy(() => PriceUncheckedUpdateManyWithoutProductNestedInputSchema).optional()
}).strict();

export const TreatmentPlanUpsertWithoutTreatmentsInputSchema: z.ZodType<Prisma.TreatmentPlanUpsertWithoutTreatmentsInput> = z.object({
  update: z.union([ z.lazy(() => TreatmentPlanUpdateWithoutTreatmentsInputSchema),z.lazy(() => TreatmentPlanUncheckedUpdateWithoutTreatmentsInputSchema) ]),
  create: z.union([ z.lazy(() => TreatmentPlanCreateWithoutTreatmentsInputSchema),z.lazy(() => TreatmentPlanUncheckedCreateWithoutTreatmentsInputSchema) ]),
  where: z.lazy(() => TreatmentPlanWhereInputSchema).optional()
}).strict();

export const TreatmentPlanUpdateToOneWithWhereWithoutTreatmentsInputSchema: z.ZodType<Prisma.TreatmentPlanUpdateToOneWithWhereWithoutTreatmentsInput> = z.object({
  where: z.lazy(() => TreatmentPlanWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => TreatmentPlanUpdateWithoutTreatmentsInputSchema),z.lazy(() => TreatmentPlanUncheckedUpdateWithoutTreatmentsInputSchema) ]),
}).strict();

export const TreatmentPlanUpdateWithoutTreatmentsInputSchema: z.ZodType<Prisma.TreatmentPlanUpdateWithoutTreatmentsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isDone: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  patient: z.lazy(() => PatientUpdateOneRequiredWithoutTreatmentPlansNestedInputSchema).optional(),
  user: z.lazy(() => UserUpdateOneRequiredWithoutTreatmentPlansNestedInputSchema).optional()
}).strict();

export const TreatmentPlanUncheckedUpdateWithoutTreatmentsInputSchema: z.ZodType<Prisma.TreatmentPlanUncheckedUpdateWithoutTreatmentsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isDone: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  patientId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const EventUpsertWithoutTreatmentsInputSchema: z.ZodType<Prisma.EventUpsertWithoutTreatmentsInput> = z.object({
  update: z.union([ z.lazy(() => EventUpdateWithoutTreatmentsInputSchema),z.lazy(() => EventUncheckedUpdateWithoutTreatmentsInputSchema) ]),
  create: z.union([ z.lazy(() => EventCreateWithoutTreatmentsInputSchema),z.lazy(() => EventUncheckedCreateWithoutTreatmentsInputSchema) ]),
  where: z.lazy(() => EventWhereInputSchema).optional()
}).strict();

export const EventUpdateToOneWithWhereWithoutTreatmentsInputSchema: z.ZodType<Prisma.EventUpdateToOneWithWhereWithoutTreatmentsInput> = z.object({
  where: z.lazy(() => EventWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => EventUpdateWithoutTreatmentsInputSchema),z.lazy(() => EventUncheckedUpdateWithoutTreatmentsInputSchema) ]),
}).strict();

export const EventUpdateWithoutTreatmentsInputSchema: z.ZodType<Prisma.EventUpdateWithoutTreatmentsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  title: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  start: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  end: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  allDay: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => EventTypeSchema),z.lazy(() => EnumEventTypeFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => EventStatusSchema),z.lazy(() => EnumEventStatusFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  actions: z.lazy(() => EventActionUpdateManyWithoutEventNestedInputSchema).optional(),
  patient: z.lazy(() => PatientUpdateOneWithoutAppointmentsNestedInputSchema).optional(),
  user: z.lazy(() => UserUpdateOneRequiredWithoutEventsNestedInputSchema).optional(),
  tenant: z.lazy(() => TenantUpdateOneRequiredWithoutEventsNestedInputSchema).optional()
}).strict();

export const EventUncheckedUpdateWithoutTreatmentsInputSchema: z.ZodType<Prisma.EventUncheckedUpdateWithoutTreatmentsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  title: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  start: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  end: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  allDay: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => EventTypeSchema),z.lazy(() => EnumEventTypeFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => EventStatusSchema),z.lazy(() => EnumEventStatusFieldUpdateOperationsInputSchema) ]).optional(),
  patientId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  tenantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  actions: z.lazy(() => EventActionUncheckedUpdateManyWithoutEventNestedInputSchema).optional()
}).strict();

export const TreatmentCreateWithoutTreatmentPlanInputSchema: z.ZodType<Prisma.TreatmentCreateWithoutTreatmentPlanInput> = z.object({
  id: z.string().cuid().optional(),
  price: z.number().int(),
  toothNumber: z.number().int(),
  status: z.lazy(() => TreatmentStatusSchema).optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  product: z.lazy(() => ProductCreateNestedOneWithoutTreatmentsInputSchema),
  event: z.lazy(() => EventCreateNestedOneWithoutTreatmentsInputSchema).optional()
}).strict();

export const TreatmentUncheckedCreateWithoutTreatmentPlanInputSchema: z.ZodType<Prisma.TreatmentUncheckedCreateWithoutTreatmentPlanInput> = z.object({
  id: z.string().cuid().optional(),
  price: z.number().int(),
  toothNumber: z.number().int(),
  status: z.lazy(() => TreatmentStatusSchema).optional(),
  productId: z.string(),
  eventId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const TreatmentCreateOrConnectWithoutTreatmentPlanInputSchema: z.ZodType<Prisma.TreatmentCreateOrConnectWithoutTreatmentPlanInput> = z.object({
  where: z.lazy(() => TreatmentWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => TreatmentCreateWithoutTreatmentPlanInputSchema),z.lazy(() => TreatmentUncheckedCreateWithoutTreatmentPlanInputSchema) ]),
}).strict();

export const TreatmentCreateManyTreatmentPlanInputEnvelopeSchema: z.ZodType<Prisma.TreatmentCreateManyTreatmentPlanInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => TreatmentCreateManyTreatmentPlanInputSchema),z.lazy(() => TreatmentCreateManyTreatmentPlanInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const PatientCreateWithoutTreatmentPlansInputSchema: z.ZodType<Prisma.PatientCreateWithoutTreatmentPlansInput> = z.object({
  id: z.string().cuid().optional(),
  firstName: z.string(),
  lastName: z.string(),
  gender: z.string().optional().nullable(),
  dob: z.coerce.date().optional().nullable(),
  email: z.string().optional().nullable(),
  phone: z.string().optional().nullable(),
  city: z.string().optional().nullable(),
  county: z.string().optional().nullable(),
  status: z.lazy(() => StatusSchema).optional(),
  smsNotifications: z.boolean().optional(),
  emailNotifications: z.boolean().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  user: z.lazy(() => UserCreateNestedOneWithoutPatientsInputSchema),
  tenant: z.lazy(() => TenantCreateNestedOneWithoutPatientsInputSchema),
  appointments: z.lazy(() => EventCreateNestedManyWithoutPatientInputSchema).optional()
}).strict();

export const PatientUncheckedCreateWithoutTreatmentPlansInputSchema: z.ZodType<Prisma.PatientUncheckedCreateWithoutTreatmentPlansInput> = z.object({
  id: z.string().cuid().optional(),
  firstName: z.string(),
  lastName: z.string(),
  gender: z.string().optional().nullable(),
  dob: z.coerce.date().optional().nullable(),
  email: z.string().optional().nullable(),
  phone: z.string().optional().nullable(),
  city: z.string().optional().nullable(),
  county: z.string().optional().nullable(),
  status: z.lazy(() => StatusSchema).optional(),
  smsNotifications: z.boolean().optional(),
  emailNotifications: z.boolean().optional(),
  userId: z.string(),
  tenantId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  appointments: z.lazy(() => EventUncheckedCreateNestedManyWithoutPatientInputSchema).optional()
}).strict();

export const PatientCreateOrConnectWithoutTreatmentPlansInputSchema: z.ZodType<Prisma.PatientCreateOrConnectWithoutTreatmentPlansInput> = z.object({
  where: z.lazy(() => PatientWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => PatientCreateWithoutTreatmentPlansInputSchema),z.lazy(() => PatientUncheckedCreateWithoutTreatmentPlansInputSchema) ]),
}).strict();

export const UserCreateWithoutTreatmentPlansInputSchema: z.ZodType<Prisma.UserCreateWithoutTreatmentPlansInput> = z.object({
  id: z.string().cuid().optional(),
  index: z.number().int().optional(),
  role: z.lazy(() => RoleSchema).optional(),
  workingHours: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  deletedAt: z.coerce.date().optional().nullable(),
  activatedAt: z.coerce.date().optional().nullable(),
  lastLoginAt: z.coerce.date().optional().nullable(),
  bannedAt: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  specialization: z.lazy(() => SpecializationCreateNestedOneWithoutUsersInputSchema).optional(),
  profile: z.lazy(() => ProfileCreateNestedOneWithoutUsersInputSchema),
  tenant: z.lazy(() => TenantCreateNestedOneWithoutUsersInputSchema),
  invitation: z.lazy(() => InvitationCreateNestedOneWithoutUserInputSchema).optional(),
  tokens: z.lazy(() => TokenCreateNestedManyWithoutUserInputSchema).optional(),
  patients: z.lazy(() => PatientCreateNestedManyWithoutUserInputSchema).optional(),
  events: z.lazy(() => EventCreateNestedManyWithoutUserInputSchema).optional(),
  eventActions: z.lazy(() => EventActionCreateNestedManyWithoutUserInputSchema).optional(),
  invitations: z.lazy(() => InvitationCreateNestedManyWithoutInvitedByInputSchema).optional()
}).strict();

export const UserUncheckedCreateWithoutTreatmentPlansInputSchema: z.ZodType<Prisma.UserUncheckedCreateWithoutTreatmentPlansInput> = z.object({
  id: z.string().cuid().optional(),
  index: z.number().int().optional(),
  role: z.lazy(() => RoleSchema).optional(),
  workingHours: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  specializationId: z.string().optional().nullable(),
  profileId: z.string(),
  tenantId: z.string(),
  deletedAt: z.coerce.date().optional().nullable(),
  activatedAt: z.coerce.date().optional().nullable(),
  lastLoginAt: z.coerce.date().optional().nullable(),
  bannedAt: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  invitation: z.lazy(() => InvitationUncheckedCreateNestedOneWithoutUserInputSchema).optional(),
  tokens: z.lazy(() => TokenUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  patients: z.lazy(() => PatientUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  events: z.lazy(() => EventUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  eventActions: z.lazy(() => EventActionUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedCreateNestedManyWithoutInvitedByInputSchema).optional()
}).strict();

export const UserCreateOrConnectWithoutTreatmentPlansInputSchema: z.ZodType<Prisma.UserCreateOrConnectWithoutTreatmentPlansInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UserCreateWithoutTreatmentPlansInputSchema),z.lazy(() => UserUncheckedCreateWithoutTreatmentPlansInputSchema) ]),
}).strict();

export const TreatmentUpsertWithWhereUniqueWithoutTreatmentPlanInputSchema: z.ZodType<Prisma.TreatmentUpsertWithWhereUniqueWithoutTreatmentPlanInput> = z.object({
  where: z.lazy(() => TreatmentWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => TreatmentUpdateWithoutTreatmentPlanInputSchema),z.lazy(() => TreatmentUncheckedUpdateWithoutTreatmentPlanInputSchema) ]),
  create: z.union([ z.lazy(() => TreatmentCreateWithoutTreatmentPlanInputSchema),z.lazy(() => TreatmentUncheckedCreateWithoutTreatmentPlanInputSchema) ]),
}).strict();

export const TreatmentUpdateWithWhereUniqueWithoutTreatmentPlanInputSchema: z.ZodType<Prisma.TreatmentUpdateWithWhereUniqueWithoutTreatmentPlanInput> = z.object({
  where: z.lazy(() => TreatmentWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => TreatmentUpdateWithoutTreatmentPlanInputSchema),z.lazy(() => TreatmentUncheckedUpdateWithoutTreatmentPlanInputSchema) ]),
}).strict();

export const TreatmentUpdateManyWithWhereWithoutTreatmentPlanInputSchema: z.ZodType<Prisma.TreatmentUpdateManyWithWhereWithoutTreatmentPlanInput> = z.object({
  where: z.lazy(() => TreatmentScalarWhereInputSchema),
  data: z.union([ z.lazy(() => TreatmentUpdateManyMutationInputSchema),z.lazy(() => TreatmentUncheckedUpdateManyWithoutTreatmentPlanInputSchema) ]),
}).strict();

export const PatientUpsertWithoutTreatmentPlansInputSchema: z.ZodType<Prisma.PatientUpsertWithoutTreatmentPlansInput> = z.object({
  update: z.union([ z.lazy(() => PatientUpdateWithoutTreatmentPlansInputSchema),z.lazy(() => PatientUncheckedUpdateWithoutTreatmentPlansInputSchema) ]),
  create: z.union([ z.lazy(() => PatientCreateWithoutTreatmentPlansInputSchema),z.lazy(() => PatientUncheckedCreateWithoutTreatmentPlansInputSchema) ]),
  where: z.lazy(() => PatientWhereInputSchema).optional()
}).strict();

export const PatientUpdateToOneWithWhereWithoutTreatmentPlansInputSchema: z.ZodType<Prisma.PatientUpdateToOneWithWhereWithoutTreatmentPlansInput> = z.object({
  where: z.lazy(() => PatientWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => PatientUpdateWithoutTreatmentPlansInputSchema),z.lazy(() => PatientUncheckedUpdateWithoutTreatmentPlansInputSchema) ]),
}).strict();

export const PatientUpdateWithoutTreatmentPlansInputSchema: z.ZodType<Prisma.PatientUpdateWithoutTreatmentPlansInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  firstName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  lastName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  gender: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  dob: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  city: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  county: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.lazy(() => StatusSchema),z.lazy(() => EnumStatusFieldUpdateOperationsInputSchema) ]).optional(),
  smsNotifications: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  emailNotifications: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  user: z.lazy(() => UserUpdateOneRequiredWithoutPatientsNestedInputSchema).optional(),
  tenant: z.lazy(() => TenantUpdateOneRequiredWithoutPatientsNestedInputSchema).optional(),
  appointments: z.lazy(() => EventUpdateManyWithoutPatientNestedInputSchema).optional()
}).strict();

export const PatientUncheckedUpdateWithoutTreatmentPlansInputSchema: z.ZodType<Prisma.PatientUncheckedUpdateWithoutTreatmentPlansInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  firstName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  lastName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  gender: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  dob: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  city: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  county: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.lazy(() => StatusSchema),z.lazy(() => EnumStatusFieldUpdateOperationsInputSchema) ]).optional(),
  smsNotifications: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  emailNotifications: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  tenantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  appointments: z.lazy(() => EventUncheckedUpdateManyWithoutPatientNestedInputSchema).optional()
}).strict();

export const UserUpsertWithoutTreatmentPlansInputSchema: z.ZodType<Prisma.UserUpsertWithoutTreatmentPlansInput> = z.object({
  update: z.union([ z.lazy(() => UserUpdateWithoutTreatmentPlansInputSchema),z.lazy(() => UserUncheckedUpdateWithoutTreatmentPlansInputSchema) ]),
  create: z.union([ z.lazy(() => UserCreateWithoutTreatmentPlansInputSchema),z.lazy(() => UserUncheckedCreateWithoutTreatmentPlansInputSchema) ]),
  where: z.lazy(() => UserWhereInputSchema).optional()
}).strict();

export const UserUpdateToOneWithWhereWithoutTreatmentPlansInputSchema: z.ZodType<Prisma.UserUpdateToOneWithWhereWithoutTreatmentPlansInput> = z.object({
  where: z.lazy(() => UserWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => UserUpdateWithoutTreatmentPlansInputSchema),z.lazy(() => UserUncheckedUpdateWithoutTreatmentPlansInputSchema) ]),
}).strict();

export const UserUpdateWithoutTreatmentPlansInputSchema: z.ZodType<Prisma.UserUpdateWithoutTreatmentPlansInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  index: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.lazy(() => RoleSchema),z.lazy(() => EnumRoleFieldUpdateOperationsInputSchema) ]).optional(),
  workingHours: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  activatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastLoginAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bannedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  specialization: z.lazy(() => SpecializationUpdateOneWithoutUsersNestedInputSchema).optional(),
  profile: z.lazy(() => ProfileUpdateOneRequiredWithoutUsersNestedInputSchema).optional(),
  tenant: z.lazy(() => TenantUpdateOneRequiredWithoutUsersNestedInputSchema).optional(),
  invitation: z.lazy(() => InvitationUpdateOneWithoutUserNestedInputSchema).optional(),
  tokens: z.lazy(() => TokenUpdateManyWithoutUserNestedInputSchema).optional(),
  patients: z.lazy(() => PatientUpdateManyWithoutUserNestedInputSchema).optional(),
  events: z.lazy(() => EventUpdateManyWithoutUserNestedInputSchema).optional(),
  eventActions: z.lazy(() => EventActionUpdateManyWithoutUserNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUpdateManyWithoutInvitedByNestedInputSchema).optional()
}).strict();

export const UserUncheckedUpdateWithoutTreatmentPlansInputSchema: z.ZodType<Prisma.UserUncheckedUpdateWithoutTreatmentPlansInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  index: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.lazy(() => RoleSchema),z.lazy(() => EnumRoleFieldUpdateOperationsInputSchema) ]).optional(),
  workingHours: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  specializationId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  profileId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  tenantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  activatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastLoginAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bannedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  invitation: z.lazy(() => InvitationUncheckedUpdateOneWithoutUserNestedInputSchema).optional(),
  tokens: z.lazy(() => TokenUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  patients: z.lazy(() => PatientUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  events: z.lazy(() => EventUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  eventActions: z.lazy(() => EventActionUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedUpdateManyWithoutInvitedByNestedInputSchema).optional()
}).strict();

export const CityCreateWithoutCountyInputSchema: z.ZodType<Prisma.CityCreateWithoutCountyInput> = z.object({
  id: z.string().uuid().optional(),
  name: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const CityUncheckedCreateWithoutCountyInputSchema: z.ZodType<Prisma.CityUncheckedCreateWithoutCountyInput> = z.object({
  id: z.string().uuid().optional(),
  name: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const CityCreateOrConnectWithoutCountyInputSchema: z.ZodType<Prisma.CityCreateOrConnectWithoutCountyInput> = z.object({
  where: z.lazy(() => CityWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => CityCreateWithoutCountyInputSchema),z.lazy(() => CityUncheckedCreateWithoutCountyInputSchema) ]),
}).strict();

export const CityCreateManyCountyInputEnvelopeSchema: z.ZodType<Prisma.CityCreateManyCountyInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => CityCreateManyCountyInputSchema),z.lazy(() => CityCreateManyCountyInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const CityUpsertWithWhereUniqueWithoutCountyInputSchema: z.ZodType<Prisma.CityUpsertWithWhereUniqueWithoutCountyInput> = z.object({
  where: z.lazy(() => CityWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => CityUpdateWithoutCountyInputSchema),z.lazy(() => CityUncheckedUpdateWithoutCountyInputSchema) ]),
  create: z.union([ z.lazy(() => CityCreateWithoutCountyInputSchema),z.lazy(() => CityUncheckedCreateWithoutCountyInputSchema) ]),
}).strict();

export const CityUpdateWithWhereUniqueWithoutCountyInputSchema: z.ZodType<Prisma.CityUpdateWithWhereUniqueWithoutCountyInput> = z.object({
  where: z.lazy(() => CityWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => CityUpdateWithoutCountyInputSchema),z.lazy(() => CityUncheckedUpdateWithoutCountyInputSchema) ]),
}).strict();

export const CityUpdateManyWithWhereWithoutCountyInputSchema: z.ZodType<Prisma.CityUpdateManyWithWhereWithoutCountyInput> = z.object({
  where: z.lazy(() => CityScalarWhereInputSchema),
  data: z.union([ z.lazy(() => CityUpdateManyMutationInputSchema),z.lazy(() => CityUncheckedUpdateManyWithoutCountyInputSchema) ]),
}).strict();

export const CityScalarWhereInputSchema: z.ZodType<Prisma.CityScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => CityScalarWhereInputSchema),z.lazy(() => CityScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => CityScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => CityScalarWhereInputSchema),z.lazy(() => CityScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  countyId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const CountyCreateWithoutCitiesInputSchema: z.ZodType<Prisma.CountyCreateWithoutCitiesInput> = z.object({
  id: z.string().uuid().optional(),
  name: z.string(),
  code: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const CountyUncheckedCreateWithoutCitiesInputSchema: z.ZodType<Prisma.CountyUncheckedCreateWithoutCitiesInput> = z.object({
  id: z.string().uuid().optional(),
  name: z.string(),
  code: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const CountyCreateOrConnectWithoutCitiesInputSchema: z.ZodType<Prisma.CountyCreateOrConnectWithoutCitiesInput> = z.object({
  where: z.lazy(() => CountyWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => CountyCreateWithoutCitiesInputSchema),z.lazy(() => CountyUncheckedCreateWithoutCitiesInputSchema) ]),
}).strict();

export const CountyUpsertWithoutCitiesInputSchema: z.ZodType<Prisma.CountyUpsertWithoutCitiesInput> = z.object({
  update: z.union([ z.lazy(() => CountyUpdateWithoutCitiesInputSchema),z.lazy(() => CountyUncheckedUpdateWithoutCitiesInputSchema) ]),
  create: z.union([ z.lazy(() => CountyCreateWithoutCitiesInputSchema),z.lazy(() => CountyUncheckedCreateWithoutCitiesInputSchema) ]),
  where: z.lazy(() => CountyWhereInputSchema).optional()
}).strict();

export const CountyUpdateToOneWithWhereWithoutCitiesInputSchema: z.ZodType<Prisma.CountyUpdateToOneWithWhereWithoutCitiesInput> = z.object({
  where: z.lazy(() => CountyWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => CountyUpdateWithoutCitiesInputSchema),z.lazy(() => CountyUncheckedUpdateWithoutCitiesInputSchema) ]),
}).strict();

export const CountyUpdateWithoutCitiesInputSchema: z.ZodType<Prisma.CountyUpdateWithoutCitiesInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  code: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const CountyUncheckedUpdateWithoutCitiesInputSchema: z.ZodType<Prisma.CountyUncheckedUpdateWithoutCitiesInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  code: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const UserCreateManyTenantInputSchema: z.ZodType<Prisma.UserCreateManyTenantInput> = z.object({
  id: z.string().cuid().optional(),
  index: z.number().int().optional(),
  role: z.lazy(() => RoleSchema).optional(),
  workingHours: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  specializationId: z.string().optional().nullable(),
  profileId: z.string(),
  deletedAt: z.coerce.date().optional().nullable(),
  activatedAt: z.coerce.date().optional().nullable(),
  lastLoginAt: z.coerce.date().optional().nullable(),
  bannedAt: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const SpecializationCreateManyTenantInputSchema: z.ZodType<Prisma.SpecializationCreateManyTenantInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const ProfileCreateManyPreferredTenantInputSchema: z.ZodType<Prisma.ProfileCreateManyPreferredTenantInput> = z.object({
  id: z.string().cuid().optional(),
  title: z.string().optional().nullable(),
  firstName: z.string(),
  lastName: z.string(),
  email: z.string(),
  phone: z.string().optional().nullable(),
  avatar: z.string().optional().nullable(),
  stripeCustomerId: z.string(),
  stripeFreeTrialUsed: z.boolean().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const PatientCreateManyTenantInputSchema: z.ZodType<Prisma.PatientCreateManyTenantInput> = z.object({
  id: z.string().cuid().optional(),
  firstName: z.string(),
  lastName: z.string(),
  gender: z.string().optional().nullable(),
  dob: z.coerce.date().optional().nullable(),
  email: z.string().optional().nullable(),
  phone: z.string().optional().nullable(),
  city: z.string().optional().nullable(),
  county: z.string().optional().nullable(),
  status: z.lazy(() => StatusSchema).optional(),
  smsNotifications: z.boolean().optional(),
  emailNotifications: z.boolean().optional(),
  userId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const ProductCreateManyTenantInputSchema: z.ZodType<Prisma.ProductCreateManyTenantInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  price: z.number().int(),
  image: z.string().optional().nullable(),
  tags: z.union([ z.lazy(() => ProductCreatetagsInputSchema),z.string().array() ]).optional(),
  isActive: z.boolean().optional(),
  isDeleted: z.boolean().optional(),
  categoryId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const EventCreateManyTenantInputSchema: z.ZodType<Prisma.EventCreateManyTenantInput> = z.object({
  id: z.string().cuid().optional(),
  title: z.string(),
  description: z.string().optional().nullable(),
  date: z.coerce.date(),
  start: z.coerce.date().optional().nullable(),
  end: z.coerce.date().optional().nullable(),
  allDay: z.boolean().optional(),
  type: z.lazy(() => EventTypeSchema).optional(),
  status: z.lazy(() => EventStatusSchema).optional(),
  patientId: z.string().optional().nullable(),
  userId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const UserUpdateWithoutTenantInputSchema: z.ZodType<Prisma.UserUpdateWithoutTenantInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  index: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.lazy(() => RoleSchema),z.lazy(() => EnumRoleFieldUpdateOperationsInputSchema) ]).optional(),
  workingHours: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  activatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastLoginAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bannedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  specialization: z.lazy(() => SpecializationUpdateOneWithoutUsersNestedInputSchema).optional(),
  profile: z.lazy(() => ProfileUpdateOneRequiredWithoutUsersNestedInputSchema).optional(),
  invitation: z.lazy(() => InvitationUpdateOneWithoutUserNestedInputSchema).optional(),
  tokens: z.lazy(() => TokenUpdateManyWithoutUserNestedInputSchema).optional(),
  patients: z.lazy(() => PatientUpdateManyWithoutUserNestedInputSchema).optional(),
  events: z.lazy(() => EventUpdateManyWithoutUserNestedInputSchema).optional(),
  eventActions: z.lazy(() => EventActionUpdateManyWithoutUserNestedInputSchema).optional(),
  treatmentPlans: z.lazy(() => TreatmentPlanUpdateManyWithoutUserNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUpdateManyWithoutInvitedByNestedInputSchema).optional()
}).strict();

export const UserUncheckedUpdateWithoutTenantInputSchema: z.ZodType<Prisma.UserUncheckedUpdateWithoutTenantInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  index: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.lazy(() => RoleSchema),z.lazy(() => EnumRoleFieldUpdateOperationsInputSchema) ]).optional(),
  workingHours: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  specializationId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  profileId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  activatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastLoginAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bannedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  invitation: z.lazy(() => InvitationUncheckedUpdateOneWithoutUserNestedInputSchema).optional(),
  tokens: z.lazy(() => TokenUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  patients: z.lazy(() => PatientUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  events: z.lazy(() => EventUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  eventActions: z.lazy(() => EventActionUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  treatmentPlans: z.lazy(() => TreatmentPlanUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedUpdateManyWithoutInvitedByNestedInputSchema).optional()
}).strict();

export const UserUncheckedUpdateManyWithoutTenantInputSchema: z.ZodType<Prisma.UserUncheckedUpdateManyWithoutTenantInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  index: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.lazy(() => RoleSchema),z.lazy(() => EnumRoleFieldUpdateOperationsInputSchema) ]).optional(),
  workingHours: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  specializationId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  profileId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  activatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastLoginAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bannedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const SpecializationUpdateWithoutTenantInputSchema: z.ZodType<Prisma.SpecializationUpdateWithoutTenantInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  users: z.lazy(() => UserUpdateManyWithoutSpecializationNestedInputSchema).optional()
}).strict();

export const SpecializationUncheckedUpdateWithoutTenantInputSchema: z.ZodType<Prisma.SpecializationUncheckedUpdateWithoutTenantInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  users: z.lazy(() => UserUncheckedUpdateManyWithoutSpecializationNestedInputSchema).optional()
}).strict();

export const SpecializationUncheckedUpdateManyWithoutTenantInputSchema: z.ZodType<Prisma.SpecializationUncheckedUpdateManyWithoutTenantInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ProfileUpdateWithoutPreferredTenantInputSchema: z.ZodType<Prisma.ProfileUpdateWithoutPreferredTenantInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  title: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  firstName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  lastName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  avatar: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  stripeCustomerId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  stripeFreeTrialUsed: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  users: z.lazy(() => UserUpdateManyWithoutProfileNestedInputSchema).optional(),
  auth: z.lazy(() => AccountAuthUpdateManyWithoutProfileNestedInputSchema).optional()
}).strict();

export const ProfileUncheckedUpdateWithoutPreferredTenantInputSchema: z.ZodType<Prisma.ProfileUncheckedUpdateWithoutPreferredTenantInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  title: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  firstName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  lastName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  avatar: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  stripeCustomerId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  stripeFreeTrialUsed: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  users: z.lazy(() => UserUncheckedUpdateManyWithoutProfileNestedInputSchema).optional(),
  auth: z.lazy(() => AccountAuthUncheckedUpdateManyWithoutProfileNestedInputSchema).optional()
}).strict();

export const ProfileUncheckedUpdateManyWithoutPreferredTenantInputSchema: z.ZodType<Prisma.ProfileUncheckedUpdateManyWithoutPreferredTenantInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  title: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  firstName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  lastName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  avatar: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  stripeCustomerId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  stripeFreeTrialUsed: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const PatientUpdateWithoutTenantInputSchema: z.ZodType<Prisma.PatientUpdateWithoutTenantInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  firstName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  lastName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  gender: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  dob: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  city: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  county: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.lazy(() => StatusSchema),z.lazy(() => EnumStatusFieldUpdateOperationsInputSchema) ]).optional(),
  smsNotifications: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  emailNotifications: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  user: z.lazy(() => UserUpdateOneRequiredWithoutPatientsNestedInputSchema).optional(),
  appointments: z.lazy(() => EventUpdateManyWithoutPatientNestedInputSchema).optional(),
  treatmentPlans: z.lazy(() => TreatmentPlanUpdateManyWithoutPatientNestedInputSchema).optional()
}).strict();

export const PatientUncheckedUpdateWithoutTenantInputSchema: z.ZodType<Prisma.PatientUncheckedUpdateWithoutTenantInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  firstName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  lastName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  gender: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  dob: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  city: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  county: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.lazy(() => StatusSchema),z.lazy(() => EnumStatusFieldUpdateOperationsInputSchema) ]).optional(),
  smsNotifications: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  emailNotifications: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  appointments: z.lazy(() => EventUncheckedUpdateManyWithoutPatientNestedInputSchema).optional(),
  treatmentPlans: z.lazy(() => TreatmentPlanUncheckedUpdateManyWithoutPatientNestedInputSchema).optional()
}).strict();

export const PatientUncheckedUpdateManyWithoutTenantInputSchema: z.ZodType<Prisma.PatientUncheckedUpdateManyWithoutTenantInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  firstName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  lastName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  gender: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  dob: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  city: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  county: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.lazy(() => StatusSchema),z.lazy(() => EnumStatusFieldUpdateOperationsInputSchema) ]).optional(),
  smsNotifications: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  emailNotifications: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ProductUpdateWithoutTenantInputSchema: z.ZodType<Prisma.ProductUpdateWithoutTenantInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  price: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  image: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tags: z.union([ z.lazy(() => ProductUpdatetagsInputSchema),z.string().array() ]).optional(),
  isActive: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  isDeleted: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  priceHistory: z.lazy(() => PriceUpdateManyWithoutProductNestedInputSchema).optional(),
  treatments: z.lazy(() => TreatmentUpdateManyWithoutProductNestedInputSchema).optional(),
  category: z.lazy(() => ProductCategoryUpdateOneWithoutProductsNestedInputSchema).optional()
}).strict();

export const ProductUncheckedUpdateWithoutTenantInputSchema: z.ZodType<Prisma.ProductUncheckedUpdateWithoutTenantInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  price: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  image: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tags: z.union([ z.lazy(() => ProductUpdatetagsInputSchema),z.string().array() ]).optional(),
  isActive: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  isDeleted: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  categoryId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  priceHistory: z.lazy(() => PriceUncheckedUpdateManyWithoutProductNestedInputSchema).optional(),
  treatments: z.lazy(() => TreatmentUncheckedUpdateManyWithoutProductNestedInputSchema).optional()
}).strict();

export const ProductUncheckedUpdateManyWithoutTenantInputSchema: z.ZodType<Prisma.ProductUncheckedUpdateManyWithoutTenantInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  price: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  image: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tags: z.union([ z.lazy(() => ProductUpdatetagsInputSchema),z.string().array() ]).optional(),
  isActive: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  isDeleted: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  categoryId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const EventUpdateWithoutTenantInputSchema: z.ZodType<Prisma.EventUpdateWithoutTenantInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  title: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  start: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  end: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  allDay: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => EventTypeSchema),z.lazy(() => EnumEventTypeFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => EventStatusSchema),z.lazy(() => EnumEventStatusFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  actions: z.lazy(() => EventActionUpdateManyWithoutEventNestedInputSchema).optional(),
  treatments: z.lazy(() => TreatmentUpdateManyWithoutEventNestedInputSchema).optional(),
  patient: z.lazy(() => PatientUpdateOneWithoutAppointmentsNestedInputSchema).optional(),
  user: z.lazy(() => UserUpdateOneRequiredWithoutEventsNestedInputSchema).optional()
}).strict();

export const EventUncheckedUpdateWithoutTenantInputSchema: z.ZodType<Prisma.EventUncheckedUpdateWithoutTenantInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  title: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  start: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  end: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  allDay: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => EventTypeSchema),z.lazy(() => EnumEventTypeFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => EventStatusSchema),z.lazy(() => EnumEventStatusFieldUpdateOperationsInputSchema) ]).optional(),
  patientId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  actions: z.lazy(() => EventActionUncheckedUpdateManyWithoutEventNestedInputSchema).optional(),
  treatments: z.lazy(() => TreatmentUncheckedUpdateManyWithoutEventNestedInputSchema).optional()
}).strict();

export const EventUncheckedUpdateManyWithoutTenantInputSchema: z.ZodType<Prisma.EventUncheckedUpdateManyWithoutTenantInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  title: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  start: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  end: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  allDay: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => EventTypeSchema),z.lazy(() => EnumEventTypeFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => EventStatusSchema),z.lazy(() => EnumEventStatusFieldUpdateOperationsInputSchema) ]).optional(),
  patientId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const TokenCreateManyUserInputSchema: z.ZodType<Prisma.TokenCreateManyUserInput> = z.object({
  id: z.string().cuid().optional(),
  type: z.lazy(() => TokenTypeSchema),
  token: z.string(),
  expires: z.coerce.date()
}).strict();

export const PatientCreateManyUserInputSchema: z.ZodType<Prisma.PatientCreateManyUserInput> = z.object({
  id: z.string().cuid().optional(),
  firstName: z.string(),
  lastName: z.string(),
  gender: z.string().optional().nullable(),
  dob: z.coerce.date().optional().nullable(),
  email: z.string().optional().nullable(),
  phone: z.string().optional().nullable(),
  city: z.string().optional().nullable(),
  county: z.string().optional().nullable(),
  status: z.lazy(() => StatusSchema).optional(),
  smsNotifications: z.boolean().optional(),
  emailNotifications: z.boolean().optional(),
  tenantId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const EventCreateManyUserInputSchema: z.ZodType<Prisma.EventCreateManyUserInput> = z.object({
  id: z.string().cuid().optional(),
  title: z.string(),
  description: z.string().optional().nullable(),
  date: z.coerce.date(),
  start: z.coerce.date().optional().nullable(),
  end: z.coerce.date().optional().nullable(),
  allDay: z.boolean().optional(),
  type: z.lazy(() => EventTypeSchema).optional(),
  status: z.lazy(() => EventStatusSchema).optional(),
  patientId: z.string().optional().nullable(),
  tenantId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const EventActionCreateManyUserInputSchema: z.ZodType<Prisma.EventActionCreateManyUserInput> = z.object({
  id: z.string().cuid().optional(),
  data: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  eventId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const TreatmentPlanCreateManyUserInputSchema: z.ZodType<Prisma.TreatmentPlanCreateManyUserInput> = z.object({
  id: z.string().cuid().optional(),
  description: z.string().optional().nullable(),
  isDone: z.boolean().optional(),
  patientId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const InvitationCreateManyInvitedByInputSchema: z.ZodType<Prisma.InvitationCreateManyInvitedByInput> = z.object({
  id: z.string().cuid().optional(),
  email: z.string(),
  role: z.lazy(() => RoleSchema),
  token: z.string(),
  expires: z.coerce.date(),
  userId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const TokenUpdateWithoutUserInputSchema: z.ZodType<Prisma.TokenUpdateWithoutUserInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => TokenTypeSchema),z.lazy(() => EnumTokenTypeFieldUpdateOperationsInputSchema) ]).optional(),
  token: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  expires: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const TokenUncheckedUpdateWithoutUserInputSchema: z.ZodType<Prisma.TokenUncheckedUpdateWithoutUserInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => TokenTypeSchema),z.lazy(() => EnumTokenTypeFieldUpdateOperationsInputSchema) ]).optional(),
  token: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  expires: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const TokenUncheckedUpdateManyWithoutUserInputSchema: z.ZodType<Prisma.TokenUncheckedUpdateManyWithoutUserInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => TokenTypeSchema),z.lazy(() => EnumTokenTypeFieldUpdateOperationsInputSchema) ]).optional(),
  token: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  expires: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const PatientUpdateWithoutUserInputSchema: z.ZodType<Prisma.PatientUpdateWithoutUserInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  firstName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  lastName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  gender: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  dob: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  city: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  county: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.lazy(() => StatusSchema),z.lazy(() => EnumStatusFieldUpdateOperationsInputSchema) ]).optional(),
  smsNotifications: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  emailNotifications: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  tenant: z.lazy(() => TenantUpdateOneRequiredWithoutPatientsNestedInputSchema).optional(),
  appointments: z.lazy(() => EventUpdateManyWithoutPatientNestedInputSchema).optional(),
  treatmentPlans: z.lazy(() => TreatmentPlanUpdateManyWithoutPatientNestedInputSchema).optional()
}).strict();

export const PatientUncheckedUpdateWithoutUserInputSchema: z.ZodType<Prisma.PatientUncheckedUpdateWithoutUserInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  firstName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  lastName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  gender: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  dob: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  city: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  county: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.lazy(() => StatusSchema),z.lazy(() => EnumStatusFieldUpdateOperationsInputSchema) ]).optional(),
  smsNotifications: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  emailNotifications: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  tenantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  appointments: z.lazy(() => EventUncheckedUpdateManyWithoutPatientNestedInputSchema).optional(),
  treatmentPlans: z.lazy(() => TreatmentPlanUncheckedUpdateManyWithoutPatientNestedInputSchema).optional()
}).strict();

export const PatientUncheckedUpdateManyWithoutUserInputSchema: z.ZodType<Prisma.PatientUncheckedUpdateManyWithoutUserInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  firstName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  lastName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  gender: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  dob: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  city: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  county: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.lazy(() => StatusSchema),z.lazy(() => EnumStatusFieldUpdateOperationsInputSchema) ]).optional(),
  smsNotifications: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  emailNotifications: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  tenantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const EventUpdateWithoutUserInputSchema: z.ZodType<Prisma.EventUpdateWithoutUserInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  title: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  start: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  end: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  allDay: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => EventTypeSchema),z.lazy(() => EnumEventTypeFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => EventStatusSchema),z.lazy(() => EnumEventStatusFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  actions: z.lazy(() => EventActionUpdateManyWithoutEventNestedInputSchema).optional(),
  treatments: z.lazy(() => TreatmentUpdateManyWithoutEventNestedInputSchema).optional(),
  patient: z.lazy(() => PatientUpdateOneWithoutAppointmentsNestedInputSchema).optional(),
  tenant: z.lazy(() => TenantUpdateOneRequiredWithoutEventsNestedInputSchema).optional()
}).strict();

export const EventUncheckedUpdateWithoutUserInputSchema: z.ZodType<Prisma.EventUncheckedUpdateWithoutUserInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  title: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  start: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  end: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  allDay: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => EventTypeSchema),z.lazy(() => EnumEventTypeFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => EventStatusSchema),z.lazy(() => EnumEventStatusFieldUpdateOperationsInputSchema) ]).optional(),
  patientId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tenantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  actions: z.lazy(() => EventActionUncheckedUpdateManyWithoutEventNestedInputSchema).optional(),
  treatments: z.lazy(() => TreatmentUncheckedUpdateManyWithoutEventNestedInputSchema).optional()
}).strict();

export const EventUncheckedUpdateManyWithoutUserInputSchema: z.ZodType<Prisma.EventUncheckedUpdateManyWithoutUserInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  title: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  start: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  end: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  allDay: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => EventTypeSchema),z.lazy(() => EnumEventTypeFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => EventStatusSchema),z.lazy(() => EnumEventStatusFieldUpdateOperationsInputSchema) ]).optional(),
  patientId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tenantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const EventActionUpdateWithoutUserInputSchema: z.ZodType<Prisma.EventActionUpdateWithoutUserInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  data: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  event: z.lazy(() => EventUpdateOneRequiredWithoutActionsNestedInputSchema).optional()
}).strict();

export const EventActionUncheckedUpdateWithoutUserInputSchema: z.ZodType<Prisma.EventActionUncheckedUpdateWithoutUserInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  data: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  eventId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const EventActionUncheckedUpdateManyWithoutUserInputSchema: z.ZodType<Prisma.EventActionUncheckedUpdateManyWithoutUserInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  data: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  eventId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const TreatmentPlanUpdateWithoutUserInputSchema: z.ZodType<Prisma.TreatmentPlanUpdateWithoutUserInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isDone: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  treatments: z.lazy(() => TreatmentUpdateManyWithoutTreatmentPlanNestedInputSchema).optional(),
  patient: z.lazy(() => PatientUpdateOneRequiredWithoutTreatmentPlansNestedInputSchema).optional()
}).strict();

export const TreatmentPlanUncheckedUpdateWithoutUserInputSchema: z.ZodType<Prisma.TreatmentPlanUncheckedUpdateWithoutUserInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isDone: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  patientId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  treatments: z.lazy(() => TreatmentUncheckedUpdateManyWithoutTreatmentPlanNestedInputSchema).optional()
}).strict();

export const TreatmentPlanUncheckedUpdateManyWithoutUserInputSchema: z.ZodType<Prisma.TreatmentPlanUncheckedUpdateManyWithoutUserInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isDone: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  patientId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const InvitationUpdateWithoutInvitedByInputSchema: z.ZodType<Prisma.InvitationUpdateWithoutInvitedByInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.lazy(() => RoleSchema),z.lazy(() => EnumRoleFieldUpdateOperationsInputSchema) ]).optional(),
  token: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  expires: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  user: z.lazy(() => UserUpdateOneWithoutInvitationNestedInputSchema).optional()
}).strict();

export const InvitationUncheckedUpdateWithoutInvitedByInputSchema: z.ZodType<Prisma.InvitationUncheckedUpdateWithoutInvitedByInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.lazy(() => RoleSchema),z.lazy(() => EnumRoleFieldUpdateOperationsInputSchema) ]).optional(),
  token: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  expires: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const InvitationUncheckedUpdateManyWithoutInvitedByInputSchema: z.ZodType<Prisma.InvitationUncheckedUpdateManyWithoutInvitedByInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.lazy(() => RoleSchema),z.lazy(() => EnumRoleFieldUpdateOperationsInputSchema) ]).optional(),
  token: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  expires: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const UserCreateManyProfileInputSchema: z.ZodType<Prisma.UserCreateManyProfileInput> = z.object({
  id: z.string().cuid().optional(),
  index: z.number().int().optional(),
  role: z.lazy(() => RoleSchema).optional(),
  workingHours: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  specializationId: z.string().optional().nullable(),
  tenantId: z.string(),
  deletedAt: z.coerce.date().optional().nullable(),
  activatedAt: z.coerce.date().optional().nullable(),
  lastLoginAt: z.coerce.date().optional().nullable(),
  bannedAt: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const AccountAuthCreateManyProfileInputSchema: z.ZodType<Prisma.AccountAuthCreateManyProfileInput> = z.object({
  id: z.string().cuid().optional(),
  type: z.string(),
  provider: z.string(),
  passwordHash: z.string().optional().nullable(),
  refresh_token: z.string().optional().nullable(),
  access_token: z.string().optional().nullable(),
  expires_at: z.coerce.date().optional().nullable(),
  refresh_token_expires_in: z.number().int().optional().nullable(),
  token_type: z.string().optional().nullable(),
  scope: z.string().optional().nullable(),
  id_token: z.string().optional().nullable(),
  session_state: z.string().optional().nullable()
}).strict();

export const UserUpdateWithoutProfileInputSchema: z.ZodType<Prisma.UserUpdateWithoutProfileInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  index: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.lazy(() => RoleSchema),z.lazy(() => EnumRoleFieldUpdateOperationsInputSchema) ]).optional(),
  workingHours: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  activatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastLoginAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bannedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  specialization: z.lazy(() => SpecializationUpdateOneWithoutUsersNestedInputSchema).optional(),
  tenant: z.lazy(() => TenantUpdateOneRequiredWithoutUsersNestedInputSchema).optional(),
  invitation: z.lazy(() => InvitationUpdateOneWithoutUserNestedInputSchema).optional(),
  tokens: z.lazy(() => TokenUpdateManyWithoutUserNestedInputSchema).optional(),
  patients: z.lazy(() => PatientUpdateManyWithoutUserNestedInputSchema).optional(),
  events: z.lazy(() => EventUpdateManyWithoutUserNestedInputSchema).optional(),
  eventActions: z.lazy(() => EventActionUpdateManyWithoutUserNestedInputSchema).optional(),
  treatmentPlans: z.lazy(() => TreatmentPlanUpdateManyWithoutUserNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUpdateManyWithoutInvitedByNestedInputSchema).optional()
}).strict();

export const UserUncheckedUpdateWithoutProfileInputSchema: z.ZodType<Prisma.UserUncheckedUpdateWithoutProfileInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  index: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.lazy(() => RoleSchema),z.lazy(() => EnumRoleFieldUpdateOperationsInputSchema) ]).optional(),
  workingHours: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  specializationId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tenantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  activatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastLoginAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bannedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  invitation: z.lazy(() => InvitationUncheckedUpdateOneWithoutUserNestedInputSchema).optional(),
  tokens: z.lazy(() => TokenUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  patients: z.lazy(() => PatientUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  events: z.lazy(() => EventUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  eventActions: z.lazy(() => EventActionUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  treatmentPlans: z.lazy(() => TreatmentPlanUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedUpdateManyWithoutInvitedByNestedInputSchema).optional()
}).strict();

export const UserUncheckedUpdateManyWithoutProfileInputSchema: z.ZodType<Prisma.UserUncheckedUpdateManyWithoutProfileInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  index: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.lazy(() => RoleSchema),z.lazy(() => EnumRoleFieldUpdateOperationsInputSchema) ]).optional(),
  workingHours: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  specializationId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tenantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  activatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastLoginAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bannedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const AccountAuthUpdateWithoutProfileInputSchema: z.ZodType<Prisma.AccountAuthUpdateWithoutProfileInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  provider: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  passwordHash: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  refresh_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  access_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  expires_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  refresh_token_expires_in: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  token_type: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  scope: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  id_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  session_state: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const AccountAuthUncheckedUpdateWithoutProfileInputSchema: z.ZodType<Prisma.AccountAuthUncheckedUpdateWithoutProfileInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  provider: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  passwordHash: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  refresh_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  access_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  expires_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  refresh_token_expires_in: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  token_type: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  scope: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  id_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  session_state: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const AccountAuthUncheckedUpdateManyWithoutProfileInputSchema: z.ZodType<Prisma.AccountAuthUncheckedUpdateManyWithoutProfileInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  provider: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  passwordHash: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  refresh_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  access_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  expires_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  refresh_token_expires_in: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  token_type: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  scope: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  id_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  session_state: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const TenantProfileCreateManyPlanInputSchema: z.ZodType<Prisma.TenantProfileCreateManyPlanInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  county: z.string().optional().nullable(),
  address: z.string().optional().nullable(),
  zip: z.string().optional().nullable(),
  phone: z.string().optional().nullable(),
  avatar: z.string().optional().nullable(),
  size: z.string().optional().nullable(),
  stripeSubscriptionId: z.string(),
  activeSubscription: z.boolean().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const TenantProfileUpdateWithoutPlanInputSchema: z.ZodType<Prisma.TenantProfileUpdateWithoutPlanInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  county: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  address: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  zip: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  avatar: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  size: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  stripeSubscriptionId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  activeSubscription: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  tenant: z.lazy(() => TenantUpdateOneWithoutProfileNestedInputSchema).optional()
}).strict();

export const TenantProfileUncheckedUpdateWithoutPlanInputSchema: z.ZodType<Prisma.TenantProfileUncheckedUpdateWithoutPlanInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  county: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  address: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  zip: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  avatar: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  size: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  stripeSubscriptionId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  activeSubscription: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  tenant: z.lazy(() => TenantUncheckedUpdateOneWithoutProfileNestedInputSchema).optional()
}).strict();

export const TenantProfileUncheckedUpdateManyWithoutPlanInputSchema: z.ZodType<Prisma.TenantProfileUncheckedUpdateManyWithoutPlanInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  county: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  address: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  zip: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  avatar: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  size: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  stripeSubscriptionId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  activeSubscription: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const EventCreateManyPatientInputSchema: z.ZodType<Prisma.EventCreateManyPatientInput> = z.object({
  id: z.string().cuid().optional(),
  title: z.string(),
  description: z.string().optional().nullable(),
  date: z.coerce.date(),
  start: z.coerce.date().optional().nullable(),
  end: z.coerce.date().optional().nullable(),
  allDay: z.boolean().optional(),
  type: z.lazy(() => EventTypeSchema).optional(),
  status: z.lazy(() => EventStatusSchema).optional(),
  userId: z.string(),
  tenantId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const TreatmentPlanCreateManyPatientInputSchema: z.ZodType<Prisma.TreatmentPlanCreateManyPatientInput> = z.object({
  id: z.string().cuid().optional(),
  description: z.string().optional().nullable(),
  isDone: z.boolean().optional(),
  userId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const EventUpdateWithoutPatientInputSchema: z.ZodType<Prisma.EventUpdateWithoutPatientInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  title: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  start: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  end: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  allDay: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => EventTypeSchema),z.lazy(() => EnumEventTypeFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => EventStatusSchema),z.lazy(() => EnumEventStatusFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  actions: z.lazy(() => EventActionUpdateManyWithoutEventNestedInputSchema).optional(),
  treatments: z.lazy(() => TreatmentUpdateManyWithoutEventNestedInputSchema).optional(),
  user: z.lazy(() => UserUpdateOneRequiredWithoutEventsNestedInputSchema).optional(),
  tenant: z.lazy(() => TenantUpdateOneRequiredWithoutEventsNestedInputSchema).optional()
}).strict();

export const EventUncheckedUpdateWithoutPatientInputSchema: z.ZodType<Prisma.EventUncheckedUpdateWithoutPatientInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  title: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  start: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  end: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  allDay: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => EventTypeSchema),z.lazy(() => EnumEventTypeFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => EventStatusSchema),z.lazy(() => EnumEventStatusFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  tenantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  actions: z.lazy(() => EventActionUncheckedUpdateManyWithoutEventNestedInputSchema).optional(),
  treatments: z.lazy(() => TreatmentUncheckedUpdateManyWithoutEventNestedInputSchema).optional()
}).strict();

export const EventUncheckedUpdateManyWithoutPatientInputSchema: z.ZodType<Prisma.EventUncheckedUpdateManyWithoutPatientInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  title: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  start: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  end: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  allDay: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => EventTypeSchema),z.lazy(() => EnumEventTypeFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => EventStatusSchema),z.lazy(() => EnumEventStatusFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  tenantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const TreatmentPlanUpdateWithoutPatientInputSchema: z.ZodType<Prisma.TreatmentPlanUpdateWithoutPatientInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isDone: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  treatments: z.lazy(() => TreatmentUpdateManyWithoutTreatmentPlanNestedInputSchema).optional(),
  user: z.lazy(() => UserUpdateOneRequiredWithoutTreatmentPlansNestedInputSchema).optional()
}).strict();

export const TreatmentPlanUncheckedUpdateWithoutPatientInputSchema: z.ZodType<Prisma.TreatmentPlanUncheckedUpdateWithoutPatientInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isDone: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  treatments: z.lazy(() => TreatmentUncheckedUpdateManyWithoutTreatmentPlanNestedInputSchema).optional()
}).strict();

export const TreatmentPlanUncheckedUpdateManyWithoutPatientInputSchema: z.ZodType<Prisma.TreatmentPlanUncheckedUpdateManyWithoutPatientInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isDone: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const UserCreateManySpecializationInputSchema: z.ZodType<Prisma.UserCreateManySpecializationInput> = z.object({
  id: z.string().cuid().optional(),
  index: z.number().int().optional(),
  role: z.lazy(() => RoleSchema).optional(),
  workingHours: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  profileId: z.string(),
  tenantId: z.string(),
  deletedAt: z.coerce.date().optional().nullable(),
  activatedAt: z.coerce.date().optional().nullable(),
  lastLoginAt: z.coerce.date().optional().nullable(),
  bannedAt: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const UserUpdateWithoutSpecializationInputSchema: z.ZodType<Prisma.UserUpdateWithoutSpecializationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  index: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.lazy(() => RoleSchema),z.lazy(() => EnumRoleFieldUpdateOperationsInputSchema) ]).optional(),
  workingHours: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  activatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastLoginAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bannedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  profile: z.lazy(() => ProfileUpdateOneRequiredWithoutUsersNestedInputSchema).optional(),
  tenant: z.lazy(() => TenantUpdateOneRequiredWithoutUsersNestedInputSchema).optional(),
  invitation: z.lazy(() => InvitationUpdateOneWithoutUserNestedInputSchema).optional(),
  tokens: z.lazy(() => TokenUpdateManyWithoutUserNestedInputSchema).optional(),
  patients: z.lazy(() => PatientUpdateManyWithoutUserNestedInputSchema).optional(),
  events: z.lazy(() => EventUpdateManyWithoutUserNestedInputSchema).optional(),
  eventActions: z.lazy(() => EventActionUpdateManyWithoutUserNestedInputSchema).optional(),
  treatmentPlans: z.lazy(() => TreatmentPlanUpdateManyWithoutUserNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUpdateManyWithoutInvitedByNestedInputSchema).optional()
}).strict();

export const UserUncheckedUpdateWithoutSpecializationInputSchema: z.ZodType<Prisma.UserUncheckedUpdateWithoutSpecializationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  index: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.lazy(() => RoleSchema),z.lazy(() => EnumRoleFieldUpdateOperationsInputSchema) ]).optional(),
  workingHours: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  profileId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  tenantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  activatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastLoginAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bannedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  invitation: z.lazy(() => InvitationUncheckedUpdateOneWithoutUserNestedInputSchema).optional(),
  tokens: z.lazy(() => TokenUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  patients: z.lazy(() => PatientUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  events: z.lazy(() => EventUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  eventActions: z.lazy(() => EventActionUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  treatmentPlans: z.lazy(() => TreatmentPlanUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedUpdateManyWithoutInvitedByNestedInputSchema).optional()
}).strict();

export const UserUncheckedUpdateManyWithoutSpecializationInputSchema: z.ZodType<Prisma.UserUncheckedUpdateManyWithoutSpecializationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  index: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.lazy(() => RoleSchema),z.lazy(() => EnumRoleFieldUpdateOperationsInputSchema) ]).optional(),
  workingHours: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  profileId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  tenantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  activatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastLoginAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bannedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const EventActionCreateManyEventInputSchema: z.ZodType<Prisma.EventActionCreateManyEventInput> = z.object({
  id: z.string().cuid().optional(),
  data: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  userId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const TreatmentCreateManyEventInputSchema: z.ZodType<Prisma.TreatmentCreateManyEventInput> = z.object({
  id: z.string().cuid().optional(),
  price: z.number().int(),
  toothNumber: z.number().int(),
  status: z.lazy(() => TreatmentStatusSchema).optional(),
  productId: z.string(),
  treatmentPlanId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const EventActionUpdateWithoutEventInputSchema: z.ZodType<Prisma.EventActionUpdateWithoutEventInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  data: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  user: z.lazy(() => UserUpdateOneRequiredWithoutEventActionsNestedInputSchema).optional()
}).strict();

export const EventActionUncheckedUpdateWithoutEventInputSchema: z.ZodType<Prisma.EventActionUncheckedUpdateWithoutEventInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  data: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const EventActionUncheckedUpdateManyWithoutEventInputSchema: z.ZodType<Prisma.EventActionUncheckedUpdateManyWithoutEventInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  data: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const TreatmentUpdateWithoutEventInputSchema: z.ZodType<Prisma.TreatmentUpdateWithoutEventInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  price: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  toothNumber: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => TreatmentStatusSchema),z.lazy(() => EnumTreatmentStatusFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  product: z.lazy(() => ProductUpdateOneRequiredWithoutTreatmentsNestedInputSchema).optional(),
  treatmentPlan: z.lazy(() => TreatmentPlanUpdateOneWithoutTreatmentsNestedInputSchema).optional()
}).strict();

export const TreatmentUncheckedUpdateWithoutEventInputSchema: z.ZodType<Prisma.TreatmentUncheckedUpdateWithoutEventInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  price: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  toothNumber: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => TreatmentStatusSchema),z.lazy(() => EnumTreatmentStatusFieldUpdateOperationsInputSchema) ]).optional(),
  productId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  treatmentPlanId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const TreatmentUncheckedUpdateManyWithoutEventInputSchema: z.ZodType<Prisma.TreatmentUncheckedUpdateManyWithoutEventInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  price: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  toothNumber: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => TreatmentStatusSchema),z.lazy(() => EnumTreatmentStatusFieldUpdateOperationsInputSchema) ]).optional(),
  productId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  treatmentPlanId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const PriceCreateManyProductInputSchema: z.ZodType<Prisma.PriceCreateManyProductInput> = z.object({
  id: z.string().cuid().optional(),
  value: z.number().int(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const TreatmentCreateManyProductInputSchema: z.ZodType<Prisma.TreatmentCreateManyProductInput> = z.object({
  id: z.string().cuid().optional(),
  price: z.number().int(),
  toothNumber: z.number().int(),
  status: z.lazy(() => TreatmentStatusSchema).optional(),
  treatmentPlanId: z.string().optional().nullable(),
  eventId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const PriceUpdateWithoutProductInputSchema: z.ZodType<Prisma.PriceUpdateWithoutProductInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  value: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const PriceUncheckedUpdateWithoutProductInputSchema: z.ZodType<Prisma.PriceUncheckedUpdateWithoutProductInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  value: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const PriceUncheckedUpdateManyWithoutProductInputSchema: z.ZodType<Prisma.PriceUncheckedUpdateManyWithoutProductInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  value: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const TreatmentUpdateWithoutProductInputSchema: z.ZodType<Prisma.TreatmentUpdateWithoutProductInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  price: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  toothNumber: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => TreatmentStatusSchema),z.lazy(() => EnumTreatmentStatusFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  treatmentPlan: z.lazy(() => TreatmentPlanUpdateOneWithoutTreatmentsNestedInputSchema).optional(),
  event: z.lazy(() => EventUpdateOneWithoutTreatmentsNestedInputSchema).optional()
}).strict();

export const TreatmentUncheckedUpdateWithoutProductInputSchema: z.ZodType<Prisma.TreatmentUncheckedUpdateWithoutProductInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  price: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  toothNumber: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => TreatmentStatusSchema),z.lazy(() => EnumTreatmentStatusFieldUpdateOperationsInputSchema) ]).optional(),
  treatmentPlanId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  eventId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const TreatmentUncheckedUpdateManyWithoutProductInputSchema: z.ZodType<Prisma.TreatmentUncheckedUpdateManyWithoutProductInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  price: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  toothNumber: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => TreatmentStatusSchema),z.lazy(() => EnumTreatmentStatusFieldUpdateOperationsInputSchema) ]).optional(),
  treatmentPlanId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  eventId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ProductCategoryCreateManyParentCategoryInputSchema: z.ZodType<Prisma.ProductCategoryCreateManyParentCategoryInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const ProductCreateManyCategoryInputSchema: z.ZodType<Prisma.ProductCreateManyCategoryInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  price: z.number().int(),
  image: z.string().optional().nullable(),
  tags: z.union([ z.lazy(() => ProductCreatetagsInputSchema),z.string().array() ]).optional(),
  isActive: z.boolean().optional(),
  isDeleted: z.boolean().optional(),
  tenantId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const ProductCategoryUpdateWithoutParentCategoryInputSchema: z.ZodType<Prisma.ProductCategoryUpdateWithoutParentCategoryInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  subcategories: z.lazy(() => ProductCategoryUpdateManyWithoutParentCategoryNestedInputSchema).optional(),
  products: z.lazy(() => ProductUpdateManyWithoutCategoryNestedInputSchema).optional()
}).strict();

export const ProductCategoryUncheckedUpdateWithoutParentCategoryInputSchema: z.ZodType<Prisma.ProductCategoryUncheckedUpdateWithoutParentCategoryInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  subcategories: z.lazy(() => ProductCategoryUncheckedUpdateManyWithoutParentCategoryNestedInputSchema).optional(),
  products: z.lazy(() => ProductUncheckedUpdateManyWithoutCategoryNestedInputSchema).optional()
}).strict();

export const ProductCategoryUncheckedUpdateManyWithoutParentCategoryInputSchema: z.ZodType<Prisma.ProductCategoryUncheckedUpdateManyWithoutParentCategoryInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ProductUpdateWithoutCategoryInputSchema: z.ZodType<Prisma.ProductUpdateWithoutCategoryInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  price: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  image: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tags: z.union([ z.lazy(() => ProductUpdatetagsInputSchema),z.string().array() ]).optional(),
  isActive: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  isDeleted: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  priceHistory: z.lazy(() => PriceUpdateManyWithoutProductNestedInputSchema).optional(),
  treatments: z.lazy(() => TreatmentUpdateManyWithoutProductNestedInputSchema).optional(),
  tenant: z.lazy(() => TenantUpdateOneRequiredWithoutProductsNestedInputSchema).optional()
}).strict();

export const ProductUncheckedUpdateWithoutCategoryInputSchema: z.ZodType<Prisma.ProductUncheckedUpdateWithoutCategoryInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  price: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  image: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tags: z.union([ z.lazy(() => ProductUpdatetagsInputSchema),z.string().array() ]).optional(),
  isActive: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  isDeleted: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  tenantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  priceHistory: z.lazy(() => PriceUncheckedUpdateManyWithoutProductNestedInputSchema).optional(),
  treatments: z.lazy(() => TreatmentUncheckedUpdateManyWithoutProductNestedInputSchema).optional()
}).strict();

export const ProductUncheckedUpdateManyWithoutCategoryInputSchema: z.ZodType<Prisma.ProductUncheckedUpdateManyWithoutCategoryInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  price: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  image: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tags: z.union([ z.lazy(() => ProductUpdatetagsInputSchema),z.string().array() ]).optional(),
  isActive: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  isDeleted: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  tenantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const TreatmentCreateManyTreatmentPlanInputSchema: z.ZodType<Prisma.TreatmentCreateManyTreatmentPlanInput> = z.object({
  id: z.string().cuid().optional(),
  price: z.number().int(),
  toothNumber: z.number().int(),
  status: z.lazy(() => TreatmentStatusSchema).optional(),
  productId: z.string(),
  eventId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const TreatmentUpdateWithoutTreatmentPlanInputSchema: z.ZodType<Prisma.TreatmentUpdateWithoutTreatmentPlanInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  price: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  toothNumber: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => TreatmentStatusSchema),z.lazy(() => EnumTreatmentStatusFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  product: z.lazy(() => ProductUpdateOneRequiredWithoutTreatmentsNestedInputSchema).optional(),
  event: z.lazy(() => EventUpdateOneWithoutTreatmentsNestedInputSchema).optional()
}).strict();

export const TreatmentUncheckedUpdateWithoutTreatmentPlanInputSchema: z.ZodType<Prisma.TreatmentUncheckedUpdateWithoutTreatmentPlanInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  price: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  toothNumber: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => TreatmentStatusSchema),z.lazy(() => EnumTreatmentStatusFieldUpdateOperationsInputSchema) ]).optional(),
  productId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  eventId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const TreatmentUncheckedUpdateManyWithoutTreatmentPlanInputSchema: z.ZodType<Prisma.TreatmentUncheckedUpdateManyWithoutTreatmentPlanInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  price: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  toothNumber: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => TreatmentStatusSchema),z.lazy(() => EnumTreatmentStatusFieldUpdateOperationsInputSchema) ]).optional(),
  productId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  eventId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const CityCreateManyCountyInputSchema: z.ZodType<Prisma.CityCreateManyCountyInput> = z.object({
  id: z.string().uuid().optional(),
  name: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const CityUpdateWithoutCountyInputSchema: z.ZodType<Prisma.CityUpdateWithoutCountyInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const CityUncheckedUpdateWithoutCountyInputSchema: z.ZodType<Prisma.CityUncheckedUpdateWithoutCountyInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const CityUncheckedUpdateManyWithoutCountyInputSchema: z.ZodType<Prisma.CityUncheckedUpdateManyWithoutCountyInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

/////////////////////////////////////////
// ARGS
/////////////////////////////////////////

export const TenantFindFirstArgsSchema: z.ZodType<Prisma.TenantFindFirstArgs> = z.object({
  select: TenantSelectSchema.optional(),
  include: TenantIncludeSchema.optional(),
  where: TenantWhereInputSchema.optional(),
  orderBy: z.union([ TenantOrderByWithRelationInputSchema.array(),TenantOrderByWithRelationInputSchema ]).optional(),
  cursor: TenantWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ TenantScalarFieldEnumSchema,TenantScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const TenantFindFirstOrThrowArgsSchema: z.ZodType<Prisma.TenantFindFirstOrThrowArgs> = z.object({
  select: TenantSelectSchema.optional(),
  include: TenantIncludeSchema.optional(),
  where: TenantWhereInputSchema.optional(),
  orderBy: z.union([ TenantOrderByWithRelationInputSchema.array(),TenantOrderByWithRelationInputSchema ]).optional(),
  cursor: TenantWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ TenantScalarFieldEnumSchema,TenantScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const TenantFindManyArgsSchema: z.ZodType<Prisma.TenantFindManyArgs> = z.object({
  select: TenantSelectSchema.optional(),
  include: TenantIncludeSchema.optional(),
  where: TenantWhereInputSchema.optional(),
  orderBy: z.union([ TenantOrderByWithRelationInputSchema.array(),TenantOrderByWithRelationInputSchema ]).optional(),
  cursor: TenantWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ TenantScalarFieldEnumSchema,TenantScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const TenantAggregateArgsSchema: z.ZodType<Prisma.TenantAggregateArgs> = z.object({
  where: TenantWhereInputSchema.optional(),
  orderBy: z.union([ TenantOrderByWithRelationInputSchema.array(),TenantOrderByWithRelationInputSchema ]).optional(),
  cursor: TenantWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const TenantGroupByArgsSchema: z.ZodType<Prisma.TenantGroupByArgs> = z.object({
  where: TenantWhereInputSchema.optional(),
  orderBy: z.union([ TenantOrderByWithAggregationInputSchema.array(),TenantOrderByWithAggregationInputSchema ]).optional(),
  by: TenantScalarFieldEnumSchema.array(),
  having: TenantScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const TenantFindUniqueArgsSchema: z.ZodType<Prisma.TenantFindUniqueArgs> = z.object({
  select: TenantSelectSchema.optional(),
  include: TenantIncludeSchema.optional(),
  where: TenantWhereUniqueInputSchema,
}).strict() ;

export const TenantFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.TenantFindUniqueOrThrowArgs> = z.object({
  select: TenantSelectSchema.optional(),
  include: TenantIncludeSchema.optional(),
  where: TenantWhereUniqueInputSchema,
}).strict() ;

export const TenantProfileFindFirstArgsSchema: z.ZodType<Prisma.TenantProfileFindFirstArgs> = z.object({
  select: TenantProfileSelectSchema.optional(),
  include: TenantProfileIncludeSchema.optional(),
  where: TenantProfileWhereInputSchema.optional(),
  orderBy: z.union([ TenantProfileOrderByWithRelationInputSchema.array(),TenantProfileOrderByWithRelationInputSchema ]).optional(),
  cursor: TenantProfileWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ TenantProfileScalarFieldEnumSchema,TenantProfileScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const TenantProfileFindFirstOrThrowArgsSchema: z.ZodType<Prisma.TenantProfileFindFirstOrThrowArgs> = z.object({
  select: TenantProfileSelectSchema.optional(),
  include: TenantProfileIncludeSchema.optional(),
  where: TenantProfileWhereInputSchema.optional(),
  orderBy: z.union([ TenantProfileOrderByWithRelationInputSchema.array(),TenantProfileOrderByWithRelationInputSchema ]).optional(),
  cursor: TenantProfileWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ TenantProfileScalarFieldEnumSchema,TenantProfileScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const TenantProfileFindManyArgsSchema: z.ZodType<Prisma.TenantProfileFindManyArgs> = z.object({
  select: TenantProfileSelectSchema.optional(),
  include: TenantProfileIncludeSchema.optional(),
  where: TenantProfileWhereInputSchema.optional(),
  orderBy: z.union([ TenantProfileOrderByWithRelationInputSchema.array(),TenantProfileOrderByWithRelationInputSchema ]).optional(),
  cursor: TenantProfileWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ TenantProfileScalarFieldEnumSchema,TenantProfileScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const TenantProfileAggregateArgsSchema: z.ZodType<Prisma.TenantProfileAggregateArgs> = z.object({
  where: TenantProfileWhereInputSchema.optional(),
  orderBy: z.union([ TenantProfileOrderByWithRelationInputSchema.array(),TenantProfileOrderByWithRelationInputSchema ]).optional(),
  cursor: TenantProfileWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const TenantProfileGroupByArgsSchema: z.ZodType<Prisma.TenantProfileGroupByArgs> = z.object({
  where: TenantProfileWhereInputSchema.optional(),
  orderBy: z.union([ TenantProfileOrderByWithAggregationInputSchema.array(),TenantProfileOrderByWithAggregationInputSchema ]).optional(),
  by: TenantProfileScalarFieldEnumSchema.array(),
  having: TenantProfileScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const TenantProfileFindUniqueArgsSchema: z.ZodType<Prisma.TenantProfileFindUniqueArgs> = z.object({
  select: TenantProfileSelectSchema.optional(),
  include: TenantProfileIncludeSchema.optional(),
  where: TenantProfileWhereUniqueInputSchema,
}).strict() ;

export const TenantProfileFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.TenantProfileFindUniqueOrThrowArgs> = z.object({
  select: TenantProfileSelectSchema.optional(),
  include: TenantProfileIncludeSchema.optional(),
  where: TenantProfileWhereUniqueInputSchema,
}).strict() ;

export const UserFindFirstArgsSchema: z.ZodType<Prisma.UserFindFirstArgs> = z.object({
  select: UserSelectSchema.optional(),
  include: UserIncludeSchema.optional(),
  where: UserWhereInputSchema.optional(),
  orderBy: z.union([ UserOrderByWithRelationInputSchema.array(),UserOrderByWithRelationInputSchema ]).optional(),
  cursor: UserWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ UserScalarFieldEnumSchema,UserScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const UserFindFirstOrThrowArgsSchema: z.ZodType<Prisma.UserFindFirstOrThrowArgs> = z.object({
  select: UserSelectSchema.optional(),
  include: UserIncludeSchema.optional(),
  where: UserWhereInputSchema.optional(),
  orderBy: z.union([ UserOrderByWithRelationInputSchema.array(),UserOrderByWithRelationInputSchema ]).optional(),
  cursor: UserWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ UserScalarFieldEnumSchema,UserScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const UserFindManyArgsSchema: z.ZodType<Prisma.UserFindManyArgs> = z.object({
  select: UserSelectSchema.optional(),
  include: UserIncludeSchema.optional(),
  where: UserWhereInputSchema.optional(),
  orderBy: z.union([ UserOrderByWithRelationInputSchema.array(),UserOrderByWithRelationInputSchema ]).optional(),
  cursor: UserWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ UserScalarFieldEnumSchema,UserScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const UserAggregateArgsSchema: z.ZodType<Prisma.UserAggregateArgs> = z.object({
  where: UserWhereInputSchema.optional(),
  orderBy: z.union([ UserOrderByWithRelationInputSchema.array(),UserOrderByWithRelationInputSchema ]).optional(),
  cursor: UserWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const UserGroupByArgsSchema: z.ZodType<Prisma.UserGroupByArgs> = z.object({
  where: UserWhereInputSchema.optional(),
  orderBy: z.union([ UserOrderByWithAggregationInputSchema.array(),UserOrderByWithAggregationInputSchema ]).optional(),
  by: UserScalarFieldEnumSchema.array(),
  having: UserScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const UserFindUniqueArgsSchema: z.ZodType<Prisma.UserFindUniqueArgs> = z.object({
  select: UserSelectSchema.optional(),
  include: UserIncludeSchema.optional(),
  where: UserWhereUniqueInputSchema,
}).strict() ;

export const UserFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.UserFindUniqueOrThrowArgs> = z.object({
  select: UserSelectSchema.optional(),
  include: UserIncludeSchema.optional(),
  where: UserWhereUniqueInputSchema,
}).strict() ;

export const ProfileFindFirstArgsSchema: z.ZodType<Prisma.ProfileFindFirstArgs> = z.object({
  select: ProfileSelectSchema.optional(),
  include: ProfileIncludeSchema.optional(),
  where: ProfileWhereInputSchema.optional(),
  orderBy: z.union([ ProfileOrderByWithRelationInputSchema.array(),ProfileOrderByWithRelationInputSchema ]).optional(),
  cursor: ProfileWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ProfileScalarFieldEnumSchema,ProfileScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const ProfileFindFirstOrThrowArgsSchema: z.ZodType<Prisma.ProfileFindFirstOrThrowArgs> = z.object({
  select: ProfileSelectSchema.optional(),
  include: ProfileIncludeSchema.optional(),
  where: ProfileWhereInputSchema.optional(),
  orderBy: z.union([ ProfileOrderByWithRelationInputSchema.array(),ProfileOrderByWithRelationInputSchema ]).optional(),
  cursor: ProfileWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ProfileScalarFieldEnumSchema,ProfileScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const ProfileFindManyArgsSchema: z.ZodType<Prisma.ProfileFindManyArgs> = z.object({
  select: ProfileSelectSchema.optional(),
  include: ProfileIncludeSchema.optional(),
  where: ProfileWhereInputSchema.optional(),
  orderBy: z.union([ ProfileOrderByWithRelationInputSchema.array(),ProfileOrderByWithRelationInputSchema ]).optional(),
  cursor: ProfileWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ProfileScalarFieldEnumSchema,ProfileScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const ProfileAggregateArgsSchema: z.ZodType<Prisma.ProfileAggregateArgs> = z.object({
  where: ProfileWhereInputSchema.optional(),
  orderBy: z.union([ ProfileOrderByWithRelationInputSchema.array(),ProfileOrderByWithRelationInputSchema ]).optional(),
  cursor: ProfileWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const ProfileGroupByArgsSchema: z.ZodType<Prisma.ProfileGroupByArgs> = z.object({
  where: ProfileWhereInputSchema.optional(),
  orderBy: z.union([ ProfileOrderByWithAggregationInputSchema.array(),ProfileOrderByWithAggregationInputSchema ]).optional(),
  by: ProfileScalarFieldEnumSchema.array(),
  having: ProfileScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const ProfileFindUniqueArgsSchema: z.ZodType<Prisma.ProfileFindUniqueArgs> = z.object({
  select: ProfileSelectSchema.optional(),
  include: ProfileIncludeSchema.optional(),
  where: ProfileWhereUniqueInputSchema,
}).strict() ;

export const ProfileFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.ProfileFindUniqueOrThrowArgs> = z.object({
  select: ProfileSelectSchema.optional(),
  include: ProfileIncludeSchema.optional(),
  where: ProfileWhereUniqueInputSchema,
}).strict() ;

export const AccountAuthFindFirstArgsSchema: z.ZodType<Prisma.AccountAuthFindFirstArgs> = z.object({
  select: AccountAuthSelectSchema.optional(),
  include: AccountAuthIncludeSchema.optional(),
  where: AccountAuthWhereInputSchema.optional(),
  orderBy: z.union([ AccountAuthOrderByWithRelationInputSchema.array(),AccountAuthOrderByWithRelationInputSchema ]).optional(),
  cursor: AccountAuthWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ AccountAuthScalarFieldEnumSchema,AccountAuthScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const AccountAuthFindFirstOrThrowArgsSchema: z.ZodType<Prisma.AccountAuthFindFirstOrThrowArgs> = z.object({
  select: AccountAuthSelectSchema.optional(),
  include: AccountAuthIncludeSchema.optional(),
  where: AccountAuthWhereInputSchema.optional(),
  orderBy: z.union([ AccountAuthOrderByWithRelationInputSchema.array(),AccountAuthOrderByWithRelationInputSchema ]).optional(),
  cursor: AccountAuthWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ AccountAuthScalarFieldEnumSchema,AccountAuthScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const AccountAuthFindManyArgsSchema: z.ZodType<Prisma.AccountAuthFindManyArgs> = z.object({
  select: AccountAuthSelectSchema.optional(),
  include: AccountAuthIncludeSchema.optional(),
  where: AccountAuthWhereInputSchema.optional(),
  orderBy: z.union([ AccountAuthOrderByWithRelationInputSchema.array(),AccountAuthOrderByWithRelationInputSchema ]).optional(),
  cursor: AccountAuthWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ AccountAuthScalarFieldEnumSchema,AccountAuthScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const AccountAuthAggregateArgsSchema: z.ZodType<Prisma.AccountAuthAggregateArgs> = z.object({
  where: AccountAuthWhereInputSchema.optional(),
  orderBy: z.union([ AccountAuthOrderByWithRelationInputSchema.array(),AccountAuthOrderByWithRelationInputSchema ]).optional(),
  cursor: AccountAuthWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const AccountAuthGroupByArgsSchema: z.ZodType<Prisma.AccountAuthGroupByArgs> = z.object({
  where: AccountAuthWhereInputSchema.optional(),
  orderBy: z.union([ AccountAuthOrderByWithAggregationInputSchema.array(),AccountAuthOrderByWithAggregationInputSchema ]).optional(),
  by: AccountAuthScalarFieldEnumSchema.array(),
  having: AccountAuthScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const AccountAuthFindUniqueArgsSchema: z.ZodType<Prisma.AccountAuthFindUniqueArgs> = z.object({
  select: AccountAuthSelectSchema.optional(),
  include: AccountAuthIncludeSchema.optional(),
  where: AccountAuthWhereUniqueInputSchema,
}).strict() ;

export const AccountAuthFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.AccountAuthFindUniqueOrThrowArgs> = z.object({
  select: AccountAuthSelectSchema.optional(),
  include: AccountAuthIncludeSchema.optional(),
  where: AccountAuthWhereUniqueInputSchema,
}).strict() ;

export const PlanFindFirstArgsSchema: z.ZodType<Prisma.PlanFindFirstArgs> = z.object({
  select: PlanSelectSchema.optional(),
  include: PlanIncludeSchema.optional(),
  where: PlanWhereInputSchema.optional(),
  orderBy: z.union([ PlanOrderByWithRelationInputSchema.array(),PlanOrderByWithRelationInputSchema ]).optional(),
  cursor: PlanWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ PlanScalarFieldEnumSchema,PlanScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const PlanFindFirstOrThrowArgsSchema: z.ZodType<Prisma.PlanFindFirstOrThrowArgs> = z.object({
  select: PlanSelectSchema.optional(),
  include: PlanIncludeSchema.optional(),
  where: PlanWhereInputSchema.optional(),
  orderBy: z.union([ PlanOrderByWithRelationInputSchema.array(),PlanOrderByWithRelationInputSchema ]).optional(),
  cursor: PlanWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ PlanScalarFieldEnumSchema,PlanScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const PlanFindManyArgsSchema: z.ZodType<Prisma.PlanFindManyArgs> = z.object({
  select: PlanSelectSchema.optional(),
  include: PlanIncludeSchema.optional(),
  where: PlanWhereInputSchema.optional(),
  orderBy: z.union([ PlanOrderByWithRelationInputSchema.array(),PlanOrderByWithRelationInputSchema ]).optional(),
  cursor: PlanWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ PlanScalarFieldEnumSchema,PlanScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const PlanAggregateArgsSchema: z.ZodType<Prisma.PlanAggregateArgs> = z.object({
  where: PlanWhereInputSchema.optional(),
  orderBy: z.union([ PlanOrderByWithRelationInputSchema.array(),PlanOrderByWithRelationInputSchema ]).optional(),
  cursor: PlanWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const PlanGroupByArgsSchema: z.ZodType<Prisma.PlanGroupByArgs> = z.object({
  where: PlanWhereInputSchema.optional(),
  orderBy: z.union([ PlanOrderByWithAggregationInputSchema.array(),PlanOrderByWithAggregationInputSchema ]).optional(),
  by: PlanScalarFieldEnumSchema.array(),
  having: PlanScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const PlanFindUniqueArgsSchema: z.ZodType<Prisma.PlanFindUniqueArgs> = z.object({
  select: PlanSelectSchema.optional(),
  include: PlanIncludeSchema.optional(),
  where: PlanWhereUniqueInputSchema,
}).strict() ;

export const PlanFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.PlanFindUniqueOrThrowArgs> = z.object({
  select: PlanSelectSchema.optional(),
  include: PlanIncludeSchema.optional(),
  where: PlanWhereUniqueInputSchema,
}).strict() ;

export const TokenFindFirstArgsSchema: z.ZodType<Prisma.TokenFindFirstArgs> = z.object({
  select: TokenSelectSchema.optional(),
  include: TokenIncludeSchema.optional(),
  where: TokenWhereInputSchema.optional(),
  orderBy: z.union([ TokenOrderByWithRelationInputSchema.array(),TokenOrderByWithRelationInputSchema ]).optional(),
  cursor: TokenWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ TokenScalarFieldEnumSchema,TokenScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const TokenFindFirstOrThrowArgsSchema: z.ZodType<Prisma.TokenFindFirstOrThrowArgs> = z.object({
  select: TokenSelectSchema.optional(),
  include: TokenIncludeSchema.optional(),
  where: TokenWhereInputSchema.optional(),
  orderBy: z.union([ TokenOrderByWithRelationInputSchema.array(),TokenOrderByWithRelationInputSchema ]).optional(),
  cursor: TokenWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ TokenScalarFieldEnumSchema,TokenScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const TokenFindManyArgsSchema: z.ZodType<Prisma.TokenFindManyArgs> = z.object({
  select: TokenSelectSchema.optional(),
  include: TokenIncludeSchema.optional(),
  where: TokenWhereInputSchema.optional(),
  orderBy: z.union([ TokenOrderByWithRelationInputSchema.array(),TokenOrderByWithRelationInputSchema ]).optional(),
  cursor: TokenWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ TokenScalarFieldEnumSchema,TokenScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const TokenAggregateArgsSchema: z.ZodType<Prisma.TokenAggregateArgs> = z.object({
  where: TokenWhereInputSchema.optional(),
  orderBy: z.union([ TokenOrderByWithRelationInputSchema.array(),TokenOrderByWithRelationInputSchema ]).optional(),
  cursor: TokenWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const TokenGroupByArgsSchema: z.ZodType<Prisma.TokenGroupByArgs> = z.object({
  where: TokenWhereInputSchema.optional(),
  orderBy: z.union([ TokenOrderByWithAggregationInputSchema.array(),TokenOrderByWithAggregationInputSchema ]).optional(),
  by: TokenScalarFieldEnumSchema.array(),
  having: TokenScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const TokenFindUniqueArgsSchema: z.ZodType<Prisma.TokenFindUniqueArgs> = z.object({
  select: TokenSelectSchema.optional(),
  include: TokenIncludeSchema.optional(),
  where: TokenWhereUniqueInputSchema,
}).strict() ;

export const TokenFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.TokenFindUniqueOrThrowArgs> = z.object({
  select: TokenSelectSchema.optional(),
  include: TokenIncludeSchema.optional(),
  where: TokenWhereUniqueInputSchema,
}).strict() ;

export const InvitationFindFirstArgsSchema: z.ZodType<Prisma.InvitationFindFirstArgs> = z.object({
  select: InvitationSelectSchema.optional(),
  include: InvitationIncludeSchema.optional(),
  where: InvitationWhereInputSchema.optional(),
  orderBy: z.union([ InvitationOrderByWithRelationInputSchema.array(),InvitationOrderByWithRelationInputSchema ]).optional(),
  cursor: InvitationWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ InvitationScalarFieldEnumSchema,InvitationScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const InvitationFindFirstOrThrowArgsSchema: z.ZodType<Prisma.InvitationFindFirstOrThrowArgs> = z.object({
  select: InvitationSelectSchema.optional(),
  include: InvitationIncludeSchema.optional(),
  where: InvitationWhereInputSchema.optional(),
  orderBy: z.union([ InvitationOrderByWithRelationInputSchema.array(),InvitationOrderByWithRelationInputSchema ]).optional(),
  cursor: InvitationWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ InvitationScalarFieldEnumSchema,InvitationScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const InvitationFindManyArgsSchema: z.ZodType<Prisma.InvitationFindManyArgs> = z.object({
  select: InvitationSelectSchema.optional(),
  include: InvitationIncludeSchema.optional(),
  where: InvitationWhereInputSchema.optional(),
  orderBy: z.union([ InvitationOrderByWithRelationInputSchema.array(),InvitationOrderByWithRelationInputSchema ]).optional(),
  cursor: InvitationWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ InvitationScalarFieldEnumSchema,InvitationScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const InvitationAggregateArgsSchema: z.ZodType<Prisma.InvitationAggregateArgs> = z.object({
  where: InvitationWhereInputSchema.optional(),
  orderBy: z.union([ InvitationOrderByWithRelationInputSchema.array(),InvitationOrderByWithRelationInputSchema ]).optional(),
  cursor: InvitationWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const InvitationGroupByArgsSchema: z.ZodType<Prisma.InvitationGroupByArgs> = z.object({
  where: InvitationWhereInputSchema.optional(),
  orderBy: z.union([ InvitationOrderByWithAggregationInputSchema.array(),InvitationOrderByWithAggregationInputSchema ]).optional(),
  by: InvitationScalarFieldEnumSchema.array(),
  having: InvitationScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const InvitationFindUniqueArgsSchema: z.ZodType<Prisma.InvitationFindUniqueArgs> = z.object({
  select: InvitationSelectSchema.optional(),
  include: InvitationIncludeSchema.optional(),
  where: InvitationWhereUniqueInputSchema,
}).strict() ;

export const InvitationFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.InvitationFindUniqueOrThrowArgs> = z.object({
  select: InvitationSelectSchema.optional(),
  include: InvitationIncludeSchema.optional(),
  where: InvitationWhereUniqueInputSchema,
}).strict() ;

export const PatientFindFirstArgsSchema: z.ZodType<Prisma.PatientFindFirstArgs> = z.object({
  select: PatientSelectSchema.optional(),
  include: PatientIncludeSchema.optional(),
  where: PatientWhereInputSchema.optional(),
  orderBy: z.union([ PatientOrderByWithRelationInputSchema.array(),PatientOrderByWithRelationInputSchema ]).optional(),
  cursor: PatientWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ PatientScalarFieldEnumSchema,PatientScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const PatientFindFirstOrThrowArgsSchema: z.ZodType<Prisma.PatientFindFirstOrThrowArgs> = z.object({
  select: PatientSelectSchema.optional(),
  include: PatientIncludeSchema.optional(),
  where: PatientWhereInputSchema.optional(),
  orderBy: z.union([ PatientOrderByWithRelationInputSchema.array(),PatientOrderByWithRelationInputSchema ]).optional(),
  cursor: PatientWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ PatientScalarFieldEnumSchema,PatientScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const PatientFindManyArgsSchema: z.ZodType<Prisma.PatientFindManyArgs> = z.object({
  select: PatientSelectSchema.optional(),
  include: PatientIncludeSchema.optional(),
  where: PatientWhereInputSchema.optional(),
  orderBy: z.union([ PatientOrderByWithRelationInputSchema.array(),PatientOrderByWithRelationInputSchema ]).optional(),
  cursor: PatientWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ PatientScalarFieldEnumSchema,PatientScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const PatientAggregateArgsSchema: z.ZodType<Prisma.PatientAggregateArgs> = z.object({
  where: PatientWhereInputSchema.optional(),
  orderBy: z.union([ PatientOrderByWithRelationInputSchema.array(),PatientOrderByWithRelationInputSchema ]).optional(),
  cursor: PatientWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const PatientGroupByArgsSchema: z.ZodType<Prisma.PatientGroupByArgs> = z.object({
  where: PatientWhereInputSchema.optional(),
  orderBy: z.union([ PatientOrderByWithAggregationInputSchema.array(),PatientOrderByWithAggregationInputSchema ]).optional(),
  by: PatientScalarFieldEnumSchema.array(),
  having: PatientScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const PatientFindUniqueArgsSchema: z.ZodType<Prisma.PatientFindUniqueArgs> = z.object({
  select: PatientSelectSchema.optional(),
  include: PatientIncludeSchema.optional(),
  where: PatientWhereUniqueInputSchema,
}).strict() ;

export const PatientFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.PatientFindUniqueOrThrowArgs> = z.object({
  select: PatientSelectSchema.optional(),
  include: PatientIncludeSchema.optional(),
  where: PatientWhereUniqueInputSchema,
}).strict() ;

export const SpecializationFindFirstArgsSchema: z.ZodType<Prisma.SpecializationFindFirstArgs> = z.object({
  select: SpecializationSelectSchema.optional(),
  include: SpecializationIncludeSchema.optional(),
  where: SpecializationWhereInputSchema.optional(),
  orderBy: z.union([ SpecializationOrderByWithRelationInputSchema.array(),SpecializationOrderByWithRelationInputSchema ]).optional(),
  cursor: SpecializationWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ SpecializationScalarFieldEnumSchema,SpecializationScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const SpecializationFindFirstOrThrowArgsSchema: z.ZodType<Prisma.SpecializationFindFirstOrThrowArgs> = z.object({
  select: SpecializationSelectSchema.optional(),
  include: SpecializationIncludeSchema.optional(),
  where: SpecializationWhereInputSchema.optional(),
  orderBy: z.union([ SpecializationOrderByWithRelationInputSchema.array(),SpecializationOrderByWithRelationInputSchema ]).optional(),
  cursor: SpecializationWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ SpecializationScalarFieldEnumSchema,SpecializationScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const SpecializationFindManyArgsSchema: z.ZodType<Prisma.SpecializationFindManyArgs> = z.object({
  select: SpecializationSelectSchema.optional(),
  include: SpecializationIncludeSchema.optional(),
  where: SpecializationWhereInputSchema.optional(),
  orderBy: z.union([ SpecializationOrderByWithRelationInputSchema.array(),SpecializationOrderByWithRelationInputSchema ]).optional(),
  cursor: SpecializationWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ SpecializationScalarFieldEnumSchema,SpecializationScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const SpecializationAggregateArgsSchema: z.ZodType<Prisma.SpecializationAggregateArgs> = z.object({
  where: SpecializationWhereInputSchema.optional(),
  orderBy: z.union([ SpecializationOrderByWithRelationInputSchema.array(),SpecializationOrderByWithRelationInputSchema ]).optional(),
  cursor: SpecializationWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const SpecializationGroupByArgsSchema: z.ZodType<Prisma.SpecializationGroupByArgs> = z.object({
  where: SpecializationWhereInputSchema.optional(),
  orderBy: z.union([ SpecializationOrderByWithAggregationInputSchema.array(),SpecializationOrderByWithAggregationInputSchema ]).optional(),
  by: SpecializationScalarFieldEnumSchema.array(),
  having: SpecializationScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const SpecializationFindUniqueArgsSchema: z.ZodType<Prisma.SpecializationFindUniqueArgs> = z.object({
  select: SpecializationSelectSchema.optional(),
  include: SpecializationIncludeSchema.optional(),
  where: SpecializationWhereUniqueInputSchema,
}).strict() ;

export const SpecializationFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.SpecializationFindUniqueOrThrowArgs> = z.object({
  select: SpecializationSelectSchema.optional(),
  include: SpecializationIncludeSchema.optional(),
  where: SpecializationWhereUniqueInputSchema,
}).strict() ;

export const EventFindFirstArgsSchema: z.ZodType<Prisma.EventFindFirstArgs> = z.object({
  select: EventSelectSchema.optional(),
  include: EventIncludeSchema.optional(),
  where: EventWhereInputSchema.optional(),
  orderBy: z.union([ EventOrderByWithRelationInputSchema.array(),EventOrderByWithRelationInputSchema ]).optional(),
  cursor: EventWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ EventScalarFieldEnumSchema,EventScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const EventFindFirstOrThrowArgsSchema: z.ZodType<Prisma.EventFindFirstOrThrowArgs> = z.object({
  select: EventSelectSchema.optional(),
  include: EventIncludeSchema.optional(),
  where: EventWhereInputSchema.optional(),
  orderBy: z.union([ EventOrderByWithRelationInputSchema.array(),EventOrderByWithRelationInputSchema ]).optional(),
  cursor: EventWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ EventScalarFieldEnumSchema,EventScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const EventFindManyArgsSchema: z.ZodType<Prisma.EventFindManyArgs> = z.object({
  select: EventSelectSchema.optional(),
  include: EventIncludeSchema.optional(),
  where: EventWhereInputSchema.optional(),
  orderBy: z.union([ EventOrderByWithRelationInputSchema.array(),EventOrderByWithRelationInputSchema ]).optional(),
  cursor: EventWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ EventScalarFieldEnumSchema,EventScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const EventAggregateArgsSchema: z.ZodType<Prisma.EventAggregateArgs> = z.object({
  where: EventWhereInputSchema.optional(),
  orderBy: z.union([ EventOrderByWithRelationInputSchema.array(),EventOrderByWithRelationInputSchema ]).optional(),
  cursor: EventWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const EventGroupByArgsSchema: z.ZodType<Prisma.EventGroupByArgs> = z.object({
  where: EventWhereInputSchema.optional(),
  orderBy: z.union([ EventOrderByWithAggregationInputSchema.array(),EventOrderByWithAggregationInputSchema ]).optional(),
  by: EventScalarFieldEnumSchema.array(),
  having: EventScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const EventFindUniqueArgsSchema: z.ZodType<Prisma.EventFindUniqueArgs> = z.object({
  select: EventSelectSchema.optional(),
  include: EventIncludeSchema.optional(),
  where: EventWhereUniqueInputSchema,
}).strict() ;

export const EventFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.EventFindUniqueOrThrowArgs> = z.object({
  select: EventSelectSchema.optional(),
  include: EventIncludeSchema.optional(),
  where: EventWhereUniqueInputSchema,
}).strict() ;

export const EventActionFindFirstArgsSchema: z.ZodType<Prisma.EventActionFindFirstArgs> = z.object({
  select: EventActionSelectSchema.optional(),
  include: EventActionIncludeSchema.optional(),
  where: EventActionWhereInputSchema.optional(),
  orderBy: z.union([ EventActionOrderByWithRelationInputSchema.array(),EventActionOrderByWithRelationInputSchema ]).optional(),
  cursor: EventActionWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ EventActionScalarFieldEnumSchema,EventActionScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const EventActionFindFirstOrThrowArgsSchema: z.ZodType<Prisma.EventActionFindFirstOrThrowArgs> = z.object({
  select: EventActionSelectSchema.optional(),
  include: EventActionIncludeSchema.optional(),
  where: EventActionWhereInputSchema.optional(),
  orderBy: z.union([ EventActionOrderByWithRelationInputSchema.array(),EventActionOrderByWithRelationInputSchema ]).optional(),
  cursor: EventActionWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ EventActionScalarFieldEnumSchema,EventActionScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const EventActionFindManyArgsSchema: z.ZodType<Prisma.EventActionFindManyArgs> = z.object({
  select: EventActionSelectSchema.optional(),
  include: EventActionIncludeSchema.optional(),
  where: EventActionWhereInputSchema.optional(),
  orderBy: z.union([ EventActionOrderByWithRelationInputSchema.array(),EventActionOrderByWithRelationInputSchema ]).optional(),
  cursor: EventActionWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ EventActionScalarFieldEnumSchema,EventActionScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const EventActionAggregateArgsSchema: z.ZodType<Prisma.EventActionAggregateArgs> = z.object({
  where: EventActionWhereInputSchema.optional(),
  orderBy: z.union([ EventActionOrderByWithRelationInputSchema.array(),EventActionOrderByWithRelationInputSchema ]).optional(),
  cursor: EventActionWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const EventActionGroupByArgsSchema: z.ZodType<Prisma.EventActionGroupByArgs> = z.object({
  where: EventActionWhereInputSchema.optional(),
  orderBy: z.union([ EventActionOrderByWithAggregationInputSchema.array(),EventActionOrderByWithAggregationInputSchema ]).optional(),
  by: EventActionScalarFieldEnumSchema.array(),
  having: EventActionScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const EventActionFindUniqueArgsSchema: z.ZodType<Prisma.EventActionFindUniqueArgs> = z.object({
  select: EventActionSelectSchema.optional(),
  include: EventActionIncludeSchema.optional(),
  where: EventActionWhereUniqueInputSchema,
}).strict() ;

export const EventActionFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.EventActionFindUniqueOrThrowArgs> = z.object({
  select: EventActionSelectSchema.optional(),
  include: EventActionIncludeSchema.optional(),
  where: EventActionWhereUniqueInputSchema,
}).strict() ;

export const ProductFindFirstArgsSchema: z.ZodType<Prisma.ProductFindFirstArgs> = z.object({
  select: ProductSelectSchema.optional(),
  include: ProductIncludeSchema.optional(),
  where: ProductWhereInputSchema.optional(),
  orderBy: z.union([ ProductOrderByWithRelationInputSchema.array(),ProductOrderByWithRelationInputSchema ]).optional(),
  cursor: ProductWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ProductScalarFieldEnumSchema,ProductScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const ProductFindFirstOrThrowArgsSchema: z.ZodType<Prisma.ProductFindFirstOrThrowArgs> = z.object({
  select: ProductSelectSchema.optional(),
  include: ProductIncludeSchema.optional(),
  where: ProductWhereInputSchema.optional(),
  orderBy: z.union([ ProductOrderByWithRelationInputSchema.array(),ProductOrderByWithRelationInputSchema ]).optional(),
  cursor: ProductWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ProductScalarFieldEnumSchema,ProductScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const ProductFindManyArgsSchema: z.ZodType<Prisma.ProductFindManyArgs> = z.object({
  select: ProductSelectSchema.optional(),
  include: ProductIncludeSchema.optional(),
  where: ProductWhereInputSchema.optional(),
  orderBy: z.union([ ProductOrderByWithRelationInputSchema.array(),ProductOrderByWithRelationInputSchema ]).optional(),
  cursor: ProductWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ProductScalarFieldEnumSchema,ProductScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const ProductAggregateArgsSchema: z.ZodType<Prisma.ProductAggregateArgs> = z.object({
  where: ProductWhereInputSchema.optional(),
  orderBy: z.union([ ProductOrderByWithRelationInputSchema.array(),ProductOrderByWithRelationInputSchema ]).optional(),
  cursor: ProductWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const ProductGroupByArgsSchema: z.ZodType<Prisma.ProductGroupByArgs> = z.object({
  where: ProductWhereInputSchema.optional(),
  orderBy: z.union([ ProductOrderByWithAggregationInputSchema.array(),ProductOrderByWithAggregationInputSchema ]).optional(),
  by: ProductScalarFieldEnumSchema.array(),
  having: ProductScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const ProductFindUniqueArgsSchema: z.ZodType<Prisma.ProductFindUniqueArgs> = z.object({
  select: ProductSelectSchema.optional(),
  include: ProductIncludeSchema.optional(),
  where: ProductWhereUniqueInputSchema,
}).strict() ;

export const ProductFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.ProductFindUniqueOrThrowArgs> = z.object({
  select: ProductSelectSchema.optional(),
  include: ProductIncludeSchema.optional(),
  where: ProductWhereUniqueInputSchema,
}).strict() ;

export const PriceFindFirstArgsSchema: z.ZodType<Prisma.PriceFindFirstArgs> = z.object({
  select: PriceSelectSchema.optional(),
  include: PriceIncludeSchema.optional(),
  where: PriceWhereInputSchema.optional(),
  orderBy: z.union([ PriceOrderByWithRelationInputSchema.array(),PriceOrderByWithRelationInputSchema ]).optional(),
  cursor: PriceWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ PriceScalarFieldEnumSchema,PriceScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const PriceFindFirstOrThrowArgsSchema: z.ZodType<Prisma.PriceFindFirstOrThrowArgs> = z.object({
  select: PriceSelectSchema.optional(),
  include: PriceIncludeSchema.optional(),
  where: PriceWhereInputSchema.optional(),
  orderBy: z.union([ PriceOrderByWithRelationInputSchema.array(),PriceOrderByWithRelationInputSchema ]).optional(),
  cursor: PriceWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ PriceScalarFieldEnumSchema,PriceScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const PriceFindManyArgsSchema: z.ZodType<Prisma.PriceFindManyArgs> = z.object({
  select: PriceSelectSchema.optional(),
  include: PriceIncludeSchema.optional(),
  where: PriceWhereInputSchema.optional(),
  orderBy: z.union([ PriceOrderByWithRelationInputSchema.array(),PriceOrderByWithRelationInputSchema ]).optional(),
  cursor: PriceWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ PriceScalarFieldEnumSchema,PriceScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const PriceAggregateArgsSchema: z.ZodType<Prisma.PriceAggregateArgs> = z.object({
  where: PriceWhereInputSchema.optional(),
  orderBy: z.union([ PriceOrderByWithRelationInputSchema.array(),PriceOrderByWithRelationInputSchema ]).optional(),
  cursor: PriceWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const PriceGroupByArgsSchema: z.ZodType<Prisma.PriceGroupByArgs> = z.object({
  where: PriceWhereInputSchema.optional(),
  orderBy: z.union([ PriceOrderByWithAggregationInputSchema.array(),PriceOrderByWithAggregationInputSchema ]).optional(),
  by: PriceScalarFieldEnumSchema.array(),
  having: PriceScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const PriceFindUniqueArgsSchema: z.ZodType<Prisma.PriceFindUniqueArgs> = z.object({
  select: PriceSelectSchema.optional(),
  include: PriceIncludeSchema.optional(),
  where: PriceWhereUniqueInputSchema,
}).strict() ;

export const PriceFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.PriceFindUniqueOrThrowArgs> = z.object({
  select: PriceSelectSchema.optional(),
  include: PriceIncludeSchema.optional(),
  where: PriceWhereUniqueInputSchema,
}).strict() ;

export const ProductCategoryFindFirstArgsSchema: z.ZodType<Prisma.ProductCategoryFindFirstArgs> = z.object({
  select: ProductCategorySelectSchema.optional(),
  include: ProductCategoryIncludeSchema.optional(),
  where: ProductCategoryWhereInputSchema.optional(),
  orderBy: z.union([ ProductCategoryOrderByWithRelationInputSchema.array(),ProductCategoryOrderByWithRelationInputSchema ]).optional(),
  cursor: ProductCategoryWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ProductCategoryScalarFieldEnumSchema,ProductCategoryScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const ProductCategoryFindFirstOrThrowArgsSchema: z.ZodType<Prisma.ProductCategoryFindFirstOrThrowArgs> = z.object({
  select: ProductCategorySelectSchema.optional(),
  include: ProductCategoryIncludeSchema.optional(),
  where: ProductCategoryWhereInputSchema.optional(),
  orderBy: z.union([ ProductCategoryOrderByWithRelationInputSchema.array(),ProductCategoryOrderByWithRelationInputSchema ]).optional(),
  cursor: ProductCategoryWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ProductCategoryScalarFieldEnumSchema,ProductCategoryScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const ProductCategoryFindManyArgsSchema: z.ZodType<Prisma.ProductCategoryFindManyArgs> = z.object({
  select: ProductCategorySelectSchema.optional(),
  include: ProductCategoryIncludeSchema.optional(),
  where: ProductCategoryWhereInputSchema.optional(),
  orderBy: z.union([ ProductCategoryOrderByWithRelationInputSchema.array(),ProductCategoryOrderByWithRelationInputSchema ]).optional(),
  cursor: ProductCategoryWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ProductCategoryScalarFieldEnumSchema,ProductCategoryScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const ProductCategoryAggregateArgsSchema: z.ZodType<Prisma.ProductCategoryAggregateArgs> = z.object({
  where: ProductCategoryWhereInputSchema.optional(),
  orderBy: z.union([ ProductCategoryOrderByWithRelationInputSchema.array(),ProductCategoryOrderByWithRelationInputSchema ]).optional(),
  cursor: ProductCategoryWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const ProductCategoryGroupByArgsSchema: z.ZodType<Prisma.ProductCategoryGroupByArgs> = z.object({
  where: ProductCategoryWhereInputSchema.optional(),
  orderBy: z.union([ ProductCategoryOrderByWithAggregationInputSchema.array(),ProductCategoryOrderByWithAggregationInputSchema ]).optional(),
  by: ProductCategoryScalarFieldEnumSchema.array(),
  having: ProductCategoryScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const ProductCategoryFindUniqueArgsSchema: z.ZodType<Prisma.ProductCategoryFindUniqueArgs> = z.object({
  select: ProductCategorySelectSchema.optional(),
  include: ProductCategoryIncludeSchema.optional(),
  where: ProductCategoryWhereUniqueInputSchema,
}).strict() ;

export const ProductCategoryFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.ProductCategoryFindUniqueOrThrowArgs> = z.object({
  select: ProductCategorySelectSchema.optional(),
  include: ProductCategoryIncludeSchema.optional(),
  where: ProductCategoryWhereUniqueInputSchema,
}).strict() ;

export const TreatmentFindFirstArgsSchema: z.ZodType<Prisma.TreatmentFindFirstArgs> = z.object({
  select: TreatmentSelectSchema.optional(),
  include: TreatmentIncludeSchema.optional(),
  where: TreatmentWhereInputSchema.optional(),
  orderBy: z.union([ TreatmentOrderByWithRelationInputSchema.array(),TreatmentOrderByWithRelationInputSchema ]).optional(),
  cursor: TreatmentWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ TreatmentScalarFieldEnumSchema,TreatmentScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const TreatmentFindFirstOrThrowArgsSchema: z.ZodType<Prisma.TreatmentFindFirstOrThrowArgs> = z.object({
  select: TreatmentSelectSchema.optional(),
  include: TreatmentIncludeSchema.optional(),
  where: TreatmentWhereInputSchema.optional(),
  orderBy: z.union([ TreatmentOrderByWithRelationInputSchema.array(),TreatmentOrderByWithRelationInputSchema ]).optional(),
  cursor: TreatmentWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ TreatmentScalarFieldEnumSchema,TreatmentScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const TreatmentFindManyArgsSchema: z.ZodType<Prisma.TreatmentFindManyArgs> = z.object({
  select: TreatmentSelectSchema.optional(),
  include: TreatmentIncludeSchema.optional(),
  where: TreatmentWhereInputSchema.optional(),
  orderBy: z.union([ TreatmentOrderByWithRelationInputSchema.array(),TreatmentOrderByWithRelationInputSchema ]).optional(),
  cursor: TreatmentWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ TreatmentScalarFieldEnumSchema,TreatmentScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const TreatmentAggregateArgsSchema: z.ZodType<Prisma.TreatmentAggregateArgs> = z.object({
  where: TreatmentWhereInputSchema.optional(),
  orderBy: z.union([ TreatmentOrderByWithRelationInputSchema.array(),TreatmentOrderByWithRelationInputSchema ]).optional(),
  cursor: TreatmentWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const TreatmentGroupByArgsSchema: z.ZodType<Prisma.TreatmentGroupByArgs> = z.object({
  where: TreatmentWhereInputSchema.optional(),
  orderBy: z.union([ TreatmentOrderByWithAggregationInputSchema.array(),TreatmentOrderByWithAggregationInputSchema ]).optional(),
  by: TreatmentScalarFieldEnumSchema.array(),
  having: TreatmentScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const TreatmentFindUniqueArgsSchema: z.ZodType<Prisma.TreatmentFindUniqueArgs> = z.object({
  select: TreatmentSelectSchema.optional(),
  include: TreatmentIncludeSchema.optional(),
  where: TreatmentWhereUniqueInputSchema,
}).strict() ;

export const TreatmentFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.TreatmentFindUniqueOrThrowArgs> = z.object({
  select: TreatmentSelectSchema.optional(),
  include: TreatmentIncludeSchema.optional(),
  where: TreatmentWhereUniqueInputSchema,
}).strict() ;

export const TreatmentPlanFindFirstArgsSchema: z.ZodType<Prisma.TreatmentPlanFindFirstArgs> = z.object({
  select: TreatmentPlanSelectSchema.optional(),
  include: TreatmentPlanIncludeSchema.optional(),
  where: TreatmentPlanWhereInputSchema.optional(),
  orderBy: z.union([ TreatmentPlanOrderByWithRelationInputSchema.array(),TreatmentPlanOrderByWithRelationInputSchema ]).optional(),
  cursor: TreatmentPlanWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ TreatmentPlanScalarFieldEnumSchema,TreatmentPlanScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const TreatmentPlanFindFirstOrThrowArgsSchema: z.ZodType<Prisma.TreatmentPlanFindFirstOrThrowArgs> = z.object({
  select: TreatmentPlanSelectSchema.optional(),
  include: TreatmentPlanIncludeSchema.optional(),
  where: TreatmentPlanWhereInputSchema.optional(),
  orderBy: z.union([ TreatmentPlanOrderByWithRelationInputSchema.array(),TreatmentPlanOrderByWithRelationInputSchema ]).optional(),
  cursor: TreatmentPlanWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ TreatmentPlanScalarFieldEnumSchema,TreatmentPlanScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const TreatmentPlanFindManyArgsSchema: z.ZodType<Prisma.TreatmentPlanFindManyArgs> = z.object({
  select: TreatmentPlanSelectSchema.optional(),
  include: TreatmentPlanIncludeSchema.optional(),
  where: TreatmentPlanWhereInputSchema.optional(),
  orderBy: z.union([ TreatmentPlanOrderByWithRelationInputSchema.array(),TreatmentPlanOrderByWithRelationInputSchema ]).optional(),
  cursor: TreatmentPlanWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ TreatmentPlanScalarFieldEnumSchema,TreatmentPlanScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const TreatmentPlanAggregateArgsSchema: z.ZodType<Prisma.TreatmentPlanAggregateArgs> = z.object({
  where: TreatmentPlanWhereInputSchema.optional(),
  orderBy: z.union([ TreatmentPlanOrderByWithRelationInputSchema.array(),TreatmentPlanOrderByWithRelationInputSchema ]).optional(),
  cursor: TreatmentPlanWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const TreatmentPlanGroupByArgsSchema: z.ZodType<Prisma.TreatmentPlanGroupByArgs> = z.object({
  where: TreatmentPlanWhereInputSchema.optional(),
  orderBy: z.union([ TreatmentPlanOrderByWithAggregationInputSchema.array(),TreatmentPlanOrderByWithAggregationInputSchema ]).optional(),
  by: TreatmentPlanScalarFieldEnumSchema.array(),
  having: TreatmentPlanScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const TreatmentPlanFindUniqueArgsSchema: z.ZodType<Prisma.TreatmentPlanFindUniqueArgs> = z.object({
  select: TreatmentPlanSelectSchema.optional(),
  include: TreatmentPlanIncludeSchema.optional(),
  where: TreatmentPlanWhereUniqueInputSchema,
}).strict() ;

export const TreatmentPlanFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.TreatmentPlanFindUniqueOrThrowArgs> = z.object({
  select: TreatmentPlanSelectSchema.optional(),
  include: TreatmentPlanIncludeSchema.optional(),
  where: TreatmentPlanWhereUniqueInputSchema,
}).strict() ;

export const CountyFindFirstArgsSchema: z.ZodType<Prisma.CountyFindFirstArgs> = z.object({
  select: CountySelectSchema.optional(),
  include: CountyIncludeSchema.optional(),
  where: CountyWhereInputSchema.optional(),
  orderBy: z.union([ CountyOrderByWithRelationInputSchema.array(),CountyOrderByWithRelationInputSchema ]).optional(),
  cursor: CountyWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ CountyScalarFieldEnumSchema,CountyScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const CountyFindFirstOrThrowArgsSchema: z.ZodType<Prisma.CountyFindFirstOrThrowArgs> = z.object({
  select: CountySelectSchema.optional(),
  include: CountyIncludeSchema.optional(),
  where: CountyWhereInputSchema.optional(),
  orderBy: z.union([ CountyOrderByWithRelationInputSchema.array(),CountyOrderByWithRelationInputSchema ]).optional(),
  cursor: CountyWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ CountyScalarFieldEnumSchema,CountyScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const CountyFindManyArgsSchema: z.ZodType<Prisma.CountyFindManyArgs> = z.object({
  select: CountySelectSchema.optional(),
  include: CountyIncludeSchema.optional(),
  where: CountyWhereInputSchema.optional(),
  orderBy: z.union([ CountyOrderByWithRelationInputSchema.array(),CountyOrderByWithRelationInputSchema ]).optional(),
  cursor: CountyWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ CountyScalarFieldEnumSchema,CountyScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const CountyAggregateArgsSchema: z.ZodType<Prisma.CountyAggregateArgs> = z.object({
  where: CountyWhereInputSchema.optional(),
  orderBy: z.union([ CountyOrderByWithRelationInputSchema.array(),CountyOrderByWithRelationInputSchema ]).optional(),
  cursor: CountyWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const CountyGroupByArgsSchema: z.ZodType<Prisma.CountyGroupByArgs> = z.object({
  where: CountyWhereInputSchema.optional(),
  orderBy: z.union([ CountyOrderByWithAggregationInputSchema.array(),CountyOrderByWithAggregationInputSchema ]).optional(),
  by: CountyScalarFieldEnumSchema.array(),
  having: CountyScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const CountyFindUniqueArgsSchema: z.ZodType<Prisma.CountyFindUniqueArgs> = z.object({
  select: CountySelectSchema.optional(),
  include: CountyIncludeSchema.optional(),
  where: CountyWhereUniqueInputSchema,
}).strict() ;

export const CountyFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.CountyFindUniqueOrThrowArgs> = z.object({
  select: CountySelectSchema.optional(),
  include: CountyIncludeSchema.optional(),
  where: CountyWhereUniqueInputSchema,
}).strict() ;

export const CityFindFirstArgsSchema: z.ZodType<Prisma.CityFindFirstArgs> = z.object({
  select: CitySelectSchema.optional(),
  include: CityIncludeSchema.optional(),
  where: CityWhereInputSchema.optional(),
  orderBy: z.union([ CityOrderByWithRelationInputSchema.array(),CityOrderByWithRelationInputSchema ]).optional(),
  cursor: CityWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ CityScalarFieldEnumSchema,CityScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const CityFindFirstOrThrowArgsSchema: z.ZodType<Prisma.CityFindFirstOrThrowArgs> = z.object({
  select: CitySelectSchema.optional(),
  include: CityIncludeSchema.optional(),
  where: CityWhereInputSchema.optional(),
  orderBy: z.union([ CityOrderByWithRelationInputSchema.array(),CityOrderByWithRelationInputSchema ]).optional(),
  cursor: CityWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ CityScalarFieldEnumSchema,CityScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const CityFindManyArgsSchema: z.ZodType<Prisma.CityFindManyArgs> = z.object({
  select: CitySelectSchema.optional(),
  include: CityIncludeSchema.optional(),
  where: CityWhereInputSchema.optional(),
  orderBy: z.union([ CityOrderByWithRelationInputSchema.array(),CityOrderByWithRelationInputSchema ]).optional(),
  cursor: CityWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ CityScalarFieldEnumSchema,CityScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const CityAggregateArgsSchema: z.ZodType<Prisma.CityAggregateArgs> = z.object({
  where: CityWhereInputSchema.optional(),
  orderBy: z.union([ CityOrderByWithRelationInputSchema.array(),CityOrderByWithRelationInputSchema ]).optional(),
  cursor: CityWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const CityGroupByArgsSchema: z.ZodType<Prisma.CityGroupByArgs> = z.object({
  where: CityWhereInputSchema.optional(),
  orderBy: z.union([ CityOrderByWithAggregationInputSchema.array(),CityOrderByWithAggregationInputSchema ]).optional(),
  by: CityScalarFieldEnumSchema.array(),
  having: CityScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const CityFindUniqueArgsSchema: z.ZodType<Prisma.CityFindUniqueArgs> = z.object({
  select: CitySelectSchema.optional(),
  include: CityIncludeSchema.optional(),
  where: CityWhereUniqueInputSchema,
}).strict() ;

export const CityFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.CityFindUniqueOrThrowArgs> = z.object({
  select: CitySelectSchema.optional(),
  include: CityIncludeSchema.optional(),
  where: CityWhereUniqueInputSchema,
}).strict() ;

export const TenantCreateArgsSchema: z.ZodType<Prisma.TenantCreateArgs> = z.object({
  select: TenantSelectSchema.optional(),
  include: TenantIncludeSchema.optional(),
  data: z.union([ TenantCreateInputSchema,TenantUncheckedCreateInputSchema ]),
}).strict() ;

export const TenantUpsertArgsSchema: z.ZodType<Prisma.TenantUpsertArgs> = z.object({
  select: TenantSelectSchema.optional(),
  include: TenantIncludeSchema.optional(),
  where: TenantWhereUniqueInputSchema,
  create: z.union([ TenantCreateInputSchema,TenantUncheckedCreateInputSchema ]),
  update: z.union([ TenantUpdateInputSchema,TenantUncheckedUpdateInputSchema ]),
}).strict() ;

export const TenantCreateManyArgsSchema: z.ZodType<Prisma.TenantCreateManyArgs> = z.object({
  data: z.union([ TenantCreateManyInputSchema,TenantCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const TenantCreateManyAndReturnArgsSchema: z.ZodType<Prisma.TenantCreateManyAndReturnArgs> = z.object({
  data: z.union([ TenantCreateManyInputSchema,TenantCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const TenantDeleteArgsSchema: z.ZodType<Prisma.TenantDeleteArgs> = z.object({
  select: TenantSelectSchema.optional(),
  include: TenantIncludeSchema.optional(),
  where: TenantWhereUniqueInputSchema,
}).strict() ;

export const TenantUpdateArgsSchema: z.ZodType<Prisma.TenantUpdateArgs> = z.object({
  select: TenantSelectSchema.optional(),
  include: TenantIncludeSchema.optional(),
  data: z.union([ TenantUpdateInputSchema,TenantUncheckedUpdateInputSchema ]),
  where: TenantWhereUniqueInputSchema,
}).strict() ;

export const TenantUpdateManyArgsSchema: z.ZodType<Prisma.TenantUpdateManyArgs> = z.object({
  data: z.union([ TenantUpdateManyMutationInputSchema,TenantUncheckedUpdateManyInputSchema ]),
  where: TenantWhereInputSchema.optional(),
}).strict() ;

export const TenantDeleteManyArgsSchema: z.ZodType<Prisma.TenantDeleteManyArgs> = z.object({
  where: TenantWhereInputSchema.optional(),
}).strict() ;

export const TenantProfileCreateArgsSchema: z.ZodType<Prisma.TenantProfileCreateArgs> = z.object({
  select: TenantProfileSelectSchema.optional(),
  include: TenantProfileIncludeSchema.optional(),
  data: z.union([ TenantProfileCreateInputSchema,TenantProfileUncheckedCreateInputSchema ]),
}).strict() ;

export const TenantProfileUpsertArgsSchema: z.ZodType<Prisma.TenantProfileUpsertArgs> = z.object({
  select: TenantProfileSelectSchema.optional(),
  include: TenantProfileIncludeSchema.optional(),
  where: TenantProfileWhereUniqueInputSchema,
  create: z.union([ TenantProfileCreateInputSchema,TenantProfileUncheckedCreateInputSchema ]),
  update: z.union([ TenantProfileUpdateInputSchema,TenantProfileUncheckedUpdateInputSchema ]),
}).strict() ;

export const TenantProfileCreateManyArgsSchema: z.ZodType<Prisma.TenantProfileCreateManyArgs> = z.object({
  data: z.union([ TenantProfileCreateManyInputSchema,TenantProfileCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const TenantProfileCreateManyAndReturnArgsSchema: z.ZodType<Prisma.TenantProfileCreateManyAndReturnArgs> = z.object({
  data: z.union([ TenantProfileCreateManyInputSchema,TenantProfileCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const TenantProfileDeleteArgsSchema: z.ZodType<Prisma.TenantProfileDeleteArgs> = z.object({
  select: TenantProfileSelectSchema.optional(),
  include: TenantProfileIncludeSchema.optional(),
  where: TenantProfileWhereUniqueInputSchema,
}).strict() ;

export const TenantProfileUpdateArgsSchema: z.ZodType<Prisma.TenantProfileUpdateArgs> = z.object({
  select: TenantProfileSelectSchema.optional(),
  include: TenantProfileIncludeSchema.optional(),
  data: z.union([ TenantProfileUpdateInputSchema,TenantProfileUncheckedUpdateInputSchema ]),
  where: TenantProfileWhereUniqueInputSchema,
}).strict() ;

export const TenantProfileUpdateManyArgsSchema: z.ZodType<Prisma.TenantProfileUpdateManyArgs> = z.object({
  data: z.union([ TenantProfileUpdateManyMutationInputSchema,TenantProfileUncheckedUpdateManyInputSchema ]),
  where: TenantProfileWhereInputSchema.optional(),
}).strict() ;

export const TenantProfileDeleteManyArgsSchema: z.ZodType<Prisma.TenantProfileDeleteManyArgs> = z.object({
  where: TenantProfileWhereInputSchema.optional(),
}).strict() ;

export const UserCreateArgsSchema: z.ZodType<Prisma.UserCreateArgs> = z.object({
  select: UserSelectSchema.optional(),
  include: UserIncludeSchema.optional(),
  data: z.union([ UserCreateInputSchema,UserUncheckedCreateInputSchema ]),
}).strict() ;

export const UserUpsertArgsSchema: z.ZodType<Prisma.UserUpsertArgs> = z.object({
  select: UserSelectSchema.optional(),
  include: UserIncludeSchema.optional(),
  where: UserWhereUniqueInputSchema,
  create: z.union([ UserCreateInputSchema,UserUncheckedCreateInputSchema ]),
  update: z.union([ UserUpdateInputSchema,UserUncheckedUpdateInputSchema ]),
}).strict() ;

export const UserCreateManyArgsSchema: z.ZodType<Prisma.UserCreateManyArgs> = z.object({
  data: z.union([ UserCreateManyInputSchema,UserCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const UserCreateManyAndReturnArgsSchema: z.ZodType<Prisma.UserCreateManyAndReturnArgs> = z.object({
  data: z.union([ UserCreateManyInputSchema,UserCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const UserDeleteArgsSchema: z.ZodType<Prisma.UserDeleteArgs> = z.object({
  select: UserSelectSchema.optional(),
  include: UserIncludeSchema.optional(),
  where: UserWhereUniqueInputSchema,
}).strict() ;

export const UserUpdateArgsSchema: z.ZodType<Prisma.UserUpdateArgs> = z.object({
  select: UserSelectSchema.optional(),
  include: UserIncludeSchema.optional(),
  data: z.union([ UserUpdateInputSchema,UserUncheckedUpdateInputSchema ]),
  where: UserWhereUniqueInputSchema,
}).strict() ;

export const UserUpdateManyArgsSchema: z.ZodType<Prisma.UserUpdateManyArgs> = z.object({
  data: z.union([ UserUpdateManyMutationInputSchema,UserUncheckedUpdateManyInputSchema ]),
  where: UserWhereInputSchema.optional(),
}).strict() ;

export const UserDeleteManyArgsSchema: z.ZodType<Prisma.UserDeleteManyArgs> = z.object({
  where: UserWhereInputSchema.optional(),
}).strict() ;

export const ProfileCreateArgsSchema: z.ZodType<Prisma.ProfileCreateArgs> = z.object({
  select: ProfileSelectSchema.optional(),
  include: ProfileIncludeSchema.optional(),
  data: z.union([ ProfileCreateInputSchema,ProfileUncheckedCreateInputSchema ]),
}).strict() ;

export const ProfileUpsertArgsSchema: z.ZodType<Prisma.ProfileUpsertArgs> = z.object({
  select: ProfileSelectSchema.optional(),
  include: ProfileIncludeSchema.optional(),
  where: ProfileWhereUniqueInputSchema,
  create: z.union([ ProfileCreateInputSchema,ProfileUncheckedCreateInputSchema ]),
  update: z.union([ ProfileUpdateInputSchema,ProfileUncheckedUpdateInputSchema ]),
}).strict() ;

export const ProfileCreateManyArgsSchema: z.ZodType<Prisma.ProfileCreateManyArgs> = z.object({
  data: z.union([ ProfileCreateManyInputSchema,ProfileCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const ProfileCreateManyAndReturnArgsSchema: z.ZodType<Prisma.ProfileCreateManyAndReturnArgs> = z.object({
  data: z.union([ ProfileCreateManyInputSchema,ProfileCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const ProfileDeleteArgsSchema: z.ZodType<Prisma.ProfileDeleteArgs> = z.object({
  select: ProfileSelectSchema.optional(),
  include: ProfileIncludeSchema.optional(),
  where: ProfileWhereUniqueInputSchema,
}).strict() ;

export const ProfileUpdateArgsSchema: z.ZodType<Prisma.ProfileUpdateArgs> = z.object({
  select: ProfileSelectSchema.optional(),
  include: ProfileIncludeSchema.optional(),
  data: z.union([ ProfileUpdateInputSchema,ProfileUncheckedUpdateInputSchema ]),
  where: ProfileWhereUniqueInputSchema,
}).strict() ;

export const ProfileUpdateManyArgsSchema: z.ZodType<Prisma.ProfileUpdateManyArgs> = z.object({
  data: z.union([ ProfileUpdateManyMutationInputSchema,ProfileUncheckedUpdateManyInputSchema ]),
  where: ProfileWhereInputSchema.optional(),
}).strict() ;

export const ProfileDeleteManyArgsSchema: z.ZodType<Prisma.ProfileDeleteManyArgs> = z.object({
  where: ProfileWhereInputSchema.optional(),
}).strict() ;

export const AccountAuthCreateArgsSchema: z.ZodType<Prisma.AccountAuthCreateArgs> = z.object({
  select: AccountAuthSelectSchema.optional(),
  include: AccountAuthIncludeSchema.optional(),
  data: z.union([ AccountAuthCreateInputSchema,AccountAuthUncheckedCreateInputSchema ]),
}).strict() ;

export const AccountAuthUpsertArgsSchema: z.ZodType<Prisma.AccountAuthUpsertArgs> = z.object({
  select: AccountAuthSelectSchema.optional(),
  include: AccountAuthIncludeSchema.optional(),
  where: AccountAuthWhereUniqueInputSchema,
  create: z.union([ AccountAuthCreateInputSchema,AccountAuthUncheckedCreateInputSchema ]),
  update: z.union([ AccountAuthUpdateInputSchema,AccountAuthUncheckedUpdateInputSchema ]),
}).strict() ;

export const AccountAuthCreateManyArgsSchema: z.ZodType<Prisma.AccountAuthCreateManyArgs> = z.object({
  data: z.union([ AccountAuthCreateManyInputSchema,AccountAuthCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const AccountAuthCreateManyAndReturnArgsSchema: z.ZodType<Prisma.AccountAuthCreateManyAndReturnArgs> = z.object({
  data: z.union([ AccountAuthCreateManyInputSchema,AccountAuthCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const AccountAuthDeleteArgsSchema: z.ZodType<Prisma.AccountAuthDeleteArgs> = z.object({
  select: AccountAuthSelectSchema.optional(),
  include: AccountAuthIncludeSchema.optional(),
  where: AccountAuthWhereUniqueInputSchema,
}).strict() ;

export const AccountAuthUpdateArgsSchema: z.ZodType<Prisma.AccountAuthUpdateArgs> = z.object({
  select: AccountAuthSelectSchema.optional(),
  include: AccountAuthIncludeSchema.optional(),
  data: z.union([ AccountAuthUpdateInputSchema,AccountAuthUncheckedUpdateInputSchema ]),
  where: AccountAuthWhereUniqueInputSchema,
}).strict() ;

export const AccountAuthUpdateManyArgsSchema: z.ZodType<Prisma.AccountAuthUpdateManyArgs> = z.object({
  data: z.union([ AccountAuthUpdateManyMutationInputSchema,AccountAuthUncheckedUpdateManyInputSchema ]),
  where: AccountAuthWhereInputSchema.optional(),
}).strict() ;

export const AccountAuthDeleteManyArgsSchema: z.ZodType<Prisma.AccountAuthDeleteManyArgs> = z.object({
  where: AccountAuthWhereInputSchema.optional(),
}).strict() ;

export const PlanCreateArgsSchema: z.ZodType<Prisma.PlanCreateArgs> = z.object({
  select: PlanSelectSchema.optional(),
  include: PlanIncludeSchema.optional(),
  data: z.union([ PlanCreateInputSchema,PlanUncheckedCreateInputSchema ]),
}).strict() ;

export const PlanUpsertArgsSchema: z.ZodType<Prisma.PlanUpsertArgs> = z.object({
  select: PlanSelectSchema.optional(),
  include: PlanIncludeSchema.optional(),
  where: PlanWhereUniqueInputSchema,
  create: z.union([ PlanCreateInputSchema,PlanUncheckedCreateInputSchema ]),
  update: z.union([ PlanUpdateInputSchema,PlanUncheckedUpdateInputSchema ]),
}).strict() ;

export const PlanCreateManyArgsSchema: z.ZodType<Prisma.PlanCreateManyArgs> = z.object({
  data: z.union([ PlanCreateManyInputSchema,PlanCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const PlanCreateManyAndReturnArgsSchema: z.ZodType<Prisma.PlanCreateManyAndReturnArgs> = z.object({
  data: z.union([ PlanCreateManyInputSchema,PlanCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const PlanDeleteArgsSchema: z.ZodType<Prisma.PlanDeleteArgs> = z.object({
  select: PlanSelectSchema.optional(),
  include: PlanIncludeSchema.optional(),
  where: PlanWhereUniqueInputSchema,
}).strict() ;

export const PlanUpdateArgsSchema: z.ZodType<Prisma.PlanUpdateArgs> = z.object({
  select: PlanSelectSchema.optional(),
  include: PlanIncludeSchema.optional(),
  data: z.union([ PlanUpdateInputSchema,PlanUncheckedUpdateInputSchema ]),
  where: PlanWhereUniqueInputSchema,
}).strict() ;

export const PlanUpdateManyArgsSchema: z.ZodType<Prisma.PlanUpdateManyArgs> = z.object({
  data: z.union([ PlanUpdateManyMutationInputSchema,PlanUncheckedUpdateManyInputSchema ]),
  where: PlanWhereInputSchema.optional(),
}).strict() ;

export const PlanDeleteManyArgsSchema: z.ZodType<Prisma.PlanDeleteManyArgs> = z.object({
  where: PlanWhereInputSchema.optional(),
}).strict() ;

export const TokenCreateArgsSchema: z.ZodType<Prisma.TokenCreateArgs> = z.object({
  select: TokenSelectSchema.optional(),
  include: TokenIncludeSchema.optional(),
  data: z.union([ TokenCreateInputSchema,TokenUncheckedCreateInputSchema ]),
}).strict() ;

export const TokenUpsertArgsSchema: z.ZodType<Prisma.TokenUpsertArgs> = z.object({
  select: TokenSelectSchema.optional(),
  include: TokenIncludeSchema.optional(),
  where: TokenWhereUniqueInputSchema,
  create: z.union([ TokenCreateInputSchema,TokenUncheckedCreateInputSchema ]),
  update: z.union([ TokenUpdateInputSchema,TokenUncheckedUpdateInputSchema ]),
}).strict() ;

export const TokenCreateManyArgsSchema: z.ZodType<Prisma.TokenCreateManyArgs> = z.object({
  data: z.union([ TokenCreateManyInputSchema,TokenCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const TokenCreateManyAndReturnArgsSchema: z.ZodType<Prisma.TokenCreateManyAndReturnArgs> = z.object({
  data: z.union([ TokenCreateManyInputSchema,TokenCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const TokenDeleteArgsSchema: z.ZodType<Prisma.TokenDeleteArgs> = z.object({
  select: TokenSelectSchema.optional(),
  include: TokenIncludeSchema.optional(),
  where: TokenWhereUniqueInputSchema,
}).strict() ;

export const TokenUpdateArgsSchema: z.ZodType<Prisma.TokenUpdateArgs> = z.object({
  select: TokenSelectSchema.optional(),
  include: TokenIncludeSchema.optional(),
  data: z.union([ TokenUpdateInputSchema,TokenUncheckedUpdateInputSchema ]),
  where: TokenWhereUniqueInputSchema,
}).strict() ;

export const TokenUpdateManyArgsSchema: z.ZodType<Prisma.TokenUpdateManyArgs> = z.object({
  data: z.union([ TokenUpdateManyMutationInputSchema,TokenUncheckedUpdateManyInputSchema ]),
  where: TokenWhereInputSchema.optional(),
}).strict() ;

export const TokenDeleteManyArgsSchema: z.ZodType<Prisma.TokenDeleteManyArgs> = z.object({
  where: TokenWhereInputSchema.optional(),
}).strict() ;

export const InvitationCreateArgsSchema: z.ZodType<Prisma.InvitationCreateArgs> = z.object({
  select: InvitationSelectSchema.optional(),
  include: InvitationIncludeSchema.optional(),
  data: z.union([ InvitationCreateInputSchema,InvitationUncheckedCreateInputSchema ]),
}).strict() ;

export const InvitationUpsertArgsSchema: z.ZodType<Prisma.InvitationUpsertArgs> = z.object({
  select: InvitationSelectSchema.optional(),
  include: InvitationIncludeSchema.optional(),
  where: InvitationWhereUniqueInputSchema,
  create: z.union([ InvitationCreateInputSchema,InvitationUncheckedCreateInputSchema ]),
  update: z.union([ InvitationUpdateInputSchema,InvitationUncheckedUpdateInputSchema ]),
}).strict() ;

export const InvitationCreateManyArgsSchema: z.ZodType<Prisma.InvitationCreateManyArgs> = z.object({
  data: z.union([ InvitationCreateManyInputSchema,InvitationCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const InvitationCreateManyAndReturnArgsSchema: z.ZodType<Prisma.InvitationCreateManyAndReturnArgs> = z.object({
  data: z.union([ InvitationCreateManyInputSchema,InvitationCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const InvitationDeleteArgsSchema: z.ZodType<Prisma.InvitationDeleteArgs> = z.object({
  select: InvitationSelectSchema.optional(),
  include: InvitationIncludeSchema.optional(),
  where: InvitationWhereUniqueInputSchema,
}).strict() ;

export const InvitationUpdateArgsSchema: z.ZodType<Prisma.InvitationUpdateArgs> = z.object({
  select: InvitationSelectSchema.optional(),
  include: InvitationIncludeSchema.optional(),
  data: z.union([ InvitationUpdateInputSchema,InvitationUncheckedUpdateInputSchema ]),
  where: InvitationWhereUniqueInputSchema,
}).strict() ;

export const InvitationUpdateManyArgsSchema: z.ZodType<Prisma.InvitationUpdateManyArgs> = z.object({
  data: z.union([ InvitationUpdateManyMutationInputSchema,InvitationUncheckedUpdateManyInputSchema ]),
  where: InvitationWhereInputSchema.optional(),
}).strict() ;

export const InvitationDeleteManyArgsSchema: z.ZodType<Prisma.InvitationDeleteManyArgs> = z.object({
  where: InvitationWhereInputSchema.optional(),
}).strict() ;

export const PatientCreateArgsSchema: z.ZodType<Prisma.PatientCreateArgs> = z.object({
  select: PatientSelectSchema.optional(),
  include: PatientIncludeSchema.optional(),
  data: z.union([ PatientCreateInputSchema,PatientUncheckedCreateInputSchema ]),
}).strict() ;

export const PatientUpsertArgsSchema: z.ZodType<Prisma.PatientUpsertArgs> = z.object({
  select: PatientSelectSchema.optional(),
  include: PatientIncludeSchema.optional(),
  where: PatientWhereUniqueInputSchema,
  create: z.union([ PatientCreateInputSchema,PatientUncheckedCreateInputSchema ]),
  update: z.union([ PatientUpdateInputSchema,PatientUncheckedUpdateInputSchema ]),
}).strict() ;

export const PatientCreateManyArgsSchema: z.ZodType<Prisma.PatientCreateManyArgs> = z.object({
  data: z.union([ PatientCreateManyInputSchema,PatientCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const PatientCreateManyAndReturnArgsSchema: z.ZodType<Prisma.PatientCreateManyAndReturnArgs> = z.object({
  data: z.union([ PatientCreateManyInputSchema,PatientCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const PatientDeleteArgsSchema: z.ZodType<Prisma.PatientDeleteArgs> = z.object({
  select: PatientSelectSchema.optional(),
  include: PatientIncludeSchema.optional(),
  where: PatientWhereUniqueInputSchema,
}).strict() ;

export const PatientUpdateArgsSchema: z.ZodType<Prisma.PatientUpdateArgs> = z.object({
  select: PatientSelectSchema.optional(),
  include: PatientIncludeSchema.optional(),
  data: z.union([ PatientUpdateInputSchema,PatientUncheckedUpdateInputSchema ]),
  where: PatientWhereUniqueInputSchema,
}).strict() ;

export const PatientUpdateManyArgsSchema: z.ZodType<Prisma.PatientUpdateManyArgs> = z.object({
  data: z.union([ PatientUpdateManyMutationInputSchema,PatientUncheckedUpdateManyInputSchema ]),
  where: PatientWhereInputSchema.optional(),
}).strict() ;

export const PatientDeleteManyArgsSchema: z.ZodType<Prisma.PatientDeleteManyArgs> = z.object({
  where: PatientWhereInputSchema.optional(),
}).strict() ;

export const SpecializationCreateArgsSchema: z.ZodType<Prisma.SpecializationCreateArgs> = z.object({
  select: SpecializationSelectSchema.optional(),
  include: SpecializationIncludeSchema.optional(),
  data: z.union([ SpecializationCreateInputSchema,SpecializationUncheckedCreateInputSchema ]),
}).strict() ;

export const SpecializationUpsertArgsSchema: z.ZodType<Prisma.SpecializationUpsertArgs> = z.object({
  select: SpecializationSelectSchema.optional(),
  include: SpecializationIncludeSchema.optional(),
  where: SpecializationWhereUniqueInputSchema,
  create: z.union([ SpecializationCreateInputSchema,SpecializationUncheckedCreateInputSchema ]),
  update: z.union([ SpecializationUpdateInputSchema,SpecializationUncheckedUpdateInputSchema ]),
}).strict() ;

export const SpecializationCreateManyArgsSchema: z.ZodType<Prisma.SpecializationCreateManyArgs> = z.object({
  data: z.union([ SpecializationCreateManyInputSchema,SpecializationCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const SpecializationCreateManyAndReturnArgsSchema: z.ZodType<Prisma.SpecializationCreateManyAndReturnArgs> = z.object({
  data: z.union([ SpecializationCreateManyInputSchema,SpecializationCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const SpecializationDeleteArgsSchema: z.ZodType<Prisma.SpecializationDeleteArgs> = z.object({
  select: SpecializationSelectSchema.optional(),
  include: SpecializationIncludeSchema.optional(),
  where: SpecializationWhereUniqueInputSchema,
}).strict() ;

export const SpecializationUpdateArgsSchema: z.ZodType<Prisma.SpecializationUpdateArgs> = z.object({
  select: SpecializationSelectSchema.optional(),
  include: SpecializationIncludeSchema.optional(),
  data: z.union([ SpecializationUpdateInputSchema,SpecializationUncheckedUpdateInputSchema ]),
  where: SpecializationWhereUniqueInputSchema,
}).strict() ;

export const SpecializationUpdateManyArgsSchema: z.ZodType<Prisma.SpecializationUpdateManyArgs> = z.object({
  data: z.union([ SpecializationUpdateManyMutationInputSchema,SpecializationUncheckedUpdateManyInputSchema ]),
  where: SpecializationWhereInputSchema.optional(),
}).strict() ;

export const SpecializationDeleteManyArgsSchema: z.ZodType<Prisma.SpecializationDeleteManyArgs> = z.object({
  where: SpecializationWhereInputSchema.optional(),
}).strict() ;

export const EventCreateArgsSchema: z.ZodType<Prisma.EventCreateArgs> = z.object({
  select: EventSelectSchema.optional(),
  include: EventIncludeSchema.optional(),
  data: z.union([ EventCreateInputSchema,EventUncheckedCreateInputSchema ]),
}).strict() ;

export const EventUpsertArgsSchema: z.ZodType<Prisma.EventUpsertArgs> = z.object({
  select: EventSelectSchema.optional(),
  include: EventIncludeSchema.optional(),
  where: EventWhereUniqueInputSchema,
  create: z.union([ EventCreateInputSchema,EventUncheckedCreateInputSchema ]),
  update: z.union([ EventUpdateInputSchema,EventUncheckedUpdateInputSchema ]),
}).strict() ;

export const EventCreateManyArgsSchema: z.ZodType<Prisma.EventCreateManyArgs> = z.object({
  data: z.union([ EventCreateManyInputSchema,EventCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const EventCreateManyAndReturnArgsSchema: z.ZodType<Prisma.EventCreateManyAndReturnArgs> = z.object({
  data: z.union([ EventCreateManyInputSchema,EventCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const EventDeleteArgsSchema: z.ZodType<Prisma.EventDeleteArgs> = z.object({
  select: EventSelectSchema.optional(),
  include: EventIncludeSchema.optional(),
  where: EventWhereUniqueInputSchema,
}).strict() ;

export const EventUpdateArgsSchema: z.ZodType<Prisma.EventUpdateArgs> = z.object({
  select: EventSelectSchema.optional(),
  include: EventIncludeSchema.optional(),
  data: z.union([ EventUpdateInputSchema,EventUncheckedUpdateInputSchema ]),
  where: EventWhereUniqueInputSchema,
}).strict() ;

export const EventUpdateManyArgsSchema: z.ZodType<Prisma.EventUpdateManyArgs> = z.object({
  data: z.union([ EventUpdateManyMutationInputSchema,EventUncheckedUpdateManyInputSchema ]),
  where: EventWhereInputSchema.optional(),
}).strict() ;

export const EventDeleteManyArgsSchema: z.ZodType<Prisma.EventDeleteManyArgs> = z.object({
  where: EventWhereInputSchema.optional(),
}).strict() ;

export const EventActionCreateArgsSchema: z.ZodType<Prisma.EventActionCreateArgs> = z.object({
  select: EventActionSelectSchema.optional(),
  include: EventActionIncludeSchema.optional(),
  data: z.union([ EventActionCreateInputSchema,EventActionUncheckedCreateInputSchema ]),
}).strict() ;

export const EventActionUpsertArgsSchema: z.ZodType<Prisma.EventActionUpsertArgs> = z.object({
  select: EventActionSelectSchema.optional(),
  include: EventActionIncludeSchema.optional(),
  where: EventActionWhereUniqueInputSchema,
  create: z.union([ EventActionCreateInputSchema,EventActionUncheckedCreateInputSchema ]),
  update: z.union([ EventActionUpdateInputSchema,EventActionUncheckedUpdateInputSchema ]),
}).strict() ;

export const EventActionCreateManyArgsSchema: z.ZodType<Prisma.EventActionCreateManyArgs> = z.object({
  data: z.union([ EventActionCreateManyInputSchema,EventActionCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const EventActionCreateManyAndReturnArgsSchema: z.ZodType<Prisma.EventActionCreateManyAndReturnArgs> = z.object({
  data: z.union([ EventActionCreateManyInputSchema,EventActionCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const EventActionDeleteArgsSchema: z.ZodType<Prisma.EventActionDeleteArgs> = z.object({
  select: EventActionSelectSchema.optional(),
  include: EventActionIncludeSchema.optional(),
  where: EventActionWhereUniqueInputSchema,
}).strict() ;

export const EventActionUpdateArgsSchema: z.ZodType<Prisma.EventActionUpdateArgs> = z.object({
  select: EventActionSelectSchema.optional(),
  include: EventActionIncludeSchema.optional(),
  data: z.union([ EventActionUpdateInputSchema,EventActionUncheckedUpdateInputSchema ]),
  where: EventActionWhereUniqueInputSchema,
}).strict() ;

export const EventActionUpdateManyArgsSchema: z.ZodType<Prisma.EventActionUpdateManyArgs> = z.object({
  data: z.union([ EventActionUpdateManyMutationInputSchema,EventActionUncheckedUpdateManyInputSchema ]),
  where: EventActionWhereInputSchema.optional(),
}).strict() ;

export const EventActionDeleteManyArgsSchema: z.ZodType<Prisma.EventActionDeleteManyArgs> = z.object({
  where: EventActionWhereInputSchema.optional(),
}).strict() ;

export const ProductCreateArgsSchema: z.ZodType<Prisma.ProductCreateArgs> = z.object({
  select: ProductSelectSchema.optional(),
  include: ProductIncludeSchema.optional(),
  data: z.union([ ProductCreateInputSchema,ProductUncheckedCreateInputSchema ]),
}).strict() ;

export const ProductUpsertArgsSchema: z.ZodType<Prisma.ProductUpsertArgs> = z.object({
  select: ProductSelectSchema.optional(),
  include: ProductIncludeSchema.optional(),
  where: ProductWhereUniqueInputSchema,
  create: z.union([ ProductCreateInputSchema,ProductUncheckedCreateInputSchema ]),
  update: z.union([ ProductUpdateInputSchema,ProductUncheckedUpdateInputSchema ]),
}).strict() ;

export const ProductCreateManyArgsSchema: z.ZodType<Prisma.ProductCreateManyArgs> = z.object({
  data: z.union([ ProductCreateManyInputSchema,ProductCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const ProductCreateManyAndReturnArgsSchema: z.ZodType<Prisma.ProductCreateManyAndReturnArgs> = z.object({
  data: z.union([ ProductCreateManyInputSchema,ProductCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const ProductDeleteArgsSchema: z.ZodType<Prisma.ProductDeleteArgs> = z.object({
  select: ProductSelectSchema.optional(),
  include: ProductIncludeSchema.optional(),
  where: ProductWhereUniqueInputSchema,
}).strict() ;

export const ProductUpdateArgsSchema: z.ZodType<Prisma.ProductUpdateArgs> = z.object({
  select: ProductSelectSchema.optional(),
  include: ProductIncludeSchema.optional(),
  data: z.union([ ProductUpdateInputSchema,ProductUncheckedUpdateInputSchema ]),
  where: ProductWhereUniqueInputSchema,
}).strict() ;

export const ProductUpdateManyArgsSchema: z.ZodType<Prisma.ProductUpdateManyArgs> = z.object({
  data: z.union([ ProductUpdateManyMutationInputSchema,ProductUncheckedUpdateManyInputSchema ]),
  where: ProductWhereInputSchema.optional(),
}).strict() ;

export const ProductDeleteManyArgsSchema: z.ZodType<Prisma.ProductDeleteManyArgs> = z.object({
  where: ProductWhereInputSchema.optional(),
}).strict() ;

export const PriceCreateArgsSchema: z.ZodType<Prisma.PriceCreateArgs> = z.object({
  select: PriceSelectSchema.optional(),
  include: PriceIncludeSchema.optional(),
  data: z.union([ PriceCreateInputSchema,PriceUncheckedCreateInputSchema ]),
}).strict() ;

export const PriceUpsertArgsSchema: z.ZodType<Prisma.PriceUpsertArgs> = z.object({
  select: PriceSelectSchema.optional(),
  include: PriceIncludeSchema.optional(),
  where: PriceWhereUniqueInputSchema,
  create: z.union([ PriceCreateInputSchema,PriceUncheckedCreateInputSchema ]),
  update: z.union([ PriceUpdateInputSchema,PriceUncheckedUpdateInputSchema ]),
}).strict() ;

export const PriceCreateManyArgsSchema: z.ZodType<Prisma.PriceCreateManyArgs> = z.object({
  data: z.union([ PriceCreateManyInputSchema,PriceCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const PriceCreateManyAndReturnArgsSchema: z.ZodType<Prisma.PriceCreateManyAndReturnArgs> = z.object({
  data: z.union([ PriceCreateManyInputSchema,PriceCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const PriceDeleteArgsSchema: z.ZodType<Prisma.PriceDeleteArgs> = z.object({
  select: PriceSelectSchema.optional(),
  include: PriceIncludeSchema.optional(),
  where: PriceWhereUniqueInputSchema,
}).strict() ;

export const PriceUpdateArgsSchema: z.ZodType<Prisma.PriceUpdateArgs> = z.object({
  select: PriceSelectSchema.optional(),
  include: PriceIncludeSchema.optional(),
  data: z.union([ PriceUpdateInputSchema,PriceUncheckedUpdateInputSchema ]),
  where: PriceWhereUniqueInputSchema,
}).strict() ;

export const PriceUpdateManyArgsSchema: z.ZodType<Prisma.PriceUpdateManyArgs> = z.object({
  data: z.union([ PriceUpdateManyMutationInputSchema,PriceUncheckedUpdateManyInputSchema ]),
  where: PriceWhereInputSchema.optional(),
}).strict() ;

export const PriceDeleteManyArgsSchema: z.ZodType<Prisma.PriceDeleteManyArgs> = z.object({
  where: PriceWhereInputSchema.optional(),
}).strict() ;

export const ProductCategoryCreateArgsSchema: z.ZodType<Prisma.ProductCategoryCreateArgs> = z.object({
  select: ProductCategorySelectSchema.optional(),
  include: ProductCategoryIncludeSchema.optional(),
  data: z.union([ ProductCategoryCreateInputSchema,ProductCategoryUncheckedCreateInputSchema ]),
}).strict() ;

export const ProductCategoryUpsertArgsSchema: z.ZodType<Prisma.ProductCategoryUpsertArgs> = z.object({
  select: ProductCategorySelectSchema.optional(),
  include: ProductCategoryIncludeSchema.optional(),
  where: ProductCategoryWhereUniqueInputSchema,
  create: z.union([ ProductCategoryCreateInputSchema,ProductCategoryUncheckedCreateInputSchema ]),
  update: z.union([ ProductCategoryUpdateInputSchema,ProductCategoryUncheckedUpdateInputSchema ]),
}).strict() ;

export const ProductCategoryCreateManyArgsSchema: z.ZodType<Prisma.ProductCategoryCreateManyArgs> = z.object({
  data: z.union([ ProductCategoryCreateManyInputSchema,ProductCategoryCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const ProductCategoryCreateManyAndReturnArgsSchema: z.ZodType<Prisma.ProductCategoryCreateManyAndReturnArgs> = z.object({
  data: z.union([ ProductCategoryCreateManyInputSchema,ProductCategoryCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const ProductCategoryDeleteArgsSchema: z.ZodType<Prisma.ProductCategoryDeleteArgs> = z.object({
  select: ProductCategorySelectSchema.optional(),
  include: ProductCategoryIncludeSchema.optional(),
  where: ProductCategoryWhereUniqueInputSchema,
}).strict() ;

export const ProductCategoryUpdateArgsSchema: z.ZodType<Prisma.ProductCategoryUpdateArgs> = z.object({
  select: ProductCategorySelectSchema.optional(),
  include: ProductCategoryIncludeSchema.optional(),
  data: z.union([ ProductCategoryUpdateInputSchema,ProductCategoryUncheckedUpdateInputSchema ]),
  where: ProductCategoryWhereUniqueInputSchema,
}).strict() ;

export const ProductCategoryUpdateManyArgsSchema: z.ZodType<Prisma.ProductCategoryUpdateManyArgs> = z.object({
  data: z.union([ ProductCategoryUpdateManyMutationInputSchema,ProductCategoryUncheckedUpdateManyInputSchema ]),
  where: ProductCategoryWhereInputSchema.optional(),
}).strict() ;

export const ProductCategoryDeleteManyArgsSchema: z.ZodType<Prisma.ProductCategoryDeleteManyArgs> = z.object({
  where: ProductCategoryWhereInputSchema.optional(),
}).strict() ;

export const TreatmentCreateArgsSchema: z.ZodType<Prisma.TreatmentCreateArgs> = z.object({
  select: TreatmentSelectSchema.optional(),
  include: TreatmentIncludeSchema.optional(),
  data: z.union([ TreatmentCreateInputSchema,TreatmentUncheckedCreateInputSchema ]),
}).strict() ;

export const TreatmentUpsertArgsSchema: z.ZodType<Prisma.TreatmentUpsertArgs> = z.object({
  select: TreatmentSelectSchema.optional(),
  include: TreatmentIncludeSchema.optional(),
  where: TreatmentWhereUniqueInputSchema,
  create: z.union([ TreatmentCreateInputSchema,TreatmentUncheckedCreateInputSchema ]),
  update: z.union([ TreatmentUpdateInputSchema,TreatmentUncheckedUpdateInputSchema ]),
}).strict() ;

export const TreatmentCreateManyArgsSchema: z.ZodType<Prisma.TreatmentCreateManyArgs> = z.object({
  data: z.union([ TreatmentCreateManyInputSchema,TreatmentCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const TreatmentCreateManyAndReturnArgsSchema: z.ZodType<Prisma.TreatmentCreateManyAndReturnArgs> = z.object({
  data: z.union([ TreatmentCreateManyInputSchema,TreatmentCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const TreatmentDeleteArgsSchema: z.ZodType<Prisma.TreatmentDeleteArgs> = z.object({
  select: TreatmentSelectSchema.optional(),
  include: TreatmentIncludeSchema.optional(),
  where: TreatmentWhereUniqueInputSchema,
}).strict() ;

export const TreatmentUpdateArgsSchema: z.ZodType<Prisma.TreatmentUpdateArgs> = z.object({
  select: TreatmentSelectSchema.optional(),
  include: TreatmentIncludeSchema.optional(),
  data: z.union([ TreatmentUpdateInputSchema,TreatmentUncheckedUpdateInputSchema ]),
  where: TreatmentWhereUniqueInputSchema,
}).strict() ;

export const TreatmentUpdateManyArgsSchema: z.ZodType<Prisma.TreatmentUpdateManyArgs> = z.object({
  data: z.union([ TreatmentUpdateManyMutationInputSchema,TreatmentUncheckedUpdateManyInputSchema ]),
  where: TreatmentWhereInputSchema.optional(),
}).strict() ;

export const TreatmentDeleteManyArgsSchema: z.ZodType<Prisma.TreatmentDeleteManyArgs> = z.object({
  where: TreatmentWhereInputSchema.optional(),
}).strict() ;

export const TreatmentPlanCreateArgsSchema: z.ZodType<Prisma.TreatmentPlanCreateArgs> = z.object({
  select: TreatmentPlanSelectSchema.optional(),
  include: TreatmentPlanIncludeSchema.optional(),
  data: z.union([ TreatmentPlanCreateInputSchema,TreatmentPlanUncheckedCreateInputSchema ]),
}).strict() ;

export const TreatmentPlanUpsertArgsSchema: z.ZodType<Prisma.TreatmentPlanUpsertArgs> = z.object({
  select: TreatmentPlanSelectSchema.optional(),
  include: TreatmentPlanIncludeSchema.optional(),
  where: TreatmentPlanWhereUniqueInputSchema,
  create: z.union([ TreatmentPlanCreateInputSchema,TreatmentPlanUncheckedCreateInputSchema ]),
  update: z.union([ TreatmentPlanUpdateInputSchema,TreatmentPlanUncheckedUpdateInputSchema ]),
}).strict() ;

export const TreatmentPlanCreateManyArgsSchema: z.ZodType<Prisma.TreatmentPlanCreateManyArgs> = z.object({
  data: z.union([ TreatmentPlanCreateManyInputSchema,TreatmentPlanCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const TreatmentPlanCreateManyAndReturnArgsSchema: z.ZodType<Prisma.TreatmentPlanCreateManyAndReturnArgs> = z.object({
  data: z.union([ TreatmentPlanCreateManyInputSchema,TreatmentPlanCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const TreatmentPlanDeleteArgsSchema: z.ZodType<Prisma.TreatmentPlanDeleteArgs> = z.object({
  select: TreatmentPlanSelectSchema.optional(),
  include: TreatmentPlanIncludeSchema.optional(),
  where: TreatmentPlanWhereUniqueInputSchema,
}).strict() ;

export const TreatmentPlanUpdateArgsSchema: z.ZodType<Prisma.TreatmentPlanUpdateArgs> = z.object({
  select: TreatmentPlanSelectSchema.optional(),
  include: TreatmentPlanIncludeSchema.optional(),
  data: z.union([ TreatmentPlanUpdateInputSchema,TreatmentPlanUncheckedUpdateInputSchema ]),
  where: TreatmentPlanWhereUniqueInputSchema,
}).strict() ;

export const TreatmentPlanUpdateManyArgsSchema: z.ZodType<Prisma.TreatmentPlanUpdateManyArgs> = z.object({
  data: z.union([ TreatmentPlanUpdateManyMutationInputSchema,TreatmentPlanUncheckedUpdateManyInputSchema ]),
  where: TreatmentPlanWhereInputSchema.optional(),
}).strict() ;

export const TreatmentPlanDeleteManyArgsSchema: z.ZodType<Prisma.TreatmentPlanDeleteManyArgs> = z.object({
  where: TreatmentPlanWhereInputSchema.optional(),
}).strict() ;

export const CountyCreateArgsSchema: z.ZodType<Prisma.CountyCreateArgs> = z.object({
  select: CountySelectSchema.optional(),
  include: CountyIncludeSchema.optional(),
  data: z.union([ CountyCreateInputSchema,CountyUncheckedCreateInputSchema ]),
}).strict() ;

export const CountyUpsertArgsSchema: z.ZodType<Prisma.CountyUpsertArgs> = z.object({
  select: CountySelectSchema.optional(),
  include: CountyIncludeSchema.optional(),
  where: CountyWhereUniqueInputSchema,
  create: z.union([ CountyCreateInputSchema,CountyUncheckedCreateInputSchema ]),
  update: z.union([ CountyUpdateInputSchema,CountyUncheckedUpdateInputSchema ]),
}).strict() ;

export const CountyCreateManyArgsSchema: z.ZodType<Prisma.CountyCreateManyArgs> = z.object({
  data: z.union([ CountyCreateManyInputSchema,CountyCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const CountyCreateManyAndReturnArgsSchema: z.ZodType<Prisma.CountyCreateManyAndReturnArgs> = z.object({
  data: z.union([ CountyCreateManyInputSchema,CountyCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const CountyDeleteArgsSchema: z.ZodType<Prisma.CountyDeleteArgs> = z.object({
  select: CountySelectSchema.optional(),
  include: CountyIncludeSchema.optional(),
  where: CountyWhereUniqueInputSchema,
}).strict() ;

export const CountyUpdateArgsSchema: z.ZodType<Prisma.CountyUpdateArgs> = z.object({
  select: CountySelectSchema.optional(),
  include: CountyIncludeSchema.optional(),
  data: z.union([ CountyUpdateInputSchema,CountyUncheckedUpdateInputSchema ]),
  where: CountyWhereUniqueInputSchema,
}).strict() ;

export const CountyUpdateManyArgsSchema: z.ZodType<Prisma.CountyUpdateManyArgs> = z.object({
  data: z.union([ CountyUpdateManyMutationInputSchema,CountyUncheckedUpdateManyInputSchema ]),
  where: CountyWhereInputSchema.optional(),
}).strict() ;

export const CountyDeleteManyArgsSchema: z.ZodType<Prisma.CountyDeleteManyArgs> = z.object({
  where: CountyWhereInputSchema.optional(),
}).strict() ;

export const CityCreateArgsSchema: z.ZodType<Prisma.CityCreateArgs> = z.object({
  select: CitySelectSchema.optional(),
  include: CityIncludeSchema.optional(),
  data: z.union([ CityCreateInputSchema,CityUncheckedCreateInputSchema ]),
}).strict() ;

export const CityUpsertArgsSchema: z.ZodType<Prisma.CityUpsertArgs> = z.object({
  select: CitySelectSchema.optional(),
  include: CityIncludeSchema.optional(),
  where: CityWhereUniqueInputSchema,
  create: z.union([ CityCreateInputSchema,CityUncheckedCreateInputSchema ]),
  update: z.union([ CityUpdateInputSchema,CityUncheckedUpdateInputSchema ]),
}).strict() ;

export const CityCreateManyArgsSchema: z.ZodType<Prisma.CityCreateManyArgs> = z.object({
  data: z.union([ CityCreateManyInputSchema,CityCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const CityCreateManyAndReturnArgsSchema: z.ZodType<Prisma.CityCreateManyAndReturnArgs> = z.object({
  data: z.union([ CityCreateManyInputSchema,CityCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const CityDeleteArgsSchema: z.ZodType<Prisma.CityDeleteArgs> = z.object({
  select: CitySelectSchema.optional(),
  include: CityIncludeSchema.optional(),
  where: CityWhereUniqueInputSchema,
}).strict() ;

export const CityUpdateArgsSchema: z.ZodType<Prisma.CityUpdateArgs> = z.object({
  select: CitySelectSchema.optional(),
  include: CityIncludeSchema.optional(),
  data: z.union([ CityUpdateInputSchema,CityUncheckedUpdateInputSchema ]),
  where: CityWhereUniqueInputSchema,
}).strict() ;

export const CityUpdateManyArgsSchema: z.ZodType<Prisma.CityUpdateManyArgs> = z.object({
  data: z.union([ CityUpdateManyMutationInputSchema,CityUncheckedUpdateManyInputSchema ]),
  where: CityWhereInputSchema.optional(),
}).strict() ;

export const CityDeleteManyArgsSchema: z.ZodType<Prisma.CityDeleteManyArgs> = z.object({
  where: CityWhereInputSchema.optional(),
}).strict() ;