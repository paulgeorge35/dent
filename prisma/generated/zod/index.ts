import { z } from 'zod';
import { Prisma } from '@prisma/client';

/////////////////////////////////////////
// HELPER FUNCTIONS
/////////////////////////////////////////

// JSON
//------------------------------------------------------

export type NullableJsonInput = Prisma.JsonValue | null | 'JsonNull' | 'DbNull' | Prisma.NullTypes.DbNull | Prisma.NullTypes.JsonNull;

export const transformJsonNull = (v?: NullableJsonInput) => {
  if (!v || v === 'DbNull') return Prisma.DbNull;
  if (v === 'JsonNull') return Prisma.JsonNull;
  return v;
};

export const JsonValueSchema: z.ZodType<Prisma.JsonValue> = z.lazy(() =>
  z.union([
    z.string(),
    z.number(),
    z.boolean(),
    z.literal(null),
    z.record(z.lazy(() => JsonValueSchema.optional())),
    z.array(z.lazy(() => JsonValueSchema)),
  ])
);

export type JsonValueType = z.infer<typeof JsonValueSchema>;

export const NullableJsonValue = z
  .union([JsonValueSchema, z.literal('DbNull'), z.literal('JsonNull')])
  .nullable()
  .transform((v) => transformJsonNull(v));

export type NullableJsonValueType = z.infer<typeof NullableJsonValue>;

export const InputJsonValueSchema: z.ZodType<Prisma.InputJsonValue> = z.lazy(() =>
  z.union([
    z.string(),
    z.number(),
    z.boolean(),
    z.object({ toJSON: z.function(z.tuple([]), z.any()) }),
    z.record(z.lazy(() => z.union([InputJsonValueSchema, z.literal(null)]))),
    z.array(z.lazy(() => z.union([InputJsonValueSchema, z.literal(null)]))),
  ])
);

export type InputJsonValueType = z.infer<typeof InputJsonValueSchema>;


/////////////////////////////////////////
// ENUMS
/////////////////////////////////////////

export const TransactionIsolationLevelSchema = z.enum(['ReadUncommitted','ReadCommitted','RepeatableRead','Serializable']);

export const TenantScalarFieldEnumSchema = z.enum(['id','email','profileId','deletedAt','disabledAt','trialExpiresAt','createdAt','updatedAt']);

export const TenantProfileScalarFieldEnumSchema = z.enum(['id','name','county','address','zip','phone','size','stripeSubscriptionId','activeSubscription','planId','createdAt','updatedAt']);

export const UserScalarFieldEnumSchema = z.enum(['id','index','role','workingHours','firstDayOfWeek','showWeekends','webhookApiKey','specialityId','profileId','tenantId','deletedAt','activatedAt','lastLoginAt','bannedAt','createdAt','updatedAt']);

export const ProfileScalarFieldEnumSchema = z.enum(['id','title','firstName','lastName','email','phone','activatedAt','stripeCustomerId','stripeFreeTrialUsed','preferredTenantId','createdAt','updatedAt']);

export const AccountScalarFieldEnumSchema = z.enum(['id','profileId','type','provider','passwordHash','refresh_token','access_token','expires_at','refresh_token_expires_in','token_type','scope','id_token','session_state']);

export const PlanScalarFieldEnumSchema = z.enum(['id','stripeProductId','stripePriceId','name','maxUsers','createdAt','updatedAt']);

export const TokenScalarFieldEnumSchema = z.enum(['id','type','token','expires','profileId']);

export const InvitationScalarFieldEnumSchema = z.enum(['id','email','role','token','expires','invitedById','userId','createdAt','updatedAt']);

export const PatientScalarFieldEnumSchema = z.enum(['id','firstName','lastName','gender','dob','email','phone','city','county','status','smsNotifications','emailNotifications','filters','userId','tenantId','createdAt','updatedAt']);

export const SpecialityScalarFieldEnumSchema = z.enum(['id','name','description','color','tenantId','createdAt','updatedAt']);

export const EventScalarFieldEnumSchema = z.enum(['id','index','title','description','date','start','end','allDay','type','status','initiator','patientId','userId','tenantId','createdAt','updatedAt']);

export const EventActionScalarFieldEnumSchema = z.enum(['id','data','userId','eventId','createdAt','updatedAt']);

export const MaterialScalarFieldEnumSchema = z.enum(['id','name','description','unit_price','unit','image','tags','isActive','keepInventory','stock','tenantId','createdAt','updatedAt']);

export const ServiceScalarFieldEnumSchema = z.enum(['id','name','description','unit_price','unit','duration','image','tags','isActive','tenantId','categoryId','createdAt','updatedAt']);

export const RelatedServiceScalarFieldEnumSchema = z.enum(['id','order','quantity','unit_price','service','parentId']);

export const ServiceMaterialScalarFieldEnumSchema = z.enum(['id','quantity','unit_price','serviceId','materialId']);

export const PriceScalarFieldEnumSchema = z.enum(['id','unit_price','entityId','type','createdAt','updatedAt']);

export const ServiceCategoryScalarFieldEnumSchema = z.enum(['id','name','createdAt','updatedAt']);

export const TreatmentScalarFieldEnumSchema = z.enum(['id','price','target','status','treatmentPlanId','createdAt','updatedAt']);

export const VisitScalarFieldEnumSchema = z.enum(['id','serviceId','treatmentId','eventId','createdAt','updatedAt']);

export const TreatmentPlanScalarFieldEnumSchema = z.enum(['id','description','isDone','patientId','userId','createdAt','updatedAt']);

export const QuizScalarFieldEnumSchema = z.enum(['id','quiz','answers','patientId','eventId','createdAt','updatedAt']);

export const TagScalarFieldEnumSchema = z.enum(['id','name','createdAt','updatedAt']);

export const TaskScalarFieldEnumSchema = z.enum(['id','title','isDone','dueDate','userId','createdAt','updatedAt']);

export const FileScalarFieldEnumSchema = z.enum(['id','url','key','name','extension','contentType','size','confirmed','tenantId','userId','eventId','patientId','createdAt','updatedAt']);

export const AvatarScalarFieldEnumSchema = z.enum(['id','url','key','profileId','tenantProfileId','createdAt','updatedAt']);

export const CountyScalarFieldEnumSchema = z.enum(['id','name','code','createdAt','updatedAt']);

export const CityScalarFieldEnumSchema = z.enum(['id','name','countyId','createdAt','updatedAt']);

export const SortOrderSchema = z.enum(['asc','desc']);

export const JsonNullValueInputSchema = z.enum(['JsonNull',]).transform((value) => (value === 'JsonNull' ? Prisma.JsonNull : value));

export const QueryModeSchema = z.enum(['default','insensitive']);

export const NullsOrderSchema = z.enum(['first','last']);

export const JsonNullValueFilterSchema = z.enum(['DbNull','JsonNull','AnyNull',]).transform((value) => value === 'JsonNull' ? Prisma.JsonNull : value === 'DbNull' ? Prisma.JsonNull : value === 'AnyNull' ? Prisma.AnyNull : value);

export const ServiceUnitSchema = z.enum(['TOOTH','QUAD','ARCH','VISIT']);

export type ServiceUnitType = `${z.infer<typeof ServiceUnitSchema>}`

export const TreatmentStatusSchema = z.enum(['PLANNED','COMPLETED','CANCELLED']);

export type TreatmentStatusType = `${z.infer<typeof TreatmentStatusSchema>}`

export const CurrencySchema = z.enum(['RON','EUR','USD']);

export type CurrencyType = `${z.infer<typeof CurrencySchema>}`

export const ContractTypeSchema = z.enum(['FIXED','HOURLY','PERCENTAGE']);

export type ContractTypeType = `${z.infer<typeof ContractTypeSchema>}`

export const RoleSchema = z.enum(['USER','ADMIN']);

export type RoleType = `${z.infer<typeof RoleSchema>}`

export const StatusSchema = z.enum(['ACTIVE','INACTIVE']);

export type StatusType = `${z.infer<typeof StatusSchema>}`

export const TokenTypeSchema = z.enum(['ACTIVATION','PASSWORD_RESET','MAGIC_LINK']);

export type TokenTypeType = `${z.infer<typeof TokenTypeSchema>}`

export const EventStatusSchema = z.enum(['CREATED','CONFIRMED','COMPLETED','CANCELLED','RESCHEDULED']);

export type EventStatusType = `${z.infer<typeof EventStatusSchema>}`

export const EventTypeSchema = z.enum(['APPOINTMENT','DAY_OFF']);

export type EventTypeType = `${z.infer<typeof EventTypeSchema>}`

export const EventInitiatorSchema = z.enum(['PATIENT','USER','SYSTEM']);

export type EventInitiatorType = `${z.infer<typeof EventInitiatorSchema>}`

export const PriceTypeSchema = z.enum(['MATERIAL','SERVICE']);

export type PriceTypeType = `${z.infer<typeof PriceTypeSchema>}`

export const DayOfWeekSchema = z.enum(['MONDAY','TUESDAY','WEDNESDAY','THURSDAY','FRIDAY','SATURDAY','SUNDAY']);

export type DayOfWeekType = `${z.infer<typeof DayOfWeekSchema>}`

/////////////////////////////////////////
// MODELS
/////////////////////////////////////////

/////////////////////////////////////////
// TENANT SCHEMA
/////////////////////////////////////////

export const TenantSchema = z.object({
  id: z.string().cuid(),
  email: z.string(),
  profileId: z.string(),
  deletedAt: z.coerce.date().nullable(),
  disabledAt: z.coerce.date().nullable(),
  trialExpiresAt: z.coerce.date().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
})

export type Tenant = z.infer<typeof TenantSchema>

/////////////////////////////////////////
// TENANT PROFILE SCHEMA
/////////////////////////////////////////

export const TenantProfileSchema = z.object({
  id: z.string().cuid(),
  name: z.string(),
  county: z.string().nullable(),
  address: z.string().nullable(),
  zip: z.string().nullable(),
  phone: z.string().nullable(),
  size: z.string().nullable(),
  stripeSubscriptionId: z.string(),
  activeSubscription: z.boolean(),
  planId: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
})

export type TenantProfile = z.infer<typeof TenantProfileSchema>

/////////////////////////////////////////
// USER SCHEMA
/////////////////////////////////////////

export const UserSchema = z.object({
  role: RoleSchema,
  firstDayOfWeek: DayOfWeekSchema,
  id: z.string().cuid(),
  index: z.number().int(),
  workingHours: JsonValueSchema,
  showWeekends: z.boolean(),
  webhookApiKey: z.string().nullable(),
  specialityId: z.string().nullable(),
  profileId: z.string(),
  tenantId: z.string(),
  deletedAt: z.coerce.date().nullable(),
  activatedAt: z.coerce.date().nullable(),
  lastLoginAt: z.coerce.date().nullable(),
  bannedAt: z.coerce.date().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
})

export type User = z.infer<typeof UserSchema>

/////////////////////////////////////////
// PROFILE SCHEMA
/////////////////////////////////////////

export const ProfileSchema = z.object({
  id: z.string().cuid(),
  title: z.string().nullable(),
  firstName: z.string(),
  lastName: z.string(),
  email: z.string(),
  phone: z.string().nullable(),
  activatedAt: z.coerce.date().nullable(),
  stripeCustomerId: z.string().nullable(),
  stripeFreeTrialUsed: z.boolean(),
  preferredTenantId: z.string().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
})

export type Profile = z.infer<typeof ProfileSchema>

/////////////////////////////////////////
// ACCOUNT SCHEMA
/////////////////////////////////////////

export const AccountSchema = z.object({
  id: z.string().cuid(),
  profileId: z.string(),
  type: z.string(),
  provider: z.string(),
  passwordHash: z.string().nullable(),
  refresh_token: z.string().nullable(),
  access_token: z.string().nullable(),
  expires_at: z.coerce.date().nullable(),
  refresh_token_expires_in: z.number().int().nullable(),
  token_type: z.string().nullable(),
  scope: z.string().nullable(),
  id_token: z.string().nullable(),
  session_state: z.string().nullable(),
})

export type Account = z.infer<typeof AccountSchema>

/////////////////////////////////////////
// PLAN SCHEMA
/////////////////////////////////////////

export const PlanSchema = z.object({
  id: z.string().cuid(),
  stripeProductId: z.string(),
  stripePriceId: z.string(),
  name: z.string(),
  maxUsers: z.number().int(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
})

export type Plan = z.infer<typeof PlanSchema>

/////////////////////////////////////////
// TOKEN SCHEMA
/////////////////////////////////////////

export const TokenSchema = z.object({
  type: TokenTypeSchema,
  id: z.string().cuid(),
  token: z.string(),
  expires: z.coerce.date(),
  profileId: z.string(),
})

export type Token = z.infer<typeof TokenSchema>

/////////////////////////////////////////
// INVITATION SCHEMA
/////////////////////////////////////////

export const InvitationSchema = z.object({
  role: RoleSchema,
  id: z.string().cuid(),
  email: z.string(),
  token: z.string(),
  expires: z.coerce.date(),
  invitedById: z.string(),
  userId: z.string().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
})

export type Invitation = z.infer<typeof InvitationSchema>

/////////////////////////////////////////
// PATIENT SCHEMA
/////////////////////////////////////////

export const PatientSchema = z.object({
  status: StatusSchema,
  id: z.string().cuid(),
  firstName: z.string(),
  lastName: z.string(),
  gender: z.string().nullable(),
  dob: z.coerce.date().nullable(),
  email: z.string().nullable(),
  phone: z.string().nullable(),
  city: z.string().nullable(),
  county: z.string().nullable(),
  smsNotifications: z.boolean(),
  emailNotifications: z.boolean(),
  filters: JsonValueSchema,
  userId: z.string(),
  tenantId: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
})

export type Patient = z.infer<typeof PatientSchema>

/////////////////////////////////////////
// SPECIALITY SCHEMA
/////////////////////////////////////////

export const SpecialitySchema = z.object({
  id: z.string().cuid(),
  name: z.string(),
  description: z.string().nullable(),
  color: z.string(),
  tenantId: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
})

export type Speciality = z.infer<typeof SpecialitySchema>

/////////////////////////////////////////
// EVENT SCHEMA
/////////////////////////////////////////

export const EventSchema = z.object({
  type: EventTypeSchema,
  status: EventStatusSchema,
  initiator: EventInitiatorSchema,
  id: z.string().cuid(),
  index: z.number().int(),
  title: z.string(),
  description: z.string().nullable(),
  date: z.coerce.date(),
  start: z.coerce.date().nullable(),
  end: z.coerce.date().nullable(),
  allDay: z.boolean(),
  patientId: z.string().nullable(),
  userId: z.string(),
  tenantId: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
})

export type Event = z.infer<typeof EventSchema>

/////////////////////////////////////////
// EVENT ACTION SCHEMA
/////////////////////////////////////////

export const EventActionSchema = z.object({
  id: z.string().cuid(),
  data: JsonValueSchema,
  userId: z.string(),
  eventId: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
})

export type EventAction = z.infer<typeof EventActionSchema>

/////////////////////////////////////////
// MATERIAL SCHEMA
/////////////////////////////////////////

export const MaterialSchema = z.object({
  id: z.string().cuid(),
  name: z.string(),
  description: z.string().nullable(),
  unit_price: z.number().int(),
  unit: z.string(),
  image: z.string().nullable(),
  tags: z.string().array(),
  isActive: z.boolean(),
  keepInventory: z.boolean(),
  stock: z.number().int(),
  tenantId: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
})

export type Material = z.infer<typeof MaterialSchema>

/////////////////////////////////////////
// SERVICE SCHEMA
/////////////////////////////////////////

export const ServiceSchema = z.object({
  unit: ServiceUnitSchema,
  id: z.string().cuid(),
  name: z.string(),
  description: z.string().nullable(),
  unit_price: z.number().int(),
  duration: z.number().int(),
  image: z.string().nullable(),
  tags: z.string().array(),
  isActive: z.boolean(),
  tenantId: z.string(),
  categoryId: z.string().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
})

export type Service = z.infer<typeof ServiceSchema>

/////////////////////////////////////////
// RELATED SERVICE SCHEMA
/////////////////////////////////////////

export const RelatedServiceSchema = z.object({
  id: z.string().cuid(),
  order: z.number().int(),
  quantity: z.number().int(),
  unit_price: z.number().int(),
  service: JsonValueSchema,
  parentId: z.string(),
})

export type RelatedService = z.infer<typeof RelatedServiceSchema>

/////////////////////////////////////////
// SERVICE MATERIAL SCHEMA
/////////////////////////////////////////

export const ServiceMaterialSchema = z.object({
  id: z.string().cuid(),
  quantity: z.number().int(),
  unit_price: z.number().int(),
  serviceId: z.string(),
  materialId: z.string(),
})

export type ServiceMaterial = z.infer<typeof ServiceMaterialSchema>

/////////////////////////////////////////
// PRICE SCHEMA
/////////////////////////////////////////

export const PriceSchema = z.object({
  type: PriceTypeSchema,
  id: z.string().cuid(),
  unit_price: z.number().int(),
  entityId: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
})

export type Price = z.infer<typeof PriceSchema>

/////////////////////////////////////////
// SERVICE CATEGORY SCHEMA
/////////////////////////////////////////

export const ServiceCategorySchema = z.object({
  id: z.string().cuid(),
  name: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
})

export type ServiceCategory = z.infer<typeof ServiceCategorySchema>

/////////////////////////////////////////
// TREATMENT SCHEMA
/////////////////////////////////////////

export const TreatmentSchema = z.object({
  status: TreatmentStatusSchema,
  id: z.string().cuid(),
  price: z.number().int(),
  target: z.string().nullable(),
  treatmentPlanId: z.string().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
})

export type Treatment = z.infer<typeof TreatmentSchema>

/////////////////////////////////////////
// VISIT SCHEMA
/////////////////////////////////////////

export const VisitSchema = z.object({
  id: z.string().cuid(),
  serviceId: z.string(),
  treatmentId: z.string(),
  eventId: z.string().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
})

export type Visit = z.infer<typeof VisitSchema>

/////////////////////////////////////////
// TREATMENT PLAN SCHEMA
/////////////////////////////////////////

export const TreatmentPlanSchema = z.object({
  id: z.string().cuid(),
  description: z.string().nullable(),
  isDone: z.boolean(),
  patientId: z.string(),
  userId: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
})

export type TreatmentPlan = z.infer<typeof TreatmentPlanSchema>

/////////////////////////////////////////
// QUIZ SCHEMA
/////////////////////////////////////////

export const QuizSchema = z.object({
  id: z.string().cuid(),
  quiz: JsonValueSchema,
  answers: z.number().int().array(),
  patientId: z.string(),
  eventId: z.string().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
})

export type Quiz = z.infer<typeof QuizSchema>

/////////////////////////////////////////
// TAG SCHEMA
/////////////////////////////////////////

export const TagSchema = z.object({
  id: z.string().cuid(),
  name: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
})

export type Tag = z.infer<typeof TagSchema>

/////////////////////////////////////////
// TASK SCHEMA
/////////////////////////////////////////

export const TaskSchema = z.object({
  id: z.string().cuid(),
  title: z.string(),
  isDone: z.boolean(),
  dueDate: z.coerce.date().nullable(),
  userId: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
})

export type Task = z.infer<typeof TaskSchema>

/////////////////////////////////////////
// FILE SCHEMA
/////////////////////////////////////////

export const FileSchema = z.object({
  id: z.string().cuid(),
  url: z.string(),
  key: z.string(),
  name: z.string(),
  extension: z.string(),
  contentType: z.string(),
  size: z.number().int(),
  confirmed: z.boolean(),
  tenantId: z.string(),
  userId: z.string(),
  eventId: z.string().nullable(),
  patientId: z.string().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
})

export type File = z.infer<typeof FileSchema>

/////////////////////////////////////////
// AVATAR SCHEMA
/////////////////////////////////////////

export const AvatarSchema = z.object({
  id: z.string().cuid(),
  url: z.string(),
  key: z.string(),
  profileId: z.string().nullable(),
  tenantProfileId: z.string().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
})

export type Avatar = z.infer<typeof AvatarSchema>

/////////////////////////////////////////
// COUNTY SCHEMA
/////////////////////////////////////////

export const CountySchema = z.object({
  id: z.string(),
  name: z.string(),
  code: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
})

export type County = z.infer<typeof CountySchema>

/////////////////////////////////////////
// CITY SCHEMA
/////////////////////////////////////////

export const CitySchema = z.object({
  id: z.string(),
  name: z.string(),
  countyId: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
})

export type City = z.infer<typeof CitySchema>

/////////////////////////////////////////
// SELECT & INCLUDE
/////////////////////////////////////////

// TENANT
//------------------------------------------------------

export const TenantIncludeSchema: z.ZodType<Prisma.TenantInclude> = z.object({
  users: z.union([z.boolean(),z.lazy(() => UserFindManyArgsSchema)]).optional(),
  profile: z.union([z.boolean(),z.lazy(() => TenantProfileArgsSchema)]).optional(),
  specialities: z.union([z.boolean(),z.lazy(() => SpecialityFindManyArgsSchema)]).optional(),
  preferedByProfiles: z.union([z.boolean(),z.lazy(() => ProfileFindManyArgsSchema)]).optional(),
  patients: z.union([z.boolean(),z.lazy(() => PatientFindManyArgsSchema)]).optional(),
  services: z.union([z.boolean(),z.lazy(() => ServiceFindManyArgsSchema)]).optional(),
  materials: z.union([z.boolean(),z.lazy(() => MaterialFindManyArgsSchema)]).optional(),
  events: z.union([z.boolean(),z.lazy(() => EventFindManyArgsSchema)]).optional(),
  files: z.union([z.boolean(),z.lazy(() => FileFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => TenantCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const TenantArgsSchema: z.ZodType<Prisma.TenantDefaultArgs> = z.object({
  select: z.lazy(() => TenantSelectSchema).optional(),
  include: z.lazy(() => TenantIncludeSchema).optional(),
}).strict();

export const TenantCountOutputTypeArgsSchema: z.ZodType<Prisma.TenantCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => TenantCountOutputTypeSelectSchema).nullish(),
}).strict();

export const TenantCountOutputTypeSelectSchema: z.ZodType<Prisma.TenantCountOutputTypeSelect> = z.object({
  users: z.boolean().optional(),
  specialities: z.boolean().optional(),
  preferedByProfiles: z.boolean().optional(),
  patients: z.boolean().optional(),
  services: z.boolean().optional(),
  materials: z.boolean().optional(),
  events: z.boolean().optional(),
  files: z.boolean().optional(),
}).strict();

export const TenantSelectSchema: z.ZodType<Prisma.TenantSelect> = z.object({
  id: z.boolean().optional(),
  email: z.boolean().optional(),
  profileId: z.boolean().optional(),
  deletedAt: z.boolean().optional(),
  disabledAt: z.boolean().optional(),
  trialExpiresAt: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  users: z.union([z.boolean(),z.lazy(() => UserFindManyArgsSchema)]).optional(),
  profile: z.union([z.boolean(),z.lazy(() => TenantProfileArgsSchema)]).optional(),
  specialities: z.union([z.boolean(),z.lazy(() => SpecialityFindManyArgsSchema)]).optional(),
  preferedByProfiles: z.union([z.boolean(),z.lazy(() => ProfileFindManyArgsSchema)]).optional(),
  patients: z.union([z.boolean(),z.lazy(() => PatientFindManyArgsSchema)]).optional(),
  services: z.union([z.boolean(),z.lazy(() => ServiceFindManyArgsSchema)]).optional(),
  materials: z.union([z.boolean(),z.lazy(() => MaterialFindManyArgsSchema)]).optional(),
  events: z.union([z.boolean(),z.lazy(() => EventFindManyArgsSchema)]).optional(),
  files: z.union([z.boolean(),z.lazy(() => FileFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => TenantCountOutputTypeArgsSchema)]).optional(),
}).strict()

// TENANT PROFILE
//------------------------------------------------------

export const TenantProfileIncludeSchema: z.ZodType<Prisma.TenantProfileInclude> = z.object({
  avatar: z.union([z.boolean(),z.lazy(() => AvatarArgsSchema)]).optional(),
  plan: z.union([z.boolean(),z.lazy(() => PlanArgsSchema)]).optional(),
  tenant: z.union([z.boolean(),z.lazy(() => TenantArgsSchema)]).optional(),
}).strict()

export const TenantProfileArgsSchema: z.ZodType<Prisma.TenantProfileDefaultArgs> = z.object({
  select: z.lazy(() => TenantProfileSelectSchema).optional(),
  include: z.lazy(() => TenantProfileIncludeSchema).optional(),
}).strict();

export const TenantProfileSelectSchema: z.ZodType<Prisma.TenantProfileSelect> = z.object({
  id: z.boolean().optional(),
  name: z.boolean().optional(),
  county: z.boolean().optional(),
  address: z.boolean().optional(),
  zip: z.boolean().optional(),
  phone: z.boolean().optional(),
  size: z.boolean().optional(),
  stripeSubscriptionId: z.boolean().optional(),
  activeSubscription: z.boolean().optional(),
  planId: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  avatar: z.union([z.boolean(),z.lazy(() => AvatarArgsSchema)]).optional(),
  plan: z.union([z.boolean(),z.lazy(() => PlanArgsSchema)]).optional(),
  tenant: z.union([z.boolean(),z.lazy(() => TenantArgsSchema)]).optional(),
}).strict()

// USER
//------------------------------------------------------

export const UserIncludeSchema: z.ZodType<Prisma.UserInclude> = z.object({
  speciality: z.union([z.boolean(),z.lazy(() => SpecialityArgsSchema)]).optional(),
  profile: z.union([z.boolean(),z.lazy(() => ProfileArgsSchema)]).optional(),
  tenant: z.union([z.boolean(),z.lazy(() => TenantArgsSchema)]).optional(),
  invitation: z.union([z.boolean(),z.lazy(() => InvitationArgsSchema)]).optional(),
  patients: z.union([z.boolean(),z.lazy(() => PatientFindManyArgsSchema)]).optional(),
  events: z.union([z.boolean(),z.lazy(() => EventFindManyArgsSchema)]).optional(),
  eventActions: z.union([z.boolean(),z.lazy(() => EventActionFindManyArgsSchema)]).optional(),
  treatmentPlans: z.union([z.boolean(),z.lazy(() => TreatmentPlanFindManyArgsSchema)]).optional(),
  invitations: z.union([z.boolean(),z.lazy(() => InvitationFindManyArgsSchema)]).optional(),
  files: z.union([z.boolean(),z.lazy(() => FileFindManyArgsSchema)]).optional(),
  tasks: z.union([z.boolean(),z.lazy(() => TaskFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => UserCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const UserArgsSchema: z.ZodType<Prisma.UserDefaultArgs> = z.object({
  select: z.lazy(() => UserSelectSchema).optional(),
  include: z.lazy(() => UserIncludeSchema).optional(),
}).strict();

export const UserCountOutputTypeArgsSchema: z.ZodType<Prisma.UserCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => UserCountOutputTypeSelectSchema).nullish(),
}).strict();

export const UserCountOutputTypeSelectSchema: z.ZodType<Prisma.UserCountOutputTypeSelect> = z.object({
  patients: z.boolean().optional(),
  events: z.boolean().optional(),
  eventActions: z.boolean().optional(),
  treatmentPlans: z.boolean().optional(),
  invitations: z.boolean().optional(),
  files: z.boolean().optional(),
  tasks: z.boolean().optional(),
}).strict();

export const UserSelectSchema: z.ZodType<Prisma.UserSelect> = z.object({
  id: z.boolean().optional(),
  index: z.boolean().optional(),
  role: z.boolean().optional(),
  workingHours: z.boolean().optional(),
  firstDayOfWeek: z.boolean().optional(),
  showWeekends: z.boolean().optional(),
  webhookApiKey: z.boolean().optional(),
  specialityId: z.boolean().optional(),
  profileId: z.boolean().optional(),
  tenantId: z.boolean().optional(),
  deletedAt: z.boolean().optional(),
  activatedAt: z.boolean().optional(),
  lastLoginAt: z.boolean().optional(),
  bannedAt: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  speciality: z.union([z.boolean(),z.lazy(() => SpecialityArgsSchema)]).optional(),
  profile: z.union([z.boolean(),z.lazy(() => ProfileArgsSchema)]).optional(),
  tenant: z.union([z.boolean(),z.lazy(() => TenantArgsSchema)]).optional(),
  invitation: z.union([z.boolean(),z.lazy(() => InvitationArgsSchema)]).optional(),
  patients: z.union([z.boolean(),z.lazy(() => PatientFindManyArgsSchema)]).optional(),
  events: z.union([z.boolean(),z.lazy(() => EventFindManyArgsSchema)]).optional(),
  eventActions: z.union([z.boolean(),z.lazy(() => EventActionFindManyArgsSchema)]).optional(),
  treatmentPlans: z.union([z.boolean(),z.lazy(() => TreatmentPlanFindManyArgsSchema)]).optional(),
  invitations: z.union([z.boolean(),z.lazy(() => InvitationFindManyArgsSchema)]).optional(),
  files: z.union([z.boolean(),z.lazy(() => FileFindManyArgsSchema)]).optional(),
  tasks: z.union([z.boolean(),z.lazy(() => TaskFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => UserCountOutputTypeArgsSchema)]).optional(),
}).strict()

// PROFILE
//------------------------------------------------------

export const ProfileIncludeSchema: z.ZodType<Prisma.ProfileInclude> = z.object({
  avatar: z.union([z.boolean(),z.lazy(() => AvatarArgsSchema)]).optional(),
  preferredTenant: z.union([z.boolean(),z.lazy(() => TenantArgsSchema)]).optional(),
  users: z.union([z.boolean(),z.lazy(() => UserFindManyArgsSchema)]).optional(),
  accounts: z.union([z.boolean(),z.lazy(() => AccountFindManyArgsSchema)]).optional(),
  tokens: z.union([z.boolean(),z.lazy(() => TokenFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => ProfileCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const ProfileArgsSchema: z.ZodType<Prisma.ProfileDefaultArgs> = z.object({
  select: z.lazy(() => ProfileSelectSchema).optional(),
  include: z.lazy(() => ProfileIncludeSchema).optional(),
}).strict();

export const ProfileCountOutputTypeArgsSchema: z.ZodType<Prisma.ProfileCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => ProfileCountOutputTypeSelectSchema).nullish(),
}).strict();

export const ProfileCountOutputTypeSelectSchema: z.ZodType<Prisma.ProfileCountOutputTypeSelect> = z.object({
  users: z.boolean().optional(),
  accounts: z.boolean().optional(),
  tokens: z.boolean().optional(),
}).strict();

export const ProfileSelectSchema: z.ZodType<Prisma.ProfileSelect> = z.object({
  id: z.boolean().optional(),
  title: z.boolean().optional(),
  firstName: z.boolean().optional(),
  lastName: z.boolean().optional(),
  email: z.boolean().optional(),
  phone: z.boolean().optional(),
  activatedAt: z.boolean().optional(),
  stripeCustomerId: z.boolean().optional(),
  stripeFreeTrialUsed: z.boolean().optional(),
  preferredTenantId: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  avatar: z.union([z.boolean(),z.lazy(() => AvatarArgsSchema)]).optional(),
  preferredTenant: z.union([z.boolean(),z.lazy(() => TenantArgsSchema)]).optional(),
  users: z.union([z.boolean(),z.lazy(() => UserFindManyArgsSchema)]).optional(),
  accounts: z.union([z.boolean(),z.lazy(() => AccountFindManyArgsSchema)]).optional(),
  tokens: z.union([z.boolean(),z.lazy(() => TokenFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => ProfileCountOutputTypeArgsSchema)]).optional(),
}).strict()

// ACCOUNT
//------------------------------------------------------

export const AccountIncludeSchema: z.ZodType<Prisma.AccountInclude> = z.object({
  profile: z.union([z.boolean(),z.lazy(() => ProfileArgsSchema)]).optional(),
}).strict()

export const AccountArgsSchema: z.ZodType<Prisma.AccountDefaultArgs> = z.object({
  select: z.lazy(() => AccountSelectSchema).optional(),
  include: z.lazy(() => AccountIncludeSchema).optional(),
}).strict();

export const AccountSelectSchema: z.ZodType<Prisma.AccountSelect> = z.object({
  id: z.boolean().optional(),
  profileId: z.boolean().optional(),
  type: z.boolean().optional(),
  provider: z.boolean().optional(),
  passwordHash: z.boolean().optional(),
  refresh_token: z.boolean().optional(),
  access_token: z.boolean().optional(),
  expires_at: z.boolean().optional(),
  refresh_token_expires_in: z.boolean().optional(),
  token_type: z.boolean().optional(),
  scope: z.boolean().optional(),
  id_token: z.boolean().optional(),
  session_state: z.boolean().optional(),
  profile: z.union([z.boolean(),z.lazy(() => ProfileArgsSchema)]).optional(),
}).strict()

// PLAN
//------------------------------------------------------

export const PlanIncludeSchema: z.ZodType<Prisma.PlanInclude> = z.object({
  tenantProfiles: z.union([z.boolean(),z.lazy(() => TenantProfileFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => PlanCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const PlanArgsSchema: z.ZodType<Prisma.PlanDefaultArgs> = z.object({
  select: z.lazy(() => PlanSelectSchema).optional(),
  include: z.lazy(() => PlanIncludeSchema).optional(),
}).strict();

export const PlanCountOutputTypeArgsSchema: z.ZodType<Prisma.PlanCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => PlanCountOutputTypeSelectSchema).nullish(),
}).strict();

export const PlanCountOutputTypeSelectSchema: z.ZodType<Prisma.PlanCountOutputTypeSelect> = z.object({
  tenantProfiles: z.boolean().optional(),
}).strict();

export const PlanSelectSchema: z.ZodType<Prisma.PlanSelect> = z.object({
  id: z.boolean().optional(),
  stripeProductId: z.boolean().optional(),
  stripePriceId: z.boolean().optional(),
  name: z.boolean().optional(),
  maxUsers: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  tenantProfiles: z.union([z.boolean(),z.lazy(() => TenantProfileFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => PlanCountOutputTypeArgsSchema)]).optional(),
}).strict()

// TOKEN
//------------------------------------------------------

export const TokenIncludeSchema: z.ZodType<Prisma.TokenInclude> = z.object({
  profile: z.union([z.boolean(),z.lazy(() => ProfileArgsSchema)]).optional(),
}).strict()

export const TokenArgsSchema: z.ZodType<Prisma.TokenDefaultArgs> = z.object({
  select: z.lazy(() => TokenSelectSchema).optional(),
  include: z.lazy(() => TokenIncludeSchema).optional(),
}).strict();

export const TokenSelectSchema: z.ZodType<Prisma.TokenSelect> = z.object({
  id: z.boolean().optional(),
  type: z.boolean().optional(),
  token: z.boolean().optional(),
  expires: z.boolean().optional(),
  profileId: z.boolean().optional(),
  profile: z.union([z.boolean(),z.lazy(() => ProfileArgsSchema)]).optional(),
}).strict()

// INVITATION
//------------------------------------------------------

export const InvitationIncludeSchema: z.ZodType<Prisma.InvitationInclude> = z.object({
  invitedBy: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
  user: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
}).strict()

export const InvitationArgsSchema: z.ZodType<Prisma.InvitationDefaultArgs> = z.object({
  select: z.lazy(() => InvitationSelectSchema).optional(),
  include: z.lazy(() => InvitationIncludeSchema).optional(),
}).strict();

export const InvitationSelectSchema: z.ZodType<Prisma.InvitationSelect> = z.object({
  id: z.boolean().optional(),
  email: z.boolean().optional(),
  role: z.boolean().optional(),
  token: z.boolean().optional(),
  expires: z.boolean().optional(),
  invitedById: z.boolean().optional(),
  userId: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  invitedBy: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
  user: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
}).strict()

// PATIENT
//------------------------------------------------------

export const PatientIncludeSchema: z.ZodType<Prisma.PatientInclude> = z.object({
  user: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
  tenant: z.union([z.boolean(),z.lazy(() => TenantArgsSchema)]).optional(),
  files: z.union([z.boolean(),z.lazy(() => FileFindManyArgsSchema)]).optional(),
  quizes: z.union([z.boolean(),z.lazy(() => QuizFindManyArgsSchema)]).optional(),
  appointments: z.union([z.boolean(),z.lazy(() => EventFindManyArgsSchema)]).optional(),
  treatmentPlans: z.union([z.boolean(),z.lazy(() => TreatmentPlanFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => PatientCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const PatientArgsSchema: z.ZodType<Prisma.PatientDefaultArgs> = z.object({
  select: z.lazy(() => PatientSelectSchema).optional(),
  include: z.lazy(() => PatientIncludeSchema).optional(),
}).strict();

export const PatientCountOutputTypeArgsSchema: z.ZodType<Prisma.PatientCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => PatientCountOutputTypeSelectSchema).nullish(),
}).strict();

export const PatientCountOutputTypeSelectSchema: z.ZodType<Prisma.PatientCountOutputTypeSelect> = z.object({
  files: z.boolean().optional(),
  quizes: z.boolean().optional(),
  appointments: z.boolean().optional(),
  treatmentPlans: z.boolean().optional(),
}).strict();

export const PatientSelectSchema: z.ZodType<Prisma.PatientSelect> = z.object({
  id: z.boolean().optional(),
  firstName: z.boolean().optional(),
  lastName: z.boolean().optional(),
  gender: z.boolean().optional(),
  dob: z.boolean().optional(),
  email: z.boolean().optional(),
  phone: z.boolean().optional(),
  city: z.boolean().optional(),
  county: z.boolean().optional(),
  status: z.boolean().optional(),
  smsNotifications: z.boolean().optional(),
  emailNotifications: z.boolean().optional(),
  filters: z.boolean().optional(),
  userId: z.boolean().optional(),
  tenantId: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  user: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
  tenant: z.union([z.boolean(),z.lazy(() => TenantArgsSchema)]).optional(),
  files: z.union([z.boolean(),z.lazy(() => FileFindManyArgsSchema)]).optional(),
  quizes: z.union([z.boolean(),z.lazy(() => QuizFindManyArgsSchema)]).optional(),
  appointments: z.union([z.boolean(),z.lazy(() => EventFindManyArgsSchema)]).optional(),
  treatmentPlans: z.union([z.boolean(),z.lazy(() => TreatmentPlanFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => PatientCountOutputTypeArgsSchema)]).optional(),
}).strict()

// SPECIALITY
//------------------------------------------------------

export const SpecialityIncludeSchema: z.ZodType<Prisma.SpecialityInclude> = z.object({
  users: z.union([z.boolean(),z.lazy(() => UserFindManyArgsSchema)]).optional(),
  tenant: z.union([z.boolean(),z.lazy(() => TenantArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => SpecialityCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const SpecialityArgsSchema: z.ZodType<Prisma.SpecialityDefaultArgs> = z.object({
  select: z.lazy(() => SpecialitySelectSchema).optional(),
  include: z.lazy(() => SpecialityIncludeSchema).optional(),
}).strict();

export const SpecialityCountOutputTypeArgsSchema: z.ZodType<Prisma.SpecialityCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => SpecialityCountOutputTypeSelectSchema).nullish(),
}).strict();

export const SpecialityCountOutputTypeSelectSchema: z.ZodType<Prisma.SpecialityCountOutputTypeSelect> = z.object({
  users: z.boolean().optional(),
}).strict();

export const SpecialitySelectSchema: z.ZodType<Prisma.SpecialitySelect> = z.object({
  id: z.boolean().optional(),
  name: z.boolean().optional(),
  description: z.boolean().optional(),
  color: z.boolean().optional(),
  tenantId: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  users: z.union([z.boolean(),z.lazy(() => UserFindManyArgsSchema)]).optional(),
  tenant: z.union([z.boolean(),z.lazy(() => TenantArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => SpecialityCountOutputTypeArgsSchema)]).optional(),
}).strict()

// EVENT
//------------------------------------------------------

export const EventIncludeSchema: z.ZodType<Prisma.EventInclude> = z.object({
  visits: z.union([z.boolean(),z.lazy(() => VisitFindManyArgsSchema)]).optional(),
  quiz: z.union([z.boolean(),z.lazy(() => QuizArgsSchema)]).optional(),
  actions: z.union([z.boolean(),z.lazy(() => EventActionFindManyArgsSchema)]).optional(),
  files: z.union([z.boolean(),z.lazy(() => FileFindManyArgsSchema)]).optional(),
  patient: z.union([z.boolean(),z.lazy(() => PatientArgsSchema)]).optional(),
  user: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
  tenant: z.union([z.boolean(),z.lazy(() => TenantArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => EventCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const EventArgsSchema: z.ZodType<Prisma.EventDefaultArgs> = z.object({
  select: z.lazy(() => EventSelectSchema).optional(),
  include: z.lazy(() => EventIncludeSchema).optional(),
}).strict();

export const EventCountOutputTypeArgsSchema: z.ZodType<Prisma.EventCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => EventCountOutputTypeSelectSchema).nullish(),
}).strict();

export const EventCountOutputTypeSelectSchema: z.ZodType<Prisma.EventCountOutputTypeSelect> = z.object({
  visits: z.boolean().optional(),
  actions: z.boolean().optional(),
  files: z.boolean().optional(),
}).strict();

export const EventSelectSchema: z.ZodType<Prisma.EventSelect> = z.object({
  id: z.boolean().optional(),
  index: z.boolean().optional(),
  title: z.boolean().optional(),
  description: z.boolean().optional(),
  date: z.boolean().optional(),
  start: z.boolean().optional(),
  end: z.boolean().optional(),
  allDay: z.boolean().optional(),
  type: z.boolean().optional(),
  status: z.boolean().optional(),
  initiator: z.boolean().optional(),
  patientId: z.boolean().optional(),
  userId: z.boolean().optional(),
  tenantId: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  visits: z.union([z.boolean(),z.lazy(() => VisitFindManyArgsSchema)]).optional(),
  quiz: z.union([z.boolean(),z.lazy(() => QuizArgsSchema)]).optional(),
  actions: z.union([z.boolean(),z.lazy(() => EventActionFindManyArgsSchema)]).optional(),
  files: z.union([z.boolean(),z.lazy(() => FileFindManyArgsSchema)]).optional(),
  patient: z.union([z.boolean(),z.lazy(() => PatientArgsSchema)]).optional(),
  user: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
  tenant: z.union([z.boolean(),z.lazy(() => TenantArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => EventCountOutputTypeArgsSchema)]).optional(),
}).strict()

// EVENT ACTION
//------------------------------------------------------

export const EventActionIncludeSchema: z.ZodType<Prisma.EventActionInclude> = z.object({
  user: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
  event: z.union([z.boolean(),z.lazy(() => EventArgsSchema)]).optional(),
}).strict()

export const EventActionArgsSchema: z.ZodType<Prisma.EventActionDefaultArgs> = z.object({
  select: z.lazy(() => EventActionSelectSchema).optional(),
  include: z.lazy(() => EventActionIncludeSchema).optional(),
}).strict();

export const EventActionSelectSchema: z.ZodType<Prisma.EventActionSelect> = z.object({
  id: z.boolean().optional(),
  data: z.boolean().optional(),
  userId: z.boolean().optional(),
  eventId: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  user: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
  event: z.union([z.boolean(),z.lazy(() => EventArgsSchema)]).optional(),
}).strict()

// MATERIAL
//------------------------------------------------------

export const MaterialIncludeSchema: z.ZodType<Prisma.MaterialInclude> = z.object({
  services: z.union([z.boolean(),z.lazy(() => ServiceMaterialFindManyArgsSchema)]).optional(),
  tenant: z.union([z.boolean(),z.lazy(() => TenantArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => MaterialCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const MaterialArgsSchema: z.ZodType<Prisma.MaterialDefaultArgs> = z.object({
  select: z.lazy(() => MaterialSelectSchema).optional(),
  include: z.lazy(() => MaterialIncludeSchema).optional(),
}).strict();

export const MaterialCountOutputTypeArgsSchema: z.ZodType<Prisma.MaterialCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => MaterialCountOutputTypeSelectSchema).nullish(),
}).strict();

export const MaterialCountOutputTypeSelectSchema: z.ZodType<Prisma.MaterialCountOutputTypeSelect> = z.object({
  services: z.boolean().optional(),
}).strict();

export const MaterialSelectSchema: z.ZodType<Prisma.MaterialSelect> = z.object({
  id: z.boolean().optional(),
  name: z.boolean().optional(),
  description: z.boolean().optional(),
  unit_price: z.boolean().optional(),
  unit: z.boolean().optional(),
  image: z.boolean().optional(),
  tags: z.boolean().optional(),
  isActive: z.boolean().optional(),
  keepInventory: z.boolean().optional(),
  stock: z.boolean().optional(),
  tenantId: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  services: z.union([z.boolean(),z.lazy(() => ServiceMaterialFindManyArgsSchema)]).optional(),
  tenant: z.union([z.boolean(),z.lazy(() => TenantArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => MaterialCountOutputTypeArgsSchema)]).optional(),
}).strict()

// SERVICE
//------------------------------------------------------

export const ServiceIncludeSchema: z.ZodType<Prisma.ServiceInclude> = z.object({
  tenant: z.union([z.boolean(),z.lazy(() => TenantArgsSchema)]).optional(),
  category: z.union([z.boolean(),z.lazy(() => ServiceCategoryArgsSchema)]).optional(),
  materials: z.union([z.boolean(),z.lazy(() => ServiceMaterialFindManyArgsSchema)]).optional(),
  visits: z.union([z.boolean(),z.lazy(() => VisitFindManyArgsSchema)]).optional(),
  children: z.union([z.boolean(),z.lazy(() => RelatedServiceFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => ServiceCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const ServiceArgsSchema: z.ZodType<Prisma.ServiceDefaultArgs> = z.object({
  select: z.lazy(() => ServiceSelectSchema).optional(),
  include: z.lazy(() => ServiceIncludeSchema).optional(),
}).strict();

export const ServiceCountOutputTypeArgsSchema: z.ZodType<Prisma.ServiceCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => ServiceCountOutputTypeSelectSchema).nullish(),
}).strict();

export const ServiceCountOutputTypeSelectSchema: z.ZodType<Prisma.ServiceCountOutputTypeSelect> = z.object({
  materials: z.boolean().optional(),
  visits: z.boolean().optional(),
  children: z.boolean().optional(),
}).strict();

export const ServiceSelectSchema: z.ZodType<Prisma.ServiceSelect> = z.object({
  id: z.boolean().optional(),
  name: z.boolean().optional(),
  description: z.boolean().optional(),
  unit_price: z.boolean().optional(),
  unit: z.boolean().optional(),
  duration: z.boolean().optional(),
  image: z.boolean().optional(),
  tags: z.boolean().optional(),
  isActive: z.boolean().optional(),
  tenantId: z.boolean().optional(),
  categoryId: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  tenant: z.union([z.boolean(),z.lazy(() => TenantArgsSchema)]).optional(),
  category: z.union([z.boolean(),z.lazy(() => ServiceCategoryArgsSchema)]).optional(),
  materials: z.union([z.boolean(),z.lazy(() => ServiceMaterialFindManyArgsSchema)]).optional(),
  visits: z.union([z.boolean(),z.lazy(() => VisitFindManyArgsSchema)]).optional(),
  children: z.union([z.boolean(),z.lazy(() => RelatedServiceFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => ServiceCountOutputTypeArgsSchema)]).optional(),
}).strict()

// RELATED SERVICE
//------------------------------------------------------

export const RelatedServiceIncludeSchema: z.ZodType<Prisma.RelatedServiceInclude> = z.object({
  parent: z.union([z.boolean(),z.lazy(() => ServiceArgsSchema)]).optional(),
}).strict()

export const RelatedServiceArgsSchema: z.ZodType<Prisma.RelatedServiceDefaultArgs> = z.object({
  select: z.lazy(() => RelatedServiceSelectSchema).optional(),
  include: z.lazy(() => RelatedServiceIncludeSchema).optional(),
}).strict();

export const RelatedServiceSelectSchema: z.ZodType<Prisma.RelatedServiceSelect> = z.object({
  id: z.boolean().optional(),
  order: z.boolean().optional(),
  quantity: z.boolean().optional(),
  unit_price: z.boolean().optional(),
  service: z.boolean().optional(),
  parentId: z.boolean().optional(),
  parent: z.union([z.boolean(),z.lazy(() => ServiceArgsSchema)]).optional(),
}).strict()

// SERVICE MATERIAL
//------------------------------------------------------

export const ServiceMaterialIncludeSchema: z.ZodType<Prisma.ServiceMaterialInclude> = z.object({
  service: z.union([z.boolean(),z.lazy(() => ServiceArgsSchema)]).optional(),
  material: z.union([z.boolean(),z.lazy(() => MaterialArgsSchema)]).optional(),
}).strict()

export const ServiceMaterialArgsSchema: z.ZodType<Prisma.ServiceMaterialDefaultArgs> = z.object({
  select: z.lazy(() => ServiceMaterialSelectSchema).optional(),
  include: z.lazy(() => ServiceMaterialIncludeSchema).optional(),
}).strict();

export const ServiceMaterialSelectSchema: z.ZodType<Prisma.ServiceMaterialSelect> = z.object({
  id: z.boolean().optional(),
  quantity: z.boolean().optional(),
  unit_price: z.boolean().optional(),
  serviceId: z.boolean().optional(),
  materialId: z.boolean().optional(),
  service: z.union([z.boolean(),z.lazy(() => ServiceArgsSchema)]).optional(),
  material: z.union([z.boolean(),z.lazy(() => MaterialArgsSchema)]).optional(),
}).strict()

// PRICE
//------------------------------------------------------

export const PriceSelectSchema: z.ZodType<Prisma.PriceSelect> = z.object({
  id: z.boolean().optional(),
  unit_price: z.boolean().optional(),
  entityId: z.boolean().optional(),
  type: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
}).strict()

// SERVICE CATEGORY
//------------------------------------------------------

export const ServiceCategoryIncludeSchema: z.ZodType<Prisma.ServiceCategoryInclude> = z.object({
  services: z.union([z.boolean(),z.lazy(() => ServiceFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => ServiceCategoryCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const ServiceCategoryArgsSchema: z.ZodType<Prisma.ServiceCategoryDefaultArgs> = z.object({
  select: z.lazy(() => ServiceCategorySelectSchema).optional(),
  include: z.lazy(() => ServiceCategoryIncludeSchema).optional(),
}).strict();

export const ServiceCategoryCountOutputTypeArgsSchema: z.ZodType<Prisma.ServiceCategoryCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => ServiceCategoryCountOutputTypeSelectSchema).nullish(),
}).strict();

export const ServiceCategoryCountOutputTypeSelectSchema: z.ZodType<Prisma.ServiceCategoryCountOutputTypeSelect> = z.object({
  services: z.boolean().optional(),
}).strict();

export const ServiceCategorySelectSchema: z.ZodType<Prisma.ServiceCategorySelect> = z.object({
  id: z.boolean().optional(),
  name: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  services: z.union([z.boolean(),z.lazy(() => ServiceFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => ServiceCategoryCountOutputTypeArgsSchema)]).optional(),
}).strict()

// TREATMENT
//------------------------------------------------------

export const TreatmentIncludeSchema: z.ZodType<Prisma.TreatmentInclude> = z.object({
  treatmentPlan: z.union([z.boolean(),z.lazy(() => TreatmentPlanArgsSchema)]).optional(),
  visits: z.union([z.boolean(),z.lazy(() => VisitFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => TreatmentCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const TreatmentArgsSchema: z.ZodType<Prisma.TreatmentDefaultArgs> = z.object({
  select: z.lazy(() => TreatmentSelectSchema).optional(),
  include: z.lazy(() => TreatmentIncludeSchema).optional(),
}).strict();

export const TreatmentCountOutputTypeArgsSchema: z.ZodType<Prisma.TreatmentCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => TreatmentCountOutputTypeSelectSchema).nullish(),
}).strict();

export const TreatmentCountOutputTypeSelectSchema: z.ZodType<Prisma.TreatmentCountOutputTypeSelect> = z.object({
  visits: z.boolean().optional(),
}).strict();

export const TreatmentSelectSchema: z.ZodType<Prisma.TreatmentSelect> = z.object({
  id: z.boolean().optional(),
  price: z.boolean().optional(),
  target: z.boolean().optional(),
  status: z.boolean().optional(),
  treatmentPlanId: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  treatmentPlan: z.union([z.boolean(),z.lazy(() => TreatmentPlanArgsSchema)]).optional(),
  visits: z.union([z.boolean(),z.lazy(() => VisitFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => TreatmentCountOutputTypeArgsSchema)]).optional(),
}).strict()

// VISIT
//------------------------------------------------------

export const VisitIncludeSchema: z.ZodType<Prisma.VisitInclude> = z.object({
  service: z.union([z.boolean(),z.lazy(() => ServiceArgsSchema)]).optional(),
  treatment: z.union([z.boolean(),z.lazy(() => TreatmentArgsSchema)]).optional(),
  event: z.union([z.boolean(),z.lazy(() => EventArgsSchema)]).optional(),
}).strict()

export const VisitArgsSchema: z.ZodType<Prisma.VisitDefaultArgs> = z.object({
  select: z.lazy(() => VisitSelectSchema).optional(),
  include: z.lazy(() => VisitIncludeSchema).optional(),
}).strict();

export const VisitSelectSchema: z.ZodType<Prisma.VisitSelect> = z.object({
  id: z.boolean().optional(),
  serviceId: z.boolean().optional(),
  treatmentId: z.boolean().optional(),
  eventId: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  service: z.union([z.boolean(),z.lazy(() => ServiceArgsSchema)]).optional(),
  treatment: z.union([z.boolean(),z.lazy(() => TreatmentArgsSchema)]).optional(),
  event: z.union([z.boolean(),z.lazy(() => EventArgsSchema)]).optional(),
}).strict()

// TREATMENT PLAN
//------------------------------------------------------

export const TreatmentPlanIncludeSchema: z.ZodType<Prisma.TreatmentPlanInclude> = z.object({
  treatments: z.union([z.boolean(),z.lazy(() => TreatmentFindManyArgsSchema)]).optional(),
  patient: z.union([z.boolean(),z.lazy(() => PatientArgsSchema)]).optional(),
  user: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => TreatmentPlanCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const TreatmentPlanArgsSchema: z.ZodType<Prisma.TreatmentPlanDefaultArgs> = z.object({
  select: z.lazy(() => TreatmentPlanSelectSchema).optional(),
  include: z.lazy(() => TreatmentPlanIncludeSchema).optional(),
}).strict();

export const TreatmentPlanCountOutputTypeArgsSchema: z.ZodType<Prisma.TreatmentPlanCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => TreatmentPlanCountOutputTypeSelectSchema).nullish(),
}).strict();

export const TreatmentPlanCountOutputTypeSelectSchema: z.ZodType<Prisma.TreatmentPlanCountOutputTypeSelect> = z.object({
  treatments: z.boolean().optional(),
}).strict();

export const TreatmentPlanSelectSchema: z.ZodType<Prisma.TreatmentPlanSelect> = z.object({
  id: z.boolean().optional(),
  description: z.boolean().optional(),
  isDone: z.boolean().optional(),
  patientId: z.boolean().optional(),
  userId: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  treatments: z.union([z.boolean(),z.lazy(() => TreatmentFindManyArgsSchema)]).optional(),
  patient: z.union([z.boolean(),z.lazy(() => PatientArgsSchema)]).optional(),
  user: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => TreatmentPlanCountOutputTypeArgsSchema)]).optional(),
}).strict()

// QUIZ
//------------------------------------------------------

export const QuizIncludeSchema: z.ZodType<Prisma.QuizInclude> = z.object({
  patient: z.union([z.boolean(),z.lazy(() => PatientArgsSchema)]).optional(),
  event: z.union([z.boolean(),z.lazy(() => EventArgsSchema)]).optional(),
}).strict()

export const QuizArgsSchema: z.ZodType<Prisma.QuizDefaultArgs> = z.object({
  select: z.lazy(() => QuizSelectSchema).optional(),
  include: z.lazy(() => QuizIncludeSchema).optional(),
}).strict();

export const QuizSelectSchema: z.ZodType<Prisma.QuizSelect> = z.object({
  id: z.boolean().optional(),
  quiz: z.boolean().optional(),
  answers: z.boolean().optional(),
  patientId: z.boolean().optional(),
  eventId: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  patient: z.union([z.boolean(),z.lazy(() => PatientArgsSchema)]).optional(),
  event: z.union([z.boolean(),z.lazy(() => EventArgsSchema)]).optional(),
}).strict()

// TAG
//------------------------------------------------------

export const TagSelectSchema: z.ZodType<Prisma.TagSelect> = z.object({
  id: z.boolean().optional(),
  name: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
}).strict()

// TASK
//------------------------------------------------------

export const TaskIncludeSchema: z.ZodType<Prisma.TaskInclude> = z.object({
  user: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
}).strict()

export const TaskArgsSchema: z.ZodType<Prisma.TaskDefaultArgs> = z.object({
  select: z.lazy(() => TaskSelectSchema).optional(),
  include: z.lazy(() => TaskIncludeSchema).optional(),
}).strict();

export const TaskSelectSchema: z.ZodType<Prisma.TaskSelect> = z.object({
  id: z.boolean().optional(),
  title: z.boolean().optional(),
  isDone: z.boolean().optional(),
  dueDate: z.boolean().optional(),
  userId: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  user: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
}).strict()

// FILE
//------------------------------------------------------

export const FileIncludeSchema: z.ZodType<Prisma.FileInclude> = z.object({
  tenant: z.union([z.boolean(),z.lazy(() => TenantArgsSchema)]).optional(),
  user: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
  event: z.union([z.boolean(),z.lazy(() => EventArgsSchema)]).optional(),
  patient: z.union([z.boolean(),z.lazy(() => PatientArgsSchema)]).optional(),
}).strict()

export const FileArgsSchema: z.ZodType<Prisma.FileDefaultArgs> = z.object({
  select: z.lazy(() => FileSelectSchema).optional(),
  include: z.lazy(() => FileIncludeSchema).optional(),
}).strict();

export const FileSelectSchema: z.ZodType<Prisma.FileSelect> = z.object({
  id: z.boolean().optional(),
  url: z.boolean().optional(),
  key: z.boolean().optional(),
  name: z.boolean().optional(),
  extension: z.boolean().optional(),
  contentType: z.boolean().optional(),
  size: z.boolean().optional(),
  confirmed: z.boolean().optional(),
  tenantId: z.boolean().optional(),
  userId: z.boolean().optional(),
  eventId: z.boolean().optional(),
  patientId: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  tenant: z.union([z.boolean(),z.lazy(() => TenantArgsSchema)]).optional(),
  user: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
  event: z.union([z.boolean(),z.lazy(() => EventArgsSchema)]).optional(),
  patient: z.union([z.boolean(),z.lazy(() => PatientArgsSchema)]).optional(),
}).strict()

// AVATAR
//------------------------------------------------------

export const AvatarIncludeSchema: z.ZodType<Prisma.AvatarInclude> = z.object({
  profile: z.union([z.boolean(),z.lazy(() => ProfileArgsSchema)]).optional(),
  tenantProfile: z.union([z.boolean(),z.lazy(() => TenantProfileArgsSchema)]).optional(),
}).strict()

export const AvatarArgsSchema: z.ZodType<Prisma.AvatarDefaultArgs> = z.object({
  select: z.lazy(() => AvatarSelectSchema).optional(),
  include: z.lazy(() => AvatarIncludeSchema).optional(),
}).strict();

export const AvatarSelectSchema: z.ZodType<Prisma.AvatarSelect> = z.object({
  id: z.boolean().optional(),
  url: z.boolean().optional(),
  key: z.boolean().optional(),
  profileId: z.boolean().optional(),
  tenantProfileId: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  profile: z.union([z.boolean(),z.lazy(() => ProfileArgsSchema)]).optional(),
  tenantProfile: z.union([z.boolean(),z.lazy(() => TenantProfileArgsSchema)]).optional(),
}).strict()

// COUNTY
//------------------------------------------------------

export const CountyIncludeSchema: z.ZodType<Prisma.CountyInclude> = z.object({
  cities: z.union([z.boolean(),z.lazy(() => CityFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => CountyCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const CountyArgsSchema: z.ZodType<Prisma.CountyDefaultArgs> = z.object({
  select: z.lazy(() => CountySelectSchema).optional(),
  include: z.lazy(() => CountyIncludeSchema).optional(),
}).strict();

export const CountyCountOutputTypeArgsSchema: z.ZodType<Prisma.CountyCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => CountyCountOutputTypeSelectSchema).nullish(),
}).strict();

export const CountyCountOutputTypeSelectSchema: z.ZodType<Prisma.CountyCountOutputTypeSelect> = z.object({
  cities: z.boolean().optional(),
}).strict();

export const CountySelectSchema: z.ZodType<Prisma.CountySelect> = z.object({
  id: z.boolean().optional(),
  name: z.boolean().optional(),
  code: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  cities: z.union([z.boolean(),z.lazy(() => CityFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => CountyCountOutputTypeArgsSchema)]).optional(),
}).strict()

// CITY
//------------------------------------------------------

export const CityIncludeSchema: z.ZodType<Prisma.CityInclude> = z.object({
  county: z.union([z.boolean(),z.lazy(() => CountyArgsSchema)]).optional(),
}).strict()

export const CityArgsSchema: z.ZodType<Prisma.CityDefaultArgs> = z.object({
  select: z.lazy(() => CitySelectSchema).optional(),
  include: z.lazy(() => CityIncludeSchema).optional(),
}).strict();

export const CitySelectSchema: z.ZodType<Prisma.CitySelect> = z.object({
  id: z.boolean().optional(),
  name: z.boolean().optional(),
  countyId: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  county: z.union([z.boolean(),z.lazy(() => CountyArgsSchema)]).optional(),
}).strict()


/////////////////////////////////////////
// INPUT TYPES
/////////////////////////////////////////

export const TenantWhereInputSchema: z.ZodType<Prisma.TenantWhereInput> = z.object({
  AND: z.union([ z.lazy(() => TenantWhereInputSchema),z.lazy(() => TenantWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => TenantWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => TenantWhereInputSchema),z.lazy(() => TenantWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  email: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  profileId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  deletedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  disabledAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  trialExpiresAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  users: z.lazy(() => UserListRelationFilterSchema).optional(),
  profile: z.union([ z.lazy(() => TenantProfileRelationFilterSchema),z.lazy(() => TenantProfileWhereInputSchema) ]).optional(),
  specialities: z.lazy(() => SpecialityListRelationFilterSchema).optional(),
  preferedByProfiles: z.lazy(() => ProfileListRelationFilterSchema).optional(),
  patients: z.lazy(() => PatientListRelationFilterSchema).optional(),
  services: z.lazy(() => ServiceListRelationFilterSchema).optional(),
  materials: z.lazy(() => MaterialListRelationFilterSchema).optional(),
  events: z.lazy(() => EventListRelationFilterSchema).optional(),
  files: z.lazy(() => FileListRelationFilterSchema).optional()
}).strict();

export const TenantOrderByWithRelationInputSchema: z.ZodType<Prisma.TenantOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  profileId: z.lazy(() => SortOrderSchema).optional(),
  deletedAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  disabledAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  trialExpiresAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  users: z.lazy(() => UserOrderByRelationAggregateInputSchema).optional(),
  profile: z.lazy(() => TenantProfileOrderByWithRelationInputSchema).optional(),
  specialities: z.lazy(() => SpecialityOrderByRelationAggregateInputSchema).optional(),
  preferedByProfiles: z.lazy(() => ProfileOrderByRelationAggregateInputSchema).optional(),
  patients: z.lazy(() => PatientOrderByRelationAggregateInputSchema).optional(),
  services: z.lazy(() => ServiceOrderByRelationAggregateInputSchema).optional(),
  materials: z.lazy(() => MaterialOrderByRelationAggregateInputSchema).optional(),
  events: z.lazy(() => EventOrderByRelationAggregateInputSchema).optional(),
  files: z.lazy(() => FileOrderByRelationAggregateInputSchema).optional()
}).strict();

export const TenantWhereUniqueInputSchema: z.ZodType<Prisma.TenantWhereUniqueInput> = z.union([
  z.object({
    id: z.string().cuid(),
    profileId: z.string()
  }),
  z.object({
    id: z.string().cuid(),
  }),
  z.object({
    profileId: z.string(),
  }),
])
.and(z.object({
  id: z.string().cuid().optional(),
  profileId: z.string().optional(),
  AND: z.union([ z.lazy(() => TenantWhereInputSchema),z.lazy(() => TenantWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => TenantWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => TenantWhereInputSchema),z.lazy(() => TenantWhereInputSchema).array() ]).optional(),
  email: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  deletedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  disabledAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  trialExpiresAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  users: z.lazy(() => UserListRelationFilterSchema).optional(),
  profile: z.union([ z.lazy(() => TenantProfileRelationFilterSchema),z.lazy(() => TenantProfileWhereInputSchema) ]).optional(),
  specialities: z.lazy(() => SpecialityListRelationFilterSchema).optional(),
  preferedByProfiles: z.lazy(() => ProfileListRelationFilterSchema).optional(),
  patients: z.lazy(() => PatientListRelationFilterSchema).optional(),
  services: z.lazy(() => ServiceListRelationFilterSchema).optional(),
  materials: z.lazy(() => MaterialListRelationFilterSchema).optional(),
  events: z.lazy(() => EventListRelationFilterSchema).optional(),
  files: z.lazy(() => FileListRelationFilterSchema).optional()
}).strict());

export const TenantOrderByWithAggregationInputSchema: z.ZodType<Prisma.TenantOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  profileId: z.lazy(() => SortOrderSchema).optional(),
  deletedAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  disabledAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  trialExpiresAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => TenantCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => TenantMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => TenantMinOrderByAggregateInputSchema).optional()
}).strict();

export const TenantScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.TenantScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => TenantScalarWhereWithAggregatesInputSchema),z.lazy(() => TenantScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => TenantScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => TenantScalarWhereWithAggregatesInputSchema),z.lazy(() => TenantScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  email: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  profileId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  deletedAt: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  disabledAt: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  trialExpiresAt: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const TenantProfileWhereInputSchema: z.ZodType<Prisma.TenantProfileWhereInput> = z.object({
  AND: z.union([ z.lazy(() => TenantProfileWhereInputSchema),z.lazy(() => TenantProfileWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => TenantProfileWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => TenantProfileWhereInputSchema),z.lazy(() => TenantProfileWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  county: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  address: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  zip: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  phone: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  size: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  stripeSubscriptionId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  activeSubscription: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  planId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  avatar: z.union([ z.lazy(() => AvatarNullableRelationFilterSchema),z.lazy(() => AvatarWhereInputSchema) ]).optional().nullable(),
  plan: z.union([ z.lazy(() => PlanRelationFilterSchema),z.lazy(() => PlanWhereInputSchema) ]).optional(),
  tenant: z.union([ z.lazy(() => TenantNullableRelationFilterSchema),z.lazy(() => TenantWhereInputSchema) ]).optional().nullable(),
}).strict();

export const TenantProfileOrderByWithRelationInputSchema: z.ZodType<Prisma.TenantProfileOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  county: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  address: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  zip: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  phone: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  size: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  stripeSubscriptionId: z.lazy(() => SortOrderSchema).optional(),
  activeSubscription: z.lazy(() => SortOrderSchema).optional(),
  planId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  avatar: z.lazy(() => AvatarOrderByWithRelationInputSchema).optional(),
  plan: z.lazy(() => PlanOrderByWithRelationInputSchema).optional(),
  tenant: z.lazy(() => TenantOrderByWithRelationInputSchema).optional()
}).strict();

export const TenantProfileWhereUniqueInputSchema: z.ZodType<Prisma.TenantProfileWhereUniqueInput> = z.object({
  id: z.string().cuid()
})
.and(z.object({
  id: z.string().cuid().optional(),
  AND: z.union([ z.lazy(() => TenantProfileWhereInputSchema),z.lazy(() => TenantProfileWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => TenantProfileWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => TenantProfileWhereInputSchema),z.lazy(() => TenantProfileWhereInputSchema).array() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  county: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  address: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  zip: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  phone: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  size: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  stripeSubscriptionId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  activeSubscription: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  planId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  avatar: z.union([ z.lazy(() => AvatarNullableRelationFilterSchema),z.lazy(() => AvatarWhereInputSchema) ]).optional().nullable(),
  plan: z.union([ z.lazy(() => PlanRelationFilterSchema),z.lazy(() => PlanWhereInputSchema) ]).optional(),
  tenant: z.union([ z.lazy(() => TenantNullableRelationFilterSchema),z.lazy(() => TenantWhereInputSchema) ]).optional().nullable(),
}).strict());

export const TenantProfileOrderByWithAggregationInputSchema: z.ZodType<Prisma.TenantProfileOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  county: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  address: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  zip: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  phone: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  size: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  stripeSubscriptionId: z.lazy(() => SortOrderSchema).optional(),
  activeSubscription: z.lazy(() => SortOrderSchema).optional(),
  planId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => TenantProfileCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => TenantProfileMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => TenantProfileMinOrderByAggregateInputSchema).optional()
}).strict();

export const TenantProfileScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.TenantProfileScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => TenantProfileScalarWhereWithAggregatesInputSchema),z.lazy(() => TenantProfileScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => TenantProfileScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => TenantProfileScalarWhereWithAggregatesInputSchema),z.lazy(() => TenantProfileScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  county: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  address: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  zip: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  phone: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  size: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  stripeSubscriptionId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  activeSubscription: z.union([ z.lazy(() => BoolWithAggregatesFilterSchema),z.boolean() ]).optional(),
  planId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const UserWhereInputSchema: z.ZodType<Prisma.UserWhereInput> = z.object({
  AND: z.union([ z.lazy(() => UserWhereInputSchema),z.lazy(() => UserWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => UserWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => UserWhereInputSchema),z.lazy(() => UserWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  index: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  role: z.union([ z.lazy(() => EnumRoleFilterSchema),z.lazy(() => RoleSchema) ]).optional(),
  workingHours: z.lazy(() => JsonFilterSchema).optional(),
  firstDayOfWeek: z.union([ z.lazy(() => EnumDayOfWeekFilterSchema),z.lazy(() => DayOfWeekSchema) ]).optional(),
  showWeekends: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  webhookApiKey: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  specialityId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  profileId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  tenantId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  deletedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  activatedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  lastLoginAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  bannedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  speciality: z.union([ z.lazy(() => SpecialityNullableRelationFilterSchema),z.lazy(() => SpecialityWhereInputSchema) ]).optional().nullable(),
  profile: z.union([ z.lazy(() => ProfileRelationFilterSchema),z.lazy(() => ProfileWhereInputSchema) ]).optional(),
  tenant: z.union([ z.lazy(() => TenantRelationFilterSchema),z.lazy(() => TenantWhereInputSchema) ]).optional(),
  invitation: z.union([ z.lazy(() => InvitationNullableRelationFilterSchema),z.lazy(() => InvitationWhereInputSchema) ]).optional().nullable(),
  patients: z.lazy(() => PatientListRelationFilterSchema).optional(),
  events: z.lazy(() => EventListRelationFilterSchema).optional(),
  eventActions: z.lazy(() => EventActionListRelationFilterSchema).optional(),
  treatmentPlans: z.lazy(() => TreatmentPlanListRelationFilterSchema).optional(),
  invitations: z.lazy(() => InvitationListRelationFilterSchema).optional(),
  files: z.lazy(() => FileListRelationFilterSchema).optional(),
  tasks: z.lazy(() => TaskListRelationFilterSchema).optional()
}).strict();

export const UserOrderByWithRelationInputSchema: z.ZodType<Prisma.UserOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  index: z.lazy(() => SortOrderSchema).optional(),
  role: z.lazy(() => SortOrderSchema).optional(),
  workingHours: z.lazy(() => SortOrderSchema).optional(),
  firstDayOfWeek: z.lazy(() => SortOrderSchema).optional(),
  showWeekends: z.lazy(() => SortOrderSchema).optional(),
  webhookApiKey: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  specialityId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  profileId: z.lazy(() => SortOrderSchema).optional(),
  tenantId: z.lazy(() => SortOrderSchema).optional(),
  deletedAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  activatedAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  lastLoginAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  bannedAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  speciality: z.lazy(() => SpecialityOrderByWithRelationInputSchema).optional(),
  profile: z.lazy(() => ProfileOrderByWithRelationInputSchema).optional(),
  tenant: z.lazy(() => TenantOrderByWithRelationInputSchema).optional(),
  invitation: z.lazy(() => InvitationOrderByWithRelationInputSchema).optional(),
  patients: z.lazy(() => PatientOrderByRelationAggregateInputSchema).optional(),
  events: z.lazy(() => EventOrderByRelationAggregateInputSchema).optional(),
  eventActions: z.lazy(() => EventActionOrderByRelationAggregateInputSchema).optional(),
  treatmentPlans: z.lazy(() => TreatmentPlanOrderByRelationAggregateInputSchema).optional(),
  invitations: z.lazy(() => InvitationOrderByRelationAggregateInputSchema).optional(),
  files: z.lazy(() => FileOrderByRelationAggregateInputSchema).optional(),
  tasks: z.lazy(() => TaskOrderByRelationAggregateInputSchema).optional()
}).strict();

export const UserWhereUniqueInputSchema: z.ZodType<Prisma.UserWhereUniqueInput> = z.object({
  id: z.string().cuid()
})
.and(z.object({
  id: z.string().cuid().optional(),
  AND: z.union([ z.lazy(() => UserWhereInputSchema),z.lazy(() => UserWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => UserWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => UserWhereInputSchema),z.lazy(() => UserWhereInputSchema).array() ]).optional(),
  index: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  role: z.union([ z.lazy(() => EnumRoleFilterSchema),z.lazy(() => RoleSchema) ]).optional(),
  workingHours: z.lazy(() => JsonFilterSchema).optional(),
  firstDayOfWeek: z.union([ z.lazy(() => EnumDayOfWeekFilterSchema),z.lazy(() => DayOfWeekSchema) ]).optional(),
  showWeekends: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  webhookApiKey: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  specialityId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  profileId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  tenantId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  deletedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  activatedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  lastLoginAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  bannedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  speciality: z.union([ z.lazy(() => SpecialityNullableRelationFilterSchema),z.lazy(() => SpecialityWhereInputSchema) ]).optional().nullable(),
  profile: z.union([ z.lazy(() => ProfileRelationFilterSchema),z.lazy(() => ProfileWhereInputSchema) ]).optional(),
  tenant: z.union([ z.lazy(() => TenantRelationFilterSchema),z.lazy(() => TenantWhereInputSchema) ]).optional(),
  invitation: z.union([ z.lazy(() => InvitationNullableRelationFilterSchema),z.lazy(() => InvitationWhereInputSchema) ]).optional().nullable(),
  patients: z.lazy(() => PatientListRelationFilterSchema).optional(),
  events: z.lazy(() => EventListRelationFilterSchema).optional(),
  eventActions: z.lazy(() => EventActionListRelationFilterSchema).optional(),
  treatmentPlans: z.lazy(() => TreatmentPlanListRelationFilterSchema).optional(),
  invitations: z.lazy(() => InvitationListRelationFilterSchema).optional(),
  files: z.lazy(() => FileListRelationFilterSchema).optional(),
  tasks: z.lazy(() => TaskListRelationFilterSchema).optional()
}).strict());

export const UserOrderByWithAggregationInputSchema: z.ZodType<Prisma.UserOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  index: z.lazy(() => SortOrderSchema).optional(),
  role: z.lazy(() => SortOrderSchema).optional(),
  workingHours: z.lazy(() => SortOrderSchema).optional(),
  firstDayOfWeek: z.lazy(() => SortOrderSchema).optional(),
  showWeekends: z.lazy(() => SortOrderSchema).optional(),
  webhookApiKey: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  specialityId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  profileId: z.lazy(() => SortOrderSchema).optional(),
  tenantId: z.lazy(() => SortOrderSchema).optional(),
  deletedAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  activatedAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  lastLoginAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  bannedAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => UserCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => UserAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => UserMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => UserMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => UserSumOrderByAggregateInputSchema).optional()
}).strict();

export const UserScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.UserScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => UserScalarWhereWithAggregatesInputSchema),z.lazy(() => UserScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => UserScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => UserScalarWhereWithAggregatesInputSchema),z.lazy(() => UserScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  index: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  role: z.union([ z.lazy(() => EnumRoleWithAggregatesFilterSchema),z.lazy(() => RoleSchema) ]).optional(),
  workingHours: z.lazy(() => JsonWithAggregatesFilterSchema).optional(),
  firstDayOfWeek: z.union([ z.lazy(() => EnumDayOfWeekWithAggregatesFilterSchema),z.lazy(() => DayOfWeekSchema) ]).optional(),
  showWeekends: z.union([ z.lazy(() => BoolWithAggregatesFilterSchema),z.boolean() ]).optional(),
  webhookApiKey: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  specialityId: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  profileId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  tenantId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  deletedAt: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  activatedAt: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  lastLoginAt: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  bannedAt: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const ProfileWhereInputSchema: z.ZodType<Prisma.ProfileWhereInput> = z.object({
  AND: z.union([ z.lazy(() => ProfileWhereInputSchema),z.lazy(() => ProfileWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ProfileWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ProfileWhereInputSchema),z.lazy(() => ProfileWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  title: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  firstName: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  lastName: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  email: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  phone: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  activatedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  stripeCustomerId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  stripeFreeTrialUsed: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  preferredTenantId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  avatar: z.union([ z.lazy(() => AvatarNullableRelationFilterSchema),z.lazy(() => AvatarWhereInputSchema) ]).optional().nullable(),
  preferredTenant: z.union([ z.lazy(() => TenantNullableRelationFilterSchema),z.lazy(() => TenantWhereInputSchema) ]).optional().nullable(),
  users: z.lazy(() => UserListRelationFilterSchema).optional(),
  accounts: z.lazy(() => AccountListRelationFilterSchema).optional(),
  tokens: z.lazy(() => TokenListRelationFilterSchema).optional()
}).strict();

export const ProfileOrderByWithRelationInputSchema: z.ZodType<Prisma.ProfileOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  title: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  firstName: z.lazy(() => SortOrderSchema).optional(),
  lastName: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  phone: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  activatedAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  stripeCustomerId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  stripeFreeTrialUsed: z.lazy(() => SortOrderSchema).optional(),
  preferredTenantId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  avatar: z.lazy(() => AvatarOrderByWithRelationInputSchema).optional(),
  preferredTenant: z.lazy(() => TenantOrderByWithRelationInputSchema).optional(),
  users: z.lazy(() => UserOrderByRelationAggregateInputSchema).optional(),
  accounts: z.lazy(() => AccountOrderByRelationAggregateInputSchema).optional(),
  tokens: z.lazy(() => TokenOrderByRelationAggregateInputSchema).optional()
}).strict();

export const ProfileWhereUniqueInputSchema: z.ZodType<Prisma.ProfileWhereUniqueInput> = z.union([
  z.object({
    id: z.string().cuid(),
    email: z.string()
  }),
  z.object({
    id: z.string().cuid(),
  }),
  z.object({
    email: z.string(),
  }),
])
.and(z.object({
  id: z.string().cuid().optional(),
  email: z.string().optional(),
  AND: z.union([ z.lazy(() => ProfileWhereInputSchema),z.lazy(() => ProfileWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ProfileWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ProfileWhereInputSchema),z.lazy(() => ProfileWhereInputSchema).array() ]).optional(),
  title: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  firstName: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  lastName: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  phone: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  activatedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  stripeCustomerId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  stripeFreeTrialUsed: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  preferredTenantId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  avatar: z.union([ z.lazy(() => AvatarNullableRelationFilterSchema),z.lazy(() => AvatarWhereInputSchema) ]).optional().nullable(),
  preferredTenant: z.union([ z.lazy(() => TenantNullableRelationFilterSchema),z.lazy(() => TenantWhereInputSchema) ]).optional().nullable(),
  users: z.lazy(() => UserListRelationFilterSchema).optional(),
  accounts: z.lazy(() => AccountListRelationFilterSchema).optional(),
  tokens: z.lazy(() => TokenListRelationFilterSchema).optional()
}).strict());

export const ProfileOrderByWithAggregationInputSchema: z.ZodType<Prisma.ProfileOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  title: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  firstName: z.lazy(() => SortOrderSchema).optional(),
  lastName: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  phone: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  activatedAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  stripeCustomerId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  stripeFreeTrialUsed: z.lazy(() => SortOrderSchema).optional(),
  preferredTenantId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => ProfileCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => ProfileMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => ProfileMinOrderByAggregateInputSchema).optional()
}).strict();

export const ProfileScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.ProfileScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => ProfileScalarWhereWithAggregatesInputSchema),z.lazy(() => ProfileScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => ProfileScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ProfileScalarWhereWithAggregatesInputSchema),z.lazy(() => ProfileScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  title: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  firstName: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  lastName: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  email: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  phone: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  activatedAt: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  stripeCustomerId: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  stripeFreeTrialUsed: z.union([ z.lazy(() => BoolWithAggregatesFilterSchema),z.boolean() ]).optional(),
  preferredTenantId: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const AccountWhereInputSchema: z.ZodType<Prisma.AccountWhereInput> = z.object({
  AND: z.union([ z.lazy(() => AccountWhereInputSchema),z.lazy(() => AccountWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => AccountWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => AccountWhereInputSchema),z.lazy(() => AccountWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  profileId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  type: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  provider: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  passwordHash: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  refresh_token: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  access_token: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  expires_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  refresh_token_expires_in: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  token_type: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  scope: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  id_token: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  session_state: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  profile: z.union([ z.lazy(() => ProfileRelationFilterSchema),z.lazy(() => ProfileWhereInputSchema) ]).optional(),
}).strict();

export const AccountOrderByWithRelationInputSchema: z.ZodType<Prisma.AccountOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  profileId: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  provider: z.lazy(() => SortOrderSchema).optional(),
  passwordHash: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  refresh_token: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  access_token: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  expires_at: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  refresh_token_expires_in: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  token_type: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  scope: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  id_token: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  session_state: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  profile: z.lazy(() => ProfileOrderByWithRelationInputSchema).optional()
}).strict();

export const AccountWhereUniqueInputSchema: z.ZodType<Prisma.AccountWhereUniqueInput> = z.object({
  id: z.string().cuid()
})
.and(z.object({
  id: z.string().cuid().optional(),
  AND: z.union([ z.lazy(() => AccountWhereInputSchema),z.lazy(() => AccountWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => AccountWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => AccountWhereInputSchema),z.lazy(() => AccountWhereInputSchema).array() ]).optional(),
  profileId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  type: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  provider: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  passwordHash: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  refresh_token: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  access_token: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  expires_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  refresh_token_expires_in: z.union([ z.lazy(() => IntNullableFilterSchema),z.number().int() ]).optional().nullable(),
  token_type: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  scope: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  id_token: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  session_state: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  profile: z.union([ z.lazy(() => ProfileRelationFilterSchema),z.lazy(() => ProfileWhereInputSchema) ]).optional(),
}).strict());

export const AccountOrderByWithAggregationInputSchema: z.ZodType<Prisma.AccountOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  profileId: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  provider: z.lazy(() => SortOrderSchema).optional(),
  passwordHash: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  refresh_token: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  access_token: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  expires_at: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  refresh_token_expires_in: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  token_type: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  scope: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  id_token: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  session_state: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  _count: z.lazy(() => AccountCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => AccountAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => AccountMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => AccountMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => AccountSumOrderByAggregateInputSchema).optional()
}).strict();

export const AccountScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.AccountScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => AccountScalarWhereWithAggregatesInputSchema),z.lazy(() => AccountScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => AccountScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => AccountScalarWhereWithAggregatesInputSchema),z.lazy(() => AccountScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  profileId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  type: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  provider: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  passwordHash: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  refresh_token: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  access_token: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  expires_at: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  refresh_token_expires_in: z.union([ z.lazy(() => IntNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  token_type: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  scope: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  id_token: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  session_state: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
}).strict();

export const PlanWhereInputSchema: z.ZodType<Prisma.PlanWhereInput> = z.object({
  AND: z.union([ z.lazy(() => PlanWhereInputSchema),z.lazy(() => PlanWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => PlanWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => PlanWhereInputSchema),z.lazy(() => PlanWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  stripeProductId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  stripePriceId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  maxUsers: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  tenantProfiles: z.lazy(() => TenantProfileListRelationFilterSchema).optional()
}).strict();

export const PlanOrderByWithRelationInputSchema: z.ZodType<Prisma.PlanOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  stripeProductId: z.lazy(() => SortOrderSchema).optional(),
  stripePriceId: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  maxUsers: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  tenantProfiles: z.lazy(() => TenantProfileOrderByRelationAggregateInputSchema).optional()
}).strict();

export const PlanWhereUniqueInputSchema: z.ZodType<Prisma.PlanWhereUniqueInput> = z.union([
  z.object({
    id: z.string().cuid(),
    stripePriceId: z.string()
  }),
  z.object({
    id: z.string().cuid(),
  }),
  z.object({
    stripePriceId: z.string(),
  }),
])
.and(z.object({
  id: z.string().cuid().optional(),
  stripePriceId: z.string().optional(),
  AND: z.union([ z.lazy(() => PlanWhereInputSchema),z.lazy(() => PlanWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => PlanWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => PlanWhereInputSchema),z.lazy(() => PlanWhereInputSchema).array() ]).optional(),
  stripeProductId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  maxUsers: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  tenantProfiles: z.lazy(() => TenantProfileListRelationFilterSchema).optional()
}).strict());

export const PlanOrderByWithAggregationInputSchema: z.ZodType<Prisma.PlanOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  stripeProductId: z.lazy(() => SortOrderSchema).optional(),
  stripePriceId: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  maxUsers: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => PlanCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => PlanAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => PlanMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => PlanMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => PlanSumOrderByAggregateInputSchema).optional()
}).strict();

export const PlanScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.PlanScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => PlanScalarWhereWithAggregatesInputSchema),z.lazy(() => PlanScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => PlanScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => PlanScalarWhereWithAggregatesInputSchema),z.lazy(() => PlanScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  stripeProductId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  stripePriceId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  maxUsers: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const TokenWhereInputSchema: z.ZodType<Prisma.TokenWhereInput> = z.object({
  AND: z.union([ z.lazy(() => TokenWhereInputSchema),z.lazy(() => TokenWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => TokenWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => TokenWhereInputSchema),z.lazy(() => TokenWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  type: z.union([ z.lazy(() => EnumTokenTypeFilterSchema),z.lazy(() => TokenTypeSchema) ]).optional(),
  token: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  expires: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  profileId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  profile: z.union([ z.lazy(() => ProfileRelationFilterSchema),z.lazy(() => ProfileWhereInputSchema) ]).optional(),
}).strict();

export const TokenOrderByWithRelationInputSchema: z.ZodType<Prisma.TokenOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  token: z.lazy(() => SortOrderSchema).optional(),
  expires: z.lazy(() => SortOrderSchema).optional(),
  profileId: z.lazy(() => SortOrderSchema).optional(),
  profile: z.lazy(() => ProfileOrderByWithRelationInputSchema).optional()
}).strict();

export const TokenWhereUniqueInputSchema: z.ZodType<Prisma.TokenWhereUniqueInput> = z.union([
  z.object({
    id: z.string().cuid(),
    token: z.string()
  }),
  z.object({
    id: z.string().cuid(),
  }),
  z.object({
    token: z.string(),
  }),
])
.and(z.object({
  id: z.string().cuid().optional(),
  token: z.string().optional(),
  AND: z.union([ z.lazy(() => TokenWhereInputSchema),z.lazy(() => TokenWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => TokenWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => TokenWhereInputSchema),z.lazy(() => TokenWhereInputSchema).array() ]).optional(),
  type: z.union([ z.lazy(() => EnumTokenTypeFilterSchema),z.lazy(() => TokenTypeSchema) ]).optional(),
  expires: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  profileId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  profile: z.union([ z.lazy(() => ProfileRelationFilterSchema),z.lazy(() => ProfileWhereInputSchema) ]).optional(),
}).strict());

export const TokenOrderByWithAggregationInputSchema: z.ZodType<Prisma.TokenOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  token: z.lazy(() => SortOrderSchema).optional(),
  expires: z.lazy(() => SortOrderSchema).optional(),
  profileId: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => TokenCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => TokenMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => TokenMinOrderByAggregateInputSchema).optional()
}).strict();

export const TokenScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.TokenScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => TokenScalarWhereWithAggregatesInputSchema),z.lazy(() => TokenScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => TokenScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => TokenScalarWhereWithAggregatesInputSchema),z.lazy(() => TokenScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  type: z.union([ z.lazy(() => EnumTokenTypeWithAggregatesFilterSchema),z.lazy(() => TokenTypeSchema) ]).optional(),
  token: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  expires: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  profileId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
}).strict();

export const InvitationWhereInputSchema: z.ZodType<Prisma.InvitationWhereInput> = z.object({
  AND: z.union([ z.lazy(() => InvitationWhereInputSchema),z.lazy(() => InvitationWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => InvitationWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => InvitationWhereInputSchema),z.lazy(() => InvitationWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  email: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  role: z.union([ z.lazy(() => EnumRoleFilterSchema),z.lazy(() => RoleSchema) ]).optional(),
  token: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  expires: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  invitedById: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  userId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  invitedBy: z.union([ z.lazy(() => UserRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
  user: z.union([ z.lazy(() => UserNullableRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional().nullable(),
}).strict();

export const InvitationOrderByWithRelationInputSchema: z.ZodType<Prisma.InvitationOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  role: z.lazy(() => SortOrderSchema).optional(),
  token: z.lazy(() => SortOrderSchema).optional(),
  expires: z.lazy(() => SortOrderSchema).optional(),
  invitedById: z.lazy(() => SortOrderSchema).optional(),
  userId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  invitedBy: z.lazy(() => UserOrderByWithRelationInputSchema).optional(),
  user: z.lazy(() => UserOrderByWithRelationInputSchema).optional()
}).strict();

export const InvitationWhereUniqueInputSchema: z.ZodType<Prisma.InvitationWhereUniqueInput> = z.union([
  z.object({
    id: z.string().cuid(),
    token: z.string(),
    userId: z.string()
  }),
  z.object({
    id: z.string().cuid(),
    token: z.string(),
  }),
  z.object({
    id: z.string().cuid(),
    userId: z.string(),
  }),
  z.object({
    id: z.string().cuid(),
  }),
  z.object({
    token: z.string(),
    userId: z.string(),
  }),
  z.object({
    token: z.string(),
  }),
  z.object({
    userId: z.string(),
  }),
])
.and(z.object({
  id: z.string().cuid().optional(),
  token: z.string().optional(),
  userId: z.string().optional(),
  AND: z.union([ z.lazy(() => InvitationWhereInputSchema),z.lazy(() => InvitationWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => InvitationWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => InvitationWhereInputSchema),z.lazy(() => InvitationWhereInputSchema).array() ]).optional(),
  email: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  role: z.union([ z.lazy(() => EnumRoleFilterSchema),z.lazy(() => RoleSchema) ]).optional(),
  expires: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  invitedById: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  invitedBy: z.union([ z.lazy(() => UserRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
  user: z.union([ z.lazy(() => UserNullableRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional().nullable(),
}).strict());

export const InvitationOrderByWithAggregationInputSchema: z.ZodType<Prisma.InvitationOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  role: z.lazy(() => SortOrderSchema).optional(),
  token: z.lazy(() => SortOrderSchema).optional(),
  expires: z.lazy(() => SortOrderSchema).optional(),
  invitedById: z.lazy(() => SortOrderSchema).optional(),
  userId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => InvitationCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => InvitationMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => InvitationMinOrderByAggregateInputSchema).optional()
}).strict();

export const InvitationScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.InvitationScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => InvitationScalarWhereWithAggregatesInputSchema),z.lazy(() => InvitationScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => InvitationScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => InvitationScalarWhereWithAggregatesInputSchema),z.lazy(() => InvitationScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  email: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  role: z.union([ z.lazy(() => EnumRoleWithAggregatesFilterSchema),z.lazy(() => RoleSchema) ]).optional(),
  token: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  expires: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  invitedById: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  userId: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const PatientWhereInputSchema: z.ZodType<Prisma.PatientWhereInput> = z.object({
  AND: z.union([ z.lazy(() => PatientWhereInputSchema),z.lazy(() => PatientWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => PatientWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => PatientWhereInputSchema),z.lazy(() => PatientWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  firstName: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  lastName: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  gender: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  dob: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  email: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  phone: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  city: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  county: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  status: z.union([ z.lazy(() => EnumStatusFilterSchema),z.lazy(() => StatusSchema) ]).optional(),
  smsNotifications: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  emailNotifications: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  filters: z.lazy(() => JsonFilterSchema).optional(),
  userId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  tenantId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  user: z.union([ z.lazy(() => UserRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
  tenant: z.union([ z.lazy(() => TenantRelationFilterSchema),z.lazy(() => TenantWhereInputSchema) ]).optional(),
  files: z.lazy(() => FileListRelationFilterSchema).optional(),
  quizes: z.lazy(() => QuizListRelationFilterSchema).optional(),
  appointments: z.lazy(() => EventListRelationFilterSchema).optional(),
  treatmentPlans: z.lazy(() => TreatmentPlanListRelationFilterSchema).optional()
}).strict();

export const PatientOrderByWithRelationInputSchema: z.ZodType<Prisma.PatientOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  firstName: z.lazy(() => SortOrderSchema).optional(),
  lastName: z.lazy(() => SortOrderSchema).optional(),
  gender: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  dob: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  email: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  phone: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  city: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  county: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  smsNotifications: z.lazy(() => SortOrderSchema).optional(),
  emailNotifications: z.lazy(() => SortOrderSchema).optional(),
  filters: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  tenantId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  user: z.lazy(() => UserOrderByWithRelationInputSchema).optional(),
  tenant: z.lazy(() => TenantOrderByWithRelationInputSchema).optional(),
  files: z.lazy(() => FileOrderByRelationAggregateInputSchema).optional(),
  quizes: z.lazy(() => QuizOrderByRelationAggregateInputSchema).optional(),
  appointments: z.lazy(() => EventOrderByRelationAggregateInputSchema).optional(),
  treatmentPlans: z.lazy(() => TreatmentPlanOrderByRelationAggregateInputSchema).optional()
}).strict();

export const PatientWhereUniqueInputSchema: z.ZodType<Prisma.PatientWhereUniqueInput> = z.object({
  id: z.string().cuid()
})
.and(z.object({
  id: z.string().cuid().optional(),
  AND: z.union([ z.lazy(() => PatientWhereInputSchema),z.lazy(() => PatientWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => PatientWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => PatientWhereInputSchema),z.lazy(() => PatientWhereInputSchema).array() ]).optional(),
  firstName: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  lastName: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  gender: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  dob: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  email: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  phone: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  city: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  county: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  status: z.union([ z.lazy(() => EnumStatusFilterSchema),z.lazy(() => StatusSchema) ]).optional(),
  smsNotifications: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  emailNotifications: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  filters: z.lazy(() => JsonFilterSchema).optional(),
  userId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  tenantId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  user: z.union([ z.lazy(() => UserRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
  tenant: z.union([ z.lazy(() => TenantRelationFilterSchema),z.lazy(() => TenantWhereInputSchema) ]).optional(),
  files: z.lazy(() => FileListRelationFilterSchema).optional(),
  quizes: z.lazy(() => QuizListRelationFilterSchema).optional(),
  appointments: z.lazy(() => EventListRelationFilterSchema).optional(),
  treatmentPlans: z.lazy(() => TreatmentPlanListRelationFilterSchema).optional()
}).strict());

export const PatientOrderByWithAggregationInputSchema: z.ZodType<Prisma.PatientOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  firstName: z.lazy(() => SortOrderSchema).optional(),
  lastName: z.lazy(() => SortOrderSchema).optional(),
  gender: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  dob: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  email: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  phone: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  city: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  county: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  smsNotifications: z.lazy(() => SortOrderSchema).optional(),
  emailNotifications: z.lazy(() => SortOrderSchema).optional(),
  filters: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  tenantId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => PatientCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => PatientMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => PatientMinOrderByAggregateInputSchema).optional()
}).strict();

export const PatientScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.PatientScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => PatientScalarWhereWithAggregatesInputSchema),z.lazy(() => PatientScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => PatientScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => PatientScalarWhereWithAggregatesInputSchema),z.lazy(() => PatientScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  firstName: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  lastName: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  gender: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  dob: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  email: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  phone: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  city: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  county: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  status: z.union([ z.lazy(() => EnumStatusWithAggregatesFilterSchema),z.lazy(() => StatusSchema) ]).optional(),
  smsNotifications: z.union([ z.lazy(() => BoolWithAggregatesFilterSchema),z.boolean() ]).optional(),
  emailNotifications: z.union([ z.lazy(() => BoolWithAggregatesFilterSchema),z.boolean() ]).optional(),
  filters: z.lazy(() => JsonWithAggregatesFilterSchema).optional(),
  userId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  tenantId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const SpecialityWhereInputSchema: z.ZodType<Prisma.SpecialityWhereInput> = z.object({
  AND: z.union([ z.lazy(() => SpecialityWhereInputSchema),z.lazy(() => SpecialityWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => SpecialityWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => SpecialityWhereInputSchema),z.lazy(() => SpecialityWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  color: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  tenantId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  users: z.lazy(() => UserListRelationFilterSchema).optional(),
  tenant: z.union([ z.lazy(() => TenantRelationFilterSchema),z.lazy(() => TenantWhereInputSchema) ]).optional(),
}).strict();

export const SpecialityOrderByWithRelationInputSchema: z.ZodType<Prisma.SpecialityOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  color: z.lazy(() => SortOrderSchema).optional(),
  tenantId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  users: z.lazy(() => UserOrderByRelationAggregateInputSchema).optional(),
  tenant: z.lazy(() => TenantOrderByWithRelationInputSchema).optional()
}).strict();

export const SpecialityWhereUniqueInputSchema: z.ZodType<Prisma.SpecialityWhereUniqueInput> = z.object({
  id: z.string().cuid()
})
.and(z.object({
  id: z.string().cuid().optional(),
  AND: z.union([ z.lazy(() => SpecialityWhereInputSchema),z.lazy(() => SpecialityWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => SpecialityWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => SpecialityWhereInputSchema),z.lazy(() => SpecialityWhereInputSchema).array() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  color: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  tenantId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  users: z.lazy(() => UserListRelationFilterSchema).optional(),
  tenant: z.union([ z.lazy(() => TenantRelationFilterSchema),z.lazy(() => TenantWhereInputSchema) ]).optional(),
}).strict());

export const SpecialityOrderByWithAggregationInputSchema: z.ZodType<Prisma.SpecialityOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  color: z.lazy(() => SortOrderSchema).optional(),
  tenantId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => SpecialityCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => SpecialityMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => SpecialityMinOrderByAggregateInputSchema).optional()
}).strict();

export const SpecialityScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.SpecialityScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => SpecialityScalarWhereWithAggregatesInputSchema),z.lazy(() => SpecialityScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => SpecialityScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => SpecialityScalarWhereWithAggregatesInputSchema),z.lazy(() => SpecialityScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  color: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  tenantId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const EventWhereInputSchema: z.ZodType<Prisma.EventWhereInput> = z.object({
  AND: z.union([ z.lazy(() => EventWhereInputSchema),z.lazy(() => EventWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => EventWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => EventWhereInputSchema),z.lazy(() => EventWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  index: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  title: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  date: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  start: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  end: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  allDay: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  type: z.union([ z.lazy(() => EnumEventTypeFilterSchema),z.lazy(() => EventTypeSchema) ]).optional(),
  status: z.union([ z.lazy(() => EnumEventStatusFilterSchema),z.lazy(() => EventStatusSchema) ]).optional(),
  initiator: z.union([ z.lazy(() => EnumEventInitiatorFilterSchema),z.lazy(() => EventInitiatorSchema) ]).optional(),
  patientId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  userId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  tenantId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  visits: z.lazy(() => VisitListRelationFilterSchema).optional(),
  quiz: z.union([ z.lazy(() => QuizNullableRelationFilterSchema),z.lazy(() => QuizWhereInputSchema) ]).optional().nullable(),
  actions: z.lazy(() => EventActionListRelationFilterSchema).optional(),
  files: z.lazy(() => FileListRelationFilterSchema).optional(),
  patient: z.union([ z.lazy(() => PatientNullableRelationFilterSchema),z.lazy(() => PatientWhereInputSchema) ]).optional().nullable(),
  user: z.union([ z.lazy(() => UserRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
  tenant: z.union([ z.lazy(() => TenantRelationFilterSchema),z.lazy(() => TenantWhereInputSchema) ]).optional(),
}).strict();

export const EventOrderByWithRelationInputSchema: z.ZodType<Prisma.EventOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  index: z.lazy(() => SortOrderSchema).optional(),
  title: z.lazy(() => SortOrderSchema).optional(),
  description: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  date: z.lazy(() => SortOrderSchema).optional(),
  start: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  end: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  allDay: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  initiator: z.lazy(() => SortOrderSchema).optional(),
  patientId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  tenantId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  visits: z.lazy(() => VisitOrderByRelationAggregateInputSchema).optional(),
  quiz: z.lazy(() => QuizOrderByWithRelationInputSchema).optional(),
  actions: z.lazy(() => EventActionOrderByRelationAggregateInputSchema).optional(),
  files: z.lazy(() => FileOrderByRelationAggregateInputSchema).optional(),
  patient: z.lazy(() => PatientOrderByWithRelationInputSchema).optional(),
  user: z.lazy(() => UserOrderByWithRelationInputSchema).optional(),
  tenant: z.lazy(() => TenantOrderByWithRelationInputSchema).optional()
}).strict();

export const EventWhereUniqueInputSchema: z.ZodType<Prisma.EventWhereUniqueInput> = z.union([
  z.object({
    id: z.string().cuid(),
    index: z.number().int()
  }),
  z.object({
    id: z.string().cuid(),
  }),
  z.object({
    index: z.number().int(),
  }),
])
.and(z.object({
  id: z.string().cuid().optional(),
  index: z.number().int().optional(),
  AND: z.union([ z.lazy(() => EventWhereInputSchema),z.lazy(() => EventWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => EventWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => EventWhereInputSchema),z.lazy(() => EventWhereInputSchema).array() ]).optional(),
  title: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  date: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  start: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  end: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  allDay: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  type: z.union([ z.lazy(() => EnumEventTypeFilterSchema),z.lazy(() => EventTypeSchema) ]).optional(),
  status: z.union([ z.lazy(() => EnumEventStatusFilterSchema),z.lazy(() => EventStatusSchema) ]).optional(),
  initiator: z.union([ z.lazy(() => EnumEventInitiatorFilterSchema),z.lazy(() => EventInitiatorSchema) ]).optional(),
  patientId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  userId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  tenantId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  visits: z.lazy(() => VisitListRelationFilterSchema).optional(),
  quiz: z.union([ z.lazy(() => QuizNullableRelationFilterSchema),z.lazy(() => QuizWhereInputSchema) ]).optional().nullable(),
  actions: z.lazy(() => EventActionListRelationFilterSchema).optional(),
  files: z.lazy(() => FileListRelationFilterSchema).optional(),
  patient: z.union([ z.lazy(() => PatientNullableRelationFilterSchema),z.lazy(() => PatientWhereInputSchema) ]).optional().nullable(),
  user: z.union([ z.lazy(() => UserRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
  tenant: z.union([ z.lazy(() => TenantRelationFilterSchema),z.lazy(() => TenantWhereInputSchema) ]).optional(),
}).strict());

export const EventOrderByWithAggregationInputSchema: z.ZodType<Prisma.EventOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  index: z.lazy(() => SortOrderSchema).optional(),
  title: z.lazy(() => SortOrderSchema).optional(),
  description: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  date: z.lazy(() => SortOrderSchema).optional(),
  start: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  end: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  allDay: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  initiator: z.lazy(() => SortOrderSchema).optional(),
  patientId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  tenantId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => EventCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => EventAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => EventMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => EventMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => EventSumOrderByAggregateInputSchema).optional()
}).strict();

export const EventScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.EventScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => EventScalarWhereWithAggregatesInputSchema),z.lazy(() => EventScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => EventScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => EventScalarWhereWithAggregatesInputSchema),z.lazy(() => EventScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  index: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  title: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  date: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  start: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  end: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  allDay: z.union([ z.lazy(() => BoolWithAggregatesFilterSchema),z.boolean() ]).optional(),
  type: z.union([ z.lazy(() => EnumEventTypeWithAggregatesFilterSchema),z.lazy(() => EventTypeSchema) ]).optional(),
  status: z.union([ z.lazy(() => EnumEventStatusWithAggregatesFilterSchema),z.lazy(() => EventStatusSchema) ]).optional(),
  initiator: z.union([ z.lazy(() => EnumEventInitiatorWithAggregatesFilterSchema),z.lazy(() => EventInitiatorSchema) ]).optional(),
  patientId: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  userId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  tenantId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const EventActionWhereInputSchema: z.ZodType<Prisma.EventActionWhereInput> = z.object({
  AND: z.union([ z.lazy(() => EventActionWhereInputSchema),z.lazy(() => EventActionWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => EventActionWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => EventActionWhereInputSchema),z.lazy(() => EventActionWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  data: z.lazy(() => JsonFilterSchema).optional(),
  userId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  eventId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  user: z.union([ z.lazy(() => UserRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
  event: z.union([ z.lazy(() => EventRelationFilterSchema),z.lazy(() => EventWhereInputSchema) ]).optional(),
}).strict();

export const EventActionOrderByWithRelationInputSchema: z.ZodType<Prisma.EventActionOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  data: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  eventId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  user: z.lazy(() => UserOrderByWithRelationInputSchema).optional(),
  event: z.lazy(() => EventOrderByWithRelationInputSchema).optional()
}).strict();

export const EventActionWhereUniqueInputSchema: z.ZodType<Prisma.EventActionWhereUniqueInput> = z.object({
  id: z.string().cuid()
})
.and(z.object({
  id: z.string().cuid().optional(),
  AND: z.union([ z.lazy(() => EventActionWhereInputSchema),z.lazy(() => EventActionWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => EventActionWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => EventActionWhereInputSchema),z.lazy(() => EventActionWhereInputSchema).array() ]).optional(),
  data: z.lazy(() => JsonFilterSchema).optional(),
  userId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  eventId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  user: z.union([ z.lazy(() => UserRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
  event: z.union([ z.lazy(() => EventRelationFilterSchema),z.lazy(() => EventWhereInputSchema) ]).optional(),
}).strict());

export const EventActionOrderByWithAggregationInputSchema: z.ZodType<Prisma.EventActionOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  data: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  eventId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => EventActionCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => EventActionMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => EventActionMinOrderByAggregateInputSchema).optional()
}).strict();

export const EventActionScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.EventActionScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => EventActionScalarWhereWithAggregatesInputSchema),z.lazy(() => EventActionScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => EventActionScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => EventActionScalarWhereWithAggregatesInputSchema),z.lazy(() => EventActionScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  data: z.lazy(() => JsonWithAggregatesFilterSchema).optional(),
  userId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  eventId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const MaterialWhereInputSchema: z.ZodType<Prisma.MaterialWhereInput> = z.object({
  AND: z.union([ z.lazy(() => MaterialWhereInputSchema),z.lazy(() => MaterialWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => MaterialWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => MaterialWhereInputSchema),z.lazy(() => MaterialWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  unit_price: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  unit: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  image: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  tags: z.lazy(() => StringNullableListFilterSchema).optional(),
  isActive: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  keepInventory: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  stock: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  tenantId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  services: z.lazy(() => ServiceMaterialListRelationFilterSchema).optional(),
  tenant: z.union([ z.lazy(() => TenantRelationFilterSchema),z.lazy(() => TenantWhereInputSchema) ]).optional(),
}).strict();

export const MaterialOrderByWithRelationInputSchema: z.ZodType<Prisma.MaterialOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  unit_price: z.lazy(() => SortOrderSchema).optional(),
  unit: z.lazy(() => SortOrderSchema).optional(),
  image: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  tags: z.lazy(() => SortOrderSchema).optional(),
  isActive: z.lazy(() => SortOrderSchema).optional(),
  keepInventory: z.lazy(() => SortOrderSchema).optional(),
  stock: z.lazy(() => SortOrderSchema).optional(),
  tenantId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  services: z.lazy(() => ServiceMaterialOrderByRelationAggregateInputSchema).optional(),
  tenant: z.lazy(() => TenantOrderByWithRelationInputSchema).optional()
}).strict();

export const MaterialWhereUniqueInputSchema: z.ZodType<Prisma.MaterialWhereUniqueInput> = z.object({
  id: z.string().cuid()
})
.and(z.object({
  id: z.string().cuid().optional(),
  AND: z.union([ z.lazy(() => MaterialWhereInputSchema),z.lazy(() => MaterialWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => MaterialWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => MaterialWhereInputSchema),z.lazy(() => MaterialWhereInputSchema).array() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  unit_price: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  unit: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  image: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  tags: z.lazy(() => StringNullableListFilterSchema).optional(),
  isActive: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  keepInventory: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  stock: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  tenantId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  services: z.lazy(() => ServiceMaterialListRelationFilterSchema).optional(),
  tenant: z.union([ z.lazy(() => TenantRelationFilterSchema),z.lazy(() => TenantWhereInputSchema) ]).optional(),
}).strict());

export const MaterialOrderByWithAggregationInputSchema: z.ZodType<Prisma.MaterialOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  unit_price: z.lazy(() => SortOrderSchema).optional(),
  unit: z.lazy(() => SortOrderSchema).optional(),
  image: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  tags: z.lazy(() => SortOrderSchema).optional(),
  isActive: z.lazy(() => SortOrderSchema).optional(),
  keepInventory: z.lazy(() => SortOrderSchema).optional(),
  stock: z.lazy(() => SortOrderSchema).optional(),
  tenantId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => MaterialCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => MaterialAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => MaterialMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => MaterialMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => MaterialSumOrderByAggregateInputSchema).optional()
}).strict();

export const MaterialScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.MaterialScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => MaterialScalarWhereWithAggregatesInputSchema),z.lazy(() => MaterialScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => MaterialScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => MaterialScalarWhereWithAggregatesInputSchema),z.lazy(() => MaterialScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  unit_price: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  unit: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  image: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  tags: z.lazy(() => StringNullableListFilterSchema).optional(),
  isActive: z.union([ z.lazy(() => BoolWithAggregatesFilterSchema),z.boolean() ]).optional(),
  keepInventory: z.union([ z.lazy(() => BoolWithAggregatesFilterSchema),z.boolean() ]).optional(),
  stock: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  tenantId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const ServiceWhereInputSchema: z.ZodType<Prisma.ServiceWhereInput> = z.object({
  AND: z.union([ z.lazy(() => ServiceWhereInputSchema),z.lazy(() => ServiceWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ServiceWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ServiceWhereInputSchema),z.lazy(() => ServiceWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  unit_price: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  unit: z.union([ z.lazy(() => EnumServiceUnitFilterSchema),z.lazy(() => ServiceUnitSchema) ]).optional(),
  duration: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  image: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  tags: z.lazy(() => StringNullableListFilterSchema).optional(),
  isActive: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  tenantId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  categoryId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  tenant: z.union([ z.lazy(() => TenantRelationFilterSchema),z.lazy(() => TenantWhereInputSchema) ]).optional(),
  category: z.union([ z.lazy(() => ServiceCategoryNullableRelationFilterSchema),z.lazy(() => ServiceCategoryWhereInputSchema) ]).optional().nullable(),
  materials: z.lazy(() => ServiceMaterialListRelationFilterSchema).optional(),
  visits: z.lazy(() => VisitListRelationFilterSchema).optional(),
  children: z.lazy(() => RelatedServiceListRelationFilterSchema).optional()
}).strict();

export const ServiceOrderByWithRelationInputSchema: z.ZodType<Prisma.ServiceOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  unit_price: z.lazy(() => SortOrderSchema).optional(),
  unit: z.lazy(() => SortOrderSchema).optional(),
  duration: z.lazy(() => SortOrderSchema).optional(),
  image: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  tags: z.lazy(() => SortOrderSchema).optional(),
  isActive: z.lazy(() => SortOrderSchema).optional(),
  tenantId: z.lazy(() => SortOrderSchema).optional(),
  categoryId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  tenant: z.lazy(() => TenantOrderByWithRelationInputSchema).optional(),
  category: z.lazy(() => ServiceCategoryOrderByWithRelationInputSchema).optional(),
  materials: z.lazy(() => ServiceMaterialOrderByRelationAggregateInputSchema).optional(),
  visits: z.lazy(() => VisitOrderByRelationAggregateInputSchema).optional(),
  children: z.lazy(() => RelatedServiceOrderByRelationAggregateInputSchema).optional()
}).strict();

export const ServiceWhereUniqueInputSchema: z.ZodType<Prisma.ServiceWhereUniqueInput> = z.object({
  id: z.string().cuid()
})
.and(z.object({
  id: z.string().cuid().optional(),
  AND: z.union([ z.lazy(() => ServiceWhereInputSchema),z.lazy(() => ServiceWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ServiceWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ServiceWhereInputSchema),z.lazy(() => ServiceWhereInputSchema).array() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  unit_price: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  unit: z.union([ z.lazy(() => EnumServiceUnitFilterSchema),z.lazy(() => ServiceUnitSchema) ]).optional(),
  duration: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  image: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  tags: z.lazy(() => StringNullableListFilterSchema).optional(),
  isActive: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  tenantId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  categoryId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  tenant: z.union([ z.lazy(() => TenantRelationFilterSchema),z.lazy(() => TenantWhereInputSchema) ]).optional(),
  category: z.union([ z.lazy(() => ServiceCategoryNullableRelationFilterSchema),z.lazy(() => ServiceCategoryWhereInputSchema) ]).optional().nullable(),
  materials: z.lazy(() => ServiceMaterialListRelationFilterSchema).optional(),
  visits: z.lazy(() => VisitListRelationFilterSchema).optional(),
  children: z.lazy(() => RelatedServiceListRelationFilterSchema).optional()
}).strict());

export const ServiceOrderByWithAggregationInputSchema: z.ZodType<Prisma.ServiceOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  unit_price: z.lazy(() => SortOrderSchema).optional(),
  unit: z.lazy(() => SortOrderSchema).optional(),
  duration: z.lazy(() => SortOrderSchema).optional(),
  image: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  tags: z.lazy(() => SortOrderSchema).optional(),
  isActive: z.lazy(() => SortOrderSchema).optional(),
  tenantId: z.lazy(() => SortOrderSchema).optional(),
  categoryId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => ServiceCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => ServiceAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => ServiceMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => ServiceMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => ServiceSumOrderByAggregateInputSchema).optional()
}).strict();

export const ServiceScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.ServiceScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => ServiceScalarWhereWithAggregatesInputSchema),z.lazy(() => ServiceScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => ServiceScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ServiceScalarWhereWithAggregatesInputSchema),z.lazy(() => ServiceScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  unit_price: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  unit: z.union([ z.lazy(() => EnumServiceUnitWithAggregatesFilterSchema),z.lazy(() => ServiceUnitSchema) ]).optional(),
  duration: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  image: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  tags: z.lazy(() => StringNullableListFilterSchema).optional(),
  isActive: z.union([ z.lazy(() => BoolWithAggregatesFilterSchema),z.boolean() ]).optional(),
  tenantId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  categoryId: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const RelatedServiceWhereInputSchema: z.ZodType<Prisma.RelatedServiceWhereInput> = z.object({
  AND: z.union([ z.lazy(() => RelatedServiceWhereInputSchema),z.lazy(() => RelatedServiceWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => RelatedServiceWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => RelatedServiceWhereInputSchema),z.lazy(() => RelatedServiceWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  order: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  quantity: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  unit_price: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  service: z.lazy(() => JsonFilterSchema).optional(),
  parentId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  parent: z.union([ z.lazy(() => ServiceRelationFilterSchema),z.lazy(() => ServiceWhereInputSchema) ]).optional(),
}).strict();

export const RelatedServiceOrderByWithRelationInputSchema: z.ZodType<Prisma.RelatedServiceOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  order: z.lazy(() => SortOrderSchema).optional(),
  quantity: z.lazy(() => SortOrderSchema).optional(),
  unit_price: z.lazy(() => SortOrderSchema).optional(),
  service: z.lazy(() => SortOrderSchema).optional(),
  parentId: z.lazy(() => SortOrderSchema).optional(),
  parent: z.lazy(() => ServiceOrderByWithRelationInputSchema).optional()
}).strict();

export const RelatedServiceWhereUniqueInputSchema: z.ZodType<Prisma.RelatedServiceWhereUniqueInput> = z.object({
  id: z.string().cuid()
})
.and(z.object({
  id: z.string().cuid().optional(),
  AND: z.union([ z.lazy(() => RelatedServiceWhereInputSchema),z.lazy(() => RelatedServiceWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => RelatedServiceWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => RelatedServiceWhereInputSchema),z.lazy(() => RelatedServiceWhereInputSchema).array() ]).optional(),
  order: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  quantity: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  unit_price: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  service: z.lazy(() => JsonFilterSchema).optional(),
  parentId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  parent: z.union([ z.lazy(() => ServiceRelationFilterSchema),z.lazy(() => ServiceWhereInputSchema) ]).optional(),
}).strict());

export const RelatedServiceOrderByWithAggregationInputSchema: z.ZodType<Prisma.RelatedServiceOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  order: z.lazy(() => SortOrderSchema).optional(),
  quantity: z.lazy(() => SortOrderSchema).optional(),
  unit_price: z.lazy(() => SortOrderSchema).optional(),
  service: z.lazy(() => SortOrderSchema).optional(),
  parentId: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => RelatedServiceCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => RelatedServiceAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => RelatedServiceMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => RelatedServiceMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => RelatedServiceSumOrderByAggregateInputSchema).optional()
}).strict();

export const RelatedServiceScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.RelatedServiceScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => RelatedServiceScalarWhereWithAggregatesInputSchema),z.lazy(() => RelatedServiceScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => RelatedServiceScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => RelatedServiceScalarWhereWithAggregatesInputSchema),z.lazy(() => RelatedServiceScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  order: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  quantity: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  unit_price: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  service: z.lazy(() => JsonWithAggregatesFilterSchema).optional(),
  parentId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
}).strict();

export const ServiceMaterialWhereInputSchema: z.ZodType<Prisma.ServiceMaterialWhereInput> = z.object({
  AND: z.union([ z.lazy(() => ServiceMaterialWhereInputSchema),z.lazy(() => ServiceMaterialWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ServiceMaterialWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ServiceMaterialWhereInputSchema),z.lazy(() => ServiceMaterialWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  quantity: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  unit_price: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  serviceId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  materialId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  service: z.union([ z.lazy(() => ServiceRelationFilterSchema),z.lazy(() => ServiceWhereInputSchema) ]).optional(),
  material: z.union([ z.lazy(() => MaterialRelationFilterSchema),z.lazy(() => MaterialWhereInputSchema) ]).optional(),
}).strict();

export const ServiceMaterialOrderByWithRelationInputSchema: z.ZodType<Prisma.ServiceMaterialOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  quantity: z.lazy(() => SortOrderSchema).optional(),
  unit_price: z.lazy(() => SortOrderSchema).optional(),
  serviceId: z.lazy(() => SortOrderSchema).optional(),
  materialId: z.lazy(() => SortOrderSchema).optional(),
  service: z.lazy(() => ServiceOrderByWithRelationInputSchema).optional(),
  material: z.lazy(() => MaterialOrderByWithRelationInputSchema).optional()
}).strict();

export const ServiceMaterialWhereUniqueInputSchema: z.ZodType<Prisma.ServiceMaterialWhereUniqueInput> = z.object({
  id: z.string().cuid()
})
.and(z.object({
  id: z.string().cuid().optional(),
  AND: z.union([ z.lazy(() => ServiceMaterialWhereInputSchema),z.lazy(() => ServiceMaterialWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ServiceMaterialWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ServiceMaterialWhereInputSchema),z.lazy(() => ServiceMaterialWhereInputSchema).array() ]).optional(),
  quantity: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  unit_price: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  serviceId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  materialId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  service: z.union([ z.lazy(() => ServiceRelationFilterSchema),z.lazy(() => ServiceWhereInputSchema) ]).optional(),
  material: z.union([ z.lazy(() => MaterialRelationFilterSchema),z.lazy(() => MaterialWhereInputSchema) ]).optional(),
}).strict());

export const ServiceMaterialOrderByWithAggregationInputSchema: z.ZodType<Prisma.ServiceMaterialOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  quantity: z.lazy(() => SortOrderSchema).optional(),
  unit_price: z.lazy(() => SortOrderSchema).optional(),
  serviceId: z.lazy(() => SortOrderSchema).optional(),
  materialId: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => ServiceMaterialCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => ServiceMaterialAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => ServiceMaterialMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => ServiceMaterialMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => ServiceMaterialSumOrderByAggregateInputSchema).optional()
}).strict();

export const ServiceMaterialScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.ServiceMaterialScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => ServiceMaterialScalarWhereWithAggregatesInputSchema),z.lazy(() => ServiceMaterialScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => ServiceMaterialScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ServiceMaterialScalarWhereWithAggregatesInputSchema),z.lazy(() => ServiceMaterialScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  quantity: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  unit_price: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  serviceId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  materialId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
}).strict();

export const PriceWhereInputSchema: z.ZodType<Prisma.PriceWhereInput> = z.object({
  AND: z.union([ z.lazy(() => PriceWhereInputSchema),z.lazy(() => PriceWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => PriceWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => PriceWhereInputSchema),z.lazy(() => PriceWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  unit_price: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  entityId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  type: z.union([ z.lazy(() => EnumPriceTypeFilterSchema),z.lazy(() => PriceTypeSchema) ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const PriceOrderByWithRelationInputSchema: z.ZodType<Prisma.PriceOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  unit_price: z.lazy(() => SortOrderSchema).optional(),
  entityId: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const PriceWhereUniqueInputSchema: z.ZodType<Prisma.PriceWhereUniqueInput> = z.object({
  id: z.string().cuid()
})
.and(z.object({
  id: z.string().cuid().optional(),
  AND: z.union([ z.lazy(() => PriceWhereInputSchema),z.lazy(() => PriceWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => PriceWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => PriceWhereInputSchema),z.lazy(() => PriceWhereInputSchema).array() ]).optional(),
  unit_price: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  entityId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  type: z.union([ z.lazy(() => EnumPriceTypeFilterSchema),z.lazy(() => PriceTypeSchema) ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict());

export const PriceOrderByWithAggregationInputSchema: z.ZodType<Prisma.PriceOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  unit_price: z.lazy(() => SortOrderSchema).optional(),
  entityId: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => PriceCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => PriceAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => PriceMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => PriceMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => PriceSumOrderByAggregateInputSchema).optional()
}).strict();

export const PriceScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.PriceScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => PriceScalarWhereWithAggregatesInputSchema),z.lazy(() => PriceScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => PriceScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => PriceScalarWhereWithAggregatesInputSchema),z.lazy(() => PriceScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  unit_price: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  entityId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  type: z.union([ z.lazy(() => EnumPriceTypeWithAggregatesFilterSchema),z.lazy(() => PriceTypeSchema) ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const ServiceCategoryWhereInputSchema: z.ZodType<Prisma.ServiceCategoryWhereInput> = z.object({
  AND: z.union([ z.lazy(() => ServiceCategoryWhereInputSchema),z.lazy(() => ServiceCategoryWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ServiceCategoryWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ServiceCategoryWhereInputSchema),z.lazy(() => ServiceCategoryWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  services: z.lazy(() => ServiceListRelationFilterSchema).optional()
}).strict();

export const ServiceCategoryOrderByWithRelationInputSchema: z.ZodType<Prisma.ServiceCategoryOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  services: z.lazy(() => ServiceOrderByRelationAggregateInputSchema).optional()
}).strict();

export const ServiceCategoryWhereUniqueInputSchema: z.ZodType<Prisma.ServiceCategoryWhereUniqueInput> = z.object({
  id: z.string().cuid()
})
.and(z.object({
  id: z.string().cuid().optional(),
  AND: z.union([ z.lazy(() => ServiceCategoryWhereInputSchema),z.lazy(() => ServiceCategoryWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ServiceCategoryWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ServiceCategoryWhereInputSchema),z.lazy(() => ServiceCategoryWhereInputSchema).array() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  services: z.lazy(() => ServiceListRelationFilterSchema).optional()
}).strict());

export const ServiceCategoryOrderByWithAggregationInputSchema: z.ZodType<Prisma.ServiceCategoryOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => ServiceCategoryCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => ServiceCategoryMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => ServiceCategoryMinOrderByAggregateInputSchema).optional()
}).strict();

export const ServiceCategoryScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.ServiceCategoryScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => ServiceCategoryScalarWhereWithAggregatesInputSchema),z.lazy(() => ServiceCategoryScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => ServiceCategoryScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ServiceCategoryScalarWhereWithAggregatesInputSchema),z.lazy(() => ServiceCategoryScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const TreatmentWhereInputSchema: z.ZodType<Prisma.TreatmentWhereInput> = z.object({
  AND: z.union([ z.lazy(() => TreatmentWhereInputSchema),z.lazy(() => TreatmentWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => TreatmentWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => TreatmentWhereInputSchema),z.lazy(() => TreatmentWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  price: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  target: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  status: z.union([ z.lazy(() => EnumTreatmentStatusFilterSchema),z.lazy(() => TreatmentStatusSchema) ]).optional(),
  treatmentPlanId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  treatmentPlan: z.union([ z.lazy(() => TreatmentPlanNullableRelationFilterSchema),z.lazy(() => TreatmentPlanWhereInputSchema) ]).optional().nullable(),
  visits: z.lazy(() => VisitListRelationFilterSchema).optional()
}).strict();

export const TreatmentOrderByWithRelationInputSchema: z.ZodType<Prisma.TreatmentOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  price: z.lazy(() => SortOrderSchema).optional(),
  target: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  treatmentPlanId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  treatmentPlan: z.lazy(() => TreatmentPlanOrderByWithRelationInputSchema).optional(),
  visits: z.lazy(() => VisitOrderByRelationAggregateInputSchema).optional()
}).strict();

export const TreatmentWhereUniqueInputSchema: z.ZodType<Prisma.TreatmentWhereUniqueInput> = z.object({
  id: z.string().cuid()
})
.and(z.object({
  id: z.string().cuid().optional(),
  AND: z.union([ z.lazy(() => TreatmentWhereInputSchema),z.lazy(() => TreatmentWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => TreatmentWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => TreatmentWhereInputSchema),z.lazy(() => TreatmentWhereInputSchema).array() ]).optional(),
  price: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  target: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  status: z.union([ z.lazy(() => EnumTreatmentStatusFilterSchema),z.lazy(() => TreatmentStatusSchema) ]).optional(),
  treatmentPlanId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  treatmentPlan: z.union([ z.lazy(() => TreatmentPlanNullableRelationFilterSchema),z.lazy(() => TreatmentPlanWhereInputSchema) ]).optional().nullable(),
  visits: z.lazy(() => VisitListRelationFilterSchema).optional()
}).strict());

export const TreatmentOrderByWithAggregationInputSchema: z.ZodType<Prisma.TreatmentOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  price: z.lazy(() => SortOrderSchema).optional(),
  target: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  treatmentPlanId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => TreatmentCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => TreatmentAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => TreatmentMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => TreatmentMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => TreatmentSumOrderByAggregateInputSchema).optional()
}).strict();

export const TreatmentScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.TreatmentScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => TreatmentScalarWhereWithAggregatesInputSchema),z.lazy(() => TreatmentScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => TreatmentScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => TreatmentScalarWhereWithAggregatesInputSchema),z.lazy(() => TreatmentScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  price: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  target: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  status: z.union([ z.lazy(() => EnumTreatmentStatusWithAggregatesFilterSchema),z.lazy(() => TreatmentStatusSchema) ]).optional(),
  treatmentPlanId: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const VisitWhereInputSchema: z.ZodType<Prisma.VisitWhereInput> = z.object({
  AND: z.union([ z.lazy(() => VisitWhereInputSchema),z.lazy(() => VisitWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => VisitWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => VisitWhereInputSchema),z.lazy(() => VisitWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  serviceId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  treatmentId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  eventId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  service: z.union([ z.lazy(() => ServiceRelationFilterSchema),z.lazy(() => ServiceWhereInputSchema) ]).optional(),
  treatment: z.union([ z.lazy(() => TreatmentRelationFilterSchema),z.lazy(() => TreatmentWhereInputSchema) ]).optional(),
  event: z.union([ z.lazy(() => EventNullableRelationFilterSchema),z.lazy(() => EventWhereInputSchema) ]).optional().nullable(),
}).strict();

export const VisitOrderByWithRelationInputSchema: z.ZodType<Prisma.VisitOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  serviceId: z.lazy(() => SortOrderSchema).optional(),
  treatmentId: z.lazy(() => SortOrderSchema).optional(),
  eventId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  service: z.lazy(() => ServiceOrderByWithRelationInputSchema).optional(),
  treatment: z.lazy(() => TreatmentOrderByWithRelationInputSchema).optional(),
  event: z.lazy(() => EventOrderByWithRelationInputSchema).optional()
}).strict();

export const VisitWhereUniqueInputSchema: z.ZodType<Prisma.VisitWhereUniqueInput> = z.object({
  id: z.string().cuid()
})
.and(z.object({
  id: z.string().cuid().optional(),
  AND: z.union([ z.lazy(() => VisitWhereInputSchema),z.lazy(() => VisitWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => VisitWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => VisitWhereInputSchema),z.lazy(() => VisitWhereInputSchema).array() ]).optional(),
  serviceId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  treatmentId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  eventId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  service: z.union([ z.lazy(() => ServiceRelationFilterSchema),z.lazy(() => ServiceWhereInputSchema) ]).optional(),
  treatment: z.union([ z.lazy(() => TreatmentRelationFilterSchema),z.lazy(() => TreatmentWhereInputSchema) ]).optional(),
  event: z.union([ z.lazy(() => EventNullableRelationFilterSchema),z.lazy(() => EventWhereInputSchema) ]).optional().nullable(),
}).strict());

export const VisitOrderByWithAggregationInputSchema: z.ZodType<Prisma.VisitOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  serviceId: z.lazy(() => SortOrderSchema).optional(),
  treatmentId: z.lazy(() => SortOrderSchema).optional(),
  eventId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => VisitCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => VisitMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => VisitMinOrderByAggregateInputSchema).optional()
}).strict();

export const VisitScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.VisitScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => VisitScalarWhereWithAggregatesInputSchema),z.lazy(() => VisitScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => VisitScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => VisitScalarWhereWithAggregatesInputSchema),z.lazy(() => VisitScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  serviceId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  treatmentId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  eventId: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const TreatmentPlanWhereInputSchema: z.ZodType<Prisma.TreatmentPlanWhereInput> = z.object({
  AND: z.union([ z.lazy(() => TreatmentPlanWhereInputSchema),z.lazy(() => TreatmentPlanWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => TreatmentPlanWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => TreatmentPlanWhereInputSchema),z.lazy(() => TreatmentPlanWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  isDone: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  patientId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  userId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  treatments: z.lazy(() => TreatmentListRelationFilterSchema).optional(),
  patient: z.union([ z.lazy(() => PatientRelationFilterSchema),z.lazy(() => PatientWhereInputSchema) ]).optional(),
  user: z.union([ z.lazy(() => UserRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
}).strict();

export const TreatmentPlanOrderByWithRelationInputSchema: z.ZodType<Prisma.TreatmentPlanOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  description: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  isDone: z.lazy(() => SortOrderSchema).optional(),
  patientId: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  treatments: z.lazy(() => TreatmentOrderByRelationAggregateInputSchema).optional(),
  patient: z.lazy(() => PatientOrderByWithRelationInputSchema).optional(),
  user: z.lazy(() => UserOrderByWithRelationInputSchema).optional()
}).strict();

export const TreatmentPlanWhereUniqueInputSchema: z.ZodType<Prisma.TreatmentPlanWhereUniqueInput> = z.object({
  id: z.string().cuid()
})
.and(z.object({
  id: z.string().cuid().optional(),
  AND: z.union([ z.lazy(() => TreatmentPlanWhereInputSchema),z.lazy(() => TreatmentPlanWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => TreatmentPlanWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => TreatmentPlanWhereInputSchema),z.lazy(() => TreatmentPlanWhereInputSchema).array() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  isDone: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  patientId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  userId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  treatments: z.lazy(() => TreatmentListRelationFilterSchema).optional(),
  patient: z.union([ z.lazy(() => PatientRelationFilterSchema),z.lazy(() => PatientWhereInputSchema) ]).optional(),
  user: z.union([ z.lazy(() => UserRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
}).strict());

export const TreatmentPlanOrderByWithAggregationInputSchema: z.ZodType<Prisma.TreatmentPlanOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  description: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  isDone: z.lazy(() => SortOrderSchema).optional(),
  patientId: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => TreatmentPlanCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => TreatmentPlanMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => TreatmentPlanMinOrderByAggregateInputSchema).optional()
}).strict();

export const TreatmentPlanScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.TreatmentPlanScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => TreatmentPlanScalarWhereWithAggregatesInputSchema),z.lazy(() => TreatmentPlanScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => TreatmentPlanScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => TreatmentPlanScalarWhereWithAggregatesInputSchema),z.lazy(() => TreatmentPlanScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  isDone: z.union([ z.lazy(() => BoolWithAggregatesFilterSchema),z.boolean() ]).optional(),
  patientId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  userId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const QuizWhereInputSchema: z.ZodType<Prisma.QuizWhereInput> = z.object({
  AND: z.union([ z.lazy(() => QuizWhereInputSchema),z.lazy(() => QuizWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => QuizWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => QuizWhereInputSchema),z.lazy(() => QuizWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  quiz: z.lazy(() => JsonFilterSchema).optional(),
  answers: z.lazy(() => IntNullableListFilterSchema).optional(),
  patientId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  eventId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  patient: z.union([ z.lazy(() => PatientRelationFilterSchema),z.lazy(() => PatientWhereInputSchema) ]).optional(),
  event: z.union([ z.lazy(() => EventNullableRelationFilterSchema),z.lazy(() => EventWhereInputSchema) ]).optional().nullable(),
}).strict();

export const QuizOrderByWithRelationInputSchema: z.ZodType<Prisma.QuizOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  quiz: z.lazy(() => SortOrderSchema).optional(),
  answers: z.lazy(() => SortOrderSchema).optional(),
  patientId: z.lazy(() => SortOrderSchema).optional(),
  eventId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  patient: z.lazy(() => PatientOrderByWithRelationInputSchema).optional(),
  event: z.lazy(() => EventOrderByWithRelationInputSchema).optional()
}).strict();

export const QuizWhereUniqueInputSchema: z.ZodType<Prisma.QuizWhereUniqueInput> = z.union([
  z.object({
    id: z.string().cuid(),
    eventId: z.string()
  }),
  z.object({
    id: z.string().cuid(),
  }),
  z.object({
    eventId: z.string(),
  }),
])
.and(z.object({
  id: z.string().cuid().optional(),
  eventId: z.string().optional(),
  AND: z.union([ z.lazy(() => QuizWhereInputSchema),z.lazy(() => QuizWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => QuizWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => QuizWhereInputSchema),z.lazy(() => QuizWhereInputSchema).array() ]).optional(),
  quiz: z.lazy(() => JsonFilterSchema).optional(),
  answers: z.lazy(() => IntNullableListFilterSchema).optional(),
  patientId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  patient: z.union([ z.lazy(() => PatientRelationFilterSchema),z.lazy(() => PatientWhereInputSchema) ]).optional(),
  event: z.union([ z.lazy(() => EventNullableRelationFilterSchema),z.lazy(() => EventWhereInputSchema) ]).optional().nullable(),
}).strict());

export const QuizOrderByWithAggregationInputSchema: z.ZodType<Prisma.QuizOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  quiz: z.lazy(() => SortOrderSchema).optional(),
  answers: z.lazy(() => SortOrderSchema).optional(),
  patientId: z.lazy(() => SortOrderSchema).optional(),
  eventId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => QuizCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => QuizAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => QuizMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => QuizMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => QuizSumOrderByAggregateInputSchema).optional()
}).strict();

export const QuizScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.QuizScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => QuizScalarWhereWithAggregatesInputSchema),z.lazy(() => QuizScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => QuizScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => QuizScalarWhereWithAggregatesInputSchema),z.lazy(() => QuizScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  quiz: z.lazy(() => JsonWithAggregatesFilterSchema).optional(),
  answers: z.lazy(() => IntNullableListFilterSchema).optional(),
  patientId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  eventId: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const TagWhereInputSchema: z.ZodType<Prisma.TagWhereInput> = z.object({
  AND: z.union([ z.lazy(() => TagWhereInputSchema),z.lazy(() => TagWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => TagWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => TagWhereInputSchema),z.lazy(() => TagWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const TagOrderByWithRelationInputSchema: z.ZodType<Prisma.TagOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const TagWhereUniqueInputSchema: z.ZodType<Prisma.TagWhereUniqueInput> = z.object({
  id: z.string().cuid()
})
.and(z.object({
  id: z.string().cuid().optional(),
  AND: z.union([ z.lazy(() => TagWhereInputSchema),z.lazy(() => TagWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => TagWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => TagWhereInputSchema),z.lazy(() => TagWhereInputSchema).array() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict());

export const TagOrderByWithAggregationInputSchema: z.ZodType<Prisma.TagOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => TagCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => TagMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => TagMinOrderByAggregateInputSchema).optional()
}).strict();

export const TagScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.TagScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => TagScalarWhereWithAggregatesInputSchema),z.lazy(() => TagScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => TagScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => TagScalarWhereWithAggregatesInputSchema),z.lazy(() => TagScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const TaskWhereInputSchema: z.ZodType<Prisma.TaskWhereInput> = z.object({
  AND: z.union([ z.lazy(() => TaskWhereInputSchema),z.lazy(() => TaskWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => TaskWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => TaskWhereInputSchema),z.lazy(() => TaskWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  title: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  isDone: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  dueDate: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  userId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  user: z.union([ z.lazy(() => UserRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
}).strict();

export const TaskOrderByWithRelationInputSchema: z.ZodType<Prisma.TaskOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  title: z.lazy(() => SortOrderSchema).optional(),
  isDone: z.lazy(() => SortOrderSchema).optional(),
  dueDate: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  user: z.lazy(() => UserOrderByWithRelationInputSchema).optional()
}).strict();

export const TaskWhereUniqueInputSchema: z.ZodType<Prisma.TaskWhereUniqueInput> = z.object({
  id: z.string().cuid()
})
.and(z.object({
  id: z.string().cuid().optional(),
  AND: z.union([ z.lazy(() => TaskWhereInputSchema),z.lazy(() => TaskWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => TaskWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => TaskWhereInputSchema),z.lazy(() => TaskWhereInputSchema).array() ]).optional(),
  title: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  isDone: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  dueDate: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  userId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  user: z.union([ z.lazy(() => UserRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
}).strict());

export const TaskOrderByWithAggregationInputSchema: z.ZodType<Prisma.TaskOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  title: z.lazy(() => SortOrderSchema).optional(),
  isDone: z.lazy(() => SortOrderSchema).optional(),
  dueDate: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => TaskCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => TaskMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => TaskMinOrderByAggregateInputSchema).optional()
}).strict();

export const TaskScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.TaskScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => TaskScalarWhereWithAggregatesInputSchema),z.lazy(() => TaskScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => TaskScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => TaskScalarWhereWithAggregatesInputSchema),z.lazy(() => TaskScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  title: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  isDone: z.union([ z.lazy(() => BoolWithAggregatesFilterSchema),z.boolean() ]).optional(),
  dueDate: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  userId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const FileWhereInputSchema: z.ZodType<Prisma.FileWhereInput> = z.object({
  AND: z.union([ z.lazy(() => FileWhereInputSchema),z.lazy(() => FileWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => FileWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => FileWhereInputSchema),z.lazy(() => FileWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  url: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  key: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  extension: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  contentType: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  size: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  confirmed: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  tenantId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  userId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  eventId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  patientId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  tenant: z.union([ z.lazy(() => TenantRelationFilterSchema),z.lazy(() => TenantWhereInputSchema) ]).optional(),
  user: z.union([ z.lazy(() => UserRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
  event: z.union([ z.lazy(() => EventNullableRelationFilterSchema),z.lazy(() => EventWhereInputSchema) ]).optional().nullable(),
  patient: z.union([ z.lazy(() => PatientNullableRelationFilterSchema),z.lazy(() => PatientWhereInputSchema) ]).optional().nullable(),
}).strict();

export const FileOrderByWithRelationInputSchema: z.ZodType<Prisma.FileOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  url: z.lazy(() => SortOrderSchema).optional(),
  key: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  extension: z.lazy(() => SortOrderSchema).optional(),
  contentType: z.lazy(() => SortOrderSchema).optional(),
  size: z.lazy(() => SortOrderSchema).optional(),
  confirmed: z.lazy(() => SortOrderSchema).optional(),
  tenantId: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  eventId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  patientId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  tenant: z.lazy(() => TenantOrderByWithRelationInputSchema).optional(),
  user: z.lazy(() => UserOrderByWithRelationInputSchema).optional(),
  event: z.lazy(() => EventOrderByWithRelationInputSchema).optional(),
  patient: z.lazy(() => PatientOrderByWithRelationInputSchema).optional()
}).strict();

export const FileWhereUniqueInputSchema: z.ZodType<Prisma.FileWhereUniqueInput> = z.union([
  z.object({
    id: z.string().cuid(),
    key: z.string()
  }),
  z.object({
    id: z.string().cuid(),
  }),
  z.object({
    key: z.string(),
  }),
])
.and(z.object({
  id: z.string().cuid().optional(),
  key: z.string().optional(),
  AND: z.union([ z.lazy(() => FileWhereInputSchema),z.lazy(() => FileWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => FileWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => FileWhereInputSchema),z.lazy(() => FileWhereInputSchema).array() ]).optional(),
  url: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  extension: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  contentType: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  size: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  confirmed: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  tenantId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  userId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  eventId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  patientId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  tenant: z.union([ z.lazy(() => TenantRelationFilterSchema),z.lazy(() => TenantWhereInputSchema) ]).optional(),
  user: z.union([ z.lazy(() => UserRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
  event: z.union([ z.lazy(() => EventNullableRelationFilterSchema),z.lazy(() => EventWhereInputSchema) ]).optional().nullable(),
  patient: z.union([ z.lazy(() => PatientNullableRelationFilterSchema),z.lazy(() => PatientWhereInputSchema) ]).optional().nullable(),
}).strict());

export const FileOrderByWithAggregationInputSchema: z.ZodType<Prisma.FileOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  url: z.lazy(() => SortOrderSchema).optional(),
  key: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  extension: z.lazy(() => SortOrderSchema).optional(),
  contentType: z.lazy(() => SortOrderSchema).optional(),
  size: z.lazy(() => SortOrderSchema).optional(),
  confirmed: z.lazy(() => SortOrderSchema).optional(),
  tenantId: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  eventId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  patientId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => FileCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => FileAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => FileMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => FileMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => FileSumOrderByAggregateInputSchema).optional()
}).strict();

export const FileScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.FileScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => FileScalarWhereWithAggregatesInputSchema),z.lazy(() => FileScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => FileScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => FileScalarWhereWithAggregatesInputSchema),z.lazy(() => FileScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  url: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  key: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  extension: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  contentType: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  size: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  confirmed: z.union([ z.lazy(() => BoolWithAggregatesFilterSchema),z.boolean() ]).optional(),
  tenantId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  userId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  eventId: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  patientId: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const AvatarWhereInputSchema: z.ZodType<Prisma.AvatarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => AvatarWhereInputSchema),z.lazy(() => AvatarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => AvatarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => AvatarWhereInputSchema),z.lazy(() => AvatarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  url: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  key: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  profileId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  tenantProfileId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  profile: z.union([ z.lazy(() => ProfileNullableRelationFilterSchema),z.lazy(() => ProfileWhereInputSchema) ]).optional().nullable(),
  tenantProfile: z.union([ z.lazy(() => TenantProfileNullableRelationFilterSchema),z.lazy(() => TenantProfileWhereInputSchema) ]).optional().nullable(),
}).strict();

export const AvatarOrderByWithRelationInputSchema: z.ZodType<Prisma.AvatarOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  url: z.lazy(() => SortOrderSchema).optional(),
  key: z.lazy(() => SortOrderSchema).optional(),
  profileId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  tenantProfileId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  profile: z.lazy(() => ProfileOrderByWithRelationInputSchema).optional(),
  tenantProfile: z.lazy(() => TenantProfileOrderByWithRelationInputSchema).optional()
}).strict();

export const AvatarWhereUniqueInputSchema: z.ZodType<Prisma.AvatarWhereUniqueInput> = z.union([
  z.object({
    id: z.string().cuid(),
    key: z.string(),
    profileId: z.string(),
    tenantProfileId: z.string()
  }),
  z.object({
    id: z.string().cuid(),
    key: z.string(),
    profileId: z.string(),
  }),
  z.object({
    id: z.string().cuid(),
    key: z.string(),
    tenantProfileId: z.string(),
  }),
  z.object({
    id: z.string().cuid(),
    key: z.string(),
  }),
  z.object({
    id: z.string().cuid(),
    profileId: z.string(),
    tenantProfileId: z.string(),
  }),
  z.object({
    id: z.string().cuid(),
    profileId: z.string(),
  }),
  z.object({
    id: z.string().cuid(),
    tenantProfileId: z.string(),
  }),
  z.object({
    id: z.string().cuid(),
  }),
  z.object({
    key: z.string(),
    profileId: z.string(),
    tenantProfileId: z.string(),
  }),
  z.object({
    key: z.string(),
    profileId: z.string(),
  }),
  z.object({
    key: z.string(),
    tenantProfileId: z.string(),
  }),
  z.object({
    key: z.string(),
  }),
  z.object({
    profileId: z.string(),
    tenantProfileId: z.string(),
  }),
  z.object({
    profileId: z.string(),
  }),
  z.object({
    tenantProfileId: z.string(),
  }),
])
.and(z.object({
  id: z.string().cuid().optional(),
  key: z.string().optional(),
  profileId: z.string().optional(),
  tenantProfileId: z.string().optional(),
  AND: z.union([ z.lazy(() => AvatarWhereInputSchema),z.lazy(() => AvatarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => AvatarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => AvatarWhereInputSchema),z.lazy(() => AvatarWhereInputSchema).array() ]).optional(),
  url: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  profile: z.union([ z.lazy(() => ProfileNullableRelationFilterSchema),z.lazy(() => ProfileWhereInputSchema) ]).optional().nullable(),
  tenantProfile: z.union([ z.lazy(() => TenantProfileNullableRelationFilterSchema),z.lazy(() => TenantProfileWhereInputSchema) ]).optional().nullable(),
}).strict());

export const AvatarOrderByWithAggregationInputSchema: z.ZodType<Prisma.AvatarOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  url: z.lazy(() => SortOrderSchema).optional(),
  key: z.lazy(() => SortOrderSchema).optional(),
  profileId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  tenantProfileId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => AvatarCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => AvatarMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => AvatarMinOrderByAggregateInputSchema).optional()
}).strict();

export const AvatarScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.AvatarScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => AvatarScalarWhereWithAggregatesInputSchema),z.lazy(() => AvatarScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => AvatarScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => AvatarScalarWhereWithAggregatesInputSchema),z.lazy(() => AvatarScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  url: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  key: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  profileId: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  tenantProfileId: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const CountyWhereInputSchema: z.ZodType<Prisma.CountyWhereInput> = z.object({
  AND: z.union([ z.lazy(() => CountyWhereInputSchema),z.lazy(() => CountyWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => CountyWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => CountyWhereInputSchema),z.lazy(() => CountyWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  code: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  cities: z.lazy(() => CityListRelationFilterSchema).optional()
}).strict();

export const CountyOrderByWithRelationInputSchema: z.ZodType<Prisma.CountyOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  code: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  cities: z.lazy(() => CityOrderByRelationAggregateInputSchema).optional()
}).strict();

export const CountyWhereUniqueInputSchema: z.ZodType<Prisma.CountyWhereUniqueInput> = z.object({
  id: z.string()
})
.and(z.object({
  id: z.string().optional(),
  AND: z.union([ z.lazy(() => CountyWhereInputSchema),z.lazy(() => CountyWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => CountyWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => CountyWhereInputSchema),z.lazy(() => CountyWhereInputSchema).array() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  code: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  cities: z.lazy(() => CityListRelationFilterSchema).optional()
}).strict());

export const CountyOrderByWithAggregationInputSchema: z.ZodType<Prisma.CountyOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  code: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => CountyCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => CountyMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => CountyMinOrderByAggregateInputSchema).optional()
}).strict();

export const CountyScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.CountyScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => CountyScalarWhereWithAggregatesInputSchema),z.lazy(() => CountyScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => CountyScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => CountyScalarWhereWithAggregatesInputSchema),z.lazy(() => CountyScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  code: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const CityWhereInputSchema: z.ZodType<Prisma.CityWhereInput> = z.object({
  AND: z.union([ z.lazy(() => CityWhereInputSchema),z.lazy(() => CityWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => CityWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => CityWhereInputSchema),z.lazy(() => CityWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  countyId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  county: z.union([ z.lazy(() => CountyRelationFilterSchema),z.lazy(() => CountyWhereInputSchema) ]).optional(),
}).strict();

export const CityOrderByWithRelationInputSchema: z.ZodType<Prisma.CityOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  countyId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  county: z.lazy(() => CountyOrderByWithRelationInputSchema).optional()
}).strict();

export const CityWhereUniqueInputSchema: z.ZodType<Prisma.CityWhereUniqueInput> = z.object({
  id: z.string()
})
.and(z.object({
  id: z.string().optional(),
  AND: z.union([ z.lazy(() => CityWhereInputSchema),z.lazy(() => CityWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => CityWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => CityWhereInputSchema),z.lazy(() => CityWhereInputSchema).array() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  countyId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  county: z.union([ z.lazy(() => CountyRelationFilterSchema),z.lazy(() => CountyWhereInputSchema) ]).optional(),
}).strict());

export const CityOrderByWithAggregationInputSchema: z.ZodType<Prisma.CityOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  countyId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => CityCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => CityMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => CityMinOrderByAggregateInputSchema).optional()
}).strict();

export const CityScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.CityScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => CityScalarWhereWithAggregatesInputSchema),z.lazy(() => CityScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => CityScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => CityScalarWhereWithAggregatesInputSchema),z.lazy(() => CityScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  countyId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const TenantCreateInputSchema: z.ZodType<Prisma.TenantCreateInput> = z.object({
  id: z.string().cuid().optional(),
  email: z.string(),
  deletedAt: z.coerce.date().optional().nullable(),
  disabledAt: z.coerce.date().optional().nullable(),
  trialExpiresAt: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  users: z.lazy(() => UserCreateNestedManyWithoutTenantInputSchema).optional(),
  profile: z.lazy(() => TenantProfileCreateNestedOneWithoutTenantInputSchema),
  specialities: z.lazy(() => SpecialityCreateNestedManyWithoutTenantInputSchema).optional(),
  preferedByProfiles: z.lazy(() => ProfileCreateNestedManyWithoutPreferredTenantInputSchema).optional(),
  patients: z.lazy(() => PatientCreateNestedManyWithoutTenantInputSchema).optional(),
  services: z.lazy(() => ServiceCreateNestedManyWithoutTenantInputSchema).optional(),
  materials: z.lazy(() => MaterialCreateNestedManyWithoutTenantInputSchema).optional(),
  events: z.lazy(() => EventCreateNestedManyWithoutTenantInputSchema).optional(),
  files: z.lazy(() => FileCreateNestedManyWithoutTenantInputSchema).optional()
}).strict();

export const TenantUncheckedCreateInputSchema: z.ZodType<Prisma.TenantUncheckedCreateInput> = z.object({
  id: z.string().cuid().optional(),
  email: z.string(),
  profileId: z.string(),
  deletedAt: z.coerce.date().optional().nullable(),
  disabledAt: z.coerce.date().optional().nullable(),
  trialExpiresAt: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  users: z.lazy(() => UserUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  specialities: z.lazy(() => SpecialityUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  preferedByProfiles: z.lazy(() => ProfileUncheckedCreateNestedManyWithoutPreferredTenantInputSchema).optional(),
  patients: z.lazy(() => PatientUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  services: z.lazy(() => ServiceUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  materials: z.lazy(() => MaterialUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  events: z.lazy(() => EventUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  files: z.lazy(() => FileUncheckedCreateNestedManyWithoutTenantInputSchema).optional()
}).strict();

export const TenantUpdateInputSchema: z.ZodType<Prisma.TenantUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  disabledAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  trialExpiresAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  users: z.lazy(() => UserUpdateManyWithoutTenantNestedInputSchema).optional(),
  profile: z.lazy(() => TenantProfileUpdateOneRequiredWithoutTenantNestedInputSchema).optional(),
  specialities: z.lazy(() => SpecialityUpdateManyWithoutTenantNestedInputSchema).optional(),
  preferedByProfiles: z.lazy(() => ProfileUpdateManyWithoutPreferredTenantNestedInputSchema).optional(),
  patients: z.lazy(() => PatientUpdateManyWithoutTenantNestedInputSchema).optional(),
  services: z.lazy(() => ServiceUpdateManyWithoutTenantNestedInputSchema).optional(),
  materials: z.lazy(() => MaterialUpdateManyWithoutTenantNestedInputSchema).optional(),
  events: z.lazy(() => EventUpdateManyWithoutTenantNestedInputSchema).optional(),
  files: z.lazy(() => FileUpdateManyWithoutTenantNestedInputSchema).optional()
}).strict();

export const TenantUncheckedUpdateInputSchema: z.ZodType<Prisma.TenantUncheckedUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  profileId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  disabledAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  trialExpiresAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  users: z.lazy(() => UserUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  specialities: z.lazy(() => SpecialityUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  preferedByProfiles: z.lazy(() => ProfileUncheckedUpdateManyWithoutPreferredTenantNestedInputSchema).optional(),
  patients: z.lazy(() => PatientUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  services: z.lazy(() => ServiceUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  materials: z.lazy(() => MaterialUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  events: z.lazy(() => EventUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  files: z.lazy(() => FileUncheckedUpdateManyWithoutTenantNestedInputSchema).optional()
}).strict();

export const TenantCreateManyInputSchema: z.ZodType<Prisma.TenantCreateManyInput> = z.object({
  id: z.string().cuid().optional(),
  email: z.string(),
  profileId: z.string(),
  deletedAt: z.coerce.date().optional().nullable(),
  disabledAt: z.coerce.date().optional().nullable(),
  trialExpiresAt: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const TenantUpdateManyMutationInputSchema: z.ZodType<Prisma.TenantUpdateManyMutationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  disabledAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  trialExpiresAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const TenantUncheckedUpdateManyInputSchema: z.ZodType<Prisma.TenantUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  profileId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  disabledAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  trialExpiresAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const TenantProfileCreateInputSchema: z.ZodType<Prisma.TenantProfileCreateInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  county: z.string().optional().nullable(),
  address: z.string().optional().nullable(),
  zip: z.string().optional().nullable(),
  phone: z.string().optional().nullable(),
  size: z.string().optional().nullable(),
  stripeSubscriptionId: z.string(),
  activeSubscription: z.boolean().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  avatar: z.lazy(() => AvatarCreateNestedOneWithoutTenantProfileInputSchema).optional(),
  plan: z.lazy(() => PlanCreateNestedOneWithoutTenantProfilesInputSchema),
  tenant: z.lazy(() => TenantCreateNestedOneWithoutProfileInputSchema).optional()
}).strict();

export const TenantProfileUncheckedCreateInputSchema: z.ZodType<Prisma.TenantProfileUncheckedCreateInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  county: z.string().optional().nullable(),
  address: z.string().optional().nullable(),
  zip: z.string().optional().nullable(),
  phone: z.string().optional().nullable(),
  size: z.string().optional().nullable(),
  stripeSubscriptionId: z.string(),
  activeSubscription: z.boolean().optional(),
  planId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  avatar: z.lazy(() => AvatarUncheckedCreateNestedOneWithoutTenantProfileInputSchema).optional(),
  tenant: z.lazy(() => TenantUncheckedCreateNestedOneWithoutProfileInputSchema).optional()
}).strict();

export const TenantProfileUpdateInputSchema: z.ZodType<Prisma.TenantProfileUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  county: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  address: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  zip: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  size: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  stripeSubscriptionId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  activeSubscription: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  avatar: z.lazy(() => AvatarUpdateOneWithoutTenantProfileNestedInputSchema).optional(),
  plan: z.lazy(() => PlanUpdateOneRequiredWithoutTenantProfilesNestedInputSchema).optional(),
  tenant: z.lazy(() => TenantUpdateOneWithoutProfileNestedInputSchema).optional()
}).strict();

export const TenantProfileUncheckedUpdateInputSchema: z.ZodType<Prisma.TenantProfileUncheckedUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  county: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  address: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  zip: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  size: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  stripeSubscriptionId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  activeSubscription: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  planId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  avatar: z.lazy(() => AvatarUncheckedUpdateOneWithoutTenantProfileNestedInputSchema).optional(),
  tenant: z.lazy(() => TenantUncheckedUpdateOneWithoutProfileNestedInputSchema).optional()
}).strict();

export const TenantProfileCreateManyInputSchema: z.ZodType<Prisma.TenantProfileCreateManyInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  county: z.string().optional().nullable(),
  address: z.string().optional().nullable(),
  zip: z.string().optional().nullable(),
  phone: z.string().optional().nullable(),
  size: z.string().optional().nullable(),
  stripeSubscriptionId: z.string(),
  activeSubscription: z.boolean().optional(),
  planId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const TenantProfileUpdateManyMutationInputSchema: z.ZodType<Prisma.TenantProfileUpdateManyMutationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  county: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  address: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  zip: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  size: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  stripeSubscriptionId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  activeSubscription: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const TenantProfileUncheckedUpdateManyInputSchema: z.ZodType<Prisma.TenantProfileUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  county: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  address: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  zip: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  size: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  stripeSubscriptionId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  activeSubscription: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  planId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const UserCreateInputSchema: z.ZodType<Prisma.UserCreateInput> = z.object({
  id: z.string().cuid().optional(),
  index: z.number().int().optional(),
  role: z.lazy(() => RoleSchema).optional(),
  workingHours: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  firstDayOfWeek: z.lazy(() => DayOfWeekSchema).optional(),
  showWeekends: z.boolean().optional(),
  webhookApiKey: z.string().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  activatedAt: z.coerce.date().optional().nullable(),
  lastLoginAt: z.coerce.date().optional().nullable(),
  bannedAt: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  speciality: z.lazy(() => SpecialityCreateNestedOneWithoutUsersInputSchema).optional(),
  profile: z.lazy(() => ProfileCreateNestedOneWithoutUsersInputSchema),
  tenant: z.lazy(() => TenantCreateNestedOneWithoutUsersInputSchema),
  invitation: z.lazy(() => InvitationCreateNestedOneWithoutUserInputSchema).optional(),
  patients: z.lazy(() => PatientCreateNestedManyWithoutUserInputSchema).optional(),
  events: z.lazy(() => EventCreateNestedManyWithoutUserInputSchema).optional(),
  eventActions: z.lazy(() => EventActionCreateNestedManyWithoutUserInputSchema).optional(),
  treatmentPlans: z.lazy(() => TreatmentPlanCreateNestedManyWithoutUserInputSchema).optional(),
  invitations: z.lazy(() => InvitationCreateNestedManyWithoutInvitedByInputSchema).optional(),
  files: z.lazy(() => FileCreateNestedManyWithoutUserInputSchema).optional(),
  tasks: z.lazy(() => TaskCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const UserUncheckedCreateInputSchema: z.ZodType<Prisma.UserUncheckedCreateInput> = z.object({
  id: z.string().cuid().optional(),
  index: z.number().int().optional(),
  role: z.lazy(() => RoleSchema).optional(),
  workingHours: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  firstDayOfWeek: z.lazy(() => DayOfWeekSchema).optional(),
  showWeekends: z.boolean().optional(),
  webhookApiKey: z.string().optional().nullable(),
  specialityId: z.string().optional().nullable(),
  profileId: z.string(),
  tenantId: z.string(),
  deletedAt: z.coerce.date().optional().nullable(),
  activatedAt: z.coerce.date().optional().nullable(),
  lastLoginAt: z.coerce.date().optional().nullable(),
  bannedAt: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  invitation: z.lazy(() => InvitationUncheckedCreateNestedOneWithoutUserInputSchema).optional(),
  patients: z.lazy(() => PatientUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  events: z.lazy(() => EventUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  eventActions: z.lazy(() => EventActionUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  treatmentPlans: z.lazy(() => TreatmentPlanUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedCreateNestedManyWithoutInvitedByInputSchema).optional(),
  files: z.lazy(() => FileUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  tasks: z.lazy(() => TaskUncheckedCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const UserUpdateInputSchema: z.ZodType<Prisma.UserUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  index: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.lazy(() => RoleSchema),z.lazy(() => EnumRoleFieldUpdateOperationsInputSchema) ]).optional(),
  workingHours: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  firstDayOfWeek: z.union([ z.lazy(() => DayOfWeekSchema),z.lazy(() => EnumDayOfWeekFieldUpdateOperationsInputSchema) ]).optional(),
  showWeekends: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  webhookApiKey: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  activatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastLoginAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bannedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  speciality: z.lazy(() => SpecialityUpdateOneWithoutUsersNestedInputSchema).optional(),
  profile: z.lazy(() => ProfileUpdateOneRequiredWithoutUsersNestedInputSchema).optional(),
  tenant: z.lazy(() => TenantUpdateOneRequiredWithoutUsersNestedInputSchema).optional(),
  invitation: z.lazy(() => InvitationUpdateOneWithoutUserNestedInputSchema).optional(),
  patients: z.lazy(() => PatientUpdateManyWithoutUserNestedInputSchema).optional(),
  events: z.lazy(() => EventUpdateManyWithoutUserNestedInputSchema).optional(),
  eventActions: z.lazy(() => EventActionUpdateManyWithoutUserNestedInputSchema).optional(),
  treatmentPlans: z.lazy(() => TreatmentPlanUpdateManyWithoutUserNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUpdateManyWithoutInvitedByNestedInputSchema).optional(),
  files: z.lazy(() => FileUpdateManyWithoutUserNestedInputSchema).optional(),
  tasks: z.lazy(() => TaskUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const UserUncheckedUpdateInputSchema: z.ZodType<Prisma.UserUncheckedUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  index: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.lazy(() => RoleSchema),z.lazy(() => EnumRoleFieldUpdateOperationsInputSchema) ]).optional(),
  workingHours: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  firstDayOfWeek: z.union([ z.lazy(() => DayOfWeekSchema),z.lazy(() => EnumDayOfWeekFieldUpdateOperationsInputSchema) ]).optional(),
  showWeekends: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  webhookApiKey: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  specialityId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  profileId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  tenantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  activatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastLoginAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bannedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  invitation: z.lazy(() => InvitationUncheckedUpdateOneWithoutUserNestedInputSchema).optional(),
  patients: z.lazy(() => PatientUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  events: z.lazy(() => EventUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  eventActions: z.lazy(() => EventActionUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  treatmentPlans: z.lazy(() => TreatmentPlanUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedUpdateManyWithoutInvitedByNestedInputSchema).optional(),
  files: z.lazy(() => FileUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  tasks: z.lazy(() => TaskUncheckedUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const UserCreateManyInputSchema: z.ZodType<Prisma.UserCreateManyInput> = z.object({
  id: z.string().cuid().optional(),
  index: z.number().int().optional(),
  role: z.lazy(() => RoleSchema).optional(),
  workingHours: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  firstDayOfWeek: z.lazy(() => DayOfWeekSchema).optional(),
  showWeekends: z.boolean().optional(),
  webhookApiKey: z.string().optional().nullable(),
  specialityId: z.string().optional().nullable(),
  profileId: z.string(),
  tenantId: z.string(),
  deletedAt: z.coerce.date().optional().nullable(),
  activatedAt: z.coerce.date().optional().nullable(),
  lastLoginAt: z.coerce.date().optional().nullable(),
  bannedAt: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const UserUpdateManyMutationInputSchema: z.ZodType<Prisma.UserUpdateManyMutationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  index: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.lazy(() => RoleSchema),z.lazy(() => EnumRoleFieldUpdateOperationsInputSchema) ]).optional(),
  workingHours: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  firstDayOfWeek: z.union([ z.lazy(() => DayOfWeekSchema),z.lazy(() => EnumDayOfWeekFieldUpdateOperationsInputSchema) ]).optional(),
  showWeekends: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  webhookApiKey: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  activatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastLoginAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bannedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const UserUncheckedUpdateManyInputSchema: z.ZodType<Prisma.UserUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  index: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.lazy(() => RoleSchema),z.lazy(() => EnumRoleFieldUpdateOperationsInputSchema) ]).optional(),
  workingHours: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  firstDayOfWeek: z.union([ z.lazy(() => DayOfWeekSchema),z.lazy(() => EnumDayOfWeekFieldUpdateOperationsInputSchema) ]).optional(),
  showWeekends: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  webhookApiKey: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  specialityId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  profileId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  tenantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  activatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastLoginAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bannedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ProfileCreateInputSchema: z.ZodType<Prisma.ProfileCreateInput> = z.object({
  id: z.string().cuid().optional(),
  title: z.string().optional().nullable(),
  firstName: z.string(),
  lastName: z.string(),
  email: z.string(),
  phone: z.string().optional().nullable(),
  activatedAt: z.coerce.date().optional().nullable(),
  stripeCustomerId: z.string().optional().nullable(),
  stripeFreeTrialUsed: z.boolean().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  avatar: z.lazy(() => AvatarCreateNestedOneWithoutProfileInputSchema).optional(),
  preferredTenant: z.lazy(() => TenantCreateNestedOneWithoutPreferedByProfilesInputSchema).optional(),
  users: z.lazy(() => UserCreateNestedManyWithoutProfileInputSchema).optional(),
  accounts: z.lazy(() => AccountCreateNestedManyWithoutProfileInputSchema).optional(),
  tokens: z.lazy(() => TokenCreateNestedManyWithoutProfileInputSchema).optional()
}).strict();

export const ProfileUncheckedCreateInputSchema: z.ZodType<Prisma.ProfileUncheckedCreateInput> = z.object({
  id: z.string().cuid().optional(),
  title: z.string().optional().nullable(),
  firstName: z.string(),
  lastName: z.string(),
  email: z.string(),
  phone: z.string().optional().nullable(),
  activatedAt: z.coerce.date().optional().nullable(),
  stripeCustomerId: z.string().optional().nullable(),
  stripeFreeTrialUsed: z.boolean().optional(),
  preferredTenantId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  avatar: z.lazy(() => AvatarUncheckedCreateNestedOneWithoutProfileInputSchema).optional(),
  users: z.lazy(() => UserUncheckedCreateNestedManyWithoutProfileInputSchema).optional(),
  accounts: z.lazy(() => AccountUncheckedCreateNestedManyWithoutProfileInputSchema).optional(),
  tokens: z.lazy(() => TokenUncheckedCreateNestedManyWithoutProfileInputSchema).optional()
}).strict();

export const ProfileUpdateInputSchema: z.ZodType<Prisma.ProfileUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  title: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  firstName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  lastName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  activatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  stripeCustomerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  stripeFreeTrialUsed: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  avatar: z.lazy(() => AvatarUpdateOneWithoutProfileNestedInputSchema).optional(),
  preferredTenant: z.lazy(() => TenantUpdateOneWithoutPreferedByProfilesNestedInputSchema).optional(),
  users: z.lazy(() => UserUpdateManyWithoutProfileNestedInputSchema).optional(),
  accounts: z.lazy(() => AccountUpdateManyWithoutProfileNestedInputSchema).optional(),
  tokens: z.lazy(() => TokenUpdateManyWithoutProfileNestedInputSchema).optional()
}).strict();

export const ProfileUncheckedUpdateInputSchema: z.ZodType<Prisma.ProfileUncheckedUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  title: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  firstName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  lastName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  activatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  stripeCustomerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  stripeFreeTrialUsed: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  preferredTenantId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  avatar: z.lazy(() => AvatarUncheckedUpdateOneWithoutProfileNestedInputSchema).optional(),
  users: z.lazy(() => UserUncheckedUpdateManyWithoutProfileNestedInputSchema).optional(),
  accounts: z.lazy(() => AccountUncheckedUpdateManyWithoutProfileNestedInputSchema).optional(),
  tokens: z.lazy(() => TokenUncheckedUpdateManyWithoutProfileNestedInputSchema).optional()
}).strict();

export const ProfileCreateManyInputSchema: z.ZodType<Prisma.ProfileCreateManyInput> = z.object({
  id: z.string().cuid().optional(),
  title: z.string().optional().nullable(),
  firstName: z.string(),
  lastName: z.string(),
  email: z.string(),
  phone: z.string().optional().nullable(),
  activatedAt: z.coerce.date().optional().nullable(),
  stripeCustomerId: z.string().optional().nullable(),
  stripeFreeTrialUsed: z.boolean().optional(),
  preferredTenantId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const ProfileUpdateManyMutationInputSchema: z.ZodType<Prisma.ProfileUpdateManyMutationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  title: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  firstName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  lastName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  activatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  stripeCustomerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  stripeFreeTrialUsed: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ProfileUncheckedUpdateManyInputSchema: z.ZodType<Prisma.ProfileUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  title: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  firstName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  lastName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  activatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  stripeCustomerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  stripeFreeTrialUsed: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  preferredTenantId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const AccountCreateInputSchema: z.ZodType<Prisma.AccountCreateInput> = z.object({
  id: z.string().cuid().optional(),
  type: z.string(),
  provider: z.string(),
  passwordHash: z.string().optional().nullable(),
  refresh_token: z.string().optional().nullable(),
  access_token: z.string().optional().nullable(),
  expires_at: z.coerce.date().optional().nullable(),
  refresh_token_expires_in: z.number().int().optional().nullable(),
  token_type: z.string().optional().nullable(),
  scope: z.string().optional().nullable(),
  id_token: z.string().optional().nullable(),
  session_state: z.string().optional().nullable(),
  profile: z.lazy(() => ProfileCreateNestedOneWithoutAccountsInputSchema)
}).strict();

export const AccountUncheckedCreateInputSchema: z.ZodType<Prisma.AccountUncheckedCreateInput> = z.object({
  id: z.string().cuid().optional(),
  profileId: z.string(),
  type: z.string(),
  provider: z.string(),
  passwordHash: z.string().optional().nullable(),
  refresh_token: z.string().optional().nullable(),
  access_token: z.string().optional().nullable(),
  expires_at: z.coerce.date().optional().nullable(),
  refresh_token_expires_in: z.number().int().optional().nullable(),
  token_type: z.string().optional().nullable(),
  scope: z.string().optional().nullable(),
  id_token: z.string().optional().nullable(),
  session_state: z.string().optional().nullable()
}).strict();

export const AccountUpdateInputSchema: z.ZodType<Prisma.AccountUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  provider: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  passwordHash: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  refresh_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  access_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  expires_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  refresh_token_expires_in: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  token_type: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  scope: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  id_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  session_state: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  profile: z.lazy(() => ProfileUpdateOneRequiredWithoutAccountsNestedInputSchema).optional()
}).strict();

export const AccountUncheckedUpdateInputSchema: z.ZodType<Prisma.AccountUncheckedUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  profileId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  provider: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  passwordHash: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  refresh_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  access_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  expires_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  refresh_token_expires_in: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  token_type: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  scope: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  id_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  session_state: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const AccountCreateManyInputSchema: z.ZodType<Prisma.AccountCreateManyInput> = z.object({
  id: z.string().cuid().optional(),
  profileId: z.string(),
  type: z.string(),
  provider: z.string(),
  passwordHash: z.string().optional().nullable(),
  refresh_token: z.string().optional().nullable(),
  access_token: z.string().optional().nullable(),
  expires_at: z.coerce.date().optional().nullable(),
  refresh_token_expires_in: z.number().int().optional().nullable(),
  token_type: z.string().optional().nullable(),
  scope: z.string().optional().nullable(),
  id_token: z.string().optional().nullable(),
  session_state: z.string().optional().nullable()
}).strict();

export const AccountUpdateManyMutationInputSchema: z.ZodType<Prisma.AccountUpdateManyMutationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  provider: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  passwordHash: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  refresh_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  access_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  expires_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  refresh_token_expires_in: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  token_type: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  scope: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  id_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  session_state: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const AccountUncheckedUpdateManyInputSchema: z.ZodType<Prisma.AccountUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  profileId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  provider: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  passwordHash: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  refresh_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  access_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  expires_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  refresh_token_expires_in: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  token_type: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  scope: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  id_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  session_state: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const PlanCreateInputSchema: z.ZodType<Prisma.PlanCreateInput> = z.object({
  id: z.string().cuid().optional(),
  stripeProductId: z.string(),
  stripePriceId: z.string(),
  name: z.string(),
  maxUsers: z.number().int(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  tenantProfiles: z.lazy(() => TenantProfileCreateNestedManyWithoutPlanInputSchema).optional()
}).strict();

export const PlanUncheckedCreateInputSchema: z.ZodType<Prisma.PlanUncheckedCreateInput> = z.object({
  id: z.string().cuid().optional(),
  stripeProductId: z.string(),
  stripePriceId: z.string(),
  name: z.string(),
  maxUsers: z.number().int(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  tenantProfiles: z.lazy(() => TenantProfileUncheckedCreateNestedManyWithoutPlanInputSchema).optional()
}).strict();

export const PlanUpdateInputSchema: z.ZodType<Prisma.PlanUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  stripeProductId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  stripePriceId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  maxUsers: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  tenantProfiles: z.lazy(() => TenantProfileUpdateManyWithoutPlanNestedInputSchema).optional()
}).strict();

export const PlanUncheckedUpdateInputSchema: z.ZodType<Prisma.PlanUncheckedUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  stripeProductId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  stripePriceId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  maxUsers: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  tenantProfiles: z.lazy(() => TenantProfileUncheckedUpdateManyWithoutPlanNestedInputSchema).optional()
}).strict();

export const PlanCreateManyInputSchema: z.ZodType<Prisma.PlanCreateManyInput> = z.object({
  id: z.string().cuid().optional(),
  stripeProductId: z.string(),
  stripePriceId: z.string(),
  name: z.string(),
  maxUsers: z.number().int(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const PlanUpdateManyMutationInputSchema: z.ZodType<Prisma.PlanUpdateManyMutationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  stripeProductId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  stripePriceId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  maxUsers: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const PlanUncheckedUpdateManyInputSchema: z.ZodType<Prisma.PlanUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  stripeProductId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  stripePriceId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  maxUsers: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const TokenCreateInputSchema: z.ZodType<Prisma.TokenCreateInput> = z.object({
  id: z.string().cuid().optional(),
  type: z.lazy(() => TokenTypeSchema),
  token: z.string(),
  expires: z.coerce.date(),
  profile: z.lazy(() => ProfileCreateNestedOneWithoutTokensInputSchema)
}).strict();

export const TokenUncheckedCreateInputSchema: z.ZodType<Prisma.TokenUncheckedCreateInput> = z.object({
  id: z.string().cuid().optional(),
  type: z.lazy(() => TokenTypeSchema),
  token: z.string(),
  expires: z.coerce.date(),
  profileId: z.string()
}).strict();

export const TokenUpdateInputSchema: z.ZodType<Prisma.TokenUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => TokenTypeSchema),z.lazy(() => EnumTokenTypeFieldUpdateOperationsInputSchema) ]).optional(),
  token: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  expires: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  profile: z.lazy(() => ProfileUpdateOneRequiredWithoutTokensNestedInputSchema).optional()
}).strict();

export const TokenUncheckedUpdateInputSchema: z.ZodType<Prisma.TokenUncheckedUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => TokenTypeSchema),z.lazy(() => EnumTokenTypeFieldUpdateOperationsInputSchema) ]).optional(),
  token: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  expires: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  profileId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const TokenCreateManyInputSchema: z.ZodType<Prisma.TokenCreateManyInput> = z.object({
  id: z.string().cuid().optional(),
  type: z.lazy(() => TokenTypeSchema),
  token: z.string(),
  expires: z.coerce.date(),
  profileId: z.string()
}).strict();

export const TokenUpdateManyMutationInputSchema: z.ZodType<Prisma.TokenUpdateManyMutationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => TokenTypeSchema),z.lazy(() => EnumTokenTypeFieldUpdateOperationsInputSchema) ]).optional(),
  token: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  expires: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const TokenUncheckedUpdateManyInputSchema: z.ZodType<Prisma.TokenUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => TokenTypeSchema),z.lazy(() => EnumTokenTypeFieldUpdateOperationsInputSchema) ]).optional(),
  token: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  expires: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  profileId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const InvitationCreateInputSchema: z.ZodType<Prisma.InvitationCreateInput> = z.object({
  id: z.string().cuid().optional(),
  email: z.string(),
  role: z.lazy(() => RoleSchema),
  token: z.string(),
  expires: z.coerce.date(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  invitedBy: z.lazy(() => UserCreateNestedOneWithoutInvitationsInputSchema),
  user: z.lazy(() => UserCreateNestedOneWithoutInvitationInputSchema).optional()
}).strict();

export const InvitationUncheckedCreateInputSchema: z.ZodType<Prisma.InvitationUncheckedCreateInput> = z.object({
  id: z.string().cuid().optional(),
  email: z.string(),
  role: z.lazy(() => RoleSchema),
  token: z.string(),
  expires: z.coerce.date(),
  invitedById: z.string(),
  userId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const InvitationUpdateInputSchema: z.ZodType<Prisma.InvitationUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.lazy(() => RoleSchema),z.lazy(() => EnumRoleFieldUpdateOperationsInputSchema) ]).optional(),
  token: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  expires: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  invitedBy: z.lazy(() => UserUpdateOneRequiredWithoutInvitationsNestedInputSchema).optional(),
  user: z.lazy(() => UserUpdateOneWithoutInvitationNestedInputSchema).optional()
}).strict();

export const InvitationUncheckedUpdateInputSchema: z.ZodType<Prisma.InvitationUncheckedUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.lazy(() => RoleSchema),z.lazy(() => EnumRoleFieldUpdateOperationsInputSchema) ]).optional(),
  token: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  expires: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  invitedById: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const InvitationCreateManyInputSchema: z.ZodType<Prisma.InvitationCreateManyInput> = z.object({
  id: z.string().cuid().optional(),
  email: z.string(),
  role: z.lazy(() => RoleSchema),
  token: z.string(),
  expires: z.coerce.date(),
  invitedById: z.string(),
  userId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const InvitationUpdateManyMutationInputSchema: z.ZodType<Prisma.InvitationUpdateManyMutationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.lazy(() => RoleSchema),z.lazy(() => EnumRoleFieldUpdateOperationsInputSchema) ]).optional(),
  token: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  expires: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const InvitationUncheckedUpdateManyInputSchema: z.ZodType<Prisma.InvitationUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.lazy(() => RoleSchema),z.lazy(() => EnumRoleFieldUpdateOperationsInputSchema) ]).optional(),
  token: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  expires: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  invitedById: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const PatientCreateInputSchema: z.ZodType<Prisma.PatientCreateInput> = z.object({
  id: z.string().cuid().optional(),
  firstName: z.string(),
  lastName: z.string(),
  gender: z.string().optional().nullable(),
  dob: z.coerce.date().optional().nullable(),
  email: z.string().optional().nullable(),
  phone: z.string().optional().nullable(),
  city: z.string().optional().nullable(),
  county: z.string().optional().nullable(),
  status: z.lazy(() => StatusSchema).optional(),
  smsNotifications: z.boolean().optional(),
  emailNotifications: z.boolean().optional(),
  filters: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  user: z.lazy(() => UserCreateNestedOneWithoutPatientsInputSchema),
  tenant: z.lazy(() => TenantCreateNestedOneWithoutPatientsInputSchema),
  files: z.lazy(() => FileCreateNestedManyWithoutPatientInputSchema).optional(),
  quizes: z.lazy(() => QuizCreateNestedManyWithoutPatientInputSchema).optional(),
  appointments: z.lazy(() => EventCreateNestedManyWithoutPatientInputSchema).optional(),
  treatmentPlans: z.lazy(() => TreatmentPlanCreateNestedManyWithoutPatientInputSchema).optional()
}).strict();

export const PatientUncheckedCreateInputSchema: z.ZodType<Prisma.PatientUncheckedCreateInput> = z.object({
  id: z.string().cuid().optional(),
  firstName: z.string(),
  lastName: z.string(),
  gender: z.string().optional().nullable(),
  dob: z.coerce.date().optional().nullable(),
  email: z.string().optional().nullable(),
  phone: z.string().optional().nullable(),
  city: z.string().optional().nullable(),
  county: z.string().optional().nullable(),
  status: z.lazy(() => StatusSchema).optional(),
  smsNotifications: z.boolean().optional(),
  emailNotifications: z.boolean().optional(),
  filters: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  userId: z.string(),
  tenantId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  files: z.lazy(() => FileUncheckedCreateNestedManyWithoutPatientInputSchema).optional(),
  quizes: z.lazy(() => QuizUncheckedCreateNestedManyWithoutPatientInputSchema).optional(),
  appointments: z.lazy(() => EventUncheckedCreateNestedManyWithoutPatientInputSchema).optional(),
  treatmentPlans: z.lazy(() => TreatmentPlanUncheckedCreateNestedManyWithoutPatientInputSchema).optional()
}).strict();

export const PatientUpdateInputSchema: z.ZodType<Prisma.PatientUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  firstName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  lastName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  gender: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  dob: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  city: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  county: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.lazy(() => StatusSchema),z.lazy(() => EnumStatusFieldUpdateOperationsInputSchema) ]).optional(),
  smsNotifications: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  emailNotifications: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  filters: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  user: z.lazy(() => UserUpdateOneRequiredWithoutPatientsNestedInputSchema).optional(),
  tenant: z.lazy(() => TenantUpdateOneRequiredWithoutPatientsNestedInputSchema).optional(),
  files: z.lazy(() => FileUpdateManyWithoutPatientNestedInputSchema).optional(),
  quizes: z.lazy(() => QuizUpdateManyWithoutPatientNestedInputSchema).optional(),
  appointments: z.lazy(() => EventUpdateManyWithoutPatientNestedInputSchema).optional(),
  treatmentPlans: z.lazy(() => TreatmentPlanUpdateManyWithoutPatientNestedInputSchema).optional()
}).strict();

export const PatientUncheckedUpdateInputSchema: z.ZodType<Prisma.PatientUncheckedUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  firstName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  lastName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  gender: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  dob: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  city: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  county: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.lazy(() => StatusSchema),z.lazy(() => EnumStatusFieldUpdateOperationsInputSchema) ]).optional(),
  smsNotifications: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  emailNotifications: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  filters: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  tenantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  files: z.lazy(() => FileUncheckedUpdateManyWithoutPatientNestedInputSchema).optional(),
  quizes: z.lazy(() => QuizUncheckedUpdateManyWithoutPatientNestedInputSchema).optional(),
  appointments: z.lazy(() => EventUncheckedUpdateManyWithoutPatientNestedInputSchema).optional(),
  treatmentPlans: z.lazy(() => TreatmentPlanUncheckedUpdateManyWithoutPatientNestedInputSchema).optional()
}).strict();

export const PatientCreateManyInputSchema: z.ZodType<Prisma.PatientCreateManyInput> = z.object({
  id: z.string().cuid().optional(),
  firstName: z.string(),
  lastName: z.string(),
  gender: z.string().optional().nullable(),
  dob: z.coerce.date().optional().nullable(),
  email: z.string().optional().nullable(),
  phone: z.string().optional().nullable(),
  city: z.string().optional().nullable(),
  county: z.string().optional().nullable(),
  status: z.lazy(() => StatusSchema).optional(),
  smsNotifications: z.boolean().optional(),
  emailNotifications: z.boolean().optional(),
  filters: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  userId: z.string(),
  tenantId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const PatientUpdateManyMutationInputSchema: z.ZodType<Prisma.PatientUpdateManyMutationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  firstName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  lastName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  gender: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  dob: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  city: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  county: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.lazy(() => StatusSchema),z.lazy(() => EnumStatusFieldUpdateOperationsInputSchema) ]).optional(),
  smsNotifications: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  emailNotifications: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  filters: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const PatientUncheckedUpdateManyInputSchema: z.ZodType<Prisma.PatientUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  firstName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  lastName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  gender: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  dob: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  city: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  county: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.lazy(() => StatusSchema),z.lazy(() => EnumStatusFieldUpdateOperationsInputSchema) ]).optional(),
  smsNotifications: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  emailNotifications: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  filters: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  tenantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const SpecialityCreateInputSchema: z.ZodType<Prisma.SpecialityCreateInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  color: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  users: z.lazy(() => UserCreateNestedManyWithoutSpecialityInputSchema).optional(),
  tenant: z.lazy(() => TenantCreateNestedOneWithoutSpecialitiesInputSchema)
}).strict();

export const SpecialityUncheckedCreateInputSchema: z.ZodType<Prisma.SpecialityUncheckedCreateInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  color: z.string().optional(),
  tenantId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  users: z.lazy(() => UserUncheckedCreateNestedManyWithoutSpecialityInputSchema).optional()
}).strict();

export const SpecialityUpdateInputSchema: z.ZodType<Prisma.SpecialityUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  color: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  users: z.lazy(() => UserUpdateManyWithoutSpecialityNestedInputSchema).optional(),
  tenant: z.lazy(() => TenantUpdateOneRequiredWithoutSpecialitiesNestedInputSchema).optional()
}).strict();

export const SpecialityUncheckedUpdateInputSchema: z.ZodType<Prisma.SpecialityUncheckedUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  color: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  tenantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  users: z.lazy(() => UserUncheckedUpdateManyWithoutSpecialityNestedInputSchema).optional()
}).strict();

export const SpecialityCreateManyInputSchema: z.ZodType<Prisma.SpecialityCreateManyInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  color: z.string().optional(),
  tenantId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const SpecialityUpdateManyMutationInputSchema: z.ZodType<Prisma.SpecialityUpdateManyMutationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  color: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const SpecialityUncheckedUpdateManyInputSchema: z.ZodType<Prisma.SpecialityUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  color: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  tenantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const EventCreateInputSchema: z.ZodType<Prisma.EventCreateInput> = z.object({
  id: z.string().cuid().optional(),
  index: z.number().int().optional(),
  title: z.string(),
  description: z.string().optional().nullable(),
  date: z.coerce.date(),
  start: z.coerce.date().optional().nullable(),
  end: z.coerce.date().optional().nullable(),
  allDay: z.boolean().optional(),
  type: z.lazy(() => EventTypeSchema).optional(),
  status: z.lazy(() => EventStatusSchema).optional(),
  initiator: z.lazy(() => EventInitiatorSchema).optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  visits: z.lazy(() => VisitCreateNestedManyWithoutEventInputSchema).optional(),
  quiz: z.lazy(() => QuizCreateNestedOneWithoutEventInputSchema).optional(),
  actions: z.lazy(() => EventActionCreateNestedManyWithoutEventInputSchema).optional(),
  files: z.lazy(() => FileCreateNestedManyWithoutEventInputSchema).optional(),
  patient: z.lazy(() => PatientCreateNestedOneWithoutAppointmentsInputSchema).optional(),
  user: z.lazy(() => UserCreateNestedOneWithoutEventsInputSchema),
  tenant: z.lazy(() => TenantCreateNestedOneWithoutEventsInputSchema)
}).strict();

export const EventUncheckedCreateInputSchema: z.ZodType<Prisma.EventUncheckedCreateInput> = z.object({
  id: z.string().cuid().optional(),
  index: z.number().int().optional(),
  title: z.string(),
  description: z.string().optional().nullable(),
  date: z.coerce.date(),
  start: z.coerce.date().optional().nullable(),
  end: z.coerce.date().optional().nullable(),
  allDay: z.boolean().optional(),
  type: z.lazy(() => EventTypeSchema).optional(),
  status: z.lazy(() => EventStatusSchema).optional(),
  initiator: z.lazy(() => EventInitiatorSchema).optional(),
  patientId: z.string().optional().nullable(),
  userId: z.string(),
  tenantId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  visits: z.lazy(() => VisitUncheckedCreateNestedManyWithoutEventInputSchema).optional(),
  quiz: z.lazy(() => QuizUncheckedCreateNestedOneWithoutEventInputSchema).optional(),
  actions: z.lazy(() => EventActionUncheckedCreateNestedManyWithoutEventInputSchema).optional(),
  files: z.lazy(() => FileUncheckedCreateNestedManyWithoutEventInputSchema).optional()
}).strict();

export const EventUpdateInputSchema: z.ZodType<Prisma.EventUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  title: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  start: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  end: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  allDay: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => EventTypeSchema),z.lazy(() => EnumEventTypeFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => EventStatusSchema),z.lazy(() => EnumEventStatusFieldUpdateOperationsInputSchema) ]).optional(),
  initiator: z.union([ z.lazy(() => EventInitiatorSchema),z.lazy(() => EnumEventInitiatorFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  visits: z.lazy(() => VisitUpdateManyWithoutEventNestedInputSchema).optional(),
  quiz: z.lazy(() => QuizUpdateOneWithoutEventNestedInputSchema).optional(),
  actions: z.lazy(() => EventActionUpdateManyWithoutEventNestedInputSchema).optional(),
  files: z.lazy(() => FileUpdateManyWithoutEventNestedInputSchema).optional(),
  patient: z.lazy(() => PatientUpdateOneWithoutAppointmentsNestedInputSchema).optional(),
  user: z.lazy(() => UserUpdateOneRequiredWithoutEventsNestedInputSchema).optional(),
  tenant: z.lazy(() => TenantUpdateOneRequiredWithoutEventsNestedInputSchema).optional()
}).strict();

export const EventUncheckedUpdateInputSchema: z.ZodType<Prisma.EventUncheckedUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  index: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  title: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  start: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  end: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  allDay: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => EventTypeSchema),z.lazy(() => EnumEventTypeFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => EventStatusSchema),z.lazy(() => EnumEventStatusFieldUpdateOperationsInputSchema) ]).optional(),
  initiator: z.union([ z.lazy(() => EventInitiatorSchema),z.lazy(() => EnumEventInitiatorFieldUpdateOperationsInputSchema) ]).optional(),
  patientId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  tenantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  visits: z.lazy(() => VisitUncheckedUpdateManyWithoutEventNestedInputSchema).optional(),
  quiz: z.lazy(() => QuizUncheckedUpdateOneWithoutEventNestedInputSchema).optional(),
  actions: z.lazy(() => EventActionUncheckedUpdateManyWithoutEventNestedInputSchema).optional(),
  files: z.lazy(() => FileUncheckedUpdateManyWithoutEventNestedInputSchema).optional()
}).strict();

export const EventCreateManyInputSchema: z.ZodType<Prisma.EventCreateManyInput> = z.object({
  id: z.string().cuid().optional(),
  index: z.number().int().optional(),
  title: z.string(),
  description: z.string().optional().nullable(),
  date: z.coerce.date(),
  start: z.coerce.date().optional().nullable(),
  end: z.coerce.date().optional().nullable(),
  allDay: z.boolean().optional(),
  type: z.lazy(() => EventTypeSchema).optional(),
  status: z.lazy(() => EventStatusSchema).optional(),
  initiator: z.lazy(() => EventInitiatorSchema).optional(),
  patientId: z.string().optional().nullable(),
  userId: z.string(),
  tenantId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const EventUpdateManyMutationInputSchema: z.ZodType<Prisma.EventUpdateManyMutationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  title: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  start: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  end: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  allDay: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => EventTypeSchema),z.lazy(() => EnumEventTypeFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => EventStatusSchema),z.lazy(() => EnumEventStatusFieldUpdateOperationsInputSchema) ]).optional(),
  initiator: z.union([ z.lazy(() => EventInitiatorSchema),z.lazy(() => EnumEventInitiatorFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const EventUncheckedUpdateManyInputSchema: z.ZodType<Prisma.EventUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  index: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  title: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  start: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  end: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  allDay: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => EventTypeSchema),z.lazy(() => EnumEventTypeFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => EventStatusSchema),z.lazy(() => EnumEventStatusFieldUpdateOperationsInputSchema) ]).optional(),
  initiator: z.union([ z.lazy(() => EventInitiatorSchema),z.lazy(() => EnumEventInitiatorFieldUpdateOperationsInputSchema) ]).optional(),
  patientId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  tenantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const EventActionCreateInputSchema: z.ZodType<Prisma.EventActionCreateInput> = z.object({
  id: z.string().cuid().optional(),
  data: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  user: z.lazy(() => UserCreateNestedOneWithoutEventActionsInputSchema),
  event: z.lazy(() => EventCreateNestedOneWithoutActionsInputSchema)
}).strict();

export const EventActionUncheckedCreateInputSchema: z.ZodType<Prisma.EventActionUncheckedCreateInput> = z.object({
  id: z.string().cuid().optional(),
  data: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  userId: z.string(),
  eventId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const EventActionUpdateInputSchema: z.ZodType<Prisma.EventActionUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  data: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  user: z.lazy(() => UserUpdateOneRequiredWithoutEventActionsNestedInputSchema).optional(),
  event: z.lazy(() => EventUpdateOneRequiredWithoutActionsNestedInputSchema).optional()
}).strict();

export const EventActionUncheckedUpdateInputSchema: z.ZodType<Prisma.EventActionUncheckedUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  data: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  eventId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const EventActionCreateManyInputSchema: z.ZodType<Prisma.EventActionCreateManyInput> = z.object({
  id: z.string().cuid().optional(),
  data: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  userId: z.string(),
  eventId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const EventActionUpdateManyMutationInputSchema: z.ZodType<Prisma.EventActionUpdateManyMutationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  data: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const EventActionUncheckedUpdateManyInputSchema: z.ZodType<Prisma.EventActionUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  data: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  eventId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const MaterialCreateInputSchema: z.ZodType<Prisma.MaterialCreateInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  unit_price: z.number().int(),
  unit: z.string().optional(),
  image: z.string().optional().nullable(),
  tags: z.union([ z.lazy(() => MaterialCreatetagsInputSchema),z.string().array() ]).optional(),
  isActive: z.boolean().optional(),
  keepInventory: z.boolean().optional(),
  stock: z.number().int().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  services: z.lazy(() => ServiceMaterialCreateNestedManyWithoutMaterialInputSchema).optional(),
  tenant: z.lazy(() => TenantCreateNestedOneWithoutMaterialsInputSchema)
}).strict();

export const MaterialUncheckedCreateInputSchema: z.ZodType<Prisma.MaterialUncheckedCreateInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  unit_price: z.number().int(),
  unit: z.string().optional(),
  image: z.string().optional().nullable(),
  tags: z.union([ z.lazy(() => MaterialCreatetagsInputSchema),z.string().array() ]).optional(),
  isActive: z.boolean().optional(),
  keepInventory: z.boolean().optional(),
  stock: z.number().int().optional(),
  tenantId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  services: z.lazy(() => ServiceMaterialUncheckedCreateNestedManyWithoutMaterialInputSchema).optional()
}).strict();

export const MaterialUpdateInputSchema: z.ZodType<Prisma.MaterialUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  unit_price: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  unit: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  image: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tags: z.union([ z.lazy(() => MaterialUpdatetagsInputSchema),z.string().array() ]).optional(),
  isActive: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  keepInventory: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  stock: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  services: z.lazy(() => ServiceMaterialUpdateManyWithoutMaterialNestedInputSchema).optional(),
  tenant: z.lazy(() => TenantUpdateOneRequiredWithoutMaterialsNestedInputSchema).optional()
}).strict();

export const MaterialUncheckedUpdateInputSchema: z.ZodType<Prisma.MaterialUncheckedUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  unit_price: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  unit: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  image: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tags: z.union([ z.lazy(() => MaterialUpdatetagsInputSchema),z.string().array() ]).optional(),
  isActive: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  keepInventory: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  stock: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  tenantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  services: z.lazy(() => ServiceMaterialUncheckedUpdateManyWithoutMaterialNestedInputSchema).optional()
}).strict();

export const MaterialCreateManyInputSchema: z.ZodType<Prisma.MaterialCreateManyInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  unit_price: z.number().int(),
  unit: z.string().optional(),
  image: z.string().optional().nullable(),
  tags: z.union([ z.lazy(() => MaterialCreatetagsInputSchema),z.string().array() ]).optional(),
  isActive: z.boolean().optional(),
  keepInventory: z.boolean().optional(),
  stock: z.number().int().optional(),
  tenantId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const MaterialUpdateManyMutationInputSchema: z.ZodType<Prisma.MaterialUpdateManyMutationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  unit_price: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  unit: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  image: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tags: z.union([ z.lazy(() => MaterialUpdatetagsInputSchema),z.string().array() ]).optional(),
  isActive: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  keepInventory: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  stock: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const MaterialUncheckedUpdateManyInputSchema: z.ZodType<Prisma.MaterialUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  unit_price: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  unit: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  image: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tags: z.union([ z.lazy(() => MaterialUpdatetagsInputSchema),z.string().array() ]).optional(),
  isActive: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  keepInventory: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  stock: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  tenantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ServiceCreateInputSchema: z.ZodType<Prisma.ServiceCreateInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  unit_price: z.number().int(),
  unit: z.lazy(() => ServiceUnitSchema),
  duration: z.number().int().optional(),
  image: z.string().optional().nullable(),
  tags: z.union([ z.lazy(() => ServiceCreatetagsInputSchema),z.string().array() ]).optional(),
  isActive: z.boolean().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  tenant: z.lazy(() => TenantCreateNestedOneWithoutServicesInputSchema),
  category: z.lazy(() => ServiceCategoryCreateNestedOneWithoutServicesInputSchema).optional(),
  materials: z.lazy(() => ServiceMaterialCreateNestedManyWithoutServiceInputSchema).optional(),
  visits: z.lazy(() => VisitCreateNestedManyWithoutServiceInputSchema).optional(),
  children: z.lazy(() => RelatedServiceCreateNestedManyWithoutParentInputSchema).optional()
}).strict();

export const ServiceUncheckedCreateInputSchema: z.ZodType<Prisma.ServiceUncheckedCreateInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  unit_price: z.number().int(),
  unit: z.lazy(() => ServiceUnitSchema),
  duration: z.number().int().optional(),
  image: z.string().optional().nullable(),
  tags: z.union([ z.lazy(() => ServiceCreatetagsInputSchema),z.string().array() ]).optional(),
  isActive: z.boolean().optional(),
  tenantId: z.string(),
  categoryId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  materials: z.lazy(() => ServiceMaterialUncheckedCreateNestedManyWithoutServiceInputSchema).optional(),
  visits: z.lazy(() => VisitUncheckedCreateNestedManyWithoutServiceInputSchema).optional(),
  children: z.lazy(() => RelatedServiceUncheckedCreateNestedManyWithoutParentInputSchema).optional()
}).strict();

export const ServiceUpdateInputSchema: z.ZodType<Prisma.ServiceUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  unit_price: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  unit: z.union([ z.lazy(() => ServiceUnitSchema),z.lazy(() => EnumServiceUnitFieldUpdateOperationsInputSchema) ]).optional(),
  duration: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  image: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tags: z.union([ z.lazy(() => ServiceUpdatetagsInputSchema),z.string().array() ]).optional(),
  isActive: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  tenant: z.lazy(() => TenantUpdateOneRequiredWithoutServicesNestedInputSchema).optional(),
  category: z.lazy(() => ServiceCategoryUpdateOneWithoutServicesNestedInputSchema).optional(),
  materials: z.lazy(() => ServiceMaterialUpdateManyWithoutServiceNestedInputSchema).optional(),
  visits: z.lazy(() => VisitUpdateManyWithoutServiceNestedInputSchema).optional(),
  children: z.lazy(() => RelatedServiceUpdateManyWithoutParentNestedInputSchema).optional()
}).strict();

export const ServiceUncheckedUpdateInputSchema: z.ZodType<Prisma.ServiceUncheckedUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  unit_price: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  unit: z.union([ z.lazy(() => ServiceUnitSchema),z.lazy(() => EnumServiceUnitFieldUpdateOperationsInputSchema) ]).optional(),
  duration: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  image: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tags: z.union([ z.lazy(() => ServiceUpdatetagsInputSchema),z.string().array() ]).optional(),
  isActive: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  tenantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  categoryId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  materials: z.lazy(() => ServiceMaterialUncheckedUpdateManyWithoutServiceNestedInputSchema).optional(),
  visits: z.lazy(() => VisitUncheckedUpdateManyWithoutServiceNestedInputSchema).optional(),
  children: z.lazy(() => RelatedServiceUncheckedUpdateManyWithoutParentNestedInputSchema).optional()
}).strict();

export const ServiceCreateManyInputSchema: z.ZodType<Prisma.ServiceCreateManyInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  unit_price: z.number().int(),
  unit: z.lazy(() => ServiceUnitSchema),
  duration: z.number().int().optional(),
  image: z.string().optional().nullable(),
  tags: z.union([ z.lazy(() => ServiceCreatetagsInputSchema),z.string().array() ]).optional(),
  isActive: z.boolean().optional(),
  tenantId: z.string(),
  categoryId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const ServiceUpdateManyMutationInputSchema: z.ZodType<Prisma.ServiceUpdateManyMutationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  unit_price: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  unit: z.union([ z.lazy(() => ServiceUnitSchema),z.lazy(() => EnumServiceUnitFieldUpdateOperationsInputSchema) ]).optional(),
  duration: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  image: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tags: z.union([ z.lazy(() => ServiceUpdatetagsInputSchema),z.string().array() ]).optional(),
  isActive: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ServiceUncheckedUpdateManyInputSchema: z.ZodType<Prisma.ServiceUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  unit_price: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  unit: z.union([ z.lazy(() => ServiceUnitSchema),z.lazy(() => EnumServiceUnitFieldUpdateOperationsInputSchema) ]).optional(),
  duration: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  image: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tags: z.union([ z.lazy(() => ServiceUpdatetagsInputSchema),z.string().array() ]).optional(),
  isActive: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  tenantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  categoryId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const RelatedServiceCreateInputSchema: z.ZodType<Prisma.RelatedServiceCreateInput> = z.object({
  id: z.string().cuid().optional(),
  order: z.number().int().optional(),
  quantity: z.number().int().optional(),
  unit_price: z.number().int(),
  service: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  parent: z.lazy(() => ServiceCreateNestedOneWithoutChildrenInputSchema)
}).strict();

export const RelatedServiceUncheckedCreateInputSchema: z.ZodType<Prisma.RelatedServiceUncheckedCreateInput> = z.object({
  id: z.string().cuid().optional(),
  order: z.number().int().optional(),
  quantity: z.number().int().optional(),
  unit_price: z.number().int(),
  service: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  parentId: z.string()
}).strict();

export const RelatedServiceUpdateInputSchema: z.ZodType<Prisma.RelatedServiceUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  order: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  quantity: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  unit_price: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  service: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  parent: z.lazy(() => ServiceUpdateOneRequiredWithoutChildrenNestedInputSchema).optional()
}).strict();

export const RelatedServiceUncheckedUpdateInputSchema: z.ZodType<Prisma.RelatedServiceUncheckedUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  order: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  quantity: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  unit_price: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  service: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  parentId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const RelatedServiceCreateManyInputSchema: z.ZodType<Prisma.RelatedServiceCreateManyInput> = z.object({
  id: z.string().cuid().optional(),
  order: z.number().int().optional(),
  quantity: z.number().int().optional(),
  unit_price: z.number().int(),
  service: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  parentId: z.string()
}).strict();

export const RelatedServiceUpdateManyMutationInputSchema: z.ZodType<Prisma.RelatedServiceUpdateManyMutationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  order: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  quantity: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  unit_price: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  service: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
}).strict();

export const RelatedServiceUncheckedUpdateManyInputSchema: z.ZodType<Prisma.RelatedServiceUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  order: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  quantity: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  unit_price: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  service: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  parentId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ServiceMaterialCreateInputSchema: z.ZodType<Prisma.ServiceMaterialCreateInput> = z.object({
  id: z.string().cuid().optional(),
  quantity: z.number().int(),
  unit_price: z.number().int(),
  service: z.lazy(() => ServiceCreateNestedOneWithoutMaterialsInputSchema),
  material: z.lazy(() => MaterialCreateNestedOneWithoutServicesInputSchema)
}).strict();

export const ServiceMaterialUncheckedCreateInputSchema: z.ZodType<Prisma.ServiceMaterialUncheckedCreateInput> = z.object({
  id: z.string().cuid().optional(),
  quantity: z.number().int(),
  unit_price: z.number().int(),
  serviceId: z.string(),
  materialId: z.string()
}).strict();

export const ServiceMaterialUpdateInputSchema: z.ZodType<Prisma.ServiceMaterialUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  quantity: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  unit_price: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  service: z.lazy(() => ServiceUpdateOneRequiredWithoutMaterialsNestedInputSchema).optional(),
  material: z.lazy(() => MaterialUpdateOneRequiredWithoutServicesNestedInputSchema).optional()
}).strict();

export const ServiceMaterialUncheckedUpdateInputSchema: z.ZodType<Prisma.ServiceMaterialUncheckedUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  quantity: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  unit_price: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  serviceId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  materialId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ServiceMaterialCreateManyInputSchema: z.ZodType<Prisma.ServiceMaterialCreateManyInput> = z.object({
  id: z.string().cuid().optional(),
  quantity: z.number().int(),
  unit_price: z.number().int(),
  serviceId: z.string(),
  materialId: z.string()
}).strict();

export const ServiceMaterialUpdateManyMutationInputSchema: z.ZodType<Prisma.ServiceMaterialUpdateManyMutationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  quantity: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  unit_price: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ServiceMaterialUncheckedUpdateManyInputSchema: z.ZodType<Prisma.ServiceMaterialUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  quantity: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  unit_price: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  serviceId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  materialId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const PriceCreateInputSchema: z.ZodType<Prisma.PriceCreateInput> = z.object({
  id: z.string().cuid().optional(),
  unit_price: z.number().int(),
  entityId: z.string(),
  type: z.lazy(() => PriceTypeSchema),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const PriceUncheckedCreateInputSchema: z.ZodType<Prisma.PriceUncheckedCreateInput> = z.object({
  id: z.string().cuid().optional(),
  unit_price: z.number().int(),
  entityId: z.string(),
  type: z.lazy(() => PriceTypeSchema),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const PriceUpdateInputSchema: z.ZodType<Prisma.PriceUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  unit_price: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  entityId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => PriceTypeSchema),z.lazy(() => EnumPriceTypeFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const PriceUncheckedUpdateInputSchema: z.ZodType<Prisma.PriceUncheckedUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  unit_price: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  entityId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => PriceTypeSchema),z.lazy(() => EnumPriceTypeFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const PriceCreateManyInputSchema: z.ZodType<Prisma.PriceCreateManyInput> = z.object({
  id: z.string().cuid().optional(),
  unit_price: z.number().int(),
  entityId: z.string(),
  type: z.lazy(() => PriceTypeSchema),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const PriceUpdateManyMutationInputSchema: z.ZodType<Prisma.PriceUpdateManyMutationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  unit_price: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  entityId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => PriceTypeSchema),z.lazy(() => EnumPriceTypeFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const PriceUncheckedUpdateManyInputSchema: z.ZodType<Prisma.PriceUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  unit_price: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  entityId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => PriceTypeSchema),z.lazy(() => EnumPriceTypeFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ServiceCategoryCreateInputSchema: z.ZodType<Prisma.ServiceCategoryCreateInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  services: z.lazy(() => ServiceCreateNestedManyWithoutCategoryInputSchema).optional()
}).strict();

export const ServiceCategoryUncheckedCreateInputSchema: z.ZodType<Prisma.ServiceCategoryUncheckedCreateInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  services: z.lazy(() => ServiceUncheckedCreateNestedManyWithoutCategoryInputSchema).optional()
}).strict();

export const ServiceCategoryUpdateInputSchema: z.ZodType<Prisma.ServiceCategoryUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  services: z.lazy(() => ServiceUpdateManyWithoutCategoryNestedInputSchema).optional()
}).strict();

export const ServiceCategoryUncheckedUpdateInputSchema: z.ZodType<Prisma.ServiceCategoryUncheckedUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  services: z.lazy(() => ServiceUncheckedUpdateManyWithoutCategoryNestedInputSchema).optional()
}).strict();

export const ServiceCategoryCreateManyInputSchema: z.ZodType<Prisma.ServiceCategoryCreateManyInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const ServiceCategoryUpdateManyMutationInputSchema: z.ZodType<Prisma.ServiceCategoryUpdateManyMutationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ServiceCategoryUncheckedUpdateManyInputSchema: z.ZodType<Prisma.ServiceCategoryUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const TreatmentCreateInputSchema: z.ZodType<Prisma.TreatmentCreateInput> = z.object({
  id: z.string().cuid().optional(),
  price: z.number().int(),
  target: z.string().optional().nullable(),
  status: z.lazy(() => TreatmentStatusSchema).optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  treatmentPlan: z.lazy(() => TreatmentPlanCreateNestedOneWithoutTreatmentsInputSchema).optional(),
  visits: z.lazy(() => VisitCreateNestedManyWithoutTreatmentInputSchema).optional()
}).strict();

export const TreatmentUncheckedCreateInputSchema: z.ZodType<Prisma.TreatmentUncheckedCreateInput> = z.object({
  id: z.string().cuid().optional(),
  price: z.number().int(),
  target: z.string().optional().nullable(),
  status: z.lazy(() => TreatmentStatusSchema).optional(),
  treatmentPlanId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  visits: z.lazy(() => VisitUncheckedCreateNestedManyWithoutTreatmentInputSchema).optional()
}).strict();

export const TreatmentUpdateInputSchema: z.ZodType<Prisma.TreatmentUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  price: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  target: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.lazy(() => TreatmentStatusSchema),z.lazy(() => EnumTreatmentStatusFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  treatmentPlan: z.lazy(() => TreatmentPlanUpdateOneWithoutTreatmentsNestedInputSchema).optional(),
  visits: z.lazy(() => VisitUpdateManyWithoutTreatmentNestedInputSchema).optional()
}).strict();

export const TreatmentUncheckedUpdateInputSchema: z.ZodType<Prisma.TreatmentUncheckedUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  price: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  target: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.lazy(() => TreatmentStatusSchema),z.lazy(() => EnumTreatmentStatusFieldUpdateOperationsInputSchema) ]).optional(),
  treatmentPlanId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  visits: z.lazy(() => VisitUncheckedUpdateManyWithoutTreatmentNestedInputSchema).optional()
}).strict();

export const TreatmentCreateManyInputSchema: z.ZodType<Prisma.TreatmentCreateManyInput> = z.object({
  id: z.string().cuid().optional(),
  price: z.number().int(),
  target: z.string().optional().nullable(),
  status: z.lazy(() => TreatmentStatusSchema).optional(),
  treatmentPlanId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const TreatmentUpdateManyMutationInputSchema: z.ZodType<Prisma.TreatmentUpdateManyMutationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  price: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  target: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.lazy(() => TreatmentStatusSchema),z.lazy(() => EnumTreatmentStatusFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const TreatmentUncheckedUpdateManyInputSchema: z.ZodType<Prisma.TreatmentUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  price: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  target: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.lazy(() => TreatmentStatusSchema),z.lazy(() => EnumTreatmentStatusFieldUpdateOperationsInputSchema) ]).optional(),
  treatmentPlanId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const VisitCreateInputSchema: z.ZodType<Prisma.VisitCreateInput> = z.object({
  id: z.string().cuid().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  service: z.lazy(() => ServiceCreateNestedOneWithoutVisitsInputSchema),
  treatment: z.lazy(() => TreatmentCreateNestedOneWithoutVisitsInputSchema),
  event: z.lazy(() => EventCreateNestedOneWithoutVisitsInputSchema).optional()
}).strict();

export const VisitUncheckedCreateInputSchema: z.ZodType<Prisma.VisitUncheckedCreateInput> = z.object({
  id: z.string().cuid().optional(),
  serviceId: z.string(),
  treatmentId: z.string(),
  eventId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const VisitUpdateInputSchema: z.ZodType<Prisma.VisitUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  service: z.lazy(() => ServiceUpdateOneRequiredWithoutVisitsNestedInputSchema).optional(),
  treatment: z.lazy(() => TreatmentUpdateOneRequiredWithoutVisitsNestedInputSchema).optional(),
  event: z.lazy(() => EventUpdateOneWithoutVisitsNestedInputSchema).optional()
}).strict();

export const VisitUncheckedUpdateInputSchema: z.ZodType<Prisma.VisitUncheckedUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  serviceId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  treatmentId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  eventId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const VisitCreateManyInputSchema: z.ZodType<Prisma.VisitCreateManyInput> = z.object({
  id: z.string().cuid().optional(),
  serviceId: z.string(),
  treatmentId: z.string(),
  eventId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const VisitUpdateManyMutationInputSchema: z.ZodType<Prisma.VisitUpdateManyMutationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const VisitUncheckedUpdateManyInputSchema: z.ZodType<Prisma.VisitUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  serviceId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  treatmentId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  eventId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const TreatmentPlanCreateInputSchema: z.ZodType<Prisma.TreatmentPlanCreateInput> = z.object({
  id: z.string().cuid().optional(),
  description: z.string().optional().nullable(),
  isDone: z.boolean().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  treatments: z.lazy(() => TreatmentCreateNestedManyWithoutTreatmentPlanInputSchema).optional(),
  patient: z.lazy(() => PatientCreateNestedOneWithoutTreatmentPlansInputSchema),
  user: z.lazy(() => UserCreateNestedOneWithoutTreatmentPlansInputSchema)
}).strict();

export const TreatmentPlanUncheckedCreateInputSchema: z.ZodType<Prisma.TreatmentPlanUncheckedCreateInput> = z.object({
  id: z.string().cuid().optional(),
  description: z.string().optional().nullable(),
  isDone: z.boolean().optional(),
  patientId: z.string(),
  userId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  treatments: z.lazy(() => TreatmentUncheckedCreateNestedManyWithoutTreatmentPlanInputSchema).optional()
}).strict();

export const TreatmentPlanUpdateInputSchema: z.ZodType<Prisma.TreatmentPlanUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isDone: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  treatments: z.lazy(() => TreatmentUpdateManyWithoutTreatmentPlanNestedInputSchema).optional(),
  patient: z.lazy(() => PatientUpdateOneRequiredWithoutTreatmentPlansNestedInputSchema).optional(),
  user: z.lazy(() => UserUpdateOneRequiredWithoutTreatmentPlansNestedInputSchema).optional()
}).strict();

export const TreatmentPlanUncheckedUpdateInputSchema: z.ZodType<Prisma.TreatmentPlanUncheckedUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isDone: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  patientId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  treatments: z.lazy(() => TreatmentUncheckedUpdateManyWithoutTreatmentPlanNestedInputSchema).optional()
}).strict();

export const TreatmentPlanCreateManyInputSchema: z.ZodType<Prisma.TreatmentPlanCreateManyInput> = z.object({
  id: z.string().cuid().optional(),
  description: z.string().optional().nullable(),
  isDone: z.boolean().optional(),
  patientId: z.string(),
  userId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const TreatmentPlanUpdateManyMutationInputSchema: z.ZodType<Prisma.TreatmentPlanUpdateManyMutationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isDone: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const TreatmentPlanUncheckedUpdateManyInputSchema: z.ZodType<Prisma.TreatmentPlanUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isDone: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  patientId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const QuizCreateInputSchema: z.ZodType<Prisma.QuizCreateInput> = z.object({
  id: z.string().cuid().optional(),
  quiz: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  answers: z.union([ z.lazy(() => QuizCreateanswersInputSchema),z.number().int().array() ]).optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  patient: z.lazy(() => PatientCreateNestedOneWithoutQuizesInputSchema),
  event: z.lazy(() => EventCreateNestedOneWithoutQuizInputSchema).optional()
}).strict();

export const QuizUncheckedCreateInputSchema: z.ZodType<Prisma.QuizUncheckedCreateInput> = z.object({
  id: z.string().cuid().optional(),
  quiz: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  answers: z.union([ z.lazy(() => QuizCreateanswersInputSchema),z.number().int().array() ]).optional(),
  patientId: z.string(),
  eventId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const QuizUpdateInputSchema: z.ZodType<Prisma.QuizUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  quiz: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  answers: z.union([ z.lazy(() => QuizUpdateanswersInputSchema),z.number().int().array() ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  patient: z.lazy(() => PatientUpdateOneRequiredWithoutQuizesNestedInputSchema).optional(),
  event: z.lazy(() => EventUpdateOneWithoutQuizNestedInputSchema).optional()
}).strict();

export const QuizUncheckedUpdateInputSchema: z.ZodType<Prisma.QuizUncheckedUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  quiz: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  answers: z.union([ z.lazy(() => QuizUpdateanswersInputSchema),z.number().int().array() ]).optional(),
  patientId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  eventId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const QuizCreateManyInputSchema: z.ZodType<Prisma.QuizCreateManyInput> = z.object({
  id: z.string().cuid().optional(),
  quiz: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  answers: z.union([ z.lazy(() => QuizCreateanswersInputSchema),z.number().int().array() ]).optional(),
  patientId: z.string(),
  eventId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const QuizUpdateManyMutationInputSchema: z.ZodType<Prisma.QuizUpdateManyMutationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  quiz: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  answers: z.union([ z.lazy(() => QuizUpdateanswersInputSchema),z.number().int().array() ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const QuizUncheckedUpdateManyInputSchema: z.ZodType<Prisma.QuizUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  quiz: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  answers: z.union([ z.lazy(() => QuizUpdateanswersInputSchema),z.number().int().array() ]).optional(),
  patientId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  eventId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const TagCreateInputSchema: z.ZodType<Prisma.TagCreateInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const TagUncheckedCreateInputSchema: z.ZodType<Prisma.TagUncheckedCreateInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const TagUpdateInputSchema: z.ZodType<Prisma.TagUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const TagUncheckedUpdateInputSchema: z.ZodType<Prisma.TagUncheckedUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const TagCreateManyInputSchema: z.ZodType<Prisma.TagCreateManyInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const TagUpdateManyMutationInputSchema: z.ZodType<Prisma.TagUpdateManyMutationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const TagUncheckedUpdateManyInputSchema: z.ZodType<Prisma.TagUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const TaskCreateInputSchema: z.ZodType<Prisma.TaskCreateInput> = z.object({
  id: z.string().cuid().optional(),
  title: z.string(),
  isDone: z.boolean().optional(),
  dueDate: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  user: z.lazy(() => UserCreateNestedOneWithoutTasksInputSchema)
}).strict();

export const TaskUncheckedCreateInputSchema: z.ZodType<Prisma.TaskUncheckedCreateInput> = z.object({
  id: z.string().cuid().optional(),
  title: z.string(),
  isDone: z.boolean().optional(),
  dueDate: z.coerce.date().optional().nullable(),
  userId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const TaskUpdateInputSchema: z.ZodType<Prisma.TaskUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  title: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  isDone: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  dueDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  user: z.lazy(() => UserUpdateOneRequiredWithoutTasksNestedInputSchema).optional()
}).strict();

export const TaskUncheckedUpdateInputSchema: z.ZodType<Prisma.TaskUncheckedUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  title: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  isDone: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  dueDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const TaskCreateManyInputSchema: z.ZodType<Prisma.TaskCreateManyInput> = z.object({
  id: z.string().cuid().optional(),
  title: z.string(),
  isDone: z.boolean().optional(),
  dueDate: z.coerce.date().optional().nullable(),
  userId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const TaskUpdateManyMutationInputSchema: z.ZodType<Prisma.TaskUpdateManyMutationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  title: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  isDone: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  dueDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const TaskUncheckedUpdateManyInputSchema: z.ZodType<Prisma.TaskUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  title: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  isDone: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  dueDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const FileCreateInputSchema: z.ZodType<Prisma.FileCreateInput> = z.object({
  id: z.string().cuid().optional(),
  url: z.string(),
  key: z.string(),
  name: z.string(),
  extension: z.string(),
  contentType: z.string(),
  size: z.number().int(),
  confirmed: z.boolean().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  tenant: z.lazy(() => TenantCreateNestedOneWithoutFilesInputSchema),
  user: z.lazy(() => UserCreateNestedOneWithoutFilesInputSchema),
  event: z.lazy(() => EventCreateNestedOneWithoutFilesInputSchema).optional(),
  patient: z.lazy(() => PatientCreateNestedOneWithoutFilesInputSchema).optional()
}).strict();

export const FileUncheckedCreateInputSchema: z.ZodType<Prisma.FileUncheckedCreateInput> = z.object({
  id: z.string().cuid().optional(),
  url: z.string(),
  key: z.string(),
  name: z.string(),
  extension: z.string(),
  contentType: z.string(),
  size: z.number().int(),
  confirmed: z.boolean().optional(),
  tenantId: z.string(),
  userId: z.string(),
  eventId: z.string().optional().nullable(),
  patientId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const FileUpdateInputSchema: z.ZodType<Prisma.FileUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  url: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  key: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  extension: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  contentType: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  size: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  confirmed: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  tenant: z.lazy(() => TenantUpdateOneRequiredWithoutFilesNestedInputSchema).optional(),
  user: z.lazy(() => UserUpdateOneRequiredWithoutFilesNestedInputSchema).optional(),
  event: z.lazy(() => EventUpdateOneWithoutFilesNestedInputSchema).optional(),
  patient: z.lazy(() => PatientUpdateOneWithoutFilesNestedInputSchema).optional()
}).strict();

export const FileUncheckedUpdateInputSchema: z.ZodType<Prisma.FileUncheckedUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  url: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  key: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  extension: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  contentType: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  size: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  confirmed: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  tenantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  eventId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  patientId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const FileCreateManyInputSchema: z.ZodType<Prisma.FileCreateManyInput> = z.object({
  id: z.string().cuid().optional(),
  url: z.string(),
  key: z.string(),
  name: z.string(),
  extension: z.string(),
  contentType: z.string(),
  size: z.number().int(),
  confirmed: z.boolean().optional(),
  tenantId: z.string(),
  userId: z.string(),
  eventId: z.string().optional().nullable(),
  patientId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const FileUpdateManyMutationInputSchema: z.ZodType<Prisma.FileUpdateManyMutationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  url: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  key: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  extension: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  contentType: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  size: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  confirmed: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const FileUncheckedUpdateManyInputSchema: z.ZodType<Prisma.FileUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  url: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  key: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  extension: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  contentType: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  size: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  confirmed: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  tenantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  eventId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  patientId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const AvatarCreateInputSchema: z.ZodType<Prisma.AvatarCreateInput> = z.object({
  id: z.string().cuid().optional(),
  url: z.string(),
  key: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  profile: z.lazy(() => ProfileCreateNestedOneWithoutAvatarInputSchema).optional(),
  tenantProfile: z.lazy(() => TenantProfileCreateNestedOneWithoutAvatarInputSchema).optional()
}).strict();

export const AvatarUncheckedCreateInputSchema: z.ZodType<Prisma.AvatarUncheckedCreateInput> = z.object({
  id: z.string().cuid().optional(),
  url: z.string(),
  key: z.string(),
  profileId: z.string().optional().nullable(),
  tenantProfileId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const AvatarUpdateInputSchema: z.ZodType<Prisma.AvatarUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  url: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  key: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  profile: z.lazy(() => ProfileUpdateOneWithoutAvatarNestedInputSchema).optional(),
  tenantProfile: z.lazy(() => TenantProfileUpdateOneWithoutAvatarNestedInputSchema).optional()
}).strict();

export const AvatarUncheckedUpdateInputSchema: z.ZodType<Prisma.AvatarUncheckedUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  url: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  key: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  profileId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tenantProfileId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const AvatarCreateManyInputSchema: z.ZodType<Prisma.AvatarCreateManyInput> = z.object({
  id: z.string().cuid().optional(),
  url: z.string(),
  key: z.string(),
  profileId: z.string().optional().nullable(),
  tenantProfileId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const AvatarUpdateManyMutationInputSchema: z.ZodType<Prisma.AvatarUpdateManyMutationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  url: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  key: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const AvatarUncheckedUpdateManyInputSchema: z.ZodType<Prisma.AvatarUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  url: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  key: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  profileId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tenantProfileId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const CountyCreateInputSchema: z.ZodType<Prisma.CountyCreateInput> = z.object({
  id: z.string().optional(),
  name: z.string(),
  code: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  cities: z.lazy(() => CityCreateNestedManyWithoutCountyInputSchema).optional()
}).strict();

export const CountyUncheckedCreateInputSchema: z.ZodType<Prisma.CountyUncheckedCreateInput> = z.object({
  id: z.string().optional(),
  name: z.string(),
  code: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  cities: z.lazy(() => CityUncheckedCreateNestedManyWithoutCountyInputSchema).optional()
}).strict();

export const CountyUpdateInputSchema: z.ZodType<Prisma.CountyUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  code: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  cities: z.lazy(() => CityUpdateManyWithoutCountyNestedInputSchema).optional()
}).strict();

export const CountyUncheckedUpdateInputSchema: z.ZodType<Prisma.CountyUncheckedUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  code: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  cities: z.lazy(() => CityUncheckedUpdateManyWithoutCountyNestedInputSchema).optional()
}).strict();

export const CountyCreateManyInputSchema: z.ZodType<Prisma.CountyCreateManyInput> = z.object({
  id: z.string().optional(),
  name: z.string(),
  code: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const CountyUpdateManyMutationInputSchema: z.ZodType<Prisma.CountyUpdateManyMutationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  code: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const CountyUncheckedUpdateManyInputSchema: z.ZodType<Prisma.CountyUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  code: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const CityCreateInputSchema: z.ZodType<Prisma.CityCreateInput> = z.object({
  id: z.string().optional(),
  name: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  county: z.lazy(() => CountyCreateNestedOneWithoutCitiesInputSchema)
}).strict();

export const CityUncheckedCreateInputSchema: z.ZodType<Prisma.CityUncheckedCreateInput> = z.object({
  id: z.string().optional(),
  name: z.string(),
  countyId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const CityUpdateInputSchema: z.ZodType<Prisma.CityUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  county: z.lazy(() => CountyUpdateOneRequiredWithoutCitiesNestedInputSchema).optional()
}).strict();

export const CityUncheckedUpdateInputSchema: z.ZodType<Prisma.CityUncheckedUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  countyId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const CityCreateManyInputSchema: z.ZodType<Prisma.CityCreateManyInput> = z.object({
  id: z.string().optional(),
  name: z.string(),
  countyId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const CityUpdateManyMutationInputSchema: z.ZodType<Prisma.CityUpdateManyMutationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const CityUncheckedUpdateManyInputSchema: z.ZodType<Prisma.CityUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  countyId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const StringFilterSchema: z.ZodType<Prisma.StringFilter> = z.object({
  equals: z.string().optional(),
  in: z.string().array().optional(),
  notIn: z.string().array().optional(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  contains: z.string().optional(),
  startsWith: z.string().optional(),
  endsWith: z.string().optional(),
  mode: z.lazy(() => QueryModeSchema).optional(),
  not: z.union([ z.string(),z.lazy(() => NestedStringFilterSchema) ]).optional(),
}).strict();

export const DateTimeNullableFilterSchema: z.ZodType<Prisma.DateTimeNullableFilter> = z.object({
  equals: z.coerce.date().optional().nullable(),
  in: z.coerce.date().array().optional().nullable(),
  notIn: z.coerce.date().array().optional().nullable(),
  lt: z.coerce.date().optional(),
  lte: z.coerce.date().optional(),
  gt: z.coerce.date().optional(),
  gte: z.coerce.date().optional(),
  not: z.union([ z.coerce.date(),z.lazy(() => NestedDateTimeNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const DateTimeFilterSchema: z.ZodType<Prisma.DateTimeFilter> = z.object({
  equals: z.coerce.date().optional(),
  in: z.coerce.date().array().optional(),
  notIn: z.coerce.date().array().optional(),
  lt: z.coerce.date().optional(),
  lte: z.coerce.date().optional(),
  gt: z.coerce.date().optional(),
  gte: z.coerce.date().optional(),
  not: z.union([ z.coerce.date(),z.lazy(() => NestedDateTimeFilterSchema) ]).optional(),
}).strict();

export const UserListRelationFilterSchema: z.ZodType<Prisma.UserListRelationFilter> = z.object({
  every: z.lazy(() => UserWhereInputSchema).optional(),
  some: z.lazy(() => UserWhereInputSchema).optional(),
  none: z.lazy(() => UserWhereInputSchema).optional()
}).strict();

export const TenantProfileRelationFilterSchema: z.ZodType<Prisma.TenantProfileRelationFilter> = z.object({
  is: z.lazy(() => TenantProfileWhereInputSchema).optional(),
  isNot: z.lazy(() => TenantProfileWhereInputSchema).optional()
}).strict();

export const SpecialityListRelationFilterSchema: z.ZodType<Prisma.SpecialityListRelationFilter> = z.object({
  every: z.lazy(() => SpecialityWhereInputSchema).optional(),
  some: z.lazy(() => SpecialityWhereInputSchema).optional(),
  none: z.lazy(() => SpecialityWhereInputSchema).optional()
}).strict();

export const ProfileListRelationFilterSchema: z.ZodType<Prisma.ProfileListRelationFilter> = z.object({
  every: z.lazy(() => ProfileWhereInputSchema).optional(),
  some: z.lazy(() => ProfileWhereInputSchema).optional(),
  none: z.lazy(() => ProfileWhereInputSchema).optional()
}).strict();

export const PatientListRelationFilterSchema: z.ZodType<Prisma.PatientListRelationFilter> = z.object({
  every: z.lazy(() => PatientWhereInputSchema).optional(),
  some: z.lazy(() => PatientWhereInputSchema).optional(),
  none: z.lazy(() => PatientWhereInputSchema).optional()
}).strict();

export const ServiceListRelationFilterSchema: z.ZodType<Prisma.ServiceListRelationFilter> = z.object({
  every: z.lazy(() => ServiceWhereInputSchema).optional(),
  some: z.lazy(() => ServiceWhereInputSchema).optional(),
  none: z.lazy(() => ServiceWhereInputSchema).optional()
}).strict();

export const MaterialListRelationFilterSchema: z.ZodType<Prisma.MaterialListRelationFilter> = z.object({
  every: z.lazy(() => MaterialWhereInputSchema).optional(),
  some: z.lazy(() => MaterialWhereInputSchema).optional(),
  none: z.lazy(() => MaterialWhereInputSchema).optional()
}).strict();

export const EventListRelationFilterSchema: z.ZodType<Prisma.EventListRelationFilter> = z.object({
  every: z.lazy(() => EventWhereInputSchema).optional(),
  some: z.lazy(() => EventWhereInputSchema).optional(),
  none: z.lazy(() => EventWhereInputSchema).optional()
}).strict();

export const FileListRelationFilterSchema: z.ZodType<Prisma.FileListRelationFilter> = z.object({
  every: z.lazy(() => FileWhereInputSchema).optional(),
  some: z.lazy(() => FileWhereInputSchema).optional(),
  none: z.lazy(() => FileWhereInputSchema).optional()
}).strict();

export const SortOrderInputSchema: z.ZodType<Prisma.SortOrderInput> = z.object({
  sort: z.lazy(() => SortOrderSchema),
  nulls: z.lazy(() => NullsOrderSchema).optional()
}).strict();

export const UserOrderByRelationAggregateInputSchema: z.ZodType<Prisma.UserOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const SpecialityOrderByRelationAggregateInputSchema: z.ZodType<Prisma.SpecialityOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ProfileOrderByRelationAggregateInputSchema: z.ZodType<Prisma.ProfileOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const PatientOrderByRelationAggregateInputSchema: z.ZodType<Prisma.PatientOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ServiceOrderByRelationAggregateInputSchema: z.ZodType<Prisma.ServiceOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const MaterialOrderByRelationAggregateInputSchema: z.ZodType<Prisma.MaterialOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const EventOrderByRelationAggregateInputSchema: z.ZodType<Prisma.EventOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const FileOrderByRelationAggregateInputSchema: z.ZodType<Prisma.FileOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const TenantCountOrderByAggregateInputSchema: z.ZodType<Prisma.TenantCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  profileId: z.lazy(() => SortOrderSchema).optional(),
  deletedAt: z.lazy(() => SortOrderSchema).optional(),
  disabledAt: z.lazy(() => SortOrderSchema).optional(),
  trialExpiresAt: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const TenantMaxOrderByAggregateInputSchema: z.ZodType<Prisma.TenantMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  profileId: z.lazy(() => SortOrderSchema).optional(),
  deletedAt: z.lazy(() => SortOrderSchema).optional(),
  disabledAt: z.lazy(() => SortOrderSchema).optional(),
  trialExpiresAt: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const TenantMinOrderByAggregateInputSchema: z.ZodType<Prisma.TenantMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  profileId: z.lazy(() => SortOrderSchema).optional(),
  deletedAt: z.lazy(() => SortOrderSchema).optional(),
  disabledAt: z.lazy(() => SortOrderSchema).optional(),
  trialExpiresAt: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const StringWithAggregatesFilterSchema: z.ZodType<Prisma.StringWithAggregatesFilter> = z.object({
  equals: z.string().optional(),
  in: z.string().array().optional(),
  notIn: z.string().array().optional(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  contains: z.string().optional(),
  startsWith: z.string().optional(),
  endsWith: z.string().optional(),
  mode: z.lazy(() => QueryModeSchema).optional(),
  not: z.union([ z.string(),z.lazy(() => NestedStringWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedStringFilterSchema).optional(),
  _max: z.lazy(() => NestedStringFilterSchema).optional()
}).strict();

export const DateTimeNullableWithAggregatesFilterSchema: z.ZodType<Prisma.DateTimeNullableWithAggregatesFilter> = z.object({
  equals: z.coerce.date().optional().nullable(),
  in: z.coerce.date().array().optional().nullable(),
  notIn: z.coerce.date().array().optional().nullable(),
  lt: z.coerce.date().optional(),
  lte: z.coerce.date().optional(),
  gt: z.coerce.date().optional(),
  gte: z.coerce.date().optional(),
  not: z.union([ z.coerce.date(),z.lazy(() => NestedDateTimeNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedDateTimeNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedDateTimeNullableFilterSchema).optional()
}).strict();

export const DateTimeWithAggregatesFilterSchema: z.ZodType<Prisma.DateTimeWithAggregatesFilter> = z.object({
  equals: z.coerce.date().optional(),
  in: z.coerce.date().array().optional(),
  notIn: z.coerce.date().array().optional(),
  lt: z.coerce.date().optional(),
  lte: z.coerce.date().optional(),
  gt: z.coerce.date().optional(),
  gte: z.coerce.date().optional(),
  not: z.union([ z.coerce.date(),z.lazy(() => NestedDateTimeWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedDateTimeFilterSchema).optional(),
  _max: z.lazy(() => NestedDateTimeFilterSchema).optional()
}).strict();

export const StringNullableFilterSchema: z.ZodType<Prisma.StringNullableFilter> = z.object({
  equals: z.string().optional().nullable(),
  in: z.string().array().optional().nullable(),
  notIn: z.string().array().optional().nullable(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  contains: z.string().optional(),
  startsWith: z.string().optional(),
  endsWith: z.string().optional(),
  mode: z.lazy(() => QueryModeSchema).optional(),
  not: z.union([ z.string(),z.lazy(() => NestedStringNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const BoolFilterSchema: z.ZodType<Prisma.BoolFilter> = z.object({
  equals: z.boolean().optional(),
  not: z.union([ z.boolean(),z.lazy(() => NestedBoolFilterSchema) ]).optional(),
}).strict();

export const AvatarNullableRelationFilterSchema: z.ZodType<Prisma.AvatarNullableRelationFilter> = z.object({
  is: z.lazy(() => AvatarWhereInputSchema).optional().nullable(),
  isNot: z.lazy(() => AvatarWhereInputSchema).optional().nullable()
}).strict();

export const PlanRelationFilterSchema: z.ZodType<Prisma.PlanRelationFilter> = z.object({
  is: z.lazy(() => PlanWhereInputSchema).optional(),
  isNot: z.lazy(() => PlanWhereInputSchema).optional()
}).strict();

export const TenantNullableRelationFilterSchema: z.ZodType<Prisma.TenantNullableRelationFilter> = z.object({
  is: z.lazy(() => TenantWhereInputSchema).optional().nullable(),
  isNot: z.lazy(() => TenantWhereInputSchema).optional().nullable()
}).strict();

export const TenantProfileCountOrderByAggregateInputSchema: z.ZodType<Prisma.TenantProfileCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  county: z.lazy(() => SortOrderSchema).optional(),
  address: z.lazy(() => SortOrderSchema).optional(),
  zip: z.lazy(() => SortOrderSchema).optional(),
  phone: z.lazy(() => SortOrderSchema).optional(),
  size: z.lazy(() => SortOrderSchema).optional(),
  stripeSubscriptionId: z.lazy(() => SortOrderSchema).optional(),
  activeSubscription: z.lazy(() => SortOrderSchema).optional(),
  planId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const TenantProfileMaxOrderByAggregateInputSchema: z.ZodType<Prisma.TenantProfileMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  county: z.lazy(() => SortOrderSchema).optional(),
  address: z.lazy(() => SortOrderSchema).optional(),
  zip: z.lazy(() => SortOrderSchema).optional(),
  phone: z.lazy(() => SortOrderSchema).optional(),
  size: z.lazy(() => SortOrderSchema).optional(),
  stripeSubscriptionId: z.lazy(() => SortOrderSchema).optional(),
  activeSubscription: z.lazy(() => SortOrderSchema).optional(),
  planId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const TenantProfileMinOrderByAggregateInputSchema: z.ZodType<Prisma.TenantProfileMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  county: z.lazy(() => SortOrderSchema).optional(),
  address: z.lazy(() => SortOrderSchema).optional(),
  zip: z.lazy(() => SortOrderSchema).optional(),
  phone: z.lazy(() => SortOrderSchema).optional(),
  size: z.lazy(() => SortOrderSchema).optional(),
  stripeSubscriptionId: z.lazy(() => SortOrderSchema).optional(),
  activeSubscription: z.lazy(() => SortOrderSchema).optional(),
  planId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const StringNullableWithAggregatesFilterSchema: z.ZodType<Prisma.StringNullableWithAggregatesFilter> = z.object({
  equals: z.string().optional().nullable(),
  in: z.string().array().optional().nullable(),
  notIn: z.string().array().optional().nullable(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  contains: z.string().optional(),
  startsWith: z.string().optional(),
  endsWith: z.string().optional(),
  mode: z.lazy(() => QueryModeSchema).optional(),
  not: z.union([ z.string(),z.lazy(() => NestedStringNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedStringNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedStringNullableFilterSchema).optional()
}).strict();

export const BoolWithAggregatesFilterSchema: z.ZodType<Prisma.BoolWithAggregatesFilter> = z.object({
  equals: z.boolean().optional(),
  not: z.union([ z.boolean(),z.lazy(() => NestedBoolWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedBoolFilterSchema).optional(),
  _max: z.lazy(() => NestedBoolFilterSchema).optional()
}).strict();

export const IntFilterSchema: z.ZodType<Prisma.IntFilter> = z.object({
  equals: z.number().optional(),
  in: z.number().array().optional(),
  notIn: z.number().array().optional(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedIntFilterSchema) ]).optional(),
}).strict();

export const EnumRoleFilterSchema: z.ZodType<Prisma.EnumRoleFilter> = z.object({
  equals: z.lazy(() => RoleSchema).optional(),
  in: z.lazy(() => RoleSchema).array().optional(),
  notIn: z.lazy(() => RoleSchema).array().optional(),
  not: z.union([ z.lazy(() => RoleSchema),z.lazy(() => NestedEnumRoleFilterSchema) ]).optional(),
}).strict();

export const JsonFilterSchema: z.ZodType<Prisma.JsonFilter> = z.object({
  equals: InputJsonValueSchema.optional(),
  path: z.string().array().optional(),
  string_contains: z.string().optional(),
  string_starts_with: z.string().optional(),
  string_ends_with: z.string().optional(),
  array_contains: InputJsonValueSchema.optional().nullable(),
  array_starts_with: InputJsonValueSchema.optional().nullable(),
  array_ends_with: InputJsonValueSchema.optional().nullable(),
  lt: InputJsonValueSchema.optional(),
  lte: InputJsonValueSchema.optional(),
  gt: InputJsonValueSchema.optional(),
  gte: InputJsonValueSchema.optional(),
  not: InputJsonValueSchema.optional()
}).strict();

export const EnumDayOfWeekFilterSchema: z.ZodType<Prisma.EnumDayOfWeekFilter> = z.object({
  equals: z.lazy(() => DayOfWeekSchema).optional(),
  in: z.lazy(() => DayOfWeekSchema).array().optional(),
  notIn: z.lazy(() => DayOfWeekSchema).array().optional(),
  not: z.union([ z.lazy(() => DayOfWeekSchema),z.lazy(() => NestedEnumDayOfWeekFilterSchema) ]).optional(),
}).strict();

export const SpecialityNullableRelationFilterSchema: z.ZodType<Prisma.SpecialityNullableRelationFilter> = z.object({
  is: z.lazy(() => SpecialityWhereInputSchema).optional().nullable(),
  isNot: z.lazy(() => SpecialityWhereInputSchema).optional().nullable()
}).strict();

export const ProfileRelationFilterSchema: z.ZodType<Prisma.ProfileRelationFilter> = z.object({
  is: z.lazy(() => ProfileWhereInputSchema).optional(),
  isNot: z.lazy(() => ProfileWhereInputSchema).optional()
}).strict();

export const TenantRelationFilterSchema: z.ZodType<Prisma.TenantRelationFilter> = z.object({
  is: z.lazy(() => TenantWhereInputSchema).optional(),
  isNot: z.lazy(() => TenantWhereInputSchema).optional()
}).strict();

export const InvitationNullableRelationFilterSchema: z.ZodType<Prisma.InvitationNullableRelationFilter> = z.object({
  is: z.lazy(() => InvitationWhereInputSchema).optional().nullable(),
  isNot: z.lazy(() => InvitationWhereInputSchema).optional().nullable()
}).strict();

export const EventActionListRelationFilterSchema: z.ZodType<Prisma.EventActionListRelationFilter> = z.object({
  every: z.lazy(() => EventActionWhereInputSchema).optional(),
  some: z.lazy(() => EventActionWhereInputSchema).optional(),
  none: z.lazy(() => EventActionWhereInputSchema).optional()
}).strict();

export const TreatmentPlanListRelationFilterSchema: z.ZodType<Prisma.TreatmentPlanListRelationFilter> = z.object({
  every: z.lazy(() => TreatmentPlanWhereInputSchema).optional(),
  some: z.lazy(() => TreatmentPlanWhereInputSchema).optional(),
  none: z.lazy(() => TreatmentPlanWhereInputSchema).optional()
}).strict();

export const InvitationListRelationFilterSchema: z.ZodType<Prisma.InvitationListRelationFilter> = z.object({
  every: z.lazy(() => InvitationWhereInputSchema).optional(),
  some: z.lazy(() => InvitationWhereInputSchema).optional(),
  none: z.lazy(() => InvitationWhereInputSchema).optional()
}).strict();

export const TaskListRelationFilterSchema: z.ZodType<Prisma.TaskListRelationFilter> = z.object({
  every: z.lazy(() => TaskWhereInputSchema).optional(),
  some: z.lazy(() => TaskWhereInputSchema).optional(),
  none: z.lazy(() => TaskWhereInputSchema).optional()
}).strict();

export const EventActionOrderByRelationAggregateInputSchema: z.ZodType<Prisma.EventActionOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const TreatmentPlanOrderByRelationAggregateInputSchema: z.ZodType<Prisma.TreatmentPlanOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const InvitationOrderByRelationAggregateInputSchema: z.ZodType<Prisma.InvitationOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const TaskOrderByRelationAggregateInputSchema: z.ZodType<Prisma.TaskOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const UserCountOrderByAggregateInputSchema: z.ZodType<Prisma.UserCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  index: z.lazy(() => SortOrderSchema).optional(),
  role: z.lazy(() => SortOrderSchema).optional(),
  workingHours: z.lazy(() => SortOrderSchema).optional(),
  firstDayOfWeek: z.lazy(() => SortOrderSchema).optional(),
  showWeekends: z.lazy(() => SortOrderSchema).optional(),
  webhookApiKey: z.lazy(() => SortOrderSchema).optional(),
  specialityId: z.lazy(() => SortOrderSchema).optional(),
  profileId: z.lazy(() => SortOrderSchema).optional(),
  tenantId: z.lazy(() => SortOrderSchema).optional(),
  deletedAt: z.lazy(() => SortOrderSchema).optional(),
  activatedAt: z.lazy(() => SortOrderSchema).optional(),
  lastLoginAt: z.lazy(() => SortOrderSchema).optional(),
  bannedAt: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const UserAvgOrderByAggregateInputSchema: z.ZodType<Prisma.UserAvgOrderByAggregateInput> = z.object({
  index: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const UserMaxOrderByAggregateInputSchema: z.ZodType<Prisma.UserMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  index: z.lazy(() => SortOrderSchema).optional(),
  role: z.lazy(() => SortOrderSchema).optional(),
  firstDayOfWeek: z.lazy(() => SortOrderSchema).optional(),
  showWeekends: z.lazy(() => SortOrderSchema).optional(),
  webhookApiKey: z.lazy(() => SortOrderSchema).optional(),
  specialityId: z.lazy(() => SortOrderSchema).optional(),
  profileId: z.lazy(() => SortOrderSchema).optional(),
  tenantId: z.lazy(() => SortOrderSchema).optional(),
  deletedAt: z.lazy(() => SortOrderSchema).optional(),
  activatedAt: z.lazy(() => SortOrderSchema).optional(),
  lastLoginAt: z.lazy(() => SortOrderSchema).optional(),
  bannedAt: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const UserMinOrderByAggregateInputSchema: z.ZodType<Prisma.UserMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  index: z.lazy(() => SortOrderSchema).optional(),
  role: z.lazy(() => SortOrderSchema).optional(),
  firstDayOfWeek: z.lazy(() => SortOrderSchema).optional(),
  showWeekends: z.lazy(() => SortOrderSchema).optional(),
  webhookApiKey: z.lazy(() => SortOrderSchema).optional(),
  specialityId: z.lazy(() => SortOrderSchema).optional(),
  profileId: z.lazy(() => SortOrderSchema).optional(),
  tenantId: z.lazy(() => SortOrderSchema).optional(),
  deletedAt: z.lazy(() => SortOrderSchema).optional(),
  activatedAt: z.lazy(() => SortOrderSchema).optional(),
  lastLoginAt: z.lazy(() => SortOrderSchema).optional(),
  bannedAt: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const UserSumOrderByAggregateInputSchema: z.ZodType<Prisma.UserSumOrderByAggregateInput> = z.object({
  index: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const IntWithAggregatesFilterSchema: z.ZodType<Prisma.IntWithAggregatesFilter> = z.object({
  equals: z.number().optional(),
  in: z.number().array().optional(),
  notIn: z.number().array().optional(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedIntWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _avg: z.lazy(() => NestedFloatFilterSchema).optional(),
  _sum: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedIntFilterSchema).optional(),
  _max: z.lazy(() => NestedIntFilterSchema).optional()
}).strict();

export const EnumRoleWithAggregatesFilterSchema: z.ZodType<Prisma.EnumRoleWithAggregatesFilter> = z.object({
  equals: z.lazy(() => RoleSchema).optional(),
  in: z.lazy(() => RoleSchema).array().optional(),
  notIn: z.lazy(() => RoleSchema).array().optional(),
  not: z.union([ z.lazy(() => RoleSchema),z.lazy(() => NestedEnumRoleWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumRoleFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumRoleFilterSchema).optional()
}).strict();

export const JsonWithAggregatesFilterSchema: z.ZodType<Prisma.JsonWithAggregatesFilter> = z.object({
  equals: InputJsonValueSchema.optional(),
  path: z.string().array().optional(),
  string_contains: z.string().optional(),
  string_starts_with: z.string().optional(),
  string_ends_with: z.string().optional(),
  array_contains: InputJsonValueSchema.optional().nullable(),
  array_starts_with: InputJsonValueSchema.optional().nullable(),
  array_ends_with: InputJsonValueSchema.optional().nullable(),
  lt: InputJsonValueSchema.optional(),
  lte: InputJsonValueSchema.optional(),
  gt: InputJsonValueSchema.optional(),
  gte: InputJsonValueSchema.optional(),
  not: InputJsonValueSchema.optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedJsonFilterSchema).optional(),
  _max: z.lazy(() => NestedJsonFilterSchema).optional()
}).strict();

export const EnumDayOfWeekWithAggregatesFilterSchema: z.ZodType<Prisma.EnumDayOfWeekWithAggregatesFilter> = z.object({
  equals: z.lazy(() => DayOfWeekSchema).optional(),
  in: z.lazy(() => DayOfWeekSchema).array().optional(),
  notIn: z.lazy(() => DayOfWeekSchema).array().optional(),
  not: z.union([ z.lazy(() => DayOfWeekSchema),z.lazy(() => NestedEnumDayOfWeekWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumDayOfWeekFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumDayOfWeekFilterSchema).optional()
}).strict();

export const AccountListRelationFilterSchema: z.ZodType<Prisma.AccountListRelationFilter> = z.object({
  every: z.lazy(() => AccountWhereInputSchema).optional(),
  some: z.lazy(() => AccountWhereInputSchema).optional(),
  none: z.lazy(() => AccountWhereInputSchema).optional()
}).strict();

export const TokenListRelationFilterSchema: z.ZodType<Prisma.TokenListRelationFilter> = z.object({
  every: z.lazy(() => TokenWhereInputSchema).optional(),
  some: z.lazy(() => TokenWhereInputSchema).optional(),
  none: z.lazy(() => TokenWhereInputSchema).optional()
}).strict();

export const AccountOrderByRelationAggregateInputSchema: z.ZodType<Prisma.AccountOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const TokenOrderByRelationAggregateInputSchema: z.ZodType<Prisma.TokenOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ProfileCountOrderByAggregateInputSchema: z.ZodType<Prisma.ProfileCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  title: z.lazy(() => SortOrderSchema).optional(),
  firstName: z.lazy(() => SortOrderSchema).optional(),
  lastName: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  phone: z.lazy(() => SortOrderSchema).optional(),
  activatedAt: z.lazy(() => SortOrderSchema).optional(),
  stripeCustomerId: z.lazy(() => SortOrderSchema).optional(),
  stripeFreeTrialUsed: z.lazy(() => SortOrderSchema).optional(),
  preferredTenantId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ProfileMaxOrderByAggregateInputSchema: z.ZodType<Prisma.ProfileMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  title: z.lazy(() => SortOrderSchema).optional(),
  firstName: z.lazy(() => SortOrderSchema).optional(),
  lastName: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  phone: z.lazy(() => SortOrderSchema).optional(),
  activatedAt: z.lazy(() => SortOrderSchema).optional(),
  stripeCustomerId: z.lazy(() => SortOrderSchema).optional(),
  stripeFreeTrialUsed: z.lazy(() => SortOrderSchema).optional(),
  preferredTenantId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ProfileMinOrderByAggregateInputSchema: z.ZodType<Prisma.ProfileMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  title: z.lazy(() => SortOrderSchema).optional(),
  firstName: z.lazy(() => SortOrderSchema).optional(),
  lastName: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  phone: z.lazy(() => SortOrderSchema).optional(),
  activatedAt: z.lazy(() => SortOrderSchema).optional(),
  stripeCustomerId: z.lazy(() => SortOrderSchema).optional(),
  stripeFreeTrialUsed: z.lazy(() => SortOrderSchema).optional(),
  preferredTenantId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const IntNullableFilterSchema: z.ZodType<Prisma.IntNullableFilter> = z.object({
  equals: z.number().optional().nullable(),
  in: z.number().array().optional().nullable(),
  notIn: z.number().array().optional().nullable(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedIntNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const AccountCountOrderByAggregateInputSchema: z.ZodType<Prisma.AccountCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  profileId: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  provider: z.lazy(() => SortOrderSchema).optional(),
  passwordHash: z.lazy(() => SortOrderSchema).optional(),
  refresh_token: z.lazy(() => SortOrderSchema).optional(),
  access_token: z.lazy(() => SortOrderSchema).optional(),
  expires_at: z.lazy(() => SortOrderSchema).optional(),
  refresh_token_expires_in: z.lazy(() => SortOrderSchema).optional(),
  token_type: z.lazy(() => SortOrderSchema).optional(),
  scope: z.lazy(() => SortOrderSchema).optional(),
  id_token: z.lazy(() => SortOrderSchema).optional(),
  session_state: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const AccountAvgOrderByAggregateInputSchema: z.ZodType<Prisma.AccountAvgOrderByAggregateInput> = z.object({
  refresh_token_expires_in: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const AccountMaxOrderByAggregateInputSchema: z.ZodType<Prisma.AccountMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  profileId: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  provider: z.lazy(() => SortOrderSchema).optional(),
  passwordHash: z.lazy(() => SortOrderSchema).optional(),
  refresh_token: z.lazy(() => SortOrderSchema).optional(),
  access_token: z.lazy(() => SortOrderSchema).optional(),
  expires_at: z.lazy(() => SortOrderSchema).optional(),
  refresh_token_expires_in: z.lazy(() => SortOrderSchema).optional(),
  token_type: z.lazy(() => SortOrderSchema).optional(),
  scope: z.lazy(() => SortOrderSchema).optional(),
  id_token: z.lazy(() => SortOrderSchema).optional(),
  session_state: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const AccountMinOrderByAggregateInputSchema: z.ZodType<Prisma.AccountMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  profileId: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  provider: z.lazy(() => SortOrderSchema).optional(),
  passwordHash: z.lazy(() => SortOrderSchema).optional(),
  refresh_token: z.lazy(() => SortOrderSchema).optional(),
  access_token: z.lazy(() => SortOrderSchema).optional(),
  expires_at: z.lazy(() => SortOrderSchema).optional(),
  refresh_token_expires_in: z.lazy(() => SortOrderSchema).optional(),
  token_type: z.lazy(() => SortOrderSchema).optional(),
  scope: z.lazy(() => SortOrderSchema).optional(),
  id_token: z.lazy(() => SortOrderSchema).optional(),
  session_state: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const AccountSumOrderByAggregateInputSchema: z.ZodType<Prisma.AccountSumOrderByAggregateInput> = z.object({
  refresh_token_expires_in: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const IntNullableWithAggregatesFilterSchema: z.ZodType<Prisma.IntNullableWithAggregatesFilter> = z.object({
  equals: z.number().optional().nullable(),
  in: z.number().array().optional().nullable(),
  notIn: z.number().array().optional().nullable(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedIntNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _avg: z.lazy(() => NestedFloatNullableFilterSchema).optional(),
  _sum: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedIntNullableFilterSchema).optional()
}).strict();

export const TenantProfileListRelationFilterSchema: z.ZodType<Prisma.TenantProfileListRelationFilter> = z.object({
  every: z.lazy(() => TenantProfileWhereInputSchema).optional(),
  some: z.lazy(() => TenantProfileWhereInputSchema).optional(),
  none: z.lazy(() => TenantProfileWhereInputSchema).optional()
}).strict();

export const TenantProfileOrderByRelationAggregateInputSchema: z.ZodType<Prisma.TenantProfileOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const PlanCountOrderByAggregateInputSchema: z.ZodType<Prisma.PlanCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  stripeProductId: z.lazy(() => SortOrderSchema).optional(),
  stripePriceId: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  maxUsers: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const PlanAvgOrderByAggregateInputSchema: z.ZodType<Prisma.PlanAvgOrderByAggregateInput> = z.object({
  maxUsers: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const PlanMaxOrderByAggregateInputSchema: z.ZodType<Prisma.PlanMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  stripeProductId: z.lazy(() => SortOrderSchema).optional(),
  stripePriceId: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  maxUsers: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const PlanMinOrderByAggregateInputSchema: z.ZodType<Prisma.PlanMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  stripeProductId: z.lazy(() => SortOrderSchema).optional(),
  stripePriceId: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  maxUsers: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const PlanSumOrderByAggregateInputSchema: z.ZodType<Prisma.PlanSumOrderByAggregateInput> = z.object({
  maxUsers: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const EnumTokenTypeFilterSchema: z.ZodType<Prisma.EnumTokenTypeFilter> = z.object({
  equals: z.lazy(() => TokenTypeSchema).optional(),
  in: z.lazy(() => TokenTypeSchema).array().optional(),
  notIn: z.lazy(() => TokenTypeSchema).array().optional(),
  not: z.union([ z.lazy(() => TokenTypeSchema),z.lazy(() => NestedEnumTokenTypeFilterSchema) ]).optional(),
}).strict();

export const TokenCountOrderByAggregateInputSchema: z.ZodType<Prisma.TokenCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  token: z.lazy(() => SortOrderSchema).optional(),
  expires: z.lazy(() => SortOrderSchema).optional(),
  profileId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const TokenMaxOrderByAggregateInputSchema: z.ZodType<Prisma.TokenMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  token: z.lazy(() => SortOrderSchema).optional(),
  expires: z.lazy(() => SortOrderSchema).optional(),
  profileId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const TokenMinOrderByAggregateInputSchema: z.ZodType<Prisma.TokenMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  token: z.lazy(() => SortOrderSchema).optional(),
  expires: z.lazy(() => SortOrderSchema).optional(),
  profileId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const EnumTokenTypeWithAggregatesFilterSchema: z.ZodType<Prisma.EnumTokenTypeWithAggregatesFilter> = z.object({
  equals: z.lazy(() => TokenTypeSchema).optional(),
  in: z.lazy(() => TokenTypeSchema).array().optional(),
  notIn: z.lazy(() => TokenTypeSchema).array().optional(),
  not: z.union([ z.lazy(() => TokenTypeSchema),z.lazy(() => NestedEnumTokenTypeWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumTokenTypeFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumTokenTypeFilterSchema).optional()
}).strict();

export const UserRelationFilterSchema: z.ZodType<Prisma.UserRelationFilter> = z.object({
  is: z.lazy(() => UserWhereInputSchema).optional(),
  isNot: z.lazy(() => UserWhereInputSchema).optional()
}).strict();

export const UserNullableRelationFilterSchema: z.ZodType<Prisma.UserNullableRelationFilter> = z.object({
  is: z.lazy(() => UserWhereInputSchema).optional().nullable(),
  isNot: z.lazy(() => UserWhereInputSchema).optional().nullable()
}).strict();

export const InvitationCountOrderByAggregateInputSchema: z.ZodType<Prisma.InvitationCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  role: z.lazy(() => SortOrderSchema).optional(),
  token: z.lazy(() => SortOrderSchema).optional(),
  expires: z.lazy(() => SortOrderSchema).optional(),
  invitedById: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const InvitationMaxOrderByAggregateInputSchema: z.ZodType<Prisma.InvitationMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  role: z.lazy(() => SortOrderSchema).optional(),
  token: z.lazy(() => SortOrderSchema).optional(),
  expires: z.lazy(() => SortOrderSchema).optional(),
  invitedById: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const InvitationMinOrderByAggregateInputSchema: z.ZodType<Prisma.InvitationMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  role: z.lazy(() => SortOrderSchema).optional(),
  token: z.lazy(() => SortOrderSchema).optional(),
  expires: z.lazy(() => SortOrderSchema).optional(),
  invitedById: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const EnumStatusFilterSchema: z.ZodType<Prisma.EnumStatusFilter> = z.object({
  equals: z.lazy(() => StatusSchema).optional(),
  in: z.lazy(() => StatusSchema).array().optional(),
  notIn: z.lazy(() => StatusSchema).array().optional(),
  not: z.union([ z.lazy(() => StatusSchema),z.lazy(() => NestedEnumStatusFilterSchema) ]).optional(),
}).strict();

export const QuizListRelationFilterSchema: z.ZodType<Prisma.QuizListRelationFilter> = z.object({
  every: z.lazy(() => QuizWhereInputSchema).optional(),
  some: z.lazy(() => QuizWhereInputSchema).optional(),
  none: z.lazy(() => QuizWhereInputSchema).optional()
}).strict();

export const QuizOrderByRelationAggregateInputSchema: z.ZodType<Prisma.QuizOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const PatientCountOrderByAggregateInputSchema: z.ZodType<Prisma.PatientCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  firstName: z.lazy(() => SortOrderSchema).optional(),
  lastName: z.lazy(() => SortOrderSchema).optional(),
  gender: z.lazy(() => SortOrderSchema).optional(),
  dob: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  phone: z.lazy(() => SortOrderSchema).optional(),
  city: z.lazy(() => SortOrderSchema).optional(),
  county: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  smsNotifications: z.lazy(() => SortOrderSchema).optional(),
  emailNotifications: z.lazy(() => SortOrderSchema).optional(),
  filters: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  tenantId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const PatientMaxOrderByAggregateInputSchema: z.ZodType<Prisma.PatientMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  firstName: z.lazy(() => SortOrderSchema).optional(),
  lastName: z.lazy(() => SortOrderSchema).optional(),
  gender: z.lazy(() => SortOrderSchema).optional(),
  dob: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  phone: z.lazy(() => SortOrderSchema).optional(),
  city: z.lazy(() => SortOrderSchema).optional(),
  county: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  smsNotifications: z.lazy(() => SortOrderSchema).optional(),
  emailNotifications: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  tenantId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const PatientMinOrderByAggregateInputSchema: z.ZodType<Prisma.PatientMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  firstName: z.lazy(() => SortOrderSchema).optional(),
  lastName: z.lazy(() => SortOrderSchema).optional(),
  gender: z.lazy(() => SortOrderSchema).optional(),
  dob: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  phone: z.lazy(() => SortOrderSchema).optional(),
  city: z.lazy(() => SortOrderSchema).optional(),
  county: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  smsNotifications: z.lazy(() => SortOrderSchema).optional(),
  emailNotifications: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  tenantId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const EnumStatusWithAggregatesFilterSchema: z.ZodType<Prisma.EnumStatusWithAggregatesFilter> = z.object({
  equals: z.lazy(() => StatusSchema).optional(),
  in: z.lazy(() => StatusSchema).array().optional(),
  notIn: z.lazy(() => StatusSchema).array().optional(),
  not: z.union([ z.lazy(() => StatusSchema),z.lazy(() => NestedEnumStatusWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumStatusFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumStatusFilterSchema).optional()
}).strict();

export const SpecialityCountOrderByAggregateInputSchema: z.ZodType<Prisma.SpecialityCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  color: z.lazy(() => SortOrderSchema).optional(),
  tenantId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const SpecialityMaxOrderByAggregateInputSchema: z.ZodType<Prisma.SpecialityMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  color: z.lazy(() => SortOrderSchema).optional(),
  tenantId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const SpecialityMinOrderByAggregateInputSchema: z.ZodType<Prisma.SpecialityMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  color: z.lazy(() => SortOrderSchema).optional(),
  tenantId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const EnumEventTypeFilterSchema: z.ZodType<Prisma.EnumEventTypeFilter> = z.object({
  equals: z.lazy(() => EventTypeSchema).optional(),
  in: z.lazy(() => EventTypeSchema).array().optional(),
  notIn: z.lazy(() => EventTypeSchema).array().optional(),
  not: z.union([ z.lazy(() => EventTypeSchema),z.lazy(() => NestedEnumEventTypeFilterSchema) ]).optional(),
}).strict();

export const EnumEventStatusFilterSchema: z.ZodType<Prisma.EnumEventStatusFilter> = z.object({
  equals: z.lazy(() => EventStatusSchema).optional(),
  in: z.lazy(() => EventStatusSchema).array().optional(),
  notIn: z.lazy(() => EventStatusSchema).array().optional(),
  not: z.union([ z.lazy(() => EventStatusSchema),z.lazy(() => NestedEnumEventStatusFilterSchema) ]).optional(),
}).strict();

export const EnumEventInitiatorFilterSchema: z.ZodType<Prisma.EnumEventInitiatorFilter> = z.object({
  equals: z.lazy(() => EventInitiatorSchema).optional(),
  in: z.lazy(() => EventInitiatorSchema).array().optional(),
  notIn: z.lazy(() => EventInitiatorSchema).array().optional(),
  not: z.union([ z.lazy(() => EventInitiatorSchema),z.lazy(() => NestedEnumEventInitiatorFilterSchema) ]).optional(),
}).strict();

export const VisitListRelationFilterSchema: z.ZodType<Prisma.VisitListRelationFilter> = z.object({
  every: z.lazy(() => VisitWhereInputSchema).optional(),
  some: z.lazy(() => VisitWhereInputSchema).optional(),
  none: z.lazy(() => VisitWhereInputSchema).optional()
}).strict();

export const QuizNullableRelationFilterSchema: z.ZodType<Prisma.QuizNullableRelationFilter> = z.object({
  is: z.lazy(() => QuizWhereInputSchema).optional().nullable(),
  isNot: z.lazy(() => QuizWhereInputSchema).optional().nullable()
}).strict();

export const PatientNullableRelationFilterSchema: z.ZodType<Prisma.PatientNullableRelationFilter> = z.object({
  is: z.lazy(() => PatientWhereInputSchema).optional().nullable(),
  isNot: z.lazy(() => PatientWhereInputSchema).optional().nullable()
}).strict();

export const VisitOrderByRelationAggregateInputSchema: z.ZodType<Prisma.VisitOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const EventCountOrderByAggregateInputSchema: z.ZodType<Prisma.EventCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  index: z.lazy(() => SortOrderSchema).optional(),
  title: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  date: z.lazy(() => SortOrderSchema).optional(),
  start: z.lazy(() => SortOrderSchema).optional(),
  end: z.lazy(() => SortOrderSchema).optional(),
  allDay: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  initiator: z.lazy(() => SortOrderSchema).optional(),
  patientId: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  tenantId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const EventAvgOrderByAggregateInputSchema: z.ZodType<Prisma.EventAvgOrderByAggregateInput> = z.object({
  index: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const EventMaxOrderByAggregateInputSchema: z.ZodType<Prisma.EventMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  index: z.lazy(() => SortOrderSchema).optional(),
  title: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  date: z.lazy(() => SortOrderSchema).optional(),
  start: z.lazy(() => SortOrderSchema).optional(),
  end: z.lazy(() => SortOrderSchema).optional(),
  allDay: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  initiator: z.lazy(() => SortOrderSchema).optional(),
  patientId: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  tenantId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const EventMinOrderByAggregateInputSchema: z.ZodType<Prisma.EventMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  index: z.lazy(() => SortOrderSchema).optional(),
  title: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  date: z.lazy(() => SortOrderSchema).optional(),
  start: z.lazy(() => SortOrderSchema).optional(),
  end: z.lazy(() => SortOrderSchema).optional(),
  allDay: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  initiator: z.lazy(() => SortOrderSchema).optional(),
  patientId: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  tenantId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const EventSumOrderByAggregateInputSchema: z.ZodType<Prisma.EventSumOrderByAggregateInput> = z.object({
  index: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const EnumEventTypeWithAggregatesFilterSchema: z.ZodType<Prisma.EnumEventTypeWithAggregatesFilter> = z.object({
  equals: z.lazy(() => EventTypeSchema).optional(),
  in: z.lazy(() => EventTypeSchema).array().optional(),
  notIn: z.lazy(() => EventTypeSchema).array().optional(),
  not: z.union([ z.lazy(() => EventTypeSchema),z.lazy(() => NestedEnumEventTypeWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumEventTypeFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumEventTypeFilterSchema).optional()
}).strict();

export const EnumEventStatusWithAggregatesFilterSchema: z.ZodType<Prisma.EnumEventStatusWithAggregatesFilter> = z.object({
  equals: z.lazy(() => EventStatusSchema).optional(),
  in: z.lazy(() => EventStatusSchema).array().optional(),
  notIn: z.lazy(() => EventStatusSchema).array().optional(),
  not: z.union([ z.lazy(() => EventStatusSchema),z.lazy(() => NestedEnumEventStatusWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumEventStatusFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumEventStatusFilterSchema).optional()
}).strict();

export const EnumEventInitiatorWithAggregatesFilterSchema: z.ZodType<Prisma.EnumEventInitiatorWithAggregatesFilter> = z.object({
  equals: z.lazy(() => EventInitiatorSchema).optional(),
  in: z.lazy(() => EventInitiatorSchema).array().optional(),
  notIn: z.lazy(() => EventInitiatorSchema).array().optional(),
  not: z.union([ z.lazy(() => EventInitiatorSchema),z.lazy(() => NestedEnumEventInitiatorWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumEventInitiatorFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumEventInitiatorFilterSchema).optional()
}).strict();

export const EventRelationFilterSchema: z.ZodType<Prisma.EventRelationFilter> = z.object({
  is: z.lazy(() => EventWhereInputSchema).optional(),
  isNot: z.lazy(() => EventWhereInputSchema).optional()
}).strict();

export const EventActionCountOrderByAggregateInputSchema: z.ZodType<Prisma.EventActionCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  data: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  eventId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const EventActionMaxOrderByAggregateInputSchema: z.ZodType<Prisma.EventActionMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  eventId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const EventActionMinOrderByAggregateInputSchema: z.ZodType<Prisma.EventActionMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  eventId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const StringNullableListFilterSchema: z.ZodType<Prisma.StringNullableListFilter> = z.object({
  equals: z.string().array().optional().nullable(),
  has: z.string().optional().nullable(),
  hasEvery: z.string().array().optional(),
  hasSome: z.string().array().optional(),
  isEmpty: z.boolean().optional()
}).strict();

export const ServiceMaterialListRelationFilterSchema: z.ZodType<Prisma.ServiceMaterialListRelationFilter> = z.object({
  every: z.lazy(() => ServiceMaterialWhereInputSchema).optional(),
  some: z.lazy(() => ServiceMaterialWhereInputSchema).optional(),
  none: z.lazy(() => ServiceMaterialWhereInputSchema).optional()
}).strict();

export const ServiceMaterialOrderByRelationAggregateInputSchema: z.ZodType<Prisma.ServiceMaterialOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const MaterialCountOrderByAggregateInputSchema: z.ZodType<Prisma.MaterialCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  unit_price: z.lazy(() => SortOrderSchema).optional(),
  unit: z.lazy(() => SortOrderSchema).optional(),
  image: z.lazy(() => SortOrderSchema).optional(),
  tags: z.lazy(() => SortOrderSchema).optional(),
  isActive: z.lazy(() => SortOrderSchema).optional(),
  keepInventory: z.lazy(() => SortOrderSchema).optional(),
  stock: z.lazy(() => SortOrderSchema).optional(),
  tenantId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const MaterialAvgOrderByAggregateInputSchema: z.ZodType<Prisma.MaterialAvgOrderByAggregateInput> = z.object({
  unit_price: z.lazy(() => SortOrderSchema).optional(),
  stock: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const MaterialMaxOrderByAggregateInputSchema: z.ZodType<Prisma.MaterialMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  unit_price: z.lazy(() => SortOrderSchema).optional(),
  unit: z.lazy(() => SortOrderSchema).optional(),
  image: z.lazy(() => SortOrderSchema).optional(),
  isActive: z.lazy(() => SortOrderSchema).optional(),
  keepInventory: z.lazy(() => SortOrderSchema).optional(),
  stock: z.lazy(() => SortOrderSchema).optional(),
  tenantId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const MaterialMinOrderByAggregateInputSchema: z.ZodType<Prisma.MaterialMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  unit_price: z.lazy(() => SortOrderSchema).optional(),
  unit: z.lazy(() => SortOrderSchema).optional(),
  image: z.lazy(() => SortOrderSchema).optional(),
  isActive: z.lazy(() => SortOrderSchema).optional(),
  keepInventory: z.lazy(() => SortOrderSchema).optional(),
  stock: z.lazy(() => SortOrderSchema).optional(),
  tenantId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const MaterialSumOrderByAggregateInputSchema: z.ZodType<Prisma.MaterialSumOrderByAggregateInput> = z.object({
  unit_price: z.lazy(() => SortOrderSchema).optional(),
  stock: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const EnumServiceUnitFilterSchema: z.ZodType<Prisma.EnumServiceUnitFilter> = z.object({
  equals: z.lazy(() => ServiceUnitSchema).optional(),
  in: z.lazy(() => ServiceUnitSchema).array().optional(),
  notIn: z.lazy(() => ServiceUnitSchema).array().optional(),
  not: z.union([ z.lazy(() => ServiceUnitSchema),z.lazy(() => NestedEnumServiceUnitFilterSchema) ]).optional(),
}).strict();

export const ServiceCategoryNullableRelationFilterSchema: z.ZodType<Prisma.ServiceCategoryNullableRelationFilter> = z.object({
  is: z.lazy(() => ServiceCategoryWhereInputSchema).optional().nullable(),
  isNot: z.lazy(() => ServiceCategoryWhereInputSchema).optional().nullable()
}).strict();

export const RelatedServiceListRelationFilterSchema: z.ZodType<Prisma.RelatedServiceListRelationFilter> = z.object({
  every: z.lazy(() => RelatedServiceWhereInputSchema).optional(),
  some: z.lazy(() => RelatedServiceWhereInputSchema).optional(),
  none: z.lazy(() => RelatedServiceWhereInputSchema).optional()
}).strict();

export const RelatedServiceOrderByRelationAggregateInputSchema: z.ZodType<Prisma.RelatedServiceOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ServiceCountOrderByAggregateInputSchema: z.ZodType<Prisma.ServiceCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  unit_price: z.lazy(() => SortOrderSchema).optional(),
  unit: z.lazy(() => SortOrderSchema).optional(),
  duration: z.lazy(() => SortOrderSchema).optional(),
  image: z.lazy(() => SortOrderSchema).optional(),
  tags: z.lazy(() => SortOrderSchema).optional(),
  isActive: z.lazy(() => SortOrderSchema).optional(),
  tenantId: z.lazy(() => SortOrderSchema).optional(),
  categoryId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ServiceAvgOrderByAggregateInputSchema: z.ZodType<Prisma.ServiceAvgOrderByAggregateInput> = z.object({
  unit_price: z.lazy(() => SortOrderSchema).optional(),
  duration: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ServiceMaxOrderByAggregateInputSchema: z.ZodType<Prisma.ServiceMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  unit_price: z.lazy(() => SortOrderSchema).optional(),
  unit: z.lazy(() => SortOrderSchema).optional(),
  duration: z.lazy(() => SortOrderSchema).optional(),
  image: z.lazy(() => SortOrderSchema).optional(),
  isActive: z.lazy(() => SortOrderSchema).optional(),
  tenantId: z.lazy(() => SortOrderSchema).optional(),
  categoryId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ServiceMinOrderByAggregateInputSchema: z.ZodType<Prisma.ServiceMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  unit_price: z.lazy(() => SortOrderSchema).optional(),
  unit: z.lazy(() => SortOrderSchema).optional(),
  duration: z.lazy(() => SortOrderSchema).optional(),
  image: z.lazy(() => SortOrderSchema).optional(),
  isActive: z.lazy(() => SortOrderSchema).optional(),
  tenantId: z.lazy(() => SortOrderSchema).optional(),
  categoryId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ServiceSumOrderByAggregateInputSchema: z.ZodType<Prisma.ServiceSumOrderByAggregateInput> = z.object({
  unit_price: z.lazy(() => SortOrderSchema).optional(),
  duration: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const EnumServiceUnitWithAggregatesFilterSchema: z.ZodType<Prisma.EnumServiceUnitWithAggregatesFilter> = z.object({
  equals: z.lazy(() => ServiceUnitSchema).optional(),
  in: z.lazy(() => ServiceUnitSchema).array().optional(),
  notIn: z.lazy(() => ServiceUnitSchema).array().optional(),
  not: z.union([ z.lazy(() => ServiceUnitSchema),z.lazy(() => NestedEnumServiceUnitWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumServiceUnitFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumServiceUnitFilterSchema).optional()
}).strict();

export const ServiceRelationFilterSchema: z.ZodType<Prisma.ServiceRelationFilter> = z.object({
  is: z.lazy(() => ServiceWhereInputSchema).optional(),
  isNot: z.lazy(() => ServiceWhereInputSchema).optional()
}).strict();

export const RelatedServiceCountOrderByAggregateInputSchema: z.ZodType<Prisma.RelatedServiceCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  order: z.lazy(() => SortOrderSchema).optional(),
  quantity: z.lazy(() => SortOrderSchema).optional(),
  unit_price: z.lazy(() => SortOrderSchema).optional(),
  service: z.lazy(() => SortOrderSchema).optional(),
  parentId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const RelatedServiceAvgOrderByAggregateInputSchema: z.ZodType<Prisma.RelatedServiceAvgOrderByAggregateInput> = z.object({
  order: z.lazy(() => SortOrderSchema).optional(),
  quantity: z.lazy(() => SortOrderSchema).optional(),
  unit_price: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const RelatedServiceMaxOrderByAggregateInputSchema: z.ZodType<Prisma.RelatedServiceMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  order: z.lazy(() => SortOrderSchema).optional(),
  quantity: z.lazy(() => SortOrderSchema).optional(),
  unit_price: z.lazy(() => SortOrderSchema).optional(),
  parentId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const RelatedServiceMinOrderByAggregateInputSchema: z.ZodType<Prisma.RelatedServiceMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  order: z.lazy(() => SortOrderSchema).optional(),
  quantity: z.lazy(() => SortOrderSchema).optional(),
  unit_price: z.lazy(() => SortOrderSchema).optional(),
  parentId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const RelatedServiceSumOrderByAggregateInputSchema: z.ZodType<Prisma.RelatedServiceSumOrderByAggregateInput> = z.object({
  order: z.lazy(() => SortOrderSchema).optional(),
  quantity: z.lazy(() => SortOrderSchema).optional(),
  unit_price: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const MaterialRelationFilterSchema: z.ZodType<Prisma.MaterialRelationFilter> = z.object({
  is: z.lazy(() => MaterialWhereInputSchema).optional(),
  isNot: z.lazy(() => MaterialWhereInputSchema).optional()
}).strict();

export const ServiceMaterialCountOrderByAggregateInputSchema: z.ZodType<Prisma.ServiceMaterialCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  quantity: z.lazy(() => SortOrderSchema).optional(),
  unit_price: z.lazy(() => SortOrderSchema).optional(),
  serviceId: z.lazy(() => SortOrderSchema).optional(),
  materialId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ServiceMaterialAvgOrderByAggregateInputSchema: z.ZodType<Prisma.ServiceMaterialAvgOrderByAggregateInput> = z.object({
  quantity: z.lazy(() => SortOrderSchema).optional(),
  unit_price: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ServiceMaterialMaxOrderByAggregateInputSchema: z.ZodType<Prisma.ServiceMaterialMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  quantity: z.lazy(() => SortOrderSchema).optional(),
  unit_price: z.lazy(() => SortOrderSchema).optional(),
  serviceId: z.lazy(() => SortOrderSchema).optional(),
  materialId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ServiceMaterialMinOrderByAggregateInputSchema: z.ZodType<Prisma.ServiceMaterialMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  quantity: z.lazy(() => SortOrderSchema).optional(),
  unit_price: z.lazy(() => SortOrderSchema).optional(),
  serviceId: z.lazy(() => SortOrderSchema).optional(),
  materialId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ServiceMaterialSumOrderByAggregateInputSchema: z.ZodType<Prisma.ServiceMaterialSumOrderByAggregateInput> = z.object({
  quantity: z.lazy(() => SortOrderSchema).optional(),
  unit_price: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const EnumPriceTypeFilterSchema: z.ZodType<Prisma.EnumPriceTypeFilter> = z.object({
  equals: z.lazy(() => PriceTypeSchema).optional(),
  in: z.lazy(() => PriceTypeSchema).array().optional(),
  notIn: z.lazy(() => PriceTypeSchema).array().optional(),
  not: z.union([ z.lazy(() => PriceTypeSchema),z.lazy(() => NestedEnumPriceTypeFilterSchema) ]).optional(),
}).strict();

export const PriceCountOrderByAggregateInputSchema: z.ZodType<Prisma.PriceCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  unit_price: z.lazy(() => SortOrderSchema).optional(),
  entityId: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const PriceAvgOrderByAggregateInputSchema: z.ZodType<Prisma.PriceAvgOrderByAggregateInput> = z.object({
  unit_price: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const PriceMaxOrderByAggregateInputSchema: z.ZodType<Prisma.PriceMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  unit_price: z.lazy(() => SortOrderSchema).optional(),
  entityId: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const PriceMinOrderByAggregateInputSchema: z.ZodType<Prisma.PriceMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  unit_price: z.lazy(() => SortOrderSchema).optional(),
  entityId: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const PriceSumOrderByAggregateInputSchema: z.ZodType<Prisma.PriceSumOrderByAggregateInput> = z.object({
  unit_price: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const EnumPriceTypeWithAggregatesFilterSchema: z.ZodType<Prisma.EnumPriceTypeWithAggregatesFilter> = z.object({
  equals: z.lazy(() => PriceTypeSchema).optional(),
  in: z.lazy(() => PriceTypeSchema).array().optional(),
  notIn: z.lazy(() => PriceTypeSchema).array().optional(),
  not: z.union([ z.lazy(() => PriceTypeSchema),z.lazy(() => NestedEnumPriceTypeWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumPriceTypeFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumPriceTypeFilterSchema).optional()
}).strict();

export const ServiceCategoryCountOrderByAggregateInputSchema: z.ZodType<Prisma.ServiceCategoryCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ServiceCategoryMaxOrderByAggregateInputSchema: z.ZodType<Prisma.ServiceCategoryMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ServiceCategoryMinOrderByAggregateInputSchema: z.ZodType<Prisma.ServiceCategoryMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const EnumTreatmentStatusFilterSchema: z.ZodType<Prisma.EnumTreatmentStatusFilter> = z.object({
  equals: z.lazy(() => TreatmentStatusSchema).optional(),
  in: z.lazy(() => TreatmentStatusSchema).array().optional(),
  notIn: z.lazy(() => TreatmentStatusSchema).array().optional(),
  not: z.union([ z.lazy(() => TreatmentStatusSchema),z.lazy(() => NestedEnumTreatmentStatusFilterSchema) ]).optional(),
}).strict();

export const TreatmentPlanNullableRelationFilterSchema: z.ZodType<Prisma.TreatmentPlanNullableRelationFilter> = z.object({
  is: z.lazy(() => TreatmentPlanWhereInputSchema).optional().nullable(),
  isNot: z.lazy(() => TreatmentPlanWhereInputSchema).optional().nullable()
}).strict();

export const TreatmentCountOrderByAggregateInputSchema: z.ZodType<Prisma.TreatmentCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  price: z.lazy(() => SortOrderSchema).optional(),
  target: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  treatmentPlanId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const TreatmentAvgOrderByAggregateInputSchema: z.ZodType<Prisma.TreatmentAvgOrderByAggregateInput> = z.object({
  price: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const TreatmentMaxOrderByAggregateInputSchema: z.ZodType<Prisma.TreatmentMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  price: z.lazy(() => SortOrderSchema).optional(),
  target: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  treatmentPlanId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const TreatmentMinOrderByAggregateInputSchema: z.ZodType<Prisma.TreatmentMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  price: z.lazy(() => SortOrderSchema).optional(),
  target: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  treatmentPlanId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const TreatmentSumOrderByAggregateInputSchema: z.ZodType<Prisma.TreatmentSumOrderByAggregateInput> = z.object({
  price: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const EnumTreatmentStatusWithAggregatesFilterSchema: z.ZodType<Prisma.EnumTreatmentStatusWithAggregatesFilter> = z.object({
  equals: z.lazy(() => TreatmentStatusSchema).optional(),
  in: z.lazy(() => TreatmentStatusSchema).array().optional(),
  notIn: z.lazy(() => TreatmentStatusSchema).array().optional(),
  not: z.union([ z.lazy(() => TreatmentStatusSchema),z.lazy(() => NestedEnumTreatmentStatusWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumTreatmentStatusFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumTreatmentStatusFilterSchema).optional()
}).strict();

export const TreatmentRelationFilterSchema: z.ZodType<Prisma.TreatmentRelationFilter> = z.object({
  is: z.lazy(() => TreatmentWhereInputSchema).optional(),
  isNot: z.lazy(() => TreatmentWhereInputSchema).optional()
}).strict();

export const EventNullableRelationFilterSchema: z.ZodType<Prisma.EventNullableRelationFilter> = z.object({
  is: z.lazy(() => EventWhereInputSchema).optional().nullable(),
  isNot: z.lazy(() => EventWhereInputSchema).optional().nullable()
}).strict();

export const VisitCountOrderByAggregateInputSchema: z.ZodType<Prisma.VisitCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  serviceId: z.lazy(() => SortOrderSchema).optional(),
  treatmentId: z.lazy(() => SortOrderSchema).optional(),
  eventId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const VisitMaxOrderByAggregateInputSchema: z.ZodType<Prisma.VisitMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  serviceId: z.lazy(() => SortOrderSchema).optional(),
  treatmentId: z.lazy(() => SortOrderSchema).optional(),
  eventId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const VisitMinOrderByAggregateInputSchema: z.ZodType<Prisma.VisitMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  serviceId: z.lazy(() => SortOrderSchema).optional(),
  treatmentId: z.lazy(() => SortOrderSchema).optional(),
  eventId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const TreatmentListRelationFilterSchema: z.ZodType<Prisma.TreatmentListRelationFilter> = z.object({
  every: z.lazy(() => TreatmentWhereInputSchema).optional(),
  some: z.lazy(() => TreatmentWhereInputSchema).optional(),
  none: z.lazy(() => TreatmentWhereInputSchema).optional()
}).strict();

export const PatientRelationFilterSchema: z.ZodType<Prisma.PatientRelationFilter> = z.object({
  is: z.lazy(() => PatientWhereInputSchema).optional(),
  isNot: z.lazy(() => PatientWhereInputSchema).optional()
}).strict();

export const TreatmentOrderByRelationAggregateInputSchema: z.ZodType<Prisma.TreatmentOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const TreatmentPlanCountOrderByAggregateInputSchema: z.ZodType<Prisma.TreatmentPlanCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  isDone: z.lazy(() => SortOrderSchema).optional(),
  patientId: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const TreatmentPlanMaxOrderByAggregateInputSchema: z.ZodType<Prisma.TreatmentPlanMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  isDone: z.lazy(() => SortOrderSchema).optional(),
  patientId: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const TreatmentPlanMinOrderByAggregateInputSchema: z.ZodType<Prisma.TreatmentPlanMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  isDone: z.lazy(() => SortOrderSchema).optional(),
  patientId: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const IntNullableListFilterSchema: z.ZodType<Prisma.IntNullableListFilter> = z.object({
  equals: z.number().array().optional().nullable(),
  has: z.number().optional().nullable(),
  hasEvery: z.number().array().optional(),
  hasSome: z.number().array().optional(),
  isEmpty: z.boolean().optional()
}).strict();

export const QuizCountOrderByAggregateInputSchema: z.ZodType<Prisma.QuizCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  quiz: z.lazy(() => SortOrderSchema).optional(),
  answers: z.lazy(() => SortOrderSchema).optional(),
  patientId: z.lazy(() => SortOrderSchema).optional(),
  eventId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const QuizAvgOrderByAggregateInputSchema: z.ZodType<Prisma.QuizAvgOrderByAggregateInput> = z.object({
  answers: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const QuizMaxOrderByAggregateInputSchema: z.ZodType<Prisma.QuizMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  patientId: z.lazy(() => SortOrderSchema).optional(),
  eventId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const QuizMinOrderByAggregateInputSchema: z.ZodType<Prisma.QuizMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  patientId: z.lazy(() => SortOrderSchema).optional(),
  eventId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const QuizSumOrderByAggregateInputSchema: z.ZodType<Prisma.QuizSumOrderByAggregateInput> = z.object({
  answers: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const TagCountOrderByAggregateInputSchema: z.ZodType<Prisma.TagCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const TagMaxOrderByAggregateInputSchema: z.ZodType<Prisma.TagMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const TagMinOrderByAggregateInputSchema: z.ZodType<Prisma.TagMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const TaskCountOrderByAggregateInputSchema: z.ZodType<Prisma.TaskCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  title: z.lazy(() => SortOrderSchema).optional(),
  isDone: z.lazy(() => SortOrderSchema).optional(),
  dueDate: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const TaskMaxOrderByAggregateInputSchema: z.ZodType<Prisma.TaskMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  title: z.lazy(() => SortOrderSchema).optional(),
  isDone: z.lazy(() => SortOrderSchema).optional(),
  dueDate: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const TaskMinOrderByAggregateInputSchema: z.ZodType<Prisma.TaskMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  title: z.lazy(() => SortOrderSchema).optional(),
  isDone: z.lazy(() => SortOrderSchema).optional(),
  dueDate: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const FileCountOrderByAggregateInputSchema: z.ZodType<Prisma.FileCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  url: z.lazy(() => SortOrderSchema).optional(),
  key: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  extension: z.lazy(() => SortOrderSchema).optional(),
  contentType: z.lazy(() => SortOrderSchema).optional(),
  size: z.lazy(() => SortOrderSchema).optional(),
  confirmed: z.lazy(() => SortOrderSchema).optional(),
  tenantId: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  eventId: z.lazy(() => SortOrderSchema).optional(),
  patientId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const FileAvgOrderByAggregateInputSchema: z.ZodType<Prisma.FileAvgOrderByAggregateInput> = z.object({
  size: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const FileMaxOrderByAggregateInputSchema: z.ZodType<Prisma.FileMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  url: z.lazy(() => SortOrderSchema).optional(),
  key: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  extension: z.lazy(() => SortOrderSchema).optional(),
  contentType: z.lazy(() => SortOrderSchema).optional(),
  size: z.lazy(() => SortOrderSchema).optional(),
  confirmed: z.lazy(() => SortOrderSchema).optional(),
  tenantId: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  eventId: z.lazy(() => SortOrderSchema).optional(),
  patientId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const FileMinOrderByAggregateInputSchema: z.ZodType<Prisma.FileMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  url: z.lazy(() => SortOrderSchema).optional(),
  key: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  extension: z.lazy(() => SortOrderSchema).optional(),
  contentType: z.lazy(() => SortOrderSchema).optional(),
  size: z.lazy(() => SortOrderSchema).optional(),
  confirmed: z.lazy(() => SortOrderSchema).optional(),
  tenantId: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  eventId: z.lazy(() => SortOrderSchema).optional(),
  patientId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const FileSumOrderByAggregateInputSchema: z.ZodType<Prisma.FileSumOrderByAggregateInput> = z.object({
  size: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ProfileNullableRelationFilterSchema: z.ZodType<Prisma.ProfileNullableRelationFilter> = z.object({
  is: z.lazy(() => ProfileWhereInputSchema).optional().nullable(),
  isNot: z.lazy(() => ProfileWhereInputSchema).optional().nullable()
}).strict();

export const TenantProfileNullableRelationFilterSchema: z.ZodType<Prisma.TenantProfileNullableRelationFilter> = z.object({
  is: z.lazy(() => TenantProfileWhereInputSchema).optional().nullable(),
  isNot: z.lazy(() => TenantProfileWhereInputSchema).optional().nullable()
}).strict();

export const AvatarCountOrderByAggregateInputSchema: z.ZodType<Prisma.AvatarCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  url: z.lazy(() => SortOrderSchema).optional(),
  key: z.lazy(() => SortOrderSchema).optional(),
  profileId: z.lazy(() => SortOrderSchema).optional(),
  tenantProfileId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const AvatarMaxOrderByAggregateInputSchema: z.ZodType<Prisma.AvatarMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  url: z.lazy(() => SortOrderSchema).optional(),
  key: z.lazy(() => SortOrderSchema).optional(),
  profileId: z.lazy(() => SortOrderSchema).optional(),
  tenantProfileId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const AvatarMinOrderByAggregateInputSchema: z.ZodType<Prisma.AvatarMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  url: z.lazy(() => SortOrderSchema).optional(),
  key: z.lazy(() => SortOrderSchema).optional(),
  profileId: z.lazy(() => SortOrderSchema).optional(),
  tenantProfileId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const CityListRelationFilterSchema: z.ZodType<Prisma.CityListRelationFilter> = z.object({
  every: z.lazy(() => CityWhereInputSchema).optional(),
  some: z.lazy(() => CityWhereInputSchema).optional(),
  none: z.lazy(() => CityWhereInputSchema).optional()
}).strict();

export const CityOrderByRelationAggregateInputSchema: z.ZodType<Prisma.CityOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const CountyCountOrderByAggregateInputSchema: z.ZodType<Prisma.CountyCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  code: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const CountyMaxOrderByAggregateInputSchema: z.ZodType<Prisma.CountyMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  code: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const CountyMinOrderByAggregateInputSchema: z.ZodType<Prisma.CountyMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  code: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const CountyRelationFilterSchema: z.ZodType<Prisma.CountyRelationFilter> = z.object({
  is: z.lazy(() => CountyWhereInputSchema).optional(),
  isNot: z.lazy(() => CountyWhereInputSchema).optional()
}).strict();

export const CityCountOrderByAggregateInputSchema: z.ZodType<Prisma.CityCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  countyId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const CityMaxOrderByAggregateInputSchema: z.ZodType<Prisma.CityMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  countyId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const CityMinOrderByAggregateInputSchema: z.ZodType<Prisma.CityMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  countyId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const UserCreateNestedManyWithoutTenantInputSchema: z.ZodType<Prisma.UserCreateNestedManyWithoutTenantInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutTenantInputSchema),z.lazy(() => UserCreateWithoutTenantInputSchema).array(),z.lazy(() => UserUncheckedCreateWithoutTenantInputSchema),z.lazy(() => UserUncheckedCreateWithoutTenantInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => UserCreateOrConnectWithoutTenantInputSchema),z.lazy(() => UserCreateOrConnectWithoutTenantInputSchema).array() ]).optional(),
  createMany: z.lazy(() => UserCreateManyTenantInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => UserWhereUniqueInputSchema),z.lazy(() => UserWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const TenantProfileCreateNestedOneWithoutTenantInputSchema: z.ZodType<Prisma.TenantProfileCreateNestedOneWithoutTenantInput> = z.object({
  create: z.union([ z.lazy(() => TenantProfileCreateWithoutTenantInputSchema),z.lazy(() => TenantProfileUncheckedCreateWithoutTenantInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => TenantProfileCreateOrConnectWithoutTenantInputSchema).optional(),
  connect: z.lazy(() => TenantProfileWhereUniqueInputSchema).optional()
}).strict();

export const SpecialityCreateNestedManyWithoutTenantInputSchema: z.ZodType<Prisma.SpecialityCreateNestedManyWithoutTenantInput> = z.object({
  create: z.union([ z.lazy(() => SpecialityCreateWithoutTenantInputSchema),z.lazy(() => SpecialityCreateWithoutTenantInputSchema).array(),z.lazy(() => SpecialityUncheckedCreateWithoutTenantInputSchema),z.lazy(() => SpecialityUncheckedCreateWithoutTenantInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => SpecialityCreateOrConnectWithoutTenantInputSchema),z.lazy(() => SpecialityCreateOrConnectWithoutTenantInputSchema).array() ]).optional(),
  createMany: z.lazy(() => SpecialityCreateManyTenantInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => SpecialityWhereUniqueInputSchema),z.lazy(() => SpecialityWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ProfileCreateNestedManyWithoutPreferredTenantInputSchema: z.ZodType<Prisma.ProfileCreateNestedManyWithoutPreferredTenantInput> = z.object({
  create: z.union([ z.lazy(() => ProfileCreateWithoutPreferredTenantInputSchema),z.lazy(() => ProfileCreateWithoutPreferredTenantInputSchema).array(),z.lazy(() => ProfileUncheckedCreateWithoutPreferredTenantInputSchema),z.lazy(() => ProfileUncheckedCreateWithoutPreferredTenantInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ProfileCreateOrConnectWithoutPreferredTenantInputSchema),z.lazy(() => ProfileCreateOrConnectWithoutPreferredTenantInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ProfileCreateManyPreferredTenantInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ProfileWhereUniqueInputSchema),z.lazy(() => ProfileWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const PatientCreateNestedManyWithoutTenantInputSchema: z.ZodType<Prisma.PatientCreateNestedManyWithoutTenantInput> = z.object({
  create: z.union([ z.lazy(() => PatientCreateWithoutTenantInputSchema),z.lazy(() => PatientCreateWithoutTenantInputSchema).array(),z.lazy(() => PatientUncheckedCreateWithoutTenantInputSchema),z.lazy(() => PatientUncheckedCreateWithoutTenantInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => PatientCreateOrConnectWithoutTenantInputSchema),z.lazy(() => PatientCreateOrConnectWithoutTenantInputSchema).array() ]).optional(),
  createMany: z.lazy(() => PatientCreateManyTenantInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => PatientWhereUniqueInputSchema),z.lazy(() => PatientWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ServiceCreateNestedManyWithoutTenantInputSchema: z.ZodType<Prisma.ServiceCreateNestedManyWithoutTenantInput> = z.object({
  create: z.union([ z.lazy(() => ServiceCreateWithoutTenantInputSchema),z.lazy(() => ServiceCreateWithoutTenantInputSchema).array(),z.lazy(() => ServiceUncheckedCreateWithoutTenantInputSchema),z.lazy(() => ServiceUncheckedCreateWithoutTenantInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ServiceCreateOrConnectWithoutTenantInputSchema),z.lazy(() => ServiceCreateOrConnectWithoutTenantInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ServiceCreateManyTenantInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ServiceWhereUniqueInputSchema),z.lazy(() => ServiceWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const MaterialCreateNestedManyWithoutTenantInputSchema: z.ZodType<Prisma.MaterialCreateNestedManyWithoutTenantInput> = z.object({
  create: z.union([ z.lazy(() => MaterialCreateWithoutTenantInputSchema),z.lazy(() => MaterialCreateWithoutTenantInputSchema).array(),z.lazy(() => MaterialUncheckedCreateWithoutTenantInputSchema),z.lazy(() => MaterialUncheckedCreateWithoutTenantInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => MaterialCreateOrConnectWithoutTenantInputSchema),z.lazy(() => MaterialCreateOrConnectWithoutTenantInputSchema).array() ]).optional(),
  createMany: z.lazy(() => MaterialCreateManyTenantInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => MaterialWhereUniqueInputSchema),z.lazy(() => MaterialWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const EventCreateNestedManyWithoutTenantInputSchema: z.ZodType<Prisma.EventCreateNestedManyWithoutTenantInput> = z.object({
  create: z.union([ z.lazy(() => EventCreateWithoutTenantInputSchema),z.lazy(() => EventCreateWithoutTenantInputSchema).array(),z.lazy(() => EventUncheckedCreateWithoutTenantInputSchema),z.lazy(() => EventUncheckedCreateWithoutTenantInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => EventCreateOrConnectWithoutTenantInputSchema),z.lazy(() => EventCreateOrConnectWithoutTenantInputSchema).array() ]).optional(),
  createMany: z.lazy(() => EventCreateManyTenantInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => EventWhereUniqueInputSchema),z.lazy(() => EventWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const FileCreateNestedManyWithoutTenantInputSchema: z.ZodType<Prisma.FileCreateNestedManyWithoutTenantInput> = z.object({
  create: z.union([ z.lazy(() => FileCreateWithoutTenantInputSchema),z.lazy(() => FileCreateWithoutTenantInputSchema).array(),z.lazy(() => FileUncheckedCreateWithoutTenantInputSchema),z.lazy(() => FileUncheckedCreateWithoutTenantInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => FileCreateOrConnectWithoutTenantInputSchema),z.lazy(() => FileCreateOrConnectWithoutTenantInputSchema).array() ]).optional(),
  createMany: z.lazy(() => FileCreateManyTenantInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => FileWhereUniqueInputSchema),z.lazy(() => FileWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const UserUncheckedCreateNestedManyWithoutTenantInputSchema: z.ZodType<Prisma.UserUncheckedCreateNestedManyWithoutTenantInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutTenantInputSchema),z.lazy(() => UserCreateWithoutTenantInputSchema).array(),z.lazy(() => UserUncheckedCreateWithoutTenantInputSchema),z.lazy(() => UserUncheckedCreateWithoutTenantInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => UserCreateOrConnectWithoutTenantInputSchema),z.lazy(() => UserCreateOrConnectWithoutTenantInputSchema).array() ]).optional(),
  createMany: z.lazy(() => UserCreateManyTenantInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => UserWhereUniqueInputSchema),z.lazy(() => UserWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const SpecialityUncheckedCreateNestedManyWithoutTenantInputSchema: z.ZodType<Prisma.SpecialityUncheckedCreateNestedManyWithoutTenantInput> = z.object({
  create: z.union([ z.lazy(() => SpecialityCreateWithoutTenantInputSchema),z.lazy(() => SpecialityCreateWithoutTenantInputSchema).array(),z.lazy(() => SpecialityUncheckedCreateWithoutTenantInputSchema),z.lazy(() => SpecialityUncheckedCreateWithoutTenantInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => SpecialityCreateOrConnectWithoutTenantInputSchema),z.lazy(() => SpecialityCreateOrConnectWithoutTenantInputSchema).array() ]).optional(),
  createMany: z.lazy(() => SpecialityCreateManyTenantInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => SpecialityWhereUniqueInputSchema),z.lazy(() => SpecialityWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ProfileUncheckedCreateNestedManyWithoutPreferredTenantInputSchema: z.ZodType<Prisma.ProfileUncheckedCreateNestedManyWithoutPreferredTenantInput> = z.object({
  create: z.union([ z.lazy(() => ProfileCreateWithoutPreferredTenantInputSchema),z.lazy(() => ProfileCreateWithoutPreferredTenantInputSchema).array(),z.lazy(() => ProfileUncheckedCreateWithoutPreferredTenantInputSchema),z.lazy(() => ProfileUncheckedCreateWithoutPreferredTenantInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ProfileCreateOrConnectWithoutPreferredTenantInputSchema),z.lazy(() => ProfileCreateOrConnectWithoutPreferredTenantInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ProfileCreateManyPreferredTenantInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ProfileWhereUniqueInputSchema),z.lazy(() => ProfileWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const PatientUncheckedCreateNestedManyWithoutTenantInputSchema: z.ZodType<Prisma.PatientUncheckedCreateNestedManyWithoutTenantInput> = z.object({
  create: z.union([ z.lazy(() => PatientCreateWithoutTenantInputSchema),z.lazy(() => PatientCreateWithoutTenantInputSchema).array(),z.lazy(() => PatientUncheckedCreateWithoutTenantInputSchema),z.lazy(() => PatientUncheckedCreateWithoutTenantInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => PatientCreateOrConnectWithoutTenantInputSchema),z.lazy(() => PatientCreateOrConnectWithoutTenantInputSchema).array() ]).optional(),
  createMany: z.lazy(() => PatientCreateManyTenantInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => PatientWhereUniqueInputSchema),z.lazy(() => PatientWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ServiceUncheckedCreateNestedManyWithoutTenantInputSchema: z.ZodType<Prisma.ServiceUncheckedCreateNestedManyWithoutTenantInput> = z.object({
  create: z.union([ z.lazy(() => ServiceCreateWithoutTenantInputSchema),z.lazy(() => ServiceCreateWithoutTenantInputSchema).array(),z.lazy(() => ServiceUncheckedCreateWithoutTenantInputSchema),z.lazy(() => ServiceUncheckedCreateWithoutTenantInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ServiceCreateOrConnectWithoutTenantInputSchema),z.lazy(() => ServiceCreateOrConnectWithoutTenantInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ServiceCreateManyTenantInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ServiceWhereUniqueInputSchema),z.lazy(() => ServiceWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const MaterialUncheckedCreateNestedManyWithoutTenantInputSchema: z.ZodType<Prisma.MaterialUncheckedCreateNestedManyWithoutTenantInput> = z.object({
  create: z.union([ z.lazy(() => MaterialCreateWithoutTenantInputSchema),z.lazy(() => MaterialCreateWithoutTenantInputSchema).array(),z.lazy(() => MaterialUncheckedCreateWithoutTenantInputSchema),z.lazy(() => MaterialUncheckedCreateWithoutTenantInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => MaterialCreateOrConnectWithoutTenantInputSchema),z.lazy(() => MaterialCreateOrConnectWithoutTenantInputSchema).array() ]).optional(),
  createMany: z.lazy(() => MaterialCreateManyTenantInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => MaterialWhereUniqueInputSchema),z.lazy(() => MaterialWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const EventUncheckedCreateNestedManyWithoutTenantInputSchema: z.ZodType<Prisma.EventUncheckedCreateNestedManyWithoutTenantInput> = z.object({
  create: z.union([ z.lazy(() => EventCreateWithoutTenantInputSchema),z.lazy(() => EventCreateWithoutTenantInputSchema).array(),z.lazy(() => EventUncheckedCreateWithoutTenantInputSchema),z.lazy(() => EventUncheckedCreateWithoutTenantInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => EventCreateOrConnectWithoutTenantInputSchema),z.lazy(() => EventCreateOrConnectWithoutTenantInputSchema).array() ]).optional(),
  createMany: z.lazy(() => EventCreateManyTenantInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => EventWhereUniqueInputSchema),z.lazy(() => EventWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const FileUncheckedCreateNestedManyWithoutTenantInputSchema: z.ZodType<Prisma.FileUncheckedCreateNestedManyWithoutTenantInput> = z.object({
  create: z.union([ z.lazy(() => FileCreateWithoutTenantInputSchema),z.lazy(() => FileCreateWithoutTenantInputSchema).array(),z.lazy(() => FileUncheckedCreateWithoutTenantInputSchema),z.lazy(() => FileUncheckedCreateWithoutTenantInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => FileCreateOrConnectWithoutTenantInputSchema),z.lazy(() => FileCreateOrConnectWithoutTenantInputSchema).array() ]).optional(),
  createMany: z.lazy(() => FileCreateManyTenantInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => FileWhereUniqueInputSchema),z.lazy(() => FileWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const StringFieldUpdateOperationsInputSchema: z.ZodType<Prisma.StringFieldUpdateOperationsInput> = z.object({
  set: z.string().optional()
}).strict();

export const NullableDateTimeFieldUpdateOperationsInputSchema: z.ZodType<Prisma.NullableDateTimeFieldUpdateOperationsInput> = z.object({
  set: z.coerce.date().optional().nullable()
}).strict();

export const DateTimeFieldUpdateOperationsInputSchema: z.ZodType<Prisma.DateTimeFieldUpdateOperationsInput> = z.object({
  set: z.coerce.date().optional()
}).strict();

export const UserUpdateManyWithoutTenantNestedInputSchema: z.ZodType<Prisma.UserUpdateManyWithoutTenantNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutTenantInputSchema),z.lazy(() => UserCreateWithoutTenantInputSchema).array(),z.lazy(() => UserUncheckedCreateWithoutTenantInputSchema),z.lazy(() => UserUncheckedCreateWithoutTenantInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => UserCreateOrConnectWithoutTenantInputSchema),z.lazy(() => UserCreateOrConnectWithoutTenantInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => UserUpsertWithWhereUniqueWithoutTenantInputSchema),z.lazy(() => UserUpsertWithWhereUniqueWithoutTenantInputSchema).array() ]).optional(),
  createMany: z.lazy(() => UserCreateManyTenantInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => UserWhereUniqueInputSchema),z.lazy(() => UserWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => UserWhereUniqueInputSchema),z.lazy(() => UserWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => UserWhereUniqueInputSchema),z.lazy(() => UserWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => UserWhereUniqueInputSchema),z.lazy(() => UserWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => UserUpdateWithWhereUniqueWithoutTenantInputSchema),z.lazy(() => UserUpdateWithWhereUniqueWithoutTenantInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => UserUpdateManyWithWhereWithoutTenantInputSchema),z.lazy(() => UserUpdateManyWithWhereWithoutTenantInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => UserScalarWhereInputSchema),z.lazy(() => UserScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const TenantProfileUpdateOneRequiredWithoutTenantNestedInputSchema: z.ZodType<Prisma.TenantProfileUpdateOneRequiredWithoutTenantNestedInput> = z.object({
  create: z.union([ z.lazy(() => TenantProfileCreateWithoutTenantInputSchema),z.lazy(() => TenantProfileUncheckedCreateWithoutTenantInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => TenantProfileCreateOrConnectWithoutTenantInputSchema).optional(),
  upsert: z.lazy(() => TenantProfileUpsertWithoutTenantInputSchema).optional(),
  connect: z.lazy(() => TenantProfileWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => TenantProfileUpdateToOneWithWhereWithoutTenantInputSchema),z.lazy(() => TenantProfileUpdateWithoutTenantInputSchema),z.lazy(() => TenantProfileUncheckedUpdateWithoutTenantInputSchema) ]).optional(),
}).strict();

export const SpecialityUpdateManyWithoutTenantNestedInputSchema: z.ZodType<Prisma.SpecialityUpdateManyWithoutTenantNestedInput> = z.object({
  create: z.union([ z.lazy(() => SpecialityCreateWithoutTenantInputSchema),z.lazy(() => SpecialityCreateWithoutTenantInputSchema).array(),z.lazy(() => SpecialityUncheckedCreateWithoutTenantInputSchema),z.lazy(() => SpecialityUncheckedCreateWithoutTenantInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => SpecialityCreateOrConnectWithoutTenantInputSchema),z.lazy(() => SpecialityCreateOrConnectWithoutTenantInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => SpecialityUpsertWithWhereUniqueWithoutTenantInputSchema),z.lazy(() => SpecialityUpsertWithWhereUniqueWithoutTenantInputSchema).array() ]).optional(),
  createMany: z.lazy(() => SpecialityCreateManyTenantInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => SpecialityWhereUniqueInputSchema),z.lazy(() => SpecialityWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => SpecialityWhereUniqueInputSchema),z.lazy(() => SpecialityWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => SpecialityWhereUniqueInputSchema),z.lazy(() => SpecialityWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => SpecialityWhereUniqueInputSchema),z.lazy(() => SpecialityWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => SpecialityUpdateWithWhereUniqueWithoutTenantInputSchema),z.lazy(() => SpecialityUpdateWithWhereUniqueWithoutTenantInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => SpecialityUpdateManyWithWhereWithoutTenantInputSchema),z.lazy(() => SpecialityUpdateManyWithWhereWithoutTenantInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => SpecialityScalarWhereInputSchema),z.lazy(() => SpecialityScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ProfileUpdateManyWithoutPreferredTenantNestedInputSchema: z.ZodType<Prisma.ProfileUpdateManyWithoutPreferredTenantNestedInput> = z.object({
  create: z.union([ z.lazy(() => ProfileCreateWithoutPreferredTenantInputSchema),z.lazy(() => ProfileCreateWithoutPreferredTenantInputSchema).array(),z.lazy(() => ProfileUncheckedCreateWithoutPreferredTenantInputSchema),z.lazy(() => ProfileUncheckedCreateWithoutPreferredTenantInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ProfileCreateOrConnectWithoutPreferredTenantInputSchema),z.lazy(() => ProfileCreateOrConnectWithoutPreferredTenantInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ProfileUpsertWithWhereUniqueWithoutPreferredTenantInputSchema),z.lazy(() => ProfileUpsertWithWhereUniqueWithoutPreferredTenantInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ProfileCreateManyPreferredTenantInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ProfileWhereUniqueInputSchema),z.lazy(() => ProfileWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ProfileWhereUniqueInputSchema),z.lazy(() => ProfileWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ProfileWhereUniqueInputSchema),z.lazy(() => ProfileWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ProfileWhereUniqueInputSchema),z.lazy(() => ProfileWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ProfileUpdateWithWhereUniqueWithoutPreferredTenantInputSchema),z.lazy(() => ProfileUpdateWithWhereUniqueWithoutPreferredTenantInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ProfileUpdateManyWithWhereWithoutPreferredTenantInputSchema),z.lazy(() => ProfileUpdateManyWithWhereWithoutPreferredTenantInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ProfileScalarWhereInputSchema),z.lazy(() => ProfileScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const PatientUpdateManyWithoutTenantNestedInputSchema: z.ZodType<Prisma.PatientUpdateManyWithoutTenantNestedInput> = z.object({
  create: z.union([ z.lazy(() => PatientCreateWithoutTenantInputSchema),z.lazy(() => PatientCreateWithoutTenantInputSchema).array(),z.lazy(() => PatientUncheckedCreateWithoutTenantInputSchema),z.lazy(() => PatientUncheckedCreateWithoutTenantInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => PatientCreateOrConnectWithoutTenantInputSchema),z.lazy(() => PatientCreateOrConnectWithoutTenantInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => PatientUpsertWithWhereUniqueWithoutTenantInputSchema),z.lazy(() => PatientUpsertWithWhereUniqueWithoutTenantInputSchema).array() ]).optional(),
  createMany: z.lazy(() => PatientCreateManyTenantInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => PatientWhereUniqueInputSchema),z.lazy(() => PatientWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => PatientWhereUniqueInputSchema),z.lazy(() => PatientWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => PatientWhereUniqueInputSchema),z.lazy(() => PatientWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => PatientWhereUniqueInputSchema),z.lazy(() => PatientWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => PatientUpdateWithWhereUniqueWithoutTenantInputSchema),z.lazy(() => PatientUpdateWithWhereUniqueWithoutTenantInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => PatientUpdateManyWithWhereWithoutTenantInputSchema),z.lazy(() => PatientUpdateManyWithWhereWithoutTenantInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => PatientScalarWhereInputSchema),z.lazy(() => PatientScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ServiceUpdateManyWithoutTenantNestedInputSchema: z.ZodType<Prisma.ServiceUpdateManyWithoutTenantNestedInput> = z.object({
  create: z.union([ z.lazy(() => ServiceCreateWithoutTenantInputSchema),z.lazy(() => ServiceCreateWithoutTenantInputSchema).array(),z.lazy(() => ServiceUncheckedCreateWithoutTenantInputSchema),z.lazy(() => ServiceUncheckedCreateWithoutTenantInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ServiceCreateOrConnectWithoutTenantInputSchema),z.lazy(() => ServiceCreateOrConnectWithoutTenantInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ServiceUpsertWithWhereUniqueWithoutTenantInputSchema),z.lazy(() => ServiceUpsertWithWhereUniqueWithoutTenantInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ServiceCreateManyTenantInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ServiceWhereUniqueInputSchema),z.lazy(() => ServiceWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ServiceWhereUniqueInputSchema),z.lazy(() => ServiceWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ServiceWhereUniqueInputSchema),z.lazy(() => ServiceWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ServiceWhereUniqueInputSchema),z.lazy(() => ServiceWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ServiceUpdateWithWhereUniqueWithoutTenantInputSchema),z.lazy(() => ServiceUpdateWithWhereUniqueWithoutTenantInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ServiceUpdateManyWithWhereWithoutTenantInputSchema),z.lazy(() => ServiceUpdateManyWithWhereWithoutTenantInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ServiceScalarWhereInputSchema),z.lazy(() => ServiceScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const MaterialUpdateManyWithoutTenantNestedInputSchema: z.ZodType<Prisma.MaterialUpdateManyWithoutTenantNestedInput> = z.object({
  create: z.union([ z.lazy(() => MaterialCreateWithoutTenantInputSchema),z.lazy(() => MaterialCreateWithoutTenantInputSchema).array(),z.lazy(() => MaterialUncheckedCreateWithoutTenantInputSchema),z.lazy(() => MaterialUncheckedCreateWithoutTenantInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => MaterialCreateOrConnectWithoutTenantInputSchema),z.lazy(() => MaterialCreateOrConnectWithoutTenantInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => MaterialUpsertWithWhereUniqueWithoutTenantInputSchema),z.lazy(() => MaterialUpsertWithWhereUniqueWithoutTenantInputSchema).array() ]).optional(),
  createMany: z.lazy(() => MaterialCreateManyTenantInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => MaterialWhereUniqueInputSchema),z.lazy(() => MaterialWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => MaterialWhereUniqueInputSchema),z.lazy(() => MaterialWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => MaterialWhereUniqueInputSchema),z.lazy(() => MaterialWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => MaterialWhereUniqueInputSchema),z.lazy(() => MaterialWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => MaterialUpdateWithWhereUniqueWithoutTenantInputSchema),z.lazy(() => MaterialUpdateWithWhereUniqueWithoutTenantInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => MaterialUpdateManyWithWhereWithoutTenantInputSchema),z.lazy(() => MaterialUpdateManyWithWhereWithoutTenantInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => MaterialScalarWhereInputSchema),z.lazy(() => MaterialScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const EventUpdateManyWithoutTenantNestedInputSchema: z.ZodType<Prisma.EventUpdateManyWithoutTenantNestedInput> = z.object({
  create: z.union([ z.lazy(() => EventCreateWithoutTenantInputSchema),z.lazy(() => EventCreateWithoutTenantInputSchema).array(),z.lazy(() => EventUncheckedCreateWithoutTenantInputSchema),z.lazy(() => EventUncheckedCreateWithoutTenantInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => EventCreateOrConnectWithoutTenantInputSchema),z.lazy(() => EventCreateOrConnectWithoutTenantInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => EventUpsertWithWhereUniqueWithoutTenantInputSchema),z.lazy(() => EventUpsertWithWhereUniqueWithoutTenantInputSchema).array() ]).optional(),
  createMany: z.lazy(() => EventCreateManyTenantInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => EventWhereUniqueInputSchema),z.lazy(() => EventWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => EventWhereUniqueInputSchema),z.lazy(() => EventWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => EventWhereUniqueInputSchema),z.lazy(() => EventWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => EventWhereUniqueInputSchema),z.lazy(() => EventWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => EventUpdateWithWhereUniqueWithoutTenantInputSchema),z.lazy(() => EventUpdateWithWhereUniqueWithoutTenantInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => EventUpdateManyWithWhereWithoutTenantInputSchema),z.lazy(() => EventUpdateManyWithWhereWithoutTenantInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => EventScalarWhereInputSchema),z.lazy(() => EventScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const FileUpdateManyWithoutTenantNestedInputSchema: z.ZodType<Prisma.FileUpdateManyWithoutTenantNestedInput> = z.object({
  create: z.union([ z.lazy(() => FileCreateWithoutTenantInputSchema),z.lazy(() => FileCreateWithoutTenantInputSchema).array(),z.lazy(() => FileUncheckedCreateWithoutTenantInputSchema),z.lazy(() => FileUncheckedCreateWithoutTenantInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => FileCreateOrConnectWithoutTenantInputSchema),z.lazy(() => FileCreateOrConnectWithoutTenantInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => FileUpsertWithWhereUniqueWithoutTenantInputSchema),z.lazy(() => FileUpsertWithWhereUniqueWithoutTenantInputSchema).array() ]).optional(),
  createMany: z.lazy(() => FileCreateManyTenantInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => FileWhereUniqueInputSchema),z.lazy(() => FileWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => FileWhereUniqueInputSchema),z.lazy(() => FileWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => FileWhereUniqueInputSchema),z.lazy(() => FileWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => FileWhereUniqueInputSchema),z.lazy(() => FileWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => FileUpdateWithWhereUniqueWithoutTenantInputSchema),z.lazy(() => FileUpdateWithWhereUniqueWithoutTenantInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => FileUpdateManyWithWhereWithoutTenantInputSchema),z.lazy(() => FileUpdateManyWithWhereWithoutTenantInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => FileScalarWhereInputSchema),z.lazy(() => FileScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const UserUncheckedUpdateManyWithoutTenantNestedInputSchema: z.ZodType<Prisma.UserUncheckedUpdateManyWithoutTenantNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutTenantInputSchema),z.lazy(() => UserCreateWithoutTenantInputSchema).array(),z.lazy(() => UserUncheckedCreateWithoutTenantInputSchema),z.lazy(() => UserUncheckedCreateWithoutTenantInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => UserCreateOrConnectWithoutTenantInputSchema),z.lazy(() => UserCreateOrConnectWithoutTenantInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => UserUpsertWithWhereUniqueWithoutTenantInputSchema),z.lazy(() => UserUpsertWithWhereUniqueWithoutTenantInputSchema).array() ]).optional(),
  createMany: z.lazy(() => UserCreateManyTenantInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => UserWhereUniqueInputSchema),z.lazy(() => UserWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => UserWhereUniqueInputSchema),z.lazy(() => UserWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => UserWhereUniqueInputSchema),z.lazy(() => UserWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => UserWhereUniqueInputSchema),z.lazy(() => UserWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => UserUpdateWithWhereUniqueWithoutTenantInputSchema),z.lazy(() => UserUpdateWithWhereUniqueWithoutTenantInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => UserUpdateManyWithWhereWithoutTenantInputSchema),z.lazy(() => UserUpdateManyWithWhereWithoutTenantInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => UserScalarWhereInputSchema),z.lazy(() => UserScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const SpecialityUncheckedUpdateManyWithoutTenantNestedInputSchema: z.ZodType<Prisma.SpecialityUncheckedUpdateManyWithoutTenantNestedInput> = z.object({
  create: z.union([ z.lazy(() => SpecialityCreateWithoutTenantInputSchema),z.lazy(() => SpecialityCreateWithoutTenantInputSchema).array(),z.lazy(() => SpecialityUncheckedCreateWithoutTenantInputSchema),z.lazy(() => SpecialityUncheckedCreateWithoutTenantInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => SpecialityCreateOrConnectWithoutTenantInputSchema),z.lazy(() => SpecialityCreateOrConnectWithoutTenantInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => SpecialityUpsertWithWhereUniqueWithoutTenantInputSchema),z.lazy(() => SpecialityUpsertWithWhereUniqueWithoutTenantInputSchema).array() ]).optional(),
  createMany: z.lazy(() => SpecialityCreateManyTenantInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => SpecialityWhereUniqueInputSchema),z.lazy(() => SpecialityWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => SpecialityWhereUniqueInputSchema),z.lazy(() => SpecialityWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => SpecialityWhereUniqueInputSchema),z.lazy(() => SpecialityWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => SpecialityWhereUniqueInputSchema),z.lazy(() => SpecialityWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => SpecialityUpdateWithWhereUniqueWithoutTenantInputSchema),z.lazy(() => SpecialityUpdateWithWhereUniqueWithoutTenantInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => SpecialityUpdateManyWithWhereWithoutTenantInputSchema),z.lazy(() => SpecialityUpdateManyWithWhereWithoutTenantInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => SpecialityScalarWhereInputSchema),z.lazy(() => SpecialityScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ProfileUncheckedUpdateManyWithoutPreferredTenantNestedInputSchema: z.ZodType<Prisma.ProfileUncheckedUpdateManyWithoutPreferredTenantNestedInput> = z.object({
  create: z.union([ z.lazy(() => ProfileCreateWithoutPreferredTenantInputSchema),z.lazy(() => ProfileCreateWithoutPreferredTenantInputSchema).array(),z.lazy(() => ProfileUncheckedCreateWithoutPreferredTenantInputSchema),z.lazy(() => ProfileUncheckedCreateWithoutPreferredTenantInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ProfileCreateOrConnectWithoutPreferredTenantInputSchema),z.lazy(() => ProfileCreateOrConnectWithoutPreferredTenantInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ProfileUpsertWithWhereUniqueWithoutPreferredTenantInputSchema),z.lazy(() => ProfileUpsertWithWhereUniqueWithoutPreferredTenantInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ProfileCreateManyPreferredTenantInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ProfileWhereUniqueInputSchema),z.lazy(() => ProfileWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ProfileWhereUniqueInputSchema),z.lazy(() => ProfileWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ProfileWhereUniqueInputSchema),z.lazy(() => ProfileWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ProfileWhereUniqueInputSchema),z.lazy(() => ProfileWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ProfileUpdateWithWhereUniqueWithoutPreferredTenantInputSchema),z.lazy(() => ProfileUpdateWithWhereUniqueWithoutPreferredTenantInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ProfileUpdateManyWithWhereWithoutPreferredTenantInputSchema),z.lazy(() => ProfileUpdateManyWithWhereWithoutPreferredTenantInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ProfileScalarWhereInputSchema),z.lazy(() => ProfileScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const PatientUncheckedUpdateManyWithoutTenantNestedInputSchema: z.ZodType<Prisma.PatientUncheckedUpdateManyWithoutTenantNestedInput> = z.object({
  create: z.union([ z.lazy(() => PatientCreateWithoutTenantInputSchema),z.lazy(() => PatientCreateWithoutTenantInputSchema).array(),z.lazy(() => PatientUncheckedCreateWithoutTenantInputSchema),z.lazy(() => PatientUncheckedCreateWithoutTenantInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => PatientCreateOrConnectWithoutTenantInputSchema),z.lazy(() => PatientCreateOrConnectWithoutTenantInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => PatientUpsertWithWhereUniqueWithoutTenantInputSchema),z.lazy(() => PatientUpsertWithWhereUniqueWithoutTenantInputSchema).array() ]).optional(),
  createMany: z.lazy(() => PatientCreateManyTenantInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => PatientWhereUniqueInputSchema),z.lazy(() => PatientWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => PatientWhereUniqueInputSchema),z.lazy(() => PatientWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => PatientWhereUniqueInputSchema),z.lazy(() => PatientWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => PatientWhereUniqueInputSchema),z.lazy(() => PatientWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => PatientUpdateWithWhereUniqueWithoutTenantInputSchema),z.lazy(() => PatientUpdateWithWhereUniqueWithoutTenantInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => PatientUpdateManyWithWhereWithoutTenantInputSchema),z.lazy(() => PatientUpdateManyWithWhereWithoutTenantInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => PatientScalarWhereInputSchema),z.lazy(() => PatientScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ServiceUncheckedUpdateManyWithoutTenantNestedInputSchema: z.ZodType<Prisma.ServiceUncheckedUpdateManyWithoutTenantNestedInput> = z.object({
  create: z.union([ z.lazy(() => ServiceCreateWithoutTenantInputSchema),z.lazy(() => ServiceCreateWithoutTenantInputSchema).array(),z.lazy(() => ServiceUncheckedCreateWithoutTenantInputSchema),z.lazy(() => ServiceUncheckedCreateWithoutTenantInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ServiceCreateOrConnectWithoutTenantInputSchema),z.lazy(() => ServiceCreateOrConnectWithoutTenantInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ServiceUpsertWithWhereUniqueWithoutTenantInputSchema),z.lazy(() => ServiceUpsertWithWhereUniqueWithoutTenantInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ServiceCreateManyTenantInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ServiceWhereUniqueInputSchema),z.lazy(() => ServiceWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ServiceWhereUniqueInputSchema),z.lazy(() => ServiceWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ServiceWhereUniqueInputSchema),z.lazy(() => ServiceWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ServiceWhereUniqueInputSchema),z.lazy(() => ServiceWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ServiceUpdateWithWhereUniqueWithoutTenantInputSchema),z.lazy(() => ServiceUpdateWithWhereUniqueWithoutTenantInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ServiceUpdateManyWithWhereWithoutTenantInputSchema),z.lazy(() => ServiceUpdateManyWithWhereWithoutTenantInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ServiceScalarWhereInputSchema),z.lazy(() => ServiceScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const MaterialUncheckedUpdateManyWithoutTenantNestedInputSchema: z.ZodType<Prisma.MaterialUncheckedUpdateManyWithoutTenantNestedInput> = z.object({
  create: z.union([ z.lazy(() => MaterialCreateWithoutTenantInputSchema),z.lazy(() => MaterialCreateWithoutTenantInputSchema).array(),z.lazy(() => MaterialUncheckedCreateWithoutTenantInputSchema),z.lazy(() => MaterialUncheckedCreateWithoutTenantInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => MaterialCreateOrConnectWithoutTenantInputSchema),z.lazy(() => MaterialCreateOrConnectWithoutTenantInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => MaterialUpsertWithWhereUniqueWithoutTenantInputSchema),z.lazy(() => MaterialUpsertWithWhereUniqueWithoutTenantInputSchema).array() ]).optional(),
  createMany: z.lazy(() => MaterialCreateManyTenantInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => MaterialWhereUniqueInputSchema),z.lazy(() => MaterialWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => MaterialWhereUniqueInputSchema),z.lazy(() => MaterialWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => MaterialWhereUniqueInputSchema),z.lazy(() => MaterialWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => MaterialWhereUniqueInputSchema),z.lazy(() => MaterialWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => MaterialUpdateWithWhereUniqueWithoutTenantInputSchema),z.lazy(() => MaterialUpdateWithWhereUniqueWithoutTenantInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => MaterialUpdateManyWithWhereWithoutTenantInputSchema),z.lazy(() => MaterialUpdateManyWithWhereWithoutTenantInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => MaterialScalarWhereInputSchema),z.lazy(() => MaterialScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const EventUncheckedUpdateManyWithoutTenantNestedInputSchema: z.ZodType<Prisma.EventUncheckedUpdateManyWithoutTenantNestedInput> = z.object({
  create: z.union([ z.lazy(() => EventCreateWithoutTenantInputSchema),z.lazy(() => EventCreateWithoutTenantInputSchema).array(),z.lazy(() => EventUncheckedCreateWithoutTenantInputSchema),z.lazy(() => EventUncheckedCreateWithoutTenantInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => EventCreateOrConnectWithoutTenantInputSchema),z.lazy(() => EventCreateOrConnectWithoutTenantInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => EventUpsertWithWhereUniqueWithoutTenantInputSchema),z.lazy(() => EventUpsertWithWhereUniqueWithoutTenantInputSchema).array() ]).optional(),
  createMany: z.lazy(() => EventCreateManyTenantInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => EventWhereUniqueInputSchema),z.lazy(() => EventWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => EventWhereUniqueInputSchema),z.lazy(() => EventWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => EventWhereUniqueInputSchema),z.lazy(() => EventWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => EventWhereUniqueInputSchema),z.lazy(() => EventWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => EventUpdateWithWhereUniqueWithoutTenantInputSchema),z.lazy(() => EventUpdateWithWhereUniqueWithoutTenantInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => EventUpdateManyWithWhereWithoutTenantInputSchema),z.lazy(() => EventUpdateManyWithWhereWithoutTenantInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => EventScalarWhereInputSchema),z.lazy(() => EventScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const FileUncheckedUpdateManyWithoutTenantNestedInputSchema: z.ZodType<Prisma.FileUncheckedUpdateManyWithoutTenantNestedInput> = z.object({
  create: z.union([ z.lazy(() => FileCreateWithoutTenantInputSchema),z.lazy(() => FileCreateWithoutTenantInputSchema).array(),z.lazy(() => FileUncheckedCreateWithoutTenantInputSchema),z.lazy(() => FileUncheckedCreateWithoutTenantInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => FileCreateOrConnectWithoutTenantInputSchema),z.lazy(() => FileCreateOrConnectWithoutTenantInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => FileUpsertWithWhereUniqueWithoutTenantInputSchema),z.lazy(() => FileUpsertWithWhereUniqueWithoutTenantInputSchema).array() ]).optional(),
  createMany: z.lazy(() => FileCreateManyTenantInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => FileWhereUniqueInputSchema),z.lazy(() => FileWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => FileWhereUniqueInputSchema),z.lazy(() => FileWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => FileWhereUniqueInputSchema),z.lazy(() => FileWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => FileWhereUniqueInputSchema),z.lazy(() => FileWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => FileUpdateWithWhereUniqueWithoutTenantInputSchema),z.lazy(() => FileUpdateWithWhereUniqueWithoutTenantInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => FileUpdateManyWithWhereWithoutTenantInputSchema),z.lazy(() => FileUpdateManyWithWhereWithoutTenantInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => FileScalarWhereInputSchema),z.lazy(() => FileScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const AvatarCreateNestedOneWithoutTenantProfileInputSchema: z.ZodType<Prisma.AvatarCreateNestedOneWithoutTenantProfileInput> = z.object({
  create: z.union([ z.lazy(() => AvatarCreateWithoutTenantProfileInputSchema),z.lazy(() => AvatarUncheckedCreateWithoutTenantProfileInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => AvatarCreateOrConnectWithoutTenantProfileInputSchema).optional(),
  connect: z.lazy(() => AvatarWhereUniqueInputSchema).optional()
}).strict();

export const PlanCreateNestedOneWithoutTenantProfilesInputSchema: z.ZodType<Prisma.PlanCreateNestedOneWithoutTenantProfilesInput> = z.object({
  create: z.union([ z.lazy(() => PlanCreateWithoutTenantProfilesInputSchema),z.lazy(() => PlanUncheckedCreateWithoutTenantProfilesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => PlanCreateOrConnectWithoutTenantProfilesInputSchema).optional(),
  connect: z.lazy(() => PlanWhereUniqueInputSchema).optional()
}).strict();

export const TenantCreateNestedOneWithoutProfileInputSchema: z.ZodType<Prisma.TenantCreateNestedOneWithoutProfileInput> = z.object({
  create: z.union([ z.lazy(() => TenantCreateWithoutProfileInputSchema),z.lazy(() => TenantUncheckedCreateWithoutProfileInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => TenantCreateOrConnectWithoutProfileInputSchema).optional(),
  connect: z.lazy(() => TenantWhereUniqueInputSchema).optional()
}).strict();

export const AvatarUncheckedCreateNestedOneWithoutTenantProfileInputSchema: z.ZodType<Prisma.AvatarUncheckedCreateNestedOneWithoutTenantProfileInput> = z.object({
  create: z.union([ z.lazy(() => AvatarCreateWithoutTenantProfileInputSchema),z.lazy(() => AvatarUncheckedCreateWithoutTenantProfileInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => AvatarCreateOrConnectWithoutTenantProfileInputSchema).optional(),
  connect: z.lazy(() => AvatarWhereUniqueInputSchema).optional()
}).strict();

export const TenantUncheckedCreateNestedOneWithoutProfileInputSchema: z.ZodType<Prisma.TenantUncheckedCreateNestedOneWithoutProfileInput> = z.object({
  create: z.union([ z.lazy(() => TenantCreateWithoutProfileInputSchema),z.lazy(() => TenantUncheckedCreateWithoutProfileInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => TenantCreateOrConnectWithoutProfileInputSchema).optional(),
  connect: z.lazy(() => TenantWhereUniqueInputSchema).optional()
}).strict();

export const NullableStringFieldUpdateOperationsInputSchema: z.ZodType<Prisma.NullableStringFieldUpdateOperationsInput> = z.object({
  set: z.string().optional().nullable()
}).strict();

export const BoolFieldUpdateOperationsInputSchema: z.ZodType<Prisma.BoolFieldUpdateOperationsInput> = z.object({
  set: z.boolean().optional()
}).strict();

export const AvatarUpdateOneWithoutTenantProfileNestedInputSchema: z.ZodType<Prisma.AvatarUpdateOneWithoutTenantProfileNestedInput> = z.object({
  create: z.union([ z.lazy(() => AvatarCreateWithoutTenantProfileInputSchema),z.lazy(() => AvatarUncheckedCreateWithoutTenantProfileInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => AvatarCreateOrConnectWithoutTenantProfileInputSchema).optional(),
  upsert: z.lazy(() => AvatarUpsertWithoutTenantProfileInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => AvatarWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => AvatarWhereInputSchema) ]).optional(),
  connect: z.lazy(() => AvatarWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => AvatarUpdateToOneWithWhereWithoutTenantProfileInputSchema),z.lazy(() => AvatarUpdateWithoutTenantProfileInputSchema),z.lazy(() => AvatarUncheckedUpdateWithoutTenantProfileInputSchema) ]).optional(),
}).strict();

export const PlanUpdateOneRequiredWithoutTenantProfilesNestedInputSchema: z.ZodType<Prisma.PlanUpdateOneRequiredWithoutTenantProfilesNestedInput> = z.object({
  create: z.union([ z.lazy(() => PlanCreateWithoutTenantProfilesInputSchema),z.lazy(() => PlanUncheckedCreateWithoutTenantProfilesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => PlanCreateOrConnectWithoutTenantProfilesInputSchema).optional(),
  upsert: z.lazy(() => PlanUpsertWithoutTenantProfilesInputSchema).optional(),
  connect: z.lazy(() => PlanWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => PlanUpdateToOneWithWhereWithoutTenantProfilesInputSchema),z.lazy(() => PlanUpdateWithoutTenantProfilesInputSchema),z.lazy(() => PlanUncheckedUpdateWithoutTenantProfilesInputSchema) ]).optional(),
}).strict();

export const TenantUpdateOneWithoutProfileNestedInputSchema: z.ZodType<Prisma.TenantUpdateOneWithoutProfileNestedInput> = z.object({
  create: z.union([ z.lazy(() => TenantCreateWithoutProfileInputSchema),z.lazy(() => TenantUncheckedCreateWithoutProfileInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => TenantCreateOrConnectWithoutProfileInputSchema).optional(),
  upsert: z.lazy(() => TenantUpsertWithoutProfileInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => TenantWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => TenantWhereInputSchema) ]).optional(),
  connect: z.lazy(() => TenantWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => TenantUpdateToOneWithWhereWithoutProfileInputSchema),z.lazy(() => TenantUpdateWithoutProfileInputSchema),z.lazy(() => TenantUncheckedUpdateWithoutProfileInputSchema) ]).optional(),
}).strict();

export const AvatarUncheckedUpdateOneWithoutTenantProfileNestedInputSchema: z.ZodType<Prisma.AvatarUncheckedUpdateOneWithoutTenantProfileNestedInput> = z.object({
  create: z.union([ z.lazy(() => AvatarCreateWithoutTenantProfileInputSchema),z.lazy(() => AvatarUncheckedCreateWithoutTenantProfileInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => AvatarCreateOrConnectWithoutTenantProfileInputSchema).optional(),
  upsert: z.lazy(() => AvatarUpsertWithoutTenantProfileInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => AvatarWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => AvatarWhereInputSchema) ]).optional(),
  connect: z.lazy(() => AvatarWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => AvatarUpdateToOneWithWhereWithoutTenantProfileInputSchema),z.lazy(() => AvatarUpdateWithoutTenantProfileInputSchema),z.lazy(() => AvatarUncheckedUpdateWithoutTenantProfileInputSchema) ]).optional(),
}).strict();

export const TenantUncheckedUpdateOneWithoutProfileNestedInputSchema: z.ZodType<Prisma.TenantUncheckedUpdateOneWithoutProfileNestedInput> = z.object({
  create: z.union([ z.lazy(() => TenantCreateWithoutProfileInputSchema),z.lazy(() => TenantUncheckedCreateWithoutProfileInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => TenantCreateOrConnectWithoutProfileInputSchema).optional(),
  upsert: z.lazy(() => TenantUpsertWithoutProfileInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => TenantWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => TenantWhereInputSchema) ]).optional(),
  connect: z.lazy(() => TenantWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => TenantUpdateToOneWithWhereWithoutProfileInputSchema),z.lazy(() => TenantUpdateWithoutProfileInputSchema),z.lazy(() => TenantUncheckedUpdateWithoutProfileInputSchema) ]).optional(),
}).strict();

export const SpecialityCreateNestedOneWithoutUsersInputSchema: z.ZodType<Prisma.SpecialityCreateNestedOneWithoutUsersInput> = z.object({
  create: z.union([ z.lazy(() => SpecialityCreateWithoutUsersInputSchema),z.lazy(() => SpecialityUncheckedCreateWithoutUsersInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => SpecialityCreateOrConnectWithoutUsersInputSchema).optional(),
  connect: z.lazy(() => SpecialityWhereUniqueInputSchema).optional()
}).strict();

export const ProfileCreateNestedOneWithoutUsersInputSchema: z.ZodType<Prisma.ProfileCreateNestedOneWithoutUsersInput> = z.object({
  create: z.union([ z.lazy(() => ProfileCreateWithoutUsersInputSchema),z.lazy(() => ProfileUncheckedCreateWithoutUsersInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ProfileCreateOrConnectWithoutUsersInputSchema).optional(),
  connect: z.lazy(() => ProfileWhereUniqueInputSchema).optional()
}).strict();

export const TenantCreateNestedOneWithoutUsersInputSchema: z.ZodType<Prisma.TenantCreateNestedOneWithoutUsersInput> = z.object({
  create: z.union([ z.lazy(() => TenantCreateWithoutUsersInputSchema),z.lazy(() => TenantUncheckedCreateWithoutUsersInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => TenantCreateOrConnectWithoutUsersInputSchema).optional(),
  connect: z.lazy(() => TenantWhereUniqueInputSchema).optional()
}).strict();

export const InvitationCreateNestedOneWithoutUserInputSchema: z.ZodType<Prisma.InvitationCreateNestedOneWithoutUserInput> = z.object({
  create: z.union([ z.lazy(() => InvitationCreateWithoutUserInputSchema),z.lazy(() => InvitationUncheckedCreateWithoutUserInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => InvitationCreateOrConnectWithoutUserInputSchema).optional(),
  connect: z.lazy(() => InvitationWhereUniqueInputSchema).optional()
}).strict();

export const PatientCreateNestedManyWithoutUserInputSchema: z.ZodType<Prisma.PatientCreateNestedManyWithoutUserInput> = z.object({
  create: z.union([ z.lazy(() => PatientCreateWithoutUserInputSchema),z.lazy(() => PatientCreateWithoutUserInputSchema).array(),z.lazy(() => PatientUncheckedCreateWithoutUserInputSchema),z.lazy(() => PatientUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => PatientCreateOrConnectWithoutUserInputSchema),z.lazy(() => PatientCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => PatientCreateManyUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => PatientWhereUniqueInputSchema),z.lazy(() => PatientWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const EventCreateNestedManyWithoutUserInputSchema: z.ZodType<Prisma.EventCreateNestedManyWithoutUserInput> = z.object({
  create: z.union([ z.lazy(() => EventCreateWithoutUserInputSchema),z.lazy(() => EventCreateWithoutUserInputSchema).array(),z.lazy(() => EventUncheckedCreateWithoutUserInputSchema),z.lazy(() => EventUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => EventCreateOrConnectWithoutUserInputSchema),z.lazy(() => EventCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => EventCreateManyUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => EventWhereUniqueInputSchema),z.lazy(() => EventWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const EventActionCreateNestedManyWithoutUserInputSchema: z.ZodType<Prisma.EventActionCreateNestedManyWithoutUserInput> = z.object({
  create: z.union([ z.lazy(() => EventActionCreateWithoutUserInputSchema),z.lazy(() => EventActionCreateWithoutUserInputSchema).array(),z.lazy(() => EventActionUncheckedCreateWithoutUserInputSchema),z.lazy(() => EventActionUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => EventActionCreateOrConnectWithoutUserInputSchema),z.lazy(() => EventActionCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => EventActionCreateManyUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => EventActionWhereUniqueInputSchema),z.lazy(() => EventActionWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const TreatmentPlanCreateNestedManyWithoutUserInputSchema: z.ZodType<Prisma.TreatmentPlanCreateNestedManyWithoutUserInput> = z.object({
  create: z.union([ z.lazy(() => TreatmentPlanCreateWithoutUserInputSchema),z.lazy(() => TreatmentPlanCreateWithoutUserInputSchema).array(),z.lazy(() => TreatmentPlanUncheckedCreateWithoutUserInputSchema),z.lazy(() => TreatmentPlanUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TreatmentPlanCreateOrConnectWithoutUserInputSchema),z.lazy(() => TreatmentPlanCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TreatmentPlanCreateManyUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => TreatmentPlanWhereUniqueInputSchema),z.lazy(() => TreatmentPlanWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const InvitationCreateNestedManyWithoutInvitedByInputSchema: z.ZodType<Prisma.InvitationCreateNestedManyWithoutInvitedByInput> = z.object({
  create: z.union([ z.lazy(() => InvitationCreateWithoutInvitedByInputSchema),z.lazy(() => InvitationCreateWithoutInvitedByInputSchema).array(),z.lazy(() => InvitationUncheckedCreateWithoutInvitedByInputSchema),z.lazy(() => InvitationUncheckedCreateWithoutInvitedByInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => InvitationCreateOrConnectWithoutInvitedByInputSchema),z.lazy(() => InvitationCreateOrConnectWithoutInvitedByInputSchema).array() ]).optional(),
  createMany: z.lazy(() => InvitationCreateManyInvitedByInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => InvitationWhereUniqueInputSchema),z.lazy(() => InvitationWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const FileCreateNestedManyWithoutUserInputSchema: z.ZodType<Prisma.FileCreateNestedManyWithoutUserInput> = z.object({
  create: z.union([ z.lazy(() => FileCreateWithoutUserInputSchema),z.lazy(() => FileCreateWithoutUserInputSchema).array(),z.lazy(() => FileUncheckedCreateWithoutUserInputSchema),z.lazy(() => FileUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => FileCreateOrConnectWithoutUserInputSchema),z.lazy(() => FileCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => FileCreateManyUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => FileWhereUniqueInputSchema),z.lazy(() => FileWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const TaskCreateNestedManyWithoutUserInputSchema: z.ZodType<Prisma.TaskCreateNestedManyWithoutUserInput> = z.object({
  create: z.union([ z.lazy(() => TaskCreateWithoutUserInputSchema),z.lazy(() => TaskCreateWithoutUserInputSchema).array(),z.lazy(() => TaskUncheckedCreateWithoutUserInputSchema),z.lazy(() => TaskUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TaskCreateOrConnectWithoutUserInputSchema),z.lazy(() => TaskCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TaskCreateManyUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => TaskWhereUniqueInputSchema),z.lazy(() => TaskWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const InvitationUncheckedCreateNestedOneWithoutUserInputSchema: z.ZodType<Prisma.InvitationUncheckedCreateNestedOneWithoutUserInput> = z.object({
  create: z.union([ z.lazy(() => InvitationCreateWithoutUserInputSchema),z.lazy(() => InvitationUncheckedCreateWithoutUserInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => InvitationCreateOrConnectWithoutUserInputSchema).optional(),
  connect: z.lazy(() => InvitationWhereUniqueInputSchema).optional()
}).strict();

export const PatientUncheckedCreateNestedManyWithoutUserInputSchema: z.ZodType<Prisma.PatientUncheckedCreateNestedManyWithoutUserInput> = z.object({
  create: z.union([ z.lazy(() => PatientCreateWithoutUserInputSchema),z.lazy(() => PatientCreateWithoutUserInputSchema).array(),z.lazy(() => PatientUncheckedCreateWithoutUserInputSchema),z.lazy(() => PatientUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => PatientCreateOrConnectWithoutUserInputSchema),z.lazy(() => PatientCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => PatientCreateManyUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => PatientWhereUniqueInputSchema),z.lazy(() => PatientWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const EventUncheckedCreateNestedManyWithoutUserInputSchema: z.ZodType<Prisma.EventUncheckedCreateNestedManyWithoutUserInput> = z.object({
  create: z.union([ z.lazy(() => EventCreateWithoutUserInputSchema),z.lazy(() => EventCreateWithoutUserInputSchema).array(),z.lazy(() => EventUncheckedCreateWithoutUserInputSchema),z.lazy(() => EventUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => EventCreateOrConnectWithoutUserInputSchema),z.lazy(() => EventCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => EventCreateManyUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => EventWhereUniqueInputSchema),z.lazy(() => EventWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const EventActionUncheckedCreateNestedManyWithoutUserInputSchema: z.ZodType<Prisma.EventActionUncheckedCreateNestedManyWithoutUserInput> = z.object({
  create: z.union([ z.lazy(() => EventActionCreateWithoutUserInputSchema),z.lazy(() => EventActionCreateWithoutUserInputSchema).array(),z.lazy(() => EventActionUncheckedCreateWithoutUserInputSchema),z.lazy(() => EventActionUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => EventActionCreateOrConnectWithoutUserInputSchema),z.lazy(() => EventActionCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => EventActionCreateManyUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => EventActionWhereUniqueInputSchema),z.lazy(() => EventActionWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const TreatmentPlanUncheckedCreateNestedManyWithoutUserInputSchema: z.ZodType<Prisma.TreatmentPlanUncheckedCreateNestedManyWithoutUserInput> = z.object({
  create: z.union([ z.lazy(() => TreatmentPlanCreateWithoutUserInputSchema),z.lazy(() => TreatmentPlanCreateWithoutUserInputSchema).array(),z.lazy(() => TreatmentPlanUncheckedCreateWithoutUserInputSchema),z.lazy(() => TreatmentPlanUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TreatmentPlanCreateOrConnectWithoutUserInputSchema),z.lazy(() => TreatmentPlanCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TreatmentPlanCreateManyUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => TreatmentPlanWhereUniqueInputSchema),z.lazy(() => TreatmentPlanWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const InvitationUncheckedCreateNestedManyWithoutInvitedByInputSchema: z.ZodType<Prisma.InvitationUncheckedCreateNestedManyWithoutInvitedByInput> = z.object({
  create: z.union([ z.lazy(() => InvitationCreateWithoutInvitedByInputSchema),z.lazy(() => InvitationCreateWithoutInvitedByInputSchema).array(),z.lazy(() => InvitationUncheckedCreateWithoutInvitedByInputSchema),z.lazy(() => InvitationUncheckedCreateWithoutInvitedByInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => InvitationCreateOrConnectWithoutInvitedByInputSchema),z.lazy(() => InvitationCreateOrConnectWithoutInvitedByInputSchema).array() ]).optional(),
  createMany: z.lazy(() => InvitationCreateManyInvitedByInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => InvitationWhereUniqueInputSchema),z.lazy(() => InvitationWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const FileUncheckedCreateNestedManyWithoutUserInputSchema: z.ZodType<Prisma.FileUncheckedCreateNestedManyWithoutUserInput> = z.object({
  create: z.union([ z.lazy(() => FileCreateWithoutUserInputSchema),z.lazy(() => FileCreateWithoutUserInputSchema).array(),z.lazy(() => FileUncheckedCreateWithoutUserInputSchema),z.lazy(() => FileUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => FileCreateOrConnectWithoutUserInputSchema),z.lazy(() => FileCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => FileCreateManyUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => FileWhereUniqueInputSchema),z.lazy(() => FileWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const TaskUncheckedCreateNestedManyWithoutUserInputSchema: z.ZodType<Prisma.TaskUncheckedCreateNestedManyWithoutUserInput> = z.object({
  create: z.union([ z.lazy(() => TaskCreateWithoutUserInputSchema),z.lazy(() => TaskCreateWithoutUserInputSchema).array(),z.lazy(() => TaskUncheckedCreateWithoutUserInputSchema),z.lazy(() => TaskUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TaskCreateOrConnectWithoutUserInputSchema),z.lazy(() => TaskCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TaskCreateManyUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => TaskWhereUniqueInputSchema),z.lazy(() => TaskWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const IntFieldUpdateOperationsInputSchema: z.ZodType<Prisma.IntFieldUpdateOperationsInput> = z.object({
  set: z.number().optional(),
  increment: z.number().optional(),
  decrement: z.number().optional(),
  multiply: z.number().optional(),
  divide: z.number().optional()
}).strict();

export const EnumRoleFieldUpdateOperationsInputSchema: z.ZodType<Prisma.EnumRoleFieldUpdateOperationsInput> = z.object({
  set: z.lazy(() => RoleSchema).optional()
}).strict();

export const EnumDayOfWeekFieldUpdateOperationsInputSchema: z.ZodType<Prisma.EnumDayOfWeekFieldUpdateOperationsInput> = z.object({
  set: z.lazy(() => DayOfWeekSchema).optional()
}).strict();

export const SpecialityUpdateOneWithoutUsersNestedInputSchema: z.ZodType<Prisma.SpecialityUpdateOneWithoutUsersNestedInput> = z.object({
  create: z.union([ z.lazy(() => SpecialityCreateWithoutUsersInputSchema),z.lazy(() => SpecialityUncheckedCreateWithoutUsersInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => SpecialityCreateOrConnectWithoutUsersInputSchema).optional(),
  upsert: z.lazy(() => SpecialityUpsertWithoutUsersInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => SpecialityWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => SpecialityWhereInputSchema) ]).optional(),
  connect: z.lazy(() => SpecialityWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => SpecialityUpdateToOneWithWhereWithoutUsersInputSchema),z.lazy(() => SpecialityUpdateWithoutUsersInputSchema),z.lazy(() => SpecialityUncheckedUpdateWithoutUsersInputSchema) ]).optional(),
}).strict();

export const ProfileUpdateOneRequiredWithoutUsersNestedInputSchema: z.ZodType<Prisma.ProfileUpdateOneRequiredWithoutUsersNestedInput> = z.object({
  create: z.union([ z.lazy(() => ProfileCreateWithoutUsersInputSchema),z.lazy(() => ProfileUncheckedCreateWithoutUsersInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ProfileCreateOrConnectWithoutUsersInputSchema).optional(),
  upsert: z.lazy(() => ProfileUpsertWithoutUsersInputSchema).optional(),
  connect: z.lazy(() => ProfileWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => ProfileUpdateToOneWithWhereWithoutUsersInputSchema),z.lazy(() => ProfileUpdateWithoutUsersInputSchema),z.lazy(() => ProfileUncheckedUpdateWithoutUsersInputSchema) ]).optional(),
}).strict();

export const TenantUpdateOneRequiredWithoutUsersNestedInputSchema: z.ZodType<Prisma.TenantUpdateOneRequiredWithoutUsersNestedInput> = z.object({
  create: z.union([ z.lazy(() => TenantCreateWithoutUsersInputSchema),z.lazy(() => TenantUncheckedCreateWithoutUsersInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => TenantCreateOrConnectWithoutUsersInputSchema).optional(),
  upsert: z.lazy(() => TenantUpsertWithoutUsersInputSchema).optional(),
  connect: z.lazy(() => TenantWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => TenantUpdateToOneWithWhereWithoutUsersInputSchema),z.lazy(() => TenantUpdateWithoutUsersInputSchema),z.lazy(() => TenantUncheckedUpdateWithoutUsersInputSchema) ]).optional(),
}).strict();

export const InvitationUpdateOneWithoutUserNestedInputSchema: z.ZodType<Prisma.InvitationUpdateOneWithoutUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => InvitationCreateWithoutUserInputSchema),z.lazy(() => InvitationUncheckedCreateWithoutUserInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => InvitationCreateOrConnectWithoutUserInputSchema).optional(),
  upsert: z.lazy(() => InvitationUpsertWithoutUserInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => InvitationWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => InvitationWhereInputSchema) ]).optional(),
  connect: z.lazy(() => InvitationWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => InvitationUpdateToOneWithWhereWithoutUserInputSchema),z.lazy(() => InvitationUpdateWithoutUserInputSchema),z.lazy(() => InvitationUncheckedUpdateWithoutUserInputSchema) ]).optional(),
}).strict();

export const PatientUpdateManyWithoutUserNestedInputSchema: z.ZodType<Prisma.PatientUpdateManyWithoutUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => PatientCreateWithoutUserInputSchema),z.lazy(() => PatientCreateWithoutUserInputSchema).array(),z.lazy(() => PatientUncheckedCreateWithoutUserInputSchema),z.lazy(() => PatientUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => PatientCreateOrConnectWithoutUserInputSchema),z.lazy(() => PatientCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => PatientUpsertWithWhereUniqueWithoutUserInputSchema),z.lazy(() => PatientUpsertWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => PatientCreateManyUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => PatientWhereUniqueInputSchema),z.lazy(() => PatientWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => PatientWhereUniqueInputSchema),z.lazy(() => PatientWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => PatientWhereUniqueInputSchema),z.lazy(() => PatientWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => PatientWhereUniqueInputSchema),z.lazy(() => PatientWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => PatientUpdateWithWhereUniqueWithoutUserInputSchema),z.lazy(() => PatientUpdateWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => PatientUpdateManyWithWhereWithoutUserInputSchema),z.lazy(() => PatientUpdateManyWithWhereWithoutUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => PatientScalarWhereInputSchema),z.lazy(() => PatientScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const EventUpdateManyWithoutUserNestedInputSchema: z.ZodType<Prisma.EventUpdateManyWithoutUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => EventCreateWithoutUserInputSchema),z.lazy(() => EventCreateWithoutUserInputSchema).array(),z.lazy(() => EventUncheckedCreateWithoutUserInputSchema),z.lazy(() => EventUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => EventCreateOrConnectWithoutUserInputSchema),z.lazy(() => EventCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => EventUpsertWithWhereUniqueWithoutUserInputSchema),z.lazy(() => EventUpsertWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => EventCreateManyUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => EventWhereUniqueInputSchema),z.lazy(() => EventWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => EventWhereUniqueInputSchema),z.lazy(() => EventWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => EventWhereUniqueInputSchema),z.lazy(() => EventWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => EventWhereUniqueInputSchema),z.lazy(() => EventWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => EventUpdateWithWhereUniqueWithoutUserInputSchema),z.lazy(() => EventUpdateWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => EventUpdateManyWithWhereWithoutUserInputSchema),z.lazy(() => EventUpdateManyWithWhereWithoutUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => EventScalarWhereInputSchema),z.lazy(() => EventScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const EventActionUpdateManyWithoutUserNestedInputSchema: z.ZodType<Prisma.EventActionUpdateManyWithoutUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => EventActionCreateWithoutUserInputSchema),z.lazy(() => EventActionCreateWithoutUserInputSchema).array(),z.lazy(() => EventActionUncheckedCreateWithoutUserInputSchema),z.lazy(() => EventActionUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => EventActionCreateOrConnectWithoutUserInputSchema),z.lazy(() => EventActionCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => EventActionUpsertWithWhereUniqueWithoutUserInputSchema),z.lazy(() => EventActionUpsertWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => EventActionCreateManyUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => EventActionWhereUniqueInputSchema),z.lazy(() => EventActionWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => EventActionWhereUniqueInputSchema),z.lazy(() => EventActionWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => EventActionWhereUniqueInputSchema),z.lazy(() => EventActionWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => EventActionWhereUniqueInputSchema),z.lazy(() => EventActionWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => EventActionUpdateWithWhereUniqueWithoutUserInputSchema),z.lazy(() => EventActionUpdateWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => EventActionUpdateManyWithWhereWithoutUserInputSchema),z.lazy(() => EventActionUpdateManyWithWhereWithoutUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => EventActionScalarWhereInputSchema),z.lazy(() => EventActionScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const TreatmentPlanUpdateManyWithoutUserNestedInputSchema: z.ZodType<Prisma.TreatmentPlanUpdateManyWithoutUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => TreatmentPlanCreateWithoutUserInputSchema),z.lazy(() => TreatmentPlanCreateWithoutUserInputSchema).array(),z.lazy(() => TreatmentPlanUncheckedCreateWithoutUserInputSchema),z.lazy(() => TreatmentPlanUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TreatmentPlanCreateOrConnectWithoutUserInputSchema),z.lazy(() => TreatmentPlanCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => TreatmentPlanUpsertWithWhereUniqueWithoutUserInputSchema),z.lazy(() => TreatmentPlanUpsertWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TreatmentPlanCreateManyUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => TreatmentPlanWhereUniqueInputSchema),z.lazy(() => TreatmentPlanWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => TreatmentPlanWhereUniqueInputSchema),z.lazy(() => TreatmentPlanWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => TreatmentPlanWhereUniqueInputSchema),z.lazy(() => TreatmentPlanWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => TreatmentPlanWhereUniqueInputSchema),z.lazy(() => TreatmentPlanWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => TreatmentPlanUpdateWithWhereUniqueWithoutUserInputSchema),z.lazy(() => TreatmentPlanUpdateWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => TreatmentPlanUpdateManyWithWhereWithoutUserInputSchema),z.lazy(() => TreatmentPlanUpdateManyWithWhereWithoutUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => TreatmentPlanScalarWhereInputSchema),z.lazy(() => TreatmentPlanScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const InvitationUpdateManyWithoutInvitedByNestedInputSchema: z.ZodType<Prisma.InvitationUpdateManyWithoutInvitedByNestedInput> = z.object({
  create: z.union([ z.lazy(() => InvitationCreateWithoutInvitedByInputSchema),z.lazy(() => InvitationCreateWithoutInvitedByInputSchema).array(),z.lazy(() => InvitationUncheckedCreateWithoutInvitedByInputSchema),z.lazy(() => InvitationUncheckedCreateWithoutInvitedByInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => InvitationCreateOrConnectWithoutInvitedByInputSchema),z.lazy(() => InvitationCreateOrConnectWithoutInvitedByInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => InvitationUpsertWithWhereUniqueWithoutInvitedByInputSchema),z.lazy(() => InvitationUpsertWithWhereUniqueWithoutInvitedByInputSchema).array() ]).optional(),
  createMany: z.lazy(() => InvitationCreateManyInvitedByInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => InvitationWhereUniqueInputSchema),z.lazy(() => InvitationWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => InvitationWhereUniqueInputSchema),z.lazy(() => InvitationWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => InvitationWhereUniqueInputSchema),z.lazy(() => InvitationWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => InvitationWhereUniqueInputSchema),z.lazy(() => InvitationWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => InvitationUpdateWithWhereUniqueWithoutInvitedByInputSchema),z.lazy(() => InvitationUpdateWithWhereUniqueWithoutInvitedByInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => InvitationUpdateManyWithWhereWithoutInvitedByInputSchema),z.lazy(() => InvitationUpdateManyWithWhereWithoutInvitedByInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => InvitationScalarWhereInputSchema),z.lazy(() => InvitationScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const FileUpdateManyWithoutUserNestedInputSchema: z.ZodType<Prisma.FileUpdateManyWithoutUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => FileCreateWithoutUserInputSchema),z.lazy(() => FileCreateWithoutUserInputSchema).array(),z.lazy(() => FileUncheckedCreateWithoutUserInputSchema),z.lazy(() => FileUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => FileCreateOrConnectWithoutUserInputSchema),z.lazy(() => FileCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => FileUpsertWithWhereUniqueWithoutUserInputSchema),z.lazy(() => FileUpsertWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => FileCreateManyUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => FileWhereUniqueInputSchema),z.lazy(() => FileWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => FileWhereUniqueInputSchema),z.lazy(() => FileWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => FileWhereUniqueInputSchema),z.lazy(() => FileWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => FileWhereUniqueInputSchema),z.lazy(() => FileWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => FileUpdateWithWhereUniqueWithoutUserInputSchema),z.lazy(() => FileUpdateWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => FileUpdateManyWithWhereWithoutUserInputSchema),z.lazy(() => FileUpdateManyWithWhereWithoutUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => FileScalarWhereInputSchema),z.lazy(() => FileScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const TaskUpdateManyWithoutUserNestedInputSchema: z.ZodType<Prisma.TaskUpdateManyWithoutUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => TaskCreateWithoutUserInputSchema),z.lazy(() => TaskCreateWithoutUserInputSchema).array(),z.lazy(() => TaskUncheckedCreateWithoutUserInputSchema),z.lazy(() => TaskUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TaskCreateOrConnectWithoutUserInputSchema),z.lazy(() => TaskCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => TaskUpsertWithWhereUniqueWithoutUserInputSchema),z.lazy(() => TaskUpsertWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TaskCreateManyUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => TaskWhereUniqueInputSchema),z.lazy(() => TaskWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => TaskWhereUniqueInputSchema),z.lazy(() => TaskWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => TaskWhereUniqueInputSchema),z.lazy(() => TaskWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => TaskWhereUniqueInputSchema),z.lazy(() => TaskWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => TaskUpdateWithWhereUniqueWithoutUserInputSchema),z.lazy(() => TaskUpdateWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => TaskUpdateManyWithWhereWithoutUserInputSchema),z.lazy(() => TaskUpdateManyWithWhereWithoutUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => TaskScalarWhereInputSchema),z.lazy(() => TaskScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const InvitationUncheckedUpdateOneWithoutUserNestedInputSchema: z.ZodType<Prisma.InvitationUncheckedUpdateOneWithoutUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => InvitationCreateWithoutUserInputSchema),z.lazy(() => InvitationUncheckedCreateWithoutUserInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => InvitationCreateOrConnectWithoutUserInputSchema).optional(),
  upsert: z.lazy(() => InvitationUpsertWithoutUserInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => InvitationWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => InvitationWhereInputSchema) ]).optional(),
  connect: z.lazy(() => InvitationWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => InvitationUpdateToOneWithWhereWithoutUserInputSchema),z.lazy(() => InvitationUpdateWithoutUserInputSchema),z.lazy(() => InvitationUncheckedUpdateWithoutUserInputSchema) ]).optional(),
}).strict();

export const PatientUncheckedUpdateManyWithoutUserNestedInputSchema: z.ZodType<Prisma.PatientUncheckedUpdateManyWithoutUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => PatientCreateWithoutUserInputSchema),z.lazy(() => PatientCreateWithoutUserInputSchema).array(),z.lazy(() => PatientUncheckedCreateWithoutUserInputSchema),z.lazy(() => PatientUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => PatientCreateOrConnectWithoutUserInputSchema),z.lazy(() => PatientCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => PatientUpsertWithWhereUniqueWithoutUserInputSchema),z.lazy(() => PatientUpsertWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => PatientCreateManyUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => PatientWhereUniqueInputSchema),z.lazy(() => PatientWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => PatientWhereUniqueInputSchema),z.lazy(() => PatientWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => PatientWhereUniqueInputSchema),z.lazy(() => PatientWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => PatientWhereUniqueInputSchema),z.lazy(() => PatientWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => PatientUpdateWithWhereUniqueWithoutUserInputSchema),z.lazy(() => PatientUpdateWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => PatientUpdateManyWithWhereWithoutUserInputSchema),z.lazy(() => PatientUpdateManyWithWhereWithoutUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => PatientScalarWhereInputSchema),z.lazy(() => PatientScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const EventUncheckedUpdateManyWithoutUserNestedInputSchema: z.ZodType<Prisma.EventUncheckedUpdateManyWithoutUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => EventCreateWithoutUserInputSchema),z.lazy(() => EventCreateWithoutUserInputSchema).array(),z.lazy(() => EventUncheckedCreateWithoutUserInputSchema),z.lazy(() => EventUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => EventCreateOrConnectWithoutUserInputSchema),z.lazy(() => EventCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => EventUpsertWithWhereUniqueWithoutUserInputSchema),z.lazy(() => EventUpsertWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => EventCreateManyUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => EventWhereUniqueInputSchema),z.lazy(() => EventWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => EventWhereUniqueInputSchema),z.lazy(() => EventWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => EventWhereUniqueInputSchema),z.lazy(() => EventWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => EventWhereUniqueInputSchema),z.lazy(() => EventWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => EventUpdateWithWhereUniqueWithoutUserInputSchema),z.lazy(() => EventUpdateWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => EventUpdateManyWithWhereWithoutUserInputSchema),z.lazy(() => EventUpdateManyWithWhereWithoutUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => EventScalarWhereInputSchema),z.lazy(() => EventScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const EventActionUncheckedUpdateManyWithoutUserNestedInputSchema: z.ZodType<Prisma.EventActionUncheckedUpdateManyWithoutUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => EventActionCreateWithoutUserInputSchema),z.lazy(() => EventActionCreateWithoutUserInputSchema).array(),z.lazy(() => EventActionUncheckedCreateWithoutUserInputSchema),z.lazy(() => EventActionUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => EventActionCreateOrConnectWithoutUserInputSchema),z.lazy(() => EventActionCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => EventActionUpsertWithWhereUniqueWithoutUserInputSchema),z.lazy(() => EventActionUpsertWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => EventActionCreateManyUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => EventActionWhereUniqueInputSchema),z.lazy(() => EventActionWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => EventActionWhereUniqueInputSchema),z.lazy(() => EventActionWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => EventActionWhereUniqueInputSchema),z.lazy(() => EventActionWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => EventActionWhereUniqueInputSchema),z.lazy(() => EventActionWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => EventActionUpdateWithWhereUniqueWithoutUserInputSchema),z.lazy(() => EventActionUpdateWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => EventActionUpdateManyWithWhereWithoutUserInputSchema),z.lazy(() => EventActionUpdateManyWithWhereWithoutUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => EventActionScalarWhereInputSchema),z.lazy(() => EventActionScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const TreatmentPlanUncheckedUpdateManyWithoutUserNestedInputSchema: z.ZodType<Prisma.TreatmentPlanUncheckedUpdateManyWithoutUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => TreatmentPlanCreateWithoutUserInputSchema),z.lazy(() => TreatmentPlanCreateWithoutUserInputSchema).array(),z.lazy(() => TreatmentPlanUncheckedCreateWithoutUserInputSchema),z.lazy(() => TreatmentPlanUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TreatmentPlanCreateOrConnectWithoutUserInputSchema),z.lazy(() => TreatmentPlanCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => TreatmentPlanUpsertWithWhereUniqueWithoutUserInputSchema),z.lazy(() => TreatmentPlanUpsertWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TreatmentPlanCreateManyUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => TreatmentPlanWhereUniqueInputSchema),z.lazy(() => TreatmentPlanWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => TreatmentPlanWhereUniqueInputSchema),z.lazy(() => TreatmentPlanWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => TreatmentPlanWhereUniqueInputSchema),z.lazy(() => TreatmentPlanWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => TreatmentPlanWhereUniqueInputSchema),z.lazy(() => TreatmentPlanWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => TreatmentPlanUpdateWithWhereUniqueWithoutUserInputSchema),z.lazy(() => TreatmentPlanUpdateWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => TreatmentPlanUpdateManyWithWhereWithoutUserInputSchema),z.lazy(() => TreatmentPlanUpdateManyWithWhereWithoutUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => TreatmentPlanScalarWhereInputSchema),z.lazy(() => TreatmentPlanScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const InvitationUncheckedUpdateManyWithoutInvitedByNestedInputSchema: z.ZodType<Prisma.InvitationUncheckedUpdateManyWithoutInvitedByNestedInput> = z.object({
  create: z.union([ z.lazy(() => InvitationCreateWithoutInvitedByInputSchema),z.lazy(() => InvitationCreateWithoutInvitedByInputSchema).array(),z.lazy(() => InvitationUncheckedCreateWithoutInvitedByInputSchema),z.lazy(() => InvitationUncheckedCreateWithoutInvitedByInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => InvitationCreateOrConnectWithoutInvitedByInputSchema),z.lazy(() => InvitationCreateOrConnectWithoutInvitedByInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => InvitationUpsertWithWhereUniqueWithoutInvitedByInputSchema),z.lazy(() => InvitationUpsertWithWhereUniqueWithoutInvitedByInputSchema).array() ]).optional(),
  createMany: z.lazy(() => InvitationCreateManyInvitedByInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => InvitationWhereUniqueInputSchema),z.lazy(() => InvitationWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => InvitationWhereUniqueInputSchema),z.lazy(() => InvitationWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => InvitationWhereUniqueInputSchema),z.lazy(() => InvitationWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => InvitationWhereUniqueInputSchema),z.lazy(() => InvitationWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => InvitationUpdateWithWhereUniqueWithoutInvitedByInputSchema),z.lazy(() => InvitationUpdateWithWhereUniqueWithoutInvitedByInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => InvitationUpdateManyWithWhereWithoutInvitedByInputSchema),z.lazy(() => InvitationUpdateManyWithWhereWithoutInvitedByInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => InvitationScalarWhereInputSchema),z.lazy(() => InvitationScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const FileUncheckedUpdateManyWithoutUserNestedInputSchema: z.ZodType<Prisma.FileUncheckedUpdateManyWithoutUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => FileCreateWithoutUserInputSchema),z.lazy(() => FileCreateWithoutUserInputSchema).array(),z.lazy(() => FileUncheckedCreateWithoutUserInputSchema),z.lazy(() => FileUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => FileCreateOrConnectWithoutUserInputSchema),z.lazy(() => FileCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => FileUpsertWithWhereUniqueWithoutUserInputSchema),z.lazy(() => FileUpsertWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => FileCreateManyUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => FileWhereUniqueInputSchema),z.lazy(() => FileWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => FileWhereUniqueInputSchema),z.lazy(() => FileWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => FileWhereUniqueInputSchema),z.lazy(() => FileWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => FileWhereUniqueInputSchema),z.lazy(() => FileWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => FileUpdateWithWhereUniqueWithoutUserInputSchema),z.lazy(() => FileUpdateWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => FileUpdateManyWithWhereWithoutUserInputSchema),z.lazy(() => FileUpdateManyWithWhereWithoutUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => FileScalarWhereInputSchema),z.lazy(() => FileScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const TaskUncheckedUpdateManyWithoutUserNestedInputSchema: z.ZodType<Prisma.TaskUncheckedUpdateManyWithoutUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => TaskCreateWithoutUserInputSchema),z.lazy(() => TaskCreateWithoutUserInputSchema).array(),z.lazy(() => TaskUncheckedCreateWithoutUserInputSchema),z.lazy(() => TaskUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TaskCreateOrConnectWithoutUserInputSchema),z.lazy(() => TaskCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => TaskUpsertWithWhereUniqueWithoutUserInputSchema),z.lazy(() => TaskUpsertWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TaskCreateManyUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => TaskWhereUniqueInputSchema),z.lazy(() => TaskWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => TaskWhereUniqueInputSchema),z.lazy(() => TaskWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => TaskWhereUniqueInputSchema),z.lazy(() => TaskWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => TaskWhereUniqueInputSchema),z.lazy(() => TaskWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => TaskUpdateWithWhereUniqueWithoutUserInputSchema),z.lazy(() => TaskUpdateWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => TaskUpdateManyWithWhereWithoutUserInputSchema),z.lazy(() => TaskUpdateManyWithWhereWithoutUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => TaskScalarWhereInputSchema),z.lazy(() => TaskScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const AvatarCreateNestedOneWithoutProfileInputSchema: z.ZodType<Prisma.AvatarCreateNestedOneWithoutProfileInput> = z.object({
  create: z.union([ z.lazy(() => AvatarCreateWithoutProfileInputSchema),z.lazy(() => AvatarUncheckedCreateWithoutProfileInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => AvatarCreateOrConnectWithoutProfileInputSchema).optional(),
  connect: z.lazy(() => AvatarWhereUniqueInputSchema).optional()
}).strict();

export const TenantCreateNestedOneWithoutPreferedByProfilesInputSchema: z.ZodType<Prisma.TenantCreateNestedOneWithoutPreferedByProfilesInput> = z.object({
  create: z.union([ z.lazy(() => TenantCreateWithoutPreferedByProfilesInputSchema),z.lazy(() => TenantUncheckedCreateWithoutPreferedByProfilesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => TenantCreateOrConnectWithoutPreferedByProfilesInputSchema).optional(),
  connect: z.lazy(() => TenantWhereUniqueInputSchema).optional()
}).strict();

export const UserCreateNestedManyWithoutProfileInputSchema: z.ZodType<Prisma.UserCreateNestedManyWithoutProfileInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutProfileInputSchema),z.lazy(() => UserCreateWithoutProfileInputSchema).array(),z.lazy(() => UserUncheckedCreateWithoutProfileInputSchema),z.lazy(() => UserUncheckedCreateWithoutProfileInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => UserCreateOrConnectWithoutProfileInputSchema),z.lazy(() => UserCreateOrConnectWithoutProfileInputSchema).array() ]).optional(),
  createMany: z.lazy(() => UserCreateManyProfileInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => UserWhereUniqueInputSchema),z.lazy(() => UserWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const AccountCreateNestedManyWithoutProfileInputSchema: z.ZodType<Prisma.AccountCreateNestedManyWithoutProfileInput> = z.object({
  create: z.union([ z.lazy(() => AccountCreateWithoutProfileInputSchema),z.lazy(() => AccountCreateWithoutProfileInputSchema).array(),z.lazy(() => AccountUncheckedCreateWithoutProfileInputSchema),z.lazy(() => AccountUncheckedCreateWithoutProfileInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => AccountCreateOrConnectWithoutProfileInputSchema),z.lazy(() => AccountCreateOrConnectWithoutProfileInputSchema).array() ]).optional(),
  createMany: z.lazy(() => AccountCreateManyProfileInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => AccountWhereUniqueInputSchema),z.lazy(() => AccountWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const TokenCreateNestedManyWithoutProfileInputSchema: z.ZodType<Prisma.TokenCreateNestedManyWithoutProfileInput> = z.object({
  create: z.union([ z.lazy(() => TokenCreateWithoutProfileInputSchema),z.lazy(() => TokenCreateWithoutProfileInputSchema).array(),z.lazy(() => TokenUncheckedCreateWithoutProfileInputSchema),z.lazy(() => TokenUncheckedCreateWithoutProfileInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TokenCreateOrConnectWithoutProfileInputSchema),z.lazy(() => TokenCreateOrConnectWithoutProfileInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TokenCreateManyProfileInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => TokenWhereUniqueInputSchema),z.lazy(() => TokenWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const AvatarUncheckedCreateNestedOneWithoutProfileInputSchema: z.ZodType<Prisma.AvatarUncheckedCreateNestedOneWithoutProfileInput> = z.object({
  create: z.union([ z.lazy(() => AvatarCreateWithoutProfileInputSchema),z.lazy(() => AvatarUncheckedCreateWithoutProfileInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => AvatarCreateOrConnectWithoutProfileInputSchema).optional(),
  connect: z.lazy(() => AvatarWhereUniqueInputSchema).optional()
}).strict();

export const UserUncheckedCreateNestedManyWithoutProfileInputSchema: z.ZodType<Prisma.UserUncheckedCreateNestedManyWithoutProfileInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutProfileInputSchema),z.lazy(() => UserCreateWithoutProfileInputSchema).array(),z.lazy(() => UserUncheckedCreateWithoutProfileInputSchema),z.lazy(() => UserUncheckedCreateWithoutProfileInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => UserCreateOrConnectWithoutProfileInputSchema),z.lazy(() => UserCreateOrConnectWithoutProfileInputSchema).array() ]).optional(),
  createMany: z.lazy(() => UserCreateManyProfileInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => UserWhereUniqueInputSchema),z.lazy(() => UserWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const AccountUncheckedCreateNestedManyWithoutProfileInputSchema: z.ZodType<Prisma.AccountUncheckedCreateNestedManyWithoutProfileInput> = z.object({
  create: z.union([ z.lazy(() => AccountCreateWithoutProfileInputSchema),z.lazy(() => AccountCreateWithoutProfileInputSchema).array(),z.lazy(() => AccountUncheckedCreateWithoutProfileInputSchema),z.lazy(() => AccountUncheckedCreateWithoutProfileInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => AccountCreateOrConnectWithoutProfileInputSchema),z.lazy(() => AccountCreateOrConnectWithoutProfileInputSchema).array() ]).optional(),
  createMany: z.lazy(() => AccountCreateManyProfileInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => AccountWhereUniqueInputSchema),z.lazy(() => AccountWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const TokenUncheckedCreateNestedManyWithoutProfileInputSchema: z.ZodType<Prisma.TokenUncheckedCreateNestedManyWithoutProfileInput> = z.object({
  create: z.union([ z.lazy(() => TokenCreateWithoutProfileInputSchema),z.lazy(() => TokenCreateWithoutProfileInputSchema).array(),z.lazy(() => TokenUncheckedCreateWithoutProfileInputSchema),z.lazy(() => TokenUncheckedCreateWithoutProfileInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TokenCreateOrConnectWithoutProfileInputSchema),z.lazy(() => TokenCreateOrConnectWithoutProfileInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TokenCreateManyProfileInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => TokenWhereUniqueInputSchema),z.lazy(() => TokenWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const AvatarUpdateOneWithoutProfileNestedInputSchema: z.ZodType<Prisma.AvatarUpdateOneWithoutProfileNestedInput> = z.object({
  create: z.union([ z.lazy(() => AvatarCreateWithoutProfileInputSchema),z.lazy(() => AvatarUncheckedCreateWithoutProfileInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => AvatarCreateOrConnectWithoutProfileInputSchema).optional(),
  upsert: z.lazy(() => AvatarUpsertWithoutProfileInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => AvatarWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => AvatarWhereInputSchema) ]).optional(),
  connect: z.lazy(() => AvatarWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => AvatarUpdateToOneWithWhereWithoutProfileInputSchema),z.lazy(() => AvatarUpdateWithoutProfileInputSchema),z.lazy(() => AvatarUncheckedUpdateWithoutProfileInputSchema) ]).optional(),
}).strict();

export const TenantUpdateOneWithoutPreferedByProfilesNestedInputSchema: z.ZodType<Prisma.TenantUpdateOneWithoutPreferedByProfilesNestedInput> = z.object({
  create: z.union([ z.lazy(() => TenantCreateWithoutPreferedByProfilesInputSchema),z.lazy(() => TenantUncheckedCreateWithoutPreferedByProfilesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => TenantCreateOrConnectWithoutPreferedByProfilesInputSchema).optional(),
  upsert: z.lazy(() => TenantUpsertWithoutPreferedByProfilesInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => TenantWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => TenantWhereInputSchema) ]).optional(),
  connect: z.lazy(() => TenantWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => TenantUpdateToOneWithWhereWithoutPreferedByProfilesInputSchema),z.lazy(() => TenantUpdateWithoutPreferedByProfilesInputSchema),z.lazy(() => TenantUncheckedUpdateWithoutPreferedByProfilesInputSchema) ]).optional(),
}).strict();

export const UserUpdateManyWithoutProfileNestedInputSchema: z.ZodType<Prisma.UserUpdateManyWithoutProfileNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutProfileInputSchema),z.lazy(() => UserCreateWithoutProfileInputSchema).array(),z.lazy(() => UserUncheckedCreateWithoutProfileInputSchema),z.lazy(() => UserUncheckedCreateWithoutProfileInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => UserCreateOrConnectWithoutProfileInputSchema),z.lazy(() => UserCreateOrConnectWithoutProfileInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => UserUpsertWithWhereUniqueWithoutProfileInputSchema),z.lazy(() => UserUpsertWithWhereUniqueWithoutProfileInputSchema).array() ]).optional(),
  createMany: z.lazy(() => UserCreateManyProfileInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => UserWhereUniqueInputSchema),z.lazy(() => UserWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => UserWhereUniqueInputSchema),z.lazy(() => UserWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => UserWhereUniqueInputSchema),z.lazy(() => UserWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => UserWhereUniqueInputSchema),z.lazy(() => UserWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => UserUpdateWithWhereUniqueWithoutProfileInputSchema),z.lazy(() => UserUpdateWithWhereUniqueWithoutProfileInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => UserUpdateManyWithWhereWithoutProfileInputSchema),z.lazy(() => UserUpdateManyWithWhereWithoutProfileInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => UserScalarWhereInputSchema),z.lazy(() => UserScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const AccountUpdateManyWithoutProfileNestedInputSchema: z.ZodType<Prisma.AccountUpdateManyWithoutProfileNestedInput> = z.object({
  create: z.union([ z.lazy(() => AccountCreateWithoutProfileInputSchema),z.lazy(() => AccountCreateWithoutProfileInputSchema).array(),z.lazy(() => AccountUncheckedCreateWithoutProfileInputSchema),z.lazy(() => AccountUncheckedCreateWithoutProfileInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => AccountCreateOrConnectWithoutProfileInputSchema),z.lazy(() => AccountCreateOrConnectWithoutProfileInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => AccountUpsertWithWhereUniqueWithoutProfileInputSchema),z.lazy(() => AccountUpsertWithWhereUniqueWithoutProfileInputSchema).array() ]).optional(),
  createMany: z.lazy(() => AccountCreateManyProfileInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => AccountWhereUniqueInputSchema),z.lazy(() => AccountWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => AccountWhereUniqueInputSchema),z.lazy(() => AccountWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => AccountWhereUniqueInputSchema),z.lazy(() => AccountWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => AccountWhereUniqueInputSchema),z.lazy(() => AccountWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => AccountUpdateWithWhereUniqueWithoutProfileInputSchema),z.lazy(() => AccountUpdateWithWhereUniqueWithoutProfileInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => AccountUpdateManyWithWhereWithoutProfileInputSchema),z.lazy(() => AccountUpdateManyWithWhereWithoutProfileInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => AccountScalarWhereInputSchema),z.lazy(() => AccountScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const TokenUpdateManyWithoutProfileNestedInputSchema: z.ZodType<Prisma.TokenUpdateManyWithoutProfileNestedInput> = z.object({
  create: z.union([ z.lazy(() => TokenCreateWithoutProfileInputSchema),z.lazy(() => TokenCreateWithoutProfileInputSchema).array(),z.lazy(() => TokenUncheckedCreateWithoutProfileInputSchema),z.lazy(() => TokenUncheckedCreateWithoutProfileInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TokenCreateOrConnectWithoutProfileInputSchema),z.lazy(() => TokenCreateOrConnectWithoutProfileInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => TokenUpsertWithWhereUniqueWithoutProfileInputSchema),z.lazy(() => TokenUpsertWithWhereUniqueWithoutProfileInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TokenCreateManyProfileInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => TokenWhereUniqueInputSchema),z.lazy(() => TokenWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => TokenWhereUniqueInputSchema),z.lazy(() => TokenWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => TokenWhereUniqueInputSchema),z.lazy(() => TokenWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => TokenWhereUniqueInputSchema),z.lazy(() => TokenWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => TokenUpdateWithWhereUniqueWithoutProfileInputSchema),z.lazy(() => TokenUpdateWithWhereUniqueWithoutProfileInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => TokenUpdateManyWithWhereWithoutProfileInputSchema),z.lazy(() => TokenUpdateManyWithWhereWithoutProfileInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => TokenScalarWhereInputSchema),z.lazy(() => TokenScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const AvatarUncheckedUpdateOneWithoutProfileNestedInputSchema: z.ZodType<Prisma.AvatarUncheckedUpdateOneWithoutProfileNestedInput> = z.object({
  create: z.union([ z.lazy(() => AvatarCreateWithoutProfileInputSchema),z.lazy(() => AvatarUncheckedCreateWithoutProfileInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => AvatarCreateOrConnectWithoutProfileInputSchema).optional(),
  upsert: z.lazy(() => AvatarUpsertWithoutProfileInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => AvatarWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => AvatarWhereInputSchema) ]).optional(),
  connect: z.lazy(() => AvatarWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => AvatarUpdateToOneWithWhereWithoutProfileInputSchema),z.lazy(() => AvatarUpdateWithoutProfileInputSchema),z.lazy(() => AvatarUncheckedUpdateWithoutProfileInputSchema) ]).optional(),
}).strict();

export const UserUncheckedUpdateManyWithoutProfileNestedInputSchema: z.ZodType<Prisma.UserUncheckedUpdateManyWithoutProfileNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutProfileInputSchema),z.lazy(() => UserCreateWithoutProfileInputSchema).array(),z.lazy(() => UserUncheckedCreateWithoutProfileInputSchema),z.lazy(() => UserUncheckedCreateWithoutProfileInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => UserCreateOrConnectWithoutProfileInputSchema),z.lazy(() => UserCreateOrConnectWithoutProfileInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => UserUpsertWithWhereUniqueWithoutProfileInputSchema),z.lazy(() => UserUpsertWithWhereUniqueWithoutProfileInputSchema).array() ]).optional(),
  createMany: z.lazy(() => UserCreateManyProfileInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => UserWhereUniqueInputSchema),z.lazy(() => UserWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => UserWhereUniqueInputSchema),z.lazy(() => UserWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => UserWhereUniqueInputSchema),z.lazy(() => UserWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => UserWhereUniqueInputSchema),z.lazy(() => UserWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => UserUpdateWithWhereUniqueWithoutProfileInputSchema),z.lazy(() => UserUpdateWithWhereUniqueWithoutProfileInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => UserUpdateManyWithWhereWithoutProfileInputSchema),z.lazy(() => UserUpdateManyWithWhereWithoutProfileInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => UserScalarWhereInputSchema),z.lazy(() => UserScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const AccountUncheckedUpdateManyWithoutProfileNestedInputSchema: z.ZodType<Prisma.AccountUncheckedUpdateManyWithoutProfileNestedInput> = z.object({
  create: z.union([ z.lazy(() => AccountCreateWithoutProfileInputSchema),z.lazy(() => AccountCreateWithoutProfileInputSchema).array(),z.lazy(() => AccountUncheckedCreateWithoutProfileInputSchema),z.lazy(() => AccountUncheckedCreateWithoutProfileInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => AccountCreateOrConnectWithoutProfileInputSchema),z.lazy(() => AccountCreateOrConnectWithoutProfileInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => AccountUpsertWithWhereUniqueWithoutProfileInputSchema),z.lazy(() => AccountUpsertWithWhereUniqueWithoutProfileInputSchema).array() ]).optional(),
  createMany: z.lazy(() => AccountCreateManyProfileInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => AccountWhereUniqueInputSchema),z.lazy(() => AccountWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => AccountWhereUniqueInputSchema),z.lazy(() => AccountWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => AccountWhereUniqueInputSchema),z.lazy(() => AccountWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => AccountWhereUniqueInputSchema),z.lazy(() => AccountWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => AccountUpdateWithWhereUniqueWithoutProfileInputSchema),z.lazy(() => AccountUpdateWithWhereUniqueWithoutProfileInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => AccountUpdateManyWithWhereWithoutProfileInputSchema),z.lazy(() => AccountUpdateManyWithWhereWithoutProfileInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => AccountScalarWhereInputSchema),z.lazy(() => AccountScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const TokenUncheckedUpdateManyWithoutProfileNestedInputSchema: z.ZodType<Prisma.TokenUncheckedUpdateManyWithoutProfileNestedInput> = z.object({
  create: z.union([ z.lazy(() => TokenCreateWithoutProfileInputSchema),z.lazy(() => TokenCreateWithoutProfileInputSchema).array(),z.lazy(() => TokenUncheckedCreateWithoutProfileInputSchema),z.lazy(() => TokenUncheckedCreateWithoutProfileInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TokenCreateOrConnectWithoutProfileInputSchema),z.lazy(() => TokenCreateOrConnectWithoutProfileInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => TokenUpsertWithWhereUniqueWithoutProfileInputSchema),z.lazy(() => TokenUpsertWithWhereUniqueWithoutProfileInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TokenCreateManyProfileInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => TokenWhereUniqueInputSchema),z.lazy(() => TokenWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => TokenWhereUniqueInputSchema),z.lazy(() => TokenWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => TokenWhereUniqueInputSchema),z.lazy(() => TokenWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => TokenWhereUniqueInputSchema),z.lazy(() => TokenWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => TokenUpdateWithWhereUniqueWithoutProfileInputSchema),z.lazy(() => TokenUpdateWithWhereUniqueWithoutProfileInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => TokenUpdateManyWithWhereWithoutProfileInputSchema),z.lazy(() => TokenUpdateManyWithWhereWithoutProfileInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => TokenScalarWhereInputSchema),z.lazy(() => TokenScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ProfileCreateNestedOneWithoutAccountsInputSchema: z.ZodType<Prisma.ProfileCreateNestedOneWithoutAccountsInput> = z.object({
  create: z.union([ z.lazy(() => ProfileCreateWithoutAccountsInputSchema),z.lazy(() => ProfileUncheckedCreateWithoutAccountsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ProfileCreateOrConnectWithoutAccountsInputSchema).optional(),
  connect: z.lazy(() => ProfileWhereUniqueInputSchema).optional()
}).strict();

export const NullableIntFieldUpdateOperationsInputSchema: z.ZodType<Prisma.NullableIntFieldUpdateOperationsInput> = z.object({
  set: z.number().optional().nullable(),
  increment: z.number().optional(),
  decrement: z.number().optional(),
  multiply: z.number().optional(),
  divide: z.number().optional()
}).strict();

export const ProfileUpdateOneRequiredWithoutAccountsNestedInputSchema: z.ZodType<Prisma.ProfileUpdateOneRequiredWithoutAccountsNestedInput> = z.object({
  create: z.union([ z.lazy(() => ProfileCreateWithoutAccountsInputSchema),z.lazy(() => ProfileUncheckedCreateWithoutAccountsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ProfileCreateOrConnectWithoutAccountsInputSchema).optional(),
  upsert: z.lazy(() => ProfileUpsertWithoutAccountsInputSchema).optional(),
  connect: z.lazy(() => ProfileWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => ProfileUpdateToOneWithWhereWithoutAccountsInputSchema),z.lazy(() => ProfileUpdateWithoutAccountsInputSchema),z.lazy(() => ProfileUncheckedUpdateWithoutAccountsInputSchema) ]).optional(),
}).strict();

export const TenantProfileCreateNestedManyWithoutPlanInputSchema: z.ZodType<Prisma.TenantProfileCreateNestedManyWithoutPlanInput> = z.object({
  create: z.union([ z.lazy(() => TenantProfileCreateWithoutPlanInputSchema),z.lazy(() => TenantProfileCreateWithoutPlanInputSchema).array(),z.lazy(() => TenantProfileUncheckedCreateWithoutPlanInputSchema),z.lazy(() => TenantProfileUncheckedCreateWithoutPlanInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TenantProfileCreateOrConnectWithoutPlanInputSchema),z.lazy(() => TenantProfileCreateOrConnectWithoutPlanInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TenantProfileCreateManyPlanInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => TenantProfileWhereUniqueInputSchema),z.lazy(() => TenantProfileWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const TenantProfileUncheckedCreateNestedManyWithoutPlanInputSchema: z.ZodType<Prisma.TenantProfileUncheckedCreateNestedManyWithoutPlanInput> = z.object({
  create: z.union([ z.lazy(() => TenantProfileCreateWithoutPlanInputSchema),z.lazy(() => TenantProfileCreateWithoutPlanInputSchema).array(),z.lazy(() => TenantProfileUncheckedCreateWithoutPlanInputSchema),z.lazy(() => TenantProfileUncheckedCreateWithoutPlanInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TenantProfileCreateOrConnectWithoutPlanInputSchema),z.lazy(() => TenantProfileCreateOrConnectWithoutPlanInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TenantProfileCreateManyPlanInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => TenantProfileWhereUniqueInputSchema),z.lazy(() => TenantProfileWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const TenantProfileUpdateManyWithoutPlanNestedInputSchema: z.ZodType<Prisma.TenantProfileUpdateManyWithoutPlanNestedInput> = z.object({
  create: z.union([ z.lazy(() => TenantProfileCreateWithoutPlanInputSchema),z.lazy(() => TenantProfileCreateWithoutPlanInputSchema).array(),z.lazy(() => TenantProfileUncheckedCreateWithoutPlanInputSchema),z.lazy(() => TenantProfileUncheckedCreateWithoutPlanInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TenantProfileCreateOrConnectWithoutPlanInputSchema),z.lazy(() => TenantProfileCreateOrConnectWithoutPlanInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => TenantProfileUpsertWithWhereUniqueWithoutPlanInputSchema),z.lazy(() => TenantProfileUpsertWithWhereUniqueWithoutPlanInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TenantProfileCreateManyPlanInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => TenantProfileWhereUniqueInputSchema),z.lazy(() => TenantProfileWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => TenantProfileWhereUniqueInputSchema),z.lazy(() => TenantProfileWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => TenantProfileWhereUniqueInputSchema),z.lazy(() => TenantProfileWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => TenantProfileWhereUniqueInputSchema),z.lazy(() => TenantProfileWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => TenantProfileUpdateWithWhereUniqueWithoutPlanInputSchema),z.lazy(() => TenantProfileUpdateWithWhereUniqueWithoutPlanInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => TenantProfileUpdateManyWithWhereWithoutPlanInputSchema),z.lazy(() => TenantProfileUpdateManyWithWhereWithoutPlanInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => TenantProfileScalarWhereInputSchema),z.lazy(() => TenantProfileScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const TenantProfileUncheckedUpdateManyWithoutPlanNestedInputSchema: z.ZodType<Prisma.TenantProfileUncheckedUpdateManyWithoutPlanNestedInput> = z.object({
  create: z.union([ z.lazy(() => TenantProfileCreateWithoutPlanInputSchema),z.lazy(() => TenantProfileCreateWithoutPlanInputSchema).array(),z.lazy(() => TenantProfileUncheckedCreateWithoutPlanInputSchema),z.lazy(() => TenantProfileUncheckedCreateWithoutPlanInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TenantProfileCreateOrConnectWithoutPlanInputSchema),z.lazy(() => TenantProfileCreateOrConnectWithoutPlanInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => TenantProfileUpsertWithWhereUniqueWithoutPlanInputSchema),z.lazy(() => TenantProfileUpsertWithWhereUniqueWithoutPlanInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TenantProfileCreateManyPlanInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => TenantProfileWhereUniqueInputSchema),z.lazy(() => TenantProfileWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => TenantProfileWhereUniqueInputSchema),z.lazy(() => TenantProfileWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => TenantProfileWhereUniqueInputSchema),z.lazy(() => TenantProfileWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => TenantProfileWhereUniqueInputSchema),z.lazy(() => TenantProfileWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => TenantProfileUpdateWithWhereUniqueWithoutPlanInputSchema),z.lazy(() => TenantProfileUpdateWithWhereUniqueWithoutPlanInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => TenantProfileUpdateManyWithWhereWithoutPlanInputSchema),z.lazy(() => TenantProfileUpdateManyWithWhereWithoutPlanInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => TenantProfileScalarWhereInputSchema),z.lazy(() => TenantProfileScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ProfileCreateNestedOneWithoutTokensInputSchema: z.ZodType<Prisma.ProfileCreateNestedOneWithoutTokensInput> = z.object({
  create: z.union([ z.lazy(() => ProfileCreateWithoutTokensInputSchema),z.lazy(() => ProfileUncheckedCreateWithoutTokensInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ProfileCreateOrConnectWithoutTokensInputSchema).optional(),
  connect: z.lazy(() => ProfileWhereUniqueInputSchema).optional()
}).strict();

export const EnumTokenTypeFieldUpdateOperationsInputSchema: z.ZodType<Prisma.EnumTokenTypeFieldUpdateOperationsInput> = z.object({
  set: z.lazy(() => TokenTypeSchema).optional()
}).strict();

export const ProfileUpdateOneRequiredWithoutTokensNestedInputSchema: z.ZodType<Prisma.ProfileUpdateOneRequiredWithoutTokensNestedInput> = z.object({
  create: z.union([ z.lazy(() => ProfileCreateWithoutTokensInputSchema),z.lazy(() => ProfileUncheckedCreateWithoutTokensInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ProfileCreateOrConnectWithoutTokensInputSchema).optional(),
  upsert: z.lazy(() => ProfileUpsertWithoutTokensInputSchema).optional(),
  connect: z.lazy(() => ProfileWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => ProfileUpdateToOneWithWhereWithoutTokensInputSchema),z.lazy(() => ProfileUpdateWithoutTokensInputSchema),z.lazy(() => ProfileUncheckedUpdateWithoutTokensInputSchema) ]).optional(),
}).strict();

export const UserCreateNestedOneWithoutInvitationsInputSchema: z.ZodType<Prisma.UserCreateNestedOneWithoutInvitationsInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutInvitationsInputSchema),z.lazy(() => UserUncheckedCreateWithoutInvitationsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutInvitationsInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional()
}).strict();

export const UserCreateNestedOneWithoutInvitationInputSchema: z.ZodType<Prisma.UserCreateNestedOneWithoutInvitationInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutInvitationInputSchema),z.lazy(() => UserUncheckedCreateWithoutInvitationInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutInvitationInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional()
}).strict();

export const UserUpdateOneRequiredWithoutInvitationsNestedInputSchema: z.ZodType<Prisma.UserUpdateOneRequiredWithoutInvitationsNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutInvitationsInputSchema),z.lazy(() => UserUncheckedCreateWithoutInvitationsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutInvitationsInputSchema).optional(),
  upsert: z.lazy(() => UserUpsertWithoutInvitationsInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => UserUpdateToOneWithWhereWithoutInvitationsInputSchema),z.lazy(() => UserUpdateWithoutInvitationsInputSchema),z.lazy(() => UserUncheckedUpdateWithoutInvitationsInputSchema) ]).optional(),
}).strict();

export const UserUpdateOneWithoutInvitationNestedInputSchema: z.ZodType<Prisma.UserUpdateOneWithoutInvitationNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutInvitationInputSchema),z.lazy(() => UserUncheckedCreateWithoutInvitationInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutInvitationInputSchema).optional(),
  upsert: z.lazy(() => UserUpsertWithoutInvitationInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => UserWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => UserWhereInputSchema) ]).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => UserUpdateToOneWithWhereWithoutInvitationInputSchema),z.lazy(() => UserUpdateWithoutInvitationInputSchema),z.lazy(() => UserUncheckedUpdateWithoutInvitationInputSchema) ]).optional(),
}).strict();

export const UserCreateNestedOneWithoutPatientsInputSchema: z.ZodType<Prisma.UserCreateNestedOneWithoutPatientsInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutPatientsInputSchema),z.lazy(() => UserUncheckedCreateWithoutPatientsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutPatientsInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional()
}).strict();

export const TenantCreateNestedOneWithoutPatientsInputSchema: z.ZodType<Prisma.TenantCreateNestedOneWithoutPatientsInput> = z.object({
  create: z.union([ z.lazy(() => TenantCreateWithoutPatientsInputSchema),z.lazy(() => TenantUncheckedCreateWithoutPatientsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => TenantCreateOrConnectWithoutPatientsInputSchema).optional(),
  connect: z.lazy(() => TenantWhereUniqueInputSchema).optional()
}).strict();

export const FileCreateNestedManyWithoutPatientInputSchema: z.ZodType<Prisma.FileCreateNestedManyWithoutPatientInput> = z.object({
  create: z.union([ z.lazy(() => FileCreateWithoutPatientInputSchema),z.lazy(() => FileCreateWithoutPatientInputSchema).array(),z.lazy(() => FileUncheckedCreateWithoutPatientInputSchema),z.lazy(() => FileUncheckedCreateWithoutPatientInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => FileCreateOrConnectWithoutPatientInputSchema),z.lazy(() => FileCreateOrConnectWithoutPatientInputSchema).array() ]).optional(),
  createMany: z.lazy(() => FileCreateManyPatientInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => FileWhereUniqueInputSchema),z.lazy(() => FileWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const QuizCreateNestedManyWithoutPatientInputSchema: z.ZodType<Prisma.QuizCreateNestedManyWithoutPatientInput> = z.object({
  create: z.union([ z.lazy(() => QuizCreateWithoutPatientInputSchema),z.lazy(() => QuizCreateWithoutPatientInputSchema).array(),z.lazy(() => QuizUncheckedCreateWithoutPatientInputSchema),z.lazy(() => QuizUncheckedCreateWithoutPatientInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => QuizCreateOrConnectWithoutPatientInputSchema),z.lazy(() => QuizCreateOrConnectWithoutPatientInputSchema).array() ]).optional(),
  createMany: z.lazy(() => QuizCreateManyPatientInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => QuizWhereUniqueInputSchema),z.lazy(() => QuizWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const EventCreateNestedManyWithoutPatientInputSchema: z.ZodType<Prisma.EventCreateNestedManyWithoutPatientInput> = z.object({
  create: z.union([ z.lazy(() => EventCreateWithoutPatientInputSchema),z.lazy(() => EventCreateWithoutPatientInputSchema).array(),z.lazy(() => EventUncheckedCreateWithoutPatientInputSchema),z.lazy(() => EventUncheckedCreateWithoutPatientInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => EventCreateOrConnectWithoutPatientInputSchema),z.lazy(() => EventCreateOrConnectWithoutPatientInputSchema).array() ]).optional(),
  createMany: z.lazy(() => EventCreateManyPatientInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => EventWhereUniqueInputSchema),z.lazy(() => EventWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const TreatmentPlanCreateNestedManyWithoutPatientInputSchema: z.ZodType<Prisma.TreatmentPlanCreateNestedManyWithoutPatientInput> = z.object({
  create: z.union([ z.lazy(() => TreatmentPlanCreateWithoutPatientInputSchema),z.lazy(() => TreatmentPlanCreateWithoutPatientInputSchema).array(),z.lazy(() => TreatmentPlanUncheckedCreateWithoutPatientInputSchema),z.lazy(() => TreatmentPlanUncheckedCreateWithoutPatientInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TreatmentPlanCreateOrConnectWithoutPatientInputSchema),z.lazy(() => TreatmentPlanCreateOrConnectWithoutPatientInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TreatmentPlanCreateManyPatientInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => TreatmentPlanWhereUniqueInputSchema),z.lazy(() => TreatmentPlanWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const FileUncheckedCreateNestedManyWithoutPatientInputSchema: z.ZodType<Prisma.FileUncheckedCreateNestedManyWithoutPatientInput> = z.object({
  create: z.union([ z.lazy(() => FileCreateWithoutPatientInputSchema),z.lazy(() => FileCreateWithoutPatientInputSchema).array(),z.lazy(() => FileUncheckedCreateWithoutPatientInputSchema),z.lazy(() => FileUncheckedCreateWithoutPatientInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => FileCreateOrConnectWithoutPatientInputSchema),z.lazy(() => FileCreateOrConnectWithoutPatientInputSchema).array() ]).optional(),
  createMany: z.lazy(() => FileCreateManyPatientInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => FileWhereUniqueInputSchema),z.lazy(() => FileWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const QuizUncheckedCreateNestedManyWithoutPatientInputSchema: z.ZodType<Prisma.QuizUncheckedCreateNestedManyWithoutPatientInput> = z.object({
  create: z.union([ z.lazy(() => QuizCreateWithoutPatientInputSchema),z.lazy(() => QuizCreateWithoutPatientInputSchema).array(),z.lazy(() => QuizUncheckedCreateWithoutPatientInputSchema),z.lazy(() => QuizUncheckedCreateWithoutPatientInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => QuizCreateOrConnectWithoutPatientInputSchema),z.lazy(() => QuizCreateOrConnectWithoutPatientInputSchema).array() ]).optional(),
  createMany: z.lazy(() => QuizCreateManyPatientInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => QuizWhereUniqueInputSchema),z.lazy(() => QuizWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const EventUncheckedCreateNestedManyWithoutPatientInputSchema: z.ZodType<Prisma.EventUncheckedCreateNestedManyWithoutPatientInput> = z.object({
  create: z.union([ z.lazy(() => EventCreateWithoutPatientInputSchema),z.lazy(() => EventCreateWithoutPatientInputSchema).array(),z.lazy(() => EventUncheckedCreateWithoutPatientInputSchema),z.lazy(() => EventUncheckedCreateWithoutPatientInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => EventCreateOrConnectWithoutPatientInputSchema),z.lazy(() => EventCreateOrConnectWithoutPatientInputSchema).array() ]).optional(),
  createMany: z.lazy(() => EventCreateManyPatientInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => EventWhereUniqueInputSchema),z.lazy(() => EventWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const TreatmentPlanUncheckedCreateNestedManyWithoutPatientInputSchema: z.ZodType<Prisma.TreatmentPlanUncheckedCreateNestedManyWithoutPatientInput> = z.object({
  create: z.union([ z.lazy(() => TreatmentPlanCreateWithoutPatientInputSchema),z.lazy(() => TreatmentPlanCreateWithoutPatientInputSchema).array(),z.lazy(() => TreatmentPlanUncheckedCreateWithoutPatientInputSchema),z.lazy(() => TreatmentPlanUncheckedCreateWithoutPatientInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TreatmentPlanCreateOrConnectWithoutPatientInputSchema),z.lazy(() => TreatmentPlanCreateOrConnectWithoutPatientInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TreatmentPlanCreateManyPatientInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => TreatmentPlanWhereUniqueInputSchema),z.lazy(() => TreatmentPlanWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const EnumStatusFieldUpdateOperationsInputSchema: z.ZodType<Prisma.EnumStatusFieldUpdateOperationsInput> = z.object({
  set: z.lazy(() => StatusSchema).optional()
}).strict();

export const UserUpdateOneRequiredWithoutPatientsNestedInputSchema: z.ZodType<Prisma.UserUpdateOneRequiredWithoutPatientsNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutPatientsInputSchema),z.lazy(() => UserUncheckedCreateWithoutPatientsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutPatientsInputSchema).optional(),
  upsert: z.lazy(() => UserUpsertWithoutPatientsInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => UserUpdateToOneWithWhereWithoutPatientsInputSchema),z.lazy(() => UserUpdateWithoutPatientsInputSchema),z.lazy(() => UserUncheckedUpdateWithoutPatientsInputSchema) ]).optional(),
}).strict();

export const TenantUpdateOneRequiredWithoutPatientsNestedInputSchema: z.ZodType<Prisma.TenantUpdateOneRequiredWithoutPatientsNestedInput> = z.object({
  create: z.union([ z.lazy(() => TenantCreateWithoutPatientsInputSchema),z.lazy(() => TenantUncheckedCreateWithoutPatientsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => TenantCreateOrConnectWithoutPatientsInputSchema).optional(),
  upsert: z.lazy(() => TenantUpsertWithoutPatientsInputSchema).optional(),
  connect: z.lazy(() => TenantWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => TenantUpdateToOneWithWhereWithoutPatientsInputSchema),z.lazy(() => TenantUpdateWithoutPatientsInputSchema),z.lazy(() => TenantUncheckedUpdateWithoutPatientsInputSchema) ]).optional(),
}).strict();

export const FileUpdateManyWithoutPatientNestedInputSchema: z.ZodType<Prisma.FileUpdateManyWithoutPatientNestedInput> = z.object({
  create: z.union([ z.lazy(() => FileCreateWithoutPatientInputSchema),z.lazy(() => FileCreateWithoutPatientInputSchema).array(),z.lazy(() => FileUncheckedCreateWithoutPatientInputSchema),z.lazy(() => FileUncheckedCreateWithoutPatientInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => FileCreateOrConnectWithoutPatientInputSchema),z.lazy(() => FileCreateOrConnectWithoutPatientInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => FileUpsertWithWhereUniqueWithoutPatientInputSchema),z.lazy(() => FileUpsertWithWhereUniqueWithoutPatientInputSchema).array() ]).optional(),
  createMany: z.lazy(() => FileCreateManyPatientInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => FileWhereUniqueInputSchema),z.lazy(() => FileWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => FileWhereUniqueInputSchema),z.lazy(() => FileWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => FileWhereUniqueInputSchema),z.lazy(() => FileWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => FileWhereUniqueInputSchema),z.lazy(() => FileWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => FileUpdateWithWhereUniqueWithoutPatientInputSchema),z.lazy(() => FileUpdateWithWhereUniqueWithoutPatientInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => FileUpdateManyWithWhereWithoutPatientInputSchema),z.lazy(() => FileUpdateManyWithWhereWithoutPatientInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => FileScalarWhereInputSchema),z.lazy(() => FileScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const QuizUpdateManyWithoutPatientNestedInputSchema: z.ZodType<Prisma.QuizUpdateManyWithoutPatientNestedInput> = z.object({
  create: z.union([ z.lazy(() => QuizCreateWithoutPatientInputSchema),z.lazy(() => QuizCreateWithoutPatientInputSchema).array(),z.lazy(() => QuizUncheckedCreateWithoutPatientInputSchema),z.lazy(() => QuizUncheckedCreateWithoutPatientInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => QuizCreateOrConnectWithoutPatientInputSchema),z.lazy(() => QuizCreateOrConnectWithoutPatientInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => QuizUpsertWithWhereUniqueWithoutPatientInputSchema),z.lazy(() => QuizUpsertWithWhereUniqueWithoutPatientInputSchema).array() ]).optional(),
  createMany: z.lazy(() => QuizCreateManyPatientInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => QuizWhereUniqueInputSchema),z.lazy(() => QuizWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => QuizWhereUniqueInputSchema),z.lazy(() => QuizWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => QuizWhereUniqueInputSchema),z.lazy(() => QuizWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => QuizWhereUniqueInputSchema),z.lazy(() => QuizWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => QuizUpdateWithWhereUniqueWithoutPatientInputSchema),z.lazy(() => QuizUpdateWithWhereUniqueWithoutPatientInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => QuizUpdateManyWithWhereWithoutPatientInputSchema),z.lazy(() => QuizUpdateManyWithWhereWithoutPatientInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => QuizScalarWhereInputSchema),z.lazy(() => QuizScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const EventUpdateManyWithoutPatientNestedInputSchema: z.ZodType<Prisma.EventUpdateManyWithoutPatientNestedInput> = z.object({
  create: z.union([ z.lazy(() => EventCreateWithoutPatientInputSchema),z.lazy(() => EventCreateWithoutPatientInputSchema).array(),z.lazy(() => EventUncheckedCreateWithoutPatientInputSchema),z.lazy(() => EventUncheckedCreateWithoutPatientInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => EventCreateOrConnectWithoutPatientInputSchema),z.lazy(() => EventCreateOrConnectWithoutPatientInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => EventUpsertWithWhereUniqueWithoutPatientInputSchema),z.lazy(() => EventUpsertWithWhereUniqueWithoutPatientInputSchema).array() ]).optional(),
  createMany: z.lazy(() => EventCreateManyPatientInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => EventWhereUniqueInputSchema),z.lazy(() => EventWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => EventWhereUniqueInputSchema),z.lazy(() => EventWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => EventWhereUniqueInputSchema),z.lazy(() => EventWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => EventWhereUniqueInputSchema),z.lazy(() => EventWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => EventUpdateWithWhereUniqueWithoutPatientInputSchema),z.lazy(() => EventUpdateWithWhereUniqueWithoutPatientInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => EventUpdateManyWithWhereWithoutPatientInputSchema),z.lazy(() => EventUpdateManyWithWhereWithoutPatientInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => EventScalarWhereInputSchema),z.lazy(() => EventScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const TreatmentPlanUpdateManyWithoutPatientNestedInputSchema: z.ZodType<Prisma.TreatmentPlanUpdateManyWithoutPatientNestedInput> = z.object({
  create: z.union([ z.lazy(() => TreatmentPlanCreateWithoutPatientInputSchema),z.lazy(() => TreatmentPlanCreateWithoutPatientInputSchema).array(),z.lazy(() => TreatmentPlanUncheckedCreateWithoutPatientInputSchema),z.lazy(() => TreatmentPlanUncheckedCreateWithoutPatientInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TreatmentPlanCreateOrConnectWithoutPatientInputSchema),z.lazy(() => TreatmentPlanCreateOrConnectWithoutPatientInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => TreatmentPlanUpsertWithWhereUniqueWithoutPatientInputSchema),z.lazy(() => TreatmentPlanUpsertWithWhereUniqueWithoutPatientInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TreatmentPlanCreateManyPatientInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => TreatmentPlanWhereUniqueInputSchema),z.lazy(() => TreatmentPlanWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => TreatmentPlanWhereUniqueInputSchema),z.lazy(() => TreatmentPlanWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => TreatmentPlanWhereUniqueInputSchema),z.lazy(() => TreatmentPlanWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => TreatmentPlanWhereUniqueInputSchema),z.lazy(() => TreatmentPlanWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => TreatmentPlanUpdateWithWhereUniqueWithoutPatientInputSchema),z.lazy(() => TreatmentPlanUpdateWithWhereUniqueWithoutPatientInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => TreatmentPlanUpdateManyWithWhereWithoutPatientInputSchema),z.lazy(() => TreatmentPlanUpdateManyWithWhereWithoutPatientInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => TreatmentPlanScalarWhereInputSchema),z.lazy(() => TreatmentPlanScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const FileUncheckedUpdateManyWithoutPatientNestedInputSchema: z.ZodType<Prisma.FileUncheckedUpdateManyWithoutPatientNestedInput> = z.object({
  create: z.union([ z.lazy(() => FileCreateWithoutPatientInputSchema),z.lazy(() => FileCreateWithoutPatientInputSchema).array(),z.lazy(() => FileUncheckedCreateWithoutPatientInputSchema),z.lazy(() => FileUncheckedCreateWithoutPatientInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => FileCreateOrConnectWithoutPatientInputSchema),z.lazy(() => FileCreateOrConnectWithoutPatientInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => FileUpsertWithWhereUniqueWithoutPatientInputSchema),z.lazy(() => FileUpsertWithWhereUniqueWithoutPatientInputSchema).array() ]).optional(),
  createMany: z.lazy(() => FileCreateManyPatientInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => FileWhereUniqueInputSchema),z.lazy(() => FileWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => FileWhereUniqueInputSchema),z.lazy(() => FileWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => FileWhereUniqueInputSchema),z.lazy(() => FileWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => FileWhereUniqueInputSchema),z.lazy(() => FileWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => FileUpdateWithWhereUniqueWithoutPatientInputSchema),z.lazy(() => FileUpdateWithWhereUniqueWithoutPatientInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => FileUpdateManyWithWhereWithoutPatientInputSchema),z.lazy(() => FileUpdateManyWithWhereWithoutPatientInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => FileScalarWhereInputSchema),z.lazy(() => FileScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const QuizUncheckedUpdateManyWithoutPatientNestedInputSchema: z.ZodType<Prisma.QuizUncheckedUpdateManyWithoutPatientNestedInput> = z.object({
  create: z.union([ z.lazy(() => QuizCreateWithoutPatientInputSchema),z.lazy(() => QuizCreateWithoutPatientInputSchema).array(),z.lazy(() => QuizUncheckedCreateWithoutPatientInputSchema),z.lazy(() => QuizUncheckedCreateWithoutPatientInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => QuizCreateOrConnectWithoutPatientInputSchema),z.lazy(() => QuizCreateOrConnectWithoutPatientInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => QuizUpsertWithWhereUniqueWithoutPatientInputSchema),z.lazy(() => QuizUpsertWithWhereUniqueWithoutPatientInputSchema).array() ]).optional(),
  createMany: z.lazy(() => QuizCreateManyPatientInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => QuizWhereUniqueInputSchema),z.lazy(() => QuizWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => QuizWhereUniqueInputSchema),z.lazy(() => QuizWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => QuizWhereUniqueInputSchema),z.lazy(() => QuizWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => QuizWhereUniqueInputSchema),z.lazy(() => QuizWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => QuizUpdateWithWhereUniqueWithoutPatientInputSchema),z.lazy(() => QuizUpdateWithWhereUniqueWithoutPatientInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => QuizUpdateManyWithWhereWithoutPatientInputSchema),z.lazy(() => QuizUpdateManyWithWhereWithoutPatientInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => QuizScalarWhereInputSchema),z.lazy(() => QuizScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const EventUncheckedUpdateManyWithoutPatientNestedInputSchema: z.ZodType<Prisma.EventUncheckedUpdateManyWithoutPatientNestedInput> = z.object({
  create: z.union([ z.lazy(() => EventCreateWithoutPatientInputSchema),z.lazy(() => EventCreateWithoutPatientInputSchema).array(),z.lazy(() => EventUncheckedCreateWithoutPatientInputSchema),z.lazy(() => EventUncheckedCreateWithoutPatientInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => EventCreateOrConnectWithoutPatientInputSchema),z.lazy(() => EventCreateOrConnectWithoutPatientInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => EventUpsertWithWhereUniqueWithoutPatientInputSchema),z.lazy(() => EventUpsertWithWhereUniqueWithoutPatientInputSchema).array() ]).optional(),
  createMany: z.lazy(() => EventCreateManyPatientInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => EventWhereUniqueInputSchema),z.lazy(() => EventWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => EventWhereUniqueInputSchema),z.lazy(() => EventWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => EventWhereUniqueInputSchema),z.lazy(() => EventWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => EventWhereUniqueInputSchema),z.lazy(() => EventWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => EventUpdateWithWhereUniqueWithoutPatientInputSchema),z.lazy(() => EventUpdateWithWhereUniqueWithoutPatientInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => EventUpdateManyWithWhereWithoutPatientInputSchema),z.lazy(() => EventUpdateManyWithWhereWithoutPatientInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => EventScalarWhereInputSchema),z.lazy(() => EventScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const TreatmentPlanUncheckedUpdateManyWithoutPatientNestedInputSchema: z.ZodType<Prisma.TreatmentPlanUncheckedUpdateManyWithoutPatientNestedInput> = z.object({
  create: z.union([ z.lazy(() => TreatmentPlanCreateWithoutPatientInputSchema),z.lazy(() => TreatmentPlanCreateWithoutPatientInputSchema).array(),z.lazy(() => TreatmentPlanUncheckedCreateWithoutPatientInputSchema),z.lazy(() => TreatmentPlanUncheckedCreateWithoutPatientInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TreatmentPlanCreateOrConnectWithoutPatientInputSchema),z.lazy(() => TreatmentPlanCreateOrConnectWithoutPatientInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => TreatmentPlanUpsertWithWhereUniqueWithoutPatientInputSchema),z.lazy(() => TreatmentPlanUpsertWithWhereUniqueWithoutPatientInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TreatmentPlanCreateManyPatientInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => TreatmentPlanWhereUniqueInputSchema),z.lazy(() => TreatmentPlanWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => TreatmentPlanWhereUniqueInputSchema),z.lazy(() => TreatmentPlanWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => TreatmentPlanWhereUniqueInputSchema),z.lazy(() => TreatmentPlanWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => TreatmentPlanWhereUniqueInputSchema),z.lazy(() => TreatmentPlanWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => TreatmentPlanUpdateWithWhereUniqueWithoutPatientInputSchema),z.lazy(() => TreatmentPlanUpdateWithWhereUniqueWithoutPatientInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => TreatmentPlanUpdateManyWithWhereWithoutPatientInputSchema),z.lazy(() => TreatmentPlanUpdateManyWithWhereWithoutPatientInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => TreatmentPlanScalarWhereInputSchema),z.lazy(() => TreatmentPlanScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const UserCreateNestedManyWithoutSpecialityInputSchema: z.ZodType<Prisma.UserCreateNestedManyWithoutSpecialityInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutSpecialityInputSchema),z.lazy(() => UserCreateWithoutSpecialityInputSchema).array(),z.lazy(() => UserUncheckedCreateWithoutSpecialityInputSchema),z.lazy(() => UserUncheckedCreateWithoutSpecialityInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => UserCreateOrConnectWithoutSpecialityInputSchema),z.lazy(() => UserCreateOrConnectWithoutSpecialityInputSchema).array() ]).optional(),
  createMany: z.lazy(() => UserCreateManySpecialityInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => UserWhereUniqueInputSchema),z.lazy(() => UserWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const TenantCreateNestedOneWithoutSpecialitiesInputSchema: z.ZodType<Prisma.TenantCreateNestedOneWithoutSpecialitiesInput> = z.object({
  create: z.union([ z.lazy(() => TenantCreateWithoutSpecialitiesInputSchema),z.lazy(() => TenantUncheckedCreateWithoutSpecialitiesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => TenantCreateOrConnectWithoutSpecialitiesInputSchema).optional(),
  connect: z.lazy(() => TenantWhereUniqueInputSchema).optional()
}).strict();

export const UserUncheckedCreateNestedManyWithoutSpecialityInputSchema: z.ZodType<Prisma.UserUncheckedCreateNestedManyWithoutSpecialityInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutSpecialityInputSchema),z.lazy(() => UserCreateWithoutSpecialityInputSchema).array(),z.lazy(() => UserUncheckedCreateWithoutSpecialityInputSchema),z.lazy(() => UserUncheckedCreateWithoutSpecialityInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => UserCreateOrConnectWithoutSpecialityInputSchema),z.lazy(() => UserCreateOrConnectWithoutSpecialityInputSchema).array() ]).optional(),
  createMany: z.lazy(() => UserCreateManySpecialityInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => UserWhereUniqueInputSchema),z.lazy(() => UserWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const UserUpdateManyWithoutSpecialityNestedInputSchema: z.ZodType<Prisma.UserUpdateManyWithoutSpecialityNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutSpecialityInputSchema),z.lazy(() => UserCreateWithoutSpecialityInputSchema).array(),z.lazy(() => UserUncheckedCreateWithoutSpecialityInputSchema),z.lazy(() => UserUncheckedCreateWithoutSpecialityInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => UserCreateOrConnectWithoutSpecialityInputSchema),z.lazy(() => UserCreateOrConnectWithoutSpecialityInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => UserUpsertWithWhereUniqueWithoutSpecialityInputSchema),z.lazy(() => UserUpsertWithWhereUniqueWithoutSpecialityInputSchema).array() ]).optional(),
  createMany: z.lazy(() => UserCreateManySpecialityInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => UserWhereUniqueInputSchema),z.lazy(() => UserWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => UserWhereUniqueInputSchema),z.lazy(() => UserWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => UserWhereUniqueInputSchema),z.lazy(() => UserWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => UserWhereUniqueInputSchema),z.lazy(() => UserWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => UserUpdateWithWhereUniqueWithoutSpecialityInputSchema),z.lazy(() => UserUpdateWithWhereUniqueWithoutSpecialityInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => UserUpdateManyWithWhereWithoutSpecialityInputSchema),z.lazy(() => UserUpdateManyWithWhereWithoutSpecialityInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => UserScalarWhereInputSchema),z.lazy(() => UserScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const TenantUpdateOneRequiredWithoutSpecialitiesNestedInputSchema: z.ZodType<Prisma.TenantUpdateOneRequiredWithoutSpecialitiesNestedInput> = z.object({
  create: z.union([ z.lazy(() => TenantCreateWithoutSpecialitiesInputSchema),z.lazy(() => TenantUncheckedCreateWithoutSpecialitiesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => TenantCreateOrConnectWithoutSpecialitiesInputSchema).optional(),
  upsert: z.lazy(() => TenantUpsertWithoutSpecialitiesInputSchema).optional(),
  connect: z.lazy(() => TenantWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => TenantUpdateToOneWithWhereWithoutSpecialitiesInputSchema),z.lazy(() => TenantUpdateWithoutSpecialitiesInputSchema),z.lazy(() => TenantUncheckedUpdateWithoutSpecialitiesInputSchema) ]).optional(),
}).strict();

export const UserUncheckedUpdateManyWithoutSpecialityNestedInputSchema: z.ZodType<Prisma.UserUncheckedUpdateManyWithoutSpecialityNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutSpecialityInputSchema),z.lazy(() => UserCreateWithoutSpecialityInputSchema).array(),z.lazy(() => UserUncheckedCreateWithoutSpecialityInputSchema),z.lazy(() => UserUncheckedCreateWithoutSpecialityInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => UserCreateOrConnectWithoutSpecialityInputSchema),z.lazy(() => UserCreateOrConnectWithoutSpecialityInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => UserUpsertWithWhereUniqueWithoutSpecialityInputSchema),z.lazy(() => UserUpsertWithWhereUniqueWithoutSpecialityInputSchema).array() ]).optional(),
  createMany: z.lazy(() => UserCreateManySpecialityInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => UserWhereUniqueInputSchema),z.lazy(() => UserWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => UserWhereUniqueInputSchema),z.lazy(() => UserWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => UserWhereUniqueInputSchema),z.lazy(() => UserWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => UserWhereUniqueInputSchema),z.lazy(() => UserWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => UserUpdateWithWhereUniqueWithoutSpecialityInputSchema),z.lazy(() => UserUpdateWithWhereUniqueWithoutSpecialityInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => UserUpdateManyWithWhereWithoutSpecialityInputSchema),z.lazy(() => UserUpdateManyWithWhereWithoutSpecialityInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => UserScalarWhereInputSchema),z.lazy(() => UserScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const VisitCreateNestedManyWithoutEventInputSchema: z.ZodType<Prisma.VisitCreateNestedManyWithoutEventInput> = z.object({
  create: z.union([ z.lazy(() => VisitCreateWithoutEventInputSchema),z.lazy(() => VisitCreateWithoutEventInputSchema).array(),z.lazy(() => VisitUncheckedCreateWithoutEventInputSchema),z.lazy(() => VisitUncheckedCreateWithoutEventInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => VisitCreateOrConnectWithoutEventInputSchema),z.lazy(() => VisitCreateOrConnectWithoutEventInputSchema).array() ]).optional(),
  createMany: z.lazy(() => VisitCreateManyEventInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => VisitWhereUniqueInputSchema),z.lazy(() => VisitWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const QuizCreateNestedOneWithoutEventInputSchema: z.ZodType<Prisma.QuizCreateNestedOneWithoutEventInput> = z.object({
  create: z.union([ z.lazy(() => QuizCreateWithoutEventInputSchema),z.lazy(() => QuizUncheckedCreateWithoutEventInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => QuizCreateOrConnectWithoutEventInputSchema).optional(),
  connect: z.lazy(() => QuizWhereUniqueInputSchema).optional()
}).strict();

export const EventActionCreateNestedManyWithoutEventInputSchema: z.ZodType<Prisma.EventActionCreateNestedManyWithoutEventInput> = z.object({
  create: z.union([ z.lazy(() => EventActionCreateWithoutEventInputSchema),z.lazy(() => EventActionCreateWithoutEventInputSchema).array(),z.lazy(() => EventActionUncheckedCreateWithoutEventInputSchema),z.lazy(() => EventActionUncheckedCreateWithoutEventInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => EventActionCreateOrConnectWithoutEventInputSchema),z.lazy(() => EventActionCreateOrConnectWithoutEventInputSchema).array() ]).optional(),
  createMany: z.lazy(() => EventActionCreateManyEventInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => EventActionWhereUniqueInputSchema),z.lazy(() => EventActionWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const FileCreateNestedManyWithoutEventInputSchema: z.ZodType<Prisma.FileCreateNestedManyWithoutEventInput> = z.object({
  create: z.union([ z.lazy(() => FileCreateWithoutEventInputSchema),z.lazy(() => FileCreateWithoutEventInputSchema).array(),z.lazy(() => FileUncheckedCreateWithoutEventInputSchema),z.lazy(() => FileUncheckedCreateWithoutEventInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => FileCreateOrConnectWithoutEventInputSchema),z.lazy(() => FileCreateOrConnectWithoutEventInputSchema).array() ]).optional(),
  createMany: z.lazy(() => FileCreateManyEventInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => FileWhereUniqueInputSchema),z.lazy(() => FileWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const PatientCreateNestedOneWithoutAppointmentsInputSchema: z.ZodType<Prisma.PatientCreateNestedOneWithoutAppointmentsInput> = z.object({
  create: z.union([ z.lazy(() => PatientCreateWithoutAppointmentsInputSchema),z.lazy(() => PatientUncheckedCreateWithoutAppointmentsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => PatientCreateOrConnectWithoutAppointmentsInputSchema).optional(),
  connect: z.lazy(() => PatientWhereUniqueInputSchema).optional()
}).strict();

export const UserCreateNestedOneWithoutEventsInputSchema: z.ZodType<Prisma.UserCreateNestedOneWithoutEventsInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutEventsInputSchema),z.lazy(() => UserUncheckedCreateWithoutEventsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutEventsInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional()
}).strict();

export const TenantCreateNestedOneWithoutEventsInputSchema: z.ZodType<Prisma.TenantCreateNestedOneWithoutEventsInput> = z.object({
  create: z.union([ z.lazy(() => TenantCreateWithoutEventsInputSchema),z.lazy(() => TenantUncheckedCreateWithoutEventsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => TenantCreateOrConnectWithoutEventsInputSchema).optional(),
  connect: z.lazy(() => TenantWhereUniqueInputSchema).optional()
}).strict();

export const VisitUncheckedCreateNestedManyWithoutEventInputSchema: z.ZodType<Prisma.VisitUncheckedCreateNestedManyWithoutEventInput> = z.object({
  create: z.union([ z.lazy(() => VisitCreateWithoutEventInputSchema),z.lazy(() => VisitCreateWithoutEventInputSchema).array(),z.lazy(() => VisitUncheckedCreateWithoutEventInputSchema),z.lazy(() => VisitUncheckedCreateWithoutEventInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => VisitCreateOrConnectWithoutEventInputSchema),z.lazy(() => VisitCreateOrConnectWithoutEventInputSchema).array() ]).optional(),
  createMany: z.lazy(() => VisitCreateManyEventInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => VisitWhereUniqueInputSchema),z.lazy(() => VisitWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const QuizUncheckedCreateNestedOneWithoutEventInputSchema: z.ZodType<Prisma.QuizUncheckedCreateNestedOneWithoutEventInput> = z.object({
  create: z.union([ z.lazy(() => QuizCreateWithoutEventInputSchema),z.lazy(() => QuizUncheckedCreateWithoutEventInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => QuizCreateOrConnectWithoutEventInputSchema).optional(),
  connect: z.lazy(() => QuizWhereUniqueInputSchema).optional()
}).strict();

export const EventActionUncheckedCreateNestedManyWithoutEventInputSchema: z.ZodType<Prisma.EventActionUncheckedCreateNestedManyWithoutEventInput> = z.object({
  create: z.union([ z.lazy(() => EventActionCreateWithoutEventInputSchema),z.lazy(() => EventActionCreateWithoutEventInputSchema).array(),z.lazy(() => EventActionUncheckedCreateWithoutEventInputSchema),z.lazy(() => EventActionUncheckedCreateWithoutEventInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => EventActionCreateOrConnectWithoutEventInputSchema),z.lazy(() => EventActionCreateOrConnectWithoutEventInputSchema).array() ]).optional(),
  createMany: z.lazy(() => EventActionCreateManyEventInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => EventActionWhereUniqueInputSchema),z.lazy(() => EventActionWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const FileUncheckedCreateNestedManyWithoutEventInputSchema: z.ZodType<Prisma.FileUncheckedCreateNestedManyWithoutEventInput> = z.object({
  create: z.union([ z.lazy(() => FileCreateWithoutEventInputSchema),z.lazy(() => FileCreateWithoutEventInputSchema).array(),z.lazy(() => FileUncheckedCreateWithoutEventInputSchema),z.lazy(() => FileUncheckedCreateWithoutEventInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => FileCreateOrConnectWithoutEventInputSchema),z.lazy(() => FileCreateOrConnectWithoutEventInputSchema).array() ]).optional(),
  createMany: z.lazy(() => FileCreateManyEventInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => FileWhereUniqueInputSchema),z.lazy(() => FileWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const EnumEventTypeFieldUpdateOperationsInputSchema: z.ZodType<Prisma.EnumEventTypeFieldUpdateOperationsInput> = z.object({
  set: z.lazy(() => EventTypeSchema).optional()
}).strict();

export const EnumEventStatusFieldUpdateOperationsInputSchema: z.ZodType<Prisma.EnumEventStatusFieldUpdateOperationsInput> = z.object({
  set: z.lazy(() => EventStatusSchema).optional()
}).strict();

export const EnumEventInitiatorFieldUpdateOperationsInputSchema: z.ZodType<Prisma.EnumEventInitiatorFieldUpdateOperationsInput> = z.object({
  set: z.lazy(() => EventInitiatorSchema).optional()
}).strict();

export const VisitUpdateManyWithoutEventNestedInputSchema: z.ZodType<Prisma.VisitUpdateManyWithoutEventNestedInput> = z.object({
  create: z.union([ z.lazy(() => VisitCreateWithoutEventInputSchema),z.lazy(() => VisitCreateWithoutEventInputSchema).array(),z.lazy(() => VisitUncheckedCreateWithoutEventInputSchema),z.lazy(() => VisitUncheckedCreateWithoutEventInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => VisitCreateOrConnectWithoutEventInputSchema),z.lazy(() => VisitCreateOrConnectWithoutEventInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => VisitUpsertWithWhereUniqueWithoutEventInputSchema),z.lazy(() => VisitUpsertWithWhereUniqueWithoutEventInputSchema).array() ]).optional(),
  createMany: z.lazy(() => VisitCreateManyEventInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => VisitWhereUniqueInputSchema),z.lazy(() => VisitWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => VisitWhereUniqueInputSchema),z.lazy(() => VisitWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => VisitWhereUniqueInputSchema),z.lazy(() => VisitWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => VisitWhereUniqueInputSchema),z.lazy(() => VisitWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => VisitUpdateWithWhereUniqueWithoutEventInputSchema),z.lazy(() => VisitUpdateWithWhereUniqueWithoutEventInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => VisitUpdateManyWithWhereWithoutEventInputSchema),z.lazy(() => VisitUpdateManyWithWhereWithoutEventInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => VisitScalarWhereInputSchema),z.lazy(() => VisitScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const QuizUpdateOneWithoutEventNestedInputSchema: z.ZodType<Prisma.QuizUpdateOneWithoutEventNestedInput> = z.object({
  create: z.union([ z.lazy(() => QuizCreateWithoutEventInputSchema),z.lazy(() => QuizUncheckedCreateWithoutEventInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => QuizCreateOrConnectWithoutEventInputSchema).optional(),
  upsert: z.lazy(() => QuizUpsertWithoutEventInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => QuizWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => QuizWhereInputSchema) ]).optional(),
  connect: z.lazy(() => QuizWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => QuizUpdateToOneWithWhereWithoutEventInputSchema),z.lazy(() => QuizUpdateWithoutEventInputSchema),z.lazy(() => QuizUncheckedUpdateWithoutEventInputSchema) ]).optional(),
}).strict();

export const EventActionUpdateManyWithoutEventNestedInputSchema: z.ZodType<Prisma.EventActionUpdateManyWithoutEventNestedInput> = z.object({
  create: z.union([ z.lazy(() => EventActionCreateWithoutEventInputSchema),z.lazy(() => EventActionCreateWithoutEventInputSchema).array(),z.lazy(() => EventActionUncheckedCreateWithoutEventInputSchema),z.lazy(() => EventActionUncheckedCreateWithoutEventInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => EventActionCreateOrConnectWithoutEventInputSchema),z.lazy(() => EventActionCreateOrConnectWithoutEventInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => EventActionUpsertWithWhereUniqueWithoutEventInputSchema),z.lazy(() => EventActionUpsertWithWhereUniqueWithoutEventInputSchema).array() ]).optional(),
  createMany: z.lazy(() => EventActionCreateManyEventInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => EventActionWhereUniqueInputSchema),z.lazy(() => EventActionWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => EventActionWhereUniqueInputSchema),z.lazy(() => EventActionWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => EventActionWhereUniqueInputSchema),z.lazy(() => EventActionWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => EventActionWhereUniqueInputSchema),z.lazy(() => EventActionWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => EventActionUpdateWithWhereUniqueWithoutEventInputSchema),z.lazy(() => EventActionUpdateWithWhereUniqueWithoutEventInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => EventActionUpdateManyWithWhereWithoutEventInputSchema),z.lazy(() => EventActionUpdateManyWithWhereWithoutEventInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => EventActionScalarWhereInputSchema),z.lazy(() => EventActionScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const FileUpdateManyWithoutEventNestedInputSchema: z.ZodType<Prisma.FileUpdateManyWithoutEventNestedInput> = z.object({
  create: z.union([ z.lazy(() => FileCreateWithoutEventInputSchema),z.lazy(() => FileCreateWithoutEventInputSchema).array(),z.lazy(() => FileUncheckedCreateWithoutEventInputSchema),z.lazy(() => FileUncheckedCreateWithoutEventInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => FileCreateOrConnectWithoutEventInputSchema),z.lazy(() => FileCreateOrConnectWithoutEventInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => FileUpsertWithWhereUniqueWithoutEventInputSchema),z.lazy(() => FileUpsertWithWhereUniqueWithoutEventInputSchema).array() ]).optional(),
  createMany: z.lazy(() => FileCreateManyEventInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => FileWhereUniqueInputSchema),z.lazy(() => FileWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => FileWhereUniqueInputSchema),z.lazy(() => FileWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => FileWhereUniqueInputSchema),z.lazy(() => FileWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => FileWhereUniqueInputSchema),z.lazy(() => FileWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => FileUpdateWithWhereUniqueWithoutEventInputSchema),z.lazy(() => FileUpdateWithWhereUniqueWithoutEventInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => FileUpdateManyWithWhereWithoutEventInputSchema),z.lazy(() => FileUpdateManyWithWhereWithoutEventInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => FileScalarWhereInputSchema),z.lazy(() => FileScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const PatientUpdateOneWithoutAppointmentsNestedInputSchema: z.ZodType<Prisma.PatientUpdateOneWithoutAppointmentsNestedInput> = z.object({
  create: z.union([ z.lazy(() => PatientCreateWithoutAppointmentsInputSchema),z.lazy(() => PatientUncheckedCreateWithoutAppointmentsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => PatientCreateOrConnectWithoutAppointmentsInputSchema).optional(),
  upsert: z.lazy(() => PatientUpsertWithoutAppointmentsInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => PatientWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => PatientWhereInputSchema) ]).optional(),
  connect: z.lazy(() => PatientWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => PatientUpdateToOneWithWhereWithoutAppointmentsInputSchema),z.lazy(() => PatientUpdateWithoutAppointmentsInputSchema),z.lazy(() => PatientUncheckedUpdateWithoutAppointmentsInputSchema) ]).optional(),
}).strict();

export const UserUpdateOneRequiredWithoutEventsNestedInputSchema: z.ZodType<Prisma.UserUpdateOneRequiredWithoutEventsNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutEventsInputSchema),z.lazy(() => UserUncheckedCreateWithoutEventsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutEventsInputSchema).optional(),
  upsert: z.lazy(() => UserUpsertWithoutEventsInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => UserUpdateToOneWithWhereWithoutEventsInputSchema),z.lazy(() => UserUpdateWithoutEventsInputSchema),z.lazy(() => UserUncheckedUpdateWithoutEventsInputSchema) ]).optional(),
}).strict();

export const TenantUpdateOneRequiredWithoutEventsNestedInputSchema: z.ZodType<Prisma.TenantUpdateOneRequiredWithoutEventsNestedInput> = z.object({
  create: z.union([ z.lazy(() => TenantCreateWithoutEventsInputSchema),z.lazy(() => TenantUncheckedCreateWithoutEventsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => TenantCreateOrConnectWithoutEventsInputSchema).optional(),
  upsert: z.lazy(() => TenantUpsertWithoutEventsInputSchema).optional(),
  connect: z.lazy(() => TenantWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => TenantUpdateToOneWithWhereWithoutEventsInputSchema),z.lazy(() => TenantUpdateWithoutEventsInputSchema),z.lazy(() => TenantUncheckedUpdateWithoutEventsInputSchema) ]).optional(),
}).strict();

export const VisitUncheckedUpdateManyWithoutEventNestedInputSchema: z.ZodType<Prisma.VisitUncheckedUpdateManyWithoutEventNestedInput> = z.object({
  create: z.union([ z.lazy(() => VisitCreateWithoutEventInputSchema),z.lazy(() => VisitCreateWithoutEventInputSchema).array(),z.lazy(() => VisitUncheckedCreateWithoutEventInputSchema),z.lazy(() => VisitUncheckedCreateWithoutEventInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => VisitCreateOrConnectWithoutEventInputSchema),z.lazy(() => VisitCreateOrConnectWithoutEventInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => VisitUpsertWithWhereUniqueWithoutEventInputSchema),z.lazy(() => VisitUpsertWithWhereUniqueWithoutEventInputSchema).array() ]).optional(),
  createMany: z.lazy(() => VisitCreateManyEventInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => VisitWhereUniqueInputSchema),z.lazy(() => VisitWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => VisitWhereUniqueInputSchema),z.lazy(() => VisitWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => VisitWhereUniqueInputSchema),z.lazy(() => VisitWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => VisitWhereUniqueInputSchema),z.lazy(() => VisitWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => VisitUpdateWithWhereUniqueWithoutEventInputSchema),z.lazy(() => VisitUpdateWithWhereUniqueWithoutEventInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => VisitUpdateManyWithWhereWithoutEventInputSchema),z.lazy(() => VisitUpdateManyWithWhereWithoutEventInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => VisitScalarWhereInputSchema),z.lazy(() => VisitScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const QuizUncheckedUpdateOneWithoutEventNestedInputSchema: z.ZodType<Prisma.QuizUncheckedUpdateOneWithoutEventNestedInput> = z.object({
  create: z.union([ z.lazy(() => QuizCreateWithoutEventInputSchema),z.lazy(() => QuizUncheckedCreateWithoutEventInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => QuizCreateOrConnectWithoutEventInputSchema).optional(),
  upsert: z.lazy(() => QuizUpsertWithoutEventInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => QuizWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => QuizWhereInputSchema) ]).optional(),
  connect: z.lazy(() => QuizWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => QuizUpdateToOneWithWhereWithoutEventInputSchema),z.lazy(() => QuizUpdateWithoutEventInputSchema),z.lazy(() => QuizUncheckedUpdateWithoutEventInputSchema) ]).optional(),
}).strict();

export const EventActionUncheckedUpdateManyWithoutEventNestedInputSchema: z.ZodType<Prisma.EventActionUncheckedUpdateManyWithoutEventNestedInput> = z.object({
  create: z.union([ z.lazy(() => EventActionCreateWithoutEventInputSchema),z.lazy(() => EventActionCreateWithoutEventInputSchema).array(),z.lazy(() => EventActionUncheckedCreateWithoutEventInputSchema),z.lazy(() => EventActionUncheckedCreateWithoutEventInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => EventActionCreateOrConnectWithoutEventInputSchema),z.lazy(() => EventActionCreateOrConnectWithoutEventInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => EventActionUpsertWithWhereUniqueWithoutEventInputSchema),z.lazy(() => EventActionUpsertWithWhereUniqueWithoutEventInputSchema).array() ]).optional(),
  createMany: z.lazy(() => EventActionCreateManyEventInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => EventActionWhereUniqueInputSchema),z.lazy(() => EventActionWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => EventActionWhereUniqueInputSchema),z.lazy(() => EventActionWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => EventActionWhereUniqueInputSchema),z.lazy(() => EventActionWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => EventActionWhereUniqueInputSchema),z.lazy(() => EventActionWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => EventActionUpdateWithWhereUniqueWithoutEventInputSchema),z.lazy(() => EventActionUpdateWithWhereUniqueWithoutEventInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => EventActionUpdateManyWithWhereWithoutEventInputSchema),z.lazy(() => EventActionUpdateManyWithWhereWithoutEventInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => EventActionScalarWhereInputSchema),z.lazy(() => EventActionScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const FileUncheckedUpdateManyWithoutEventNestedInputSchema: z.ZodType<Prisma.FileUncheckedUpdateManyWithoutEventNestedInput> = z.object({
  create: z.union([ z.lazy(() => FileCreateWithoutEventInputSchema),z.lazy(() => FileCreateWithoutEventInputSchema).array(),z.lazy(() => FileUncheckedCreateWithoutEventInputSchema),z.lazy(() => FileUncheckedCreateWithoutEventInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => FileCreateOrConnectWithoutEventInputSchema),z.lazy(() => FileCreateOrConnectWithoutEventInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => FileUpsertWithWhereUniqueWithoutEventInputSchema),z.lazy(() => FileUpsertWithWhereUniqueWithoutEventInputSchema).array() ]).optional(),
  createMany: z.lazy(() => FileCreateManyEventInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => FileWhereUniqueInputSchema),z.lazy(() => FileWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => FileWhereUniqueInputSchema),z.lazy(() => FileWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => FileWhereUniqueInputSchema),z.lazy(() => FileWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => FileWhereUniqueInputSchema),z.lazy(() => FileWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => FileUpdateWithWhereUniqueWithoutEventInputSchema),z.lazy(() => FileUpdateWithWhereUniqueWithoutEventInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => FileUpdateManyWithWhereWithoutEventInputSchema),z.lazy(() => FileUpdateManyWithWhereWithoutEventInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => FileScalarWhereInputSchema),z.lazy(() => FileScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const UserCreateNestedOneWithoutEventActionsInputSchema: z.ZodType<Prisma.UserCreateNestedOneWithoutEventActionsInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutEventActionsInputSchema),z.lazy(() => UserUncheckedCreateWithoutEventActionsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutEventActionsInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional()
}).strict();

export const EventCreateNestedOneWithoutActionsInputSchema: z.ZodType<Prisma.EventCreateNestedOneWithoutActionsInput> = z.object({
  create: z.union([ z.lazy(() => EventCreateWithoutActionsInputSchema),z.lazy(() => EventUncheckedCreateWithoutActionsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => EventCreateOrConnectWithoutActionsInputSchema).optional(),
  connect: z.lazy(() => EventWhereUniqueInputSchema).optional()
}).strict();

export const UserUpdateOneRequiredWithoutEventActionsNestedInputSchema: z.ZodType<Prisma.UserUpdateOneRequiredWithoutEventActionsNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutEventActionsInputSchema),z.lazy(() => UserUncheckedCreateWithoutEventActionsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutEventActionsInputSchema).optional(),
  upsert: z.lazy(() => UserUpsertWithoutEventActionsInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => UserUpdateToOneWithWhereWithoutEventActionsInputSchema),z.lazy(() => UserUpdateWithoutEventActionsInputSchema),z.lazy(() => UserUncheckedUpdateWithoutEventActionsInputSchema) ]).optional(),
}).strict();

export const EventUpdateOneRequiredWithoutActionsNestedInputSchema: z.ZodType<Prisma.EventUpdateOneRequiredWithoutActionsNestedInput> = z.object({
  create: z.union([ z.lazy(() => EventCreateWithoutActionsInputSchema),z.lazy(() => EventUncheckedCreateWithoutActionsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => EventCreateOrConnectWithoutActionsInputSchema).optional(),
  upsert: z.lazy(() => EventUpsertWithoutActionsInputSchema).optional(),
  connect: z.lazy(() => EventWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => EventUpdateToOneWithWhereWithoutActionsInputSchema),z.lazy(() => EventUpdateWithoutActionsInputSchema),z.lazy(() => EventUncheckedUpdateWithoutActionsInputSchema) ]).optional(),
}).strict();

export const MaterialCreatetagsInputSchema: z.ZodType<Prisma.MaterialCreatetagsInput> = z.object({
  set: z.string().array()
}).strict();

export const ServiceMaterialCreateNestedManyWithoutMaterialInputSchema: z.ZodType<Prisma.ServiceMaterialCreateNestedManyWithoutMaterialInput> = z.object({
  create: z.union([ z.lazy(() => ServiceMaterialCreateWithoutMaterialInputSchema),z.lazy(() => ServiceMaterialCreateWithoutMaterialInputSchema).array(),z.lazy(() => ServiceMaterialUncheckedCreateWithoutMaterialInputSchema),z.lazy(() => ServiceMaterialUncheckedCreateWithoutMaterialInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ServiceMaterialCreateOrConnectWithoutMaterialInputSchema),z.lazy(() => ServiceMaterialCreateOrConnectWithoutMaterialInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ServiceMaterialCreateManyMaterialInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ServiceMaterialWhereUniqueInputSchema),z.lazy(() => ServiceMaterialWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const TenantCreateNestedOneWithoutMaterialsInputSchema: z.ZodType<Prisma.TenantCreateNestedOneWithoutMaterialsInput> = z.object({
  create: z.union([ z.lazy(() => TenantCreateWithoutMaterialsInputSchema),z.lazy(() => TenantUncheckedCreateWithoutMaterialsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => TenantCreateOrConnectWithoutMaterialsInputSchema).optional(),
  connect: z.lazy(() => TenantWhereUniqueInputSchema).optional()
}).strict();

export const ServiceMaterialUncheckedCreateNestedManyWithoutMaterialInputSchema: z.ZodType<Prisma.ServiceMaterialUncheckedCreateNestedManyWithoutMaterialInput> = z.object({
  create: z.union([ z.lazy(() => ServiceMaterialCreateWithoutMaterialInputSchema),z.lazy(() => ServiceMaterialCreateWithoutMaterialInputSchema).array(),z.lazy(() => ServiceMaterialUncheckedCreateWithoutMaterialInputSchema),z.lazy(() => ServiceMaterialUncheckedCreateWithoutMaterialInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ServiceMaterialCreateOrConnectWithoutMaterialInputSchema),z.lazy(() => ServiceMaterialCreateOrConnectWithoutMaterialInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ServiceMaterialCreateManyMaterialInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ServiceMaterialWhereUniqueInputSchema),z.lazy(() => ServiceMaterialWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const MaterialUpdatetagsInputSchema: z.ZodType<Prisma.MaterialUpdatetagsInput> = z.object({
  set: z.string().array().optional(),
  push: z.union([ z.string(),z.string().array() ]).optional(),
}).strict();

export const ServiceMaterialUpdateManyWithoutMaterialNestedInputSchema: z.ZodType<Prisma.ServiceMaterialUpdateManyWithoutMaterialNestedInput> = z.object({
  create: z.union([ z.lazy(() => ServiceMaterialCreateWithoutMaterialInputSchema),z.lazy(() => ServiceMaterialCreateWithoutMaterialInputSchema).array(),z.lazy(() => ServiceMaterialUncheckedCreateWithoutMaterialInputSchema),z.lazy(() => ServiceMaterialUncheckedCreateWithoutMaterialInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ServiceMaterialCreateOrConnectWithoutMaterialInputSchema),z.lazy(() => ServiceMaterialCreateOrConnectWithoutMaterialInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ServiceMaterialUpsertWithWhereUniqueWithoutMaterialInputSchema),z.lazy(() => ServiceMaterialUpsertWithWhereUniqueWithoutMaterialInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ServiceMaterialCreateManyMaterialInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ServiceMaterialWhereUniqueInputSchema),z.lazy(() => ServiceMaterialWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ServiceMaterialWhereUniqueInputSchema),z.lazy(() => ServiceMaterialWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ServiceMaterialWhereUniqueInputSchema),z.lazy(() => ServiceMaterialWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ServiceMaterialWhereUniqueInputSchema),z.lazy(() => ServiceMaterialWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ServiceMaterialUpdateWithWhereUniqueWithoutMaterialInputSchema),z.lazy(() => ServiceMaterialUpdateWithWhereUniqueWithoutMaterialInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ServiceMaterialUpdateManyWithWhereWithoutMaterialInputSchema),z.lazy(() => ServiceMaterialUpdateManyWithWhereWithoutMaterialInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ServiceMaterialScalarWhereInputSchema),z.lazy(() => ServiceMaterialScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const TenantUpdateOneRequiredWithoutMaterialsNestedInputSchema: z.ZodType<Prisma.TenantUpdateOneRequiredWithoutMaterialsNestedInput> = z.object({
  create: z.union([ z.lazy(() => TenantCreateWithoutMaterialsInputSchema),z.lazy(() => TenantUncheckedCreateWithoutMaterialsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => TenantCreateOrConnectWithoutMaterialsInputSchema).optional(),
  upsert: z.lazy(() => TenantUpsertWithoutMaterialsInputSchema).optional(),
  connect: z.lazy(() => TenantWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => TenantUpdateToOneWithWhereWithoutMaterialsInputSchema),z.lazy(() => TenantUpdateWithoutMaterialsInputSchema),z.lazy(() => TenantUncheckedUpdateWithoutMaterialsInputSchema) ]).optional(),
}).strict();

export const ServiceMaterialUncheckedUpdateManyWithoutMaterialNestedInputSchema: z.ZodType<Prisma.ServiceMaterialUncheckedUpdateManyWithoutMaterialNestedInput> = z.object({
  create: z.union([ z.lazy(() => ServiceMaterialCreateWithoutMaterialInputSchema),z.lazy(() => ServiceMaterialCreateWithoutMaterialInputSchema).array(),z.lazy(() => ServiceMaterialUncheckedCreateWithoutMaterialInputSchema),z.lazy(() => ServiceMaterialUncheckedCreateWithoutMaterialInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ServiceMaterialCreateOrConnectWithoutMaterialInputSchema),z.lazy(() => ServiceMaterialCreateOrConnectWithoutMaterialInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ServiceMaterialUpsertWithWhereUniqueWithoutMaterialInputSchema),z.lazy(() => ServiceMaterialUpsertWithWhereUniqueWithoutMaterialInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ServiceMaterialCreateManyMaterialInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ServiceMaterialWhereUniqueInputSchema),z.lazy(() => ServiceMaterialWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ServiceMaterialWhereUniqueInputSchema),z.lazy(() => ServiceMaterialWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ServiceMaterialWhereUniqueInputSchema),z.lazy(() => ServiceMaterialWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ServiceMaterialWhereUniqueInputSchema),z.lazy(() => ServiceMaterialWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ServiceMaterialUpdateWithWhereUniqueWithoutMaterialInputSchema),z.lazy(() => ServiceMaterialUpdateWithWhereUniqueWithoutMaterialInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ServiceMaterialUpdateManyWithWhereWithoutMaterialInputSchema),z.lazy(() => ServiceMaterialUpdateManyWithWhereWithoutMaterialInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ServiceMaterialScalarWhereInputSchema),z.lazy(() => ServiceMaterialScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ServiceCreatetagsInputSchema: z.ZodType<Prisma.ServiceCreatetagsInput> = z.object({
  set: z.string().array()
}).strict();

export const TenantCreateNestedOneWithoutServicesInputSchema: z.ZodType<Prisma.TenantCreateNestedOneWithoutServicesInput> = z.object({
  create: z.union([ z.lazy(() => TenantCreateWithoutServicesInputSchema),z.lazy(() => TenantUncheckedCreateWithoutServicesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => TenantCreateOrConnectWithoutServicesInputSchema).optional(),
  connect: z.lazy(() => TenantWhereUniqueInputSchema).optional()
}).strict();

export const ServiceCategoryCreateNestedOneWithoutServicesInputSchema: z.ZodType<Prisma.ServiceCategoryCreateNestedOneWithoutServicesInput> = z.object({
  create: z.union([ z.lazy(() => ServiceCategoryCreateWithoutServicesInputSchema),z.lazy(() => ServiceCategoryUncheckedCreateWithoutServicesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ServiceCategoryCreateOrConnectWithoutServicesInputSchema).optional(),
  connect: z.lazy(() => ServiceCategoryWhereUniqueInputSchema).optional()
}).strict();

export const ServiceMaterialCreateNestedManyWithoutServiceInputSchema: z.ZodType<Prisma.ServiceMaterialCreateNestedManyWithoutServiceInput> = z.object({
  create: z.union([ z.lazy(() => ServiceMaterialCreateWithoutServiceInputSchema),z.lazy(() => ServiceMaterialCreateWithoutServiceInputSchema).array(),z.lazy(() => ServiceMaterialUncheckedCreateWithoutServiceInputSchema),z.lazy(() => ServiceMaterialUncheckedCreateWithoutServiceInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ServiceMaterialCreateOrConnectWithoutServiceInputSchema),z.lazy(() => ServiceMaterialCreateOrConnectWithoutServiceInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ServiceMaterialCreateManyServiceInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ServiceMaterialWhereUniqueInputSchema),z.lazy(() => ServiceMaterialWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const VisitCreateNestedManyWithoutServiceInputSchema: z.ZodType<Prisma.VisitCreateNestedManyWithoutServiceInput> = z.object({
  create: z.union([ z.lazy(() => VisitCreateWithoutServiceInputSchema),z.lazy(() => VisitCreateWithoutServiceInputSchema).array(),z.lazy(() => VisitUncheckedCreateWithoutServiceInputSchema),z.lazy(() => VisitUncheckedCreateWithoutServiceInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => VisitCreateOrConnectWithoutServiceInputSchema),z.lazy(() => VisitCreateOrConnectWithoutServiceInputSchema).array() ]).optional(),
  createMany: z.lazy(() => VisitCreateManyServiceInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => VisitWhereUniqueInputSchema),z.lazy(() => VisitWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const RelatedServiceCreateNestedManyWithoutParentInputSchema: z.ZodType<Prisma.RelatedServiceCreateNestedManyWithoutParentInput> = z.object({
  create: z.union([ z.lazy(() => RelatedServiceCreateWithoutParentInputSchema),z.lazy(() => RelatedServiceCreateWithoutParentInputSchema).array(),z.lazy(() => RelatedServiceUncheckedCreateWithoutParentInputSchema),z.lazy(() => RelatedServiceUncheckedCreateWithoutParentInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => RelatedServiceCreateOrConnectWithoutParentInputSchema),z.lazy(() => RelatedServiceCreateOrConnectWithoutParentInputSchema).array() ]).optional(),
  createMany: z.lazy(() => RelatedServiceCreateManyParentInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => RelatedServiceWhereUniqueInputSchema),z.lazy(() => RelatedServiceWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ServiceMaterialUncheckedCreateNestedManyWithoutServiceInputSchema: z.ZodType<Prisma.ServiceMaterialUncheckedCreateNestedManyWithoutServiceInput> = z.object({
  create: z.union([ z.lazy(() => ServiceMaterialCreateWithoutServiceInputSchema),z.lazy(() => ServiceMaterialCreateWithoutServiceInputSchema).array(),z.lazy(() => ServiceMaterialUncheckedCreateWithoutServiceInputSchema),z.lazy(() => ServiceMaterialUncheckedCreateWithoutServiceInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ServiceMaterialCreateOrConnectWithoutServiceInputSchema),z.lazy(() => ServiceMaterialCreateOrConnectWithoutServiceInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ServiceMaterialCreateManyServiceInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ServiceMaterialWhereUniqueInputSchema),z.lazy(() => ServiceMaterialWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const VisitUncheckedCreateNestedManyWithoutServiceInputSchema: z.ZodType<Prisma.VisitUncheckedCreateNestedManyWithoutServiceInput> = z.object({
  create: z.union([ z.lazy(() => VisitCreateWithoutServiceInputSchema),z.lazy(() => VisitCreateWithoutServiceInputSchema).array(),z.lazy(() => VisitUncheckedCreateWithoutServiceInputSchema),z.lazy(() => VisitUncheckedCreateWithoutServiceInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => VisitCreateOrConnectWithoutServiceInputSchema),z.lazy(() => VisitCreateOrConnectWithoutServiceInputSchema).array() ]).optional(),
  createMany: z.lazy(() => VisitCreateManyServiceInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => VisitWhereUniqueInputSchema),z.lazy(() => VisitWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const RelatedServiceUncheckedCreateNestedManyWithoutParentInputSchema: z.ZodType<Prisma.RelatedServiceUncheckedCreateNestedManyWithoutParentInput> = z.object({
  create: z.union([ z.lazy(() => RelatedServiceCreateWithoutParentInputSchema),z.lazy(() => RelatedServiceCreateWithoutParentInputSchema).array(),z.lazy(() => RelatedServiceUncheckedCreateWithoutParentInputSchema),z.lazy(() => RelatedServiceUncheckedCreateWithoutParentInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => RelatedServiceCreateOrConnectWithoutParentInputSchema),z.lazy(() => RelatedServiceCreateOrConnectWithoutParentInputSchema).array() ]).optional(),
  createMany: z.lazy(() => RelatedServiceCreateManyParentInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => RelatedServiceWhereUniqueInputSchema),z.lazy(() => RelatedServiceWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const EnumServiceUnitFieldUpdateOperationsInputSchema: z.ZodType<Prisma.EnumServiceUnitFieldUpdateOperationsInput> = z.object({
  set: z.lazy(() => ServiceUnitSchema).optional()
}).strict();

export const ServiceUpdatetagsInputSchema: z.ZodType<Prisma.ServiceUpdatetagsInput> = z.object({
  set: z.string().array().optional(),
  push: z.union([ z.string(),z.string().array() ]).optional(),
}).strict();

export const TenantUpdateOneRequiredWithoutServicesNestedInputSchema: z.ZodType<Prisma.TenantUpdateOneRequiredWithoutServicesNestedInput> = z.object({
  create: z.union([ z.lazy(() => TenantCreateWithoutServicesInputSchema),z.lazy(() => TenantUncheckedCreateWithoutServicesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => TenantCreateOrConnectWithoutServicesInputSchema).optional(),
  upsert: z.lazy(() => TenantUpsertWithoutServicesInputSchema).optional(),
  connect: z.lazy(() => TenantWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => TenantUpdateToOneWithWhereWithoutServicesInputSchema),z.lazy(() => TenantUpdateWithoutServicesInputSchema),z.lazy(() => TenantUncheckedUpdateWithoutServicesInputSchema) ]).optional(),
}).strict();

export const ServiceCategoryUpdateOneWithoutServicesNestedInputSchema: z.ZodType<Prisma.ServiceCategoryUpdateOneWithoutServicesNestedInput> = z.object({
  create: z.union([ z.lazy(() => ServiceCategoryCreateWithoutServicesInputSchema),z.lazy(() => ServiceCategoryUncheckedCreateWithoutServicesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ServiceCategoryCreateOrConnectWithoutServicesInputSchema).optional(),
  upsert: z.lazy(() => ServiceCategoryUpsertWithoutServicesInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => ServiceCategoryWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => ServiceCategoryWhereInputSchema) ]).optional(),
  connect: z.lazy(() => ServiceCategoryWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => ServiceCategoryUpdateToOneWithWhereWithoutServicesInputSchema),z.lazy(() => ServiceCategoryUpdateWithoutServicesInputSchema),z.lazy(() => ServiceCategoryUncheckedUpdateWithoutServicesInputSchema) ]).optional(),
}).strict();

export const ServiceMaterialUpdateManyWithoutServiceNestedInputSchema: z.ZodType<Prisma.ServiceMaterialUpdateManyWithoutServiceNestedInput> = z.object({
  create: z.union([ z.lazy(() => ServiceMaterialCreateWithoutServiceInputSchema),z.lazy(() => ServiceMaterialCreateWithoutServiceInputSchema).array(),z.lazy(() => ServiceMaterialUncheckedCreateWithoutServiceInputSchema),z.lazy(() => ServiceMaterialUncheckedCreateWithoutServiceInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ServiceMaterialCreateOrConnectWithoutServiceInputSchema),z.lazy(() => ServiceMaterialCreateOrConnectWithoutServiceInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ServiceMaterialUpsertWithWhereUniqueWithoutServiceInputSchema),z.lazy(() => ServiceMaterialUpsertWithWhereUniqueWithoutServiceInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ServiceMaterialCreateManyServiceInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ServiceMaterialWhereUniqueInputSchema),z.lazy(() => ServiceMaterialWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ServiceMaterialWhereUniqueInputSchema),z.lazy(() => ServiceMaterialWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ServiceMaterialWhereUniqueInputSchema),z.lazy(() => ServiceMaterialWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ServiceMaterialWhereUniqueInputSchema),z.lazy(() => ServiceMaterialWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ServiceMaterialUpdateWithWhereUniqueWithoutServiceInputSchema),z.lazy(() => ServiceMaterialUpdateWithWhereUniqueWithoutServiceInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ServiceMaterialUpdateManyWithWhereWithoutServiceInputSchema),z.lazy(() => ServiceMaterialUpdateManyWithWhereWithoutServiceInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ServiceMaterialScalarWhereInputSchema),z.lazy(() => ServiceMaterialScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const VisitUpdateManyWithoutServiceNestedInputSchema: z.ZodType<Prisma.VisitUpdateManyWithoutServiceNestedInput> = z.object({
  create: z.union([ z.lazy(() => VisitCreateWithoutServiceInputSchema),z.lazy(() => VisitCreateWithoutServiceInputSchema).array(),z.lazy(() => VisitUncheckedCreateWithoutServiceInputSchema),z.lazy(() => VisitUncheckedCreateWithoutServiceInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => VisitCreateOrConnectWithoutServiceInputSchema),z.lazy(() => VisitCreateOrConnectWithoutServiceInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => VisitUpsertWithWhereUniqueWithoutServiceInputSchema),z.lazy(() => VisitUpsertWithWhereUniqueWithoutServiceInputSchema).array() ]).optional(),
  createMany: z.lazy(() => VisitCreateManyServiceInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => VisitWhereUniqueInputSchema),z.lazy(() => VisitWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => VisitWhereUniqueInputSchema),z.lazy(() => VisitWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => VisitWhereUniqueInputSchema),z.lazy(() => VisitWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => VisitWhereUniqueInputSchema),z.lazy(() => VisitWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => VisitUpdateWithWhereUniqueWithoutServiceInputSchema),z.lazy(() => VisitUpdateWithWhereUniqueWithoutServiceInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => VisitUpdateManyWithWhereWithoutServiceInputSchema),z.lazy(() => VisitUpdateManyWithWhereWithoutServiceInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => VisitScalarWhereInputSchema),z.lazy(() => VisitScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const RelatedServiceUpdateManyWithoutParentNestedInputSchema: z.ZodType<Prisma.RelatedServiceUpdateManyWithoutParentNestedInput> = z.object({
  create: z.union([ z.lazy(() => RelatedServiceCreateWithoutParentInputSchema),z.lazy(() => RelatedServiceCreateWithoutParentInputSchema).array(),z.lazy(() => RelatedServiceUncheckedCreateWithoutParentInputSchema),z.lazy(() => RelatedServiceUncheckedCreateWithoutParentInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => RelatedServiceCreateOrConnectWithoutParentInputSchema),z.lazy(() => RelatedServiceCreateOrConnectWithoutParentInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => RelatedServiceUpsertWithWhereUniqueWithoutParentInputSchema),z.lazy(() => RelatedServiceUpsertWithWhereUniqueWithoutParentInputSchema).array() ]).optional(),
  createMany: z.lazy(() => RelatedServiceCreateManyParentInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => RelatedServiceWhereUniqueInputSchema),z.lazy(() => RelatedServiceWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => RelatedServiceWhereUniqueInputSchema),z.lazy(() => RelatedServiceWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => RelatedServiceWhereUniqueInputSchema),z.lazy(() => RelatedServiceWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => RelatedServiceWhereUniqueInputSchema),z.lazy(() => RelatedServiceWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => RelatedServiceUpdateWithWhereUniqueWithoutParentInputSchema),z.lazy(() => RelatedServiceUpdateWithWhereUniqueWithoutParentInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => RelatedServiceUpdateManyWithWhereWithoutParentInputSchema),z.lazy(() => RelatedServiceUpdateManyWithWhereWithoutParentInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => RelatedServiceScalarWhereInputSchema),z.lazy(() => RelatedServiceScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ServiceMaterialUncheckedUpdateManyWithoutServiceNestedInputSchema: z.ZodType<Prisma.ServiceMaterialUncheckedUpdateManyWithoutServiceNestedInput> = z.object({
  create: z.union([ z.lazy(() => ServiceMaterialCreateWithoutServiceInputSchema),z.lazy(() => ServiceMaterialCreateWithoutServiceInputSchema).array(),z.lazy(() => ServiceMaterialUncheckedCreateWithoutServiceInputSchema),z.lazy(() => ServiceMaterialUncheckedCreateWithoutServiceInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ServiceMaterialCreateOrConnectWithoutServiceInputSchema),z.lazy(() => ServiceMaterialCreateOrConnectWithoutServiceInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ServiceMaterialUpsertWithWhereUniqueWithoutServiceInputSchema),z.lazy(() => ServiceMaterialUpsertWithWhereUniqueWithoutServiceInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ServiceMaterialCreateManyServiceInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ServiceMaterialWhereUniqueInputSchema),z.lazy(() => ServiceMaterialWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ServiceMaterialWhereUniqueInputSchema),z.lazy(() => ServiceMaterialWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ServiceMaterialWhereUniqueInputSchema),z.lazy(() => ServiceMaterialWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ServiceMaterialWhereUniqueInputSchema),z.lazy(() => ServiceMaterialWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ServiceMaterialUpdateWithWhereUniqueWithoutServiceInputSchema),z.lazy(() => ServiceMaterialUpdateWithWhereUniqueWithoutServiceInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ServiceMaterialUpdateManyWithWhereWithoutServiceInputSchema),z.lazy(() => ServiceMaterialUpdateManyWithWhereWithoutServiceInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ServiceMaterialScalarWhereInputSchema),z.lazy(() => ServiceMaterialScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const VisitUncheckedUpdateManyWithoutServiceNestedInputSchema: z.ZodType<Prisma.VisitUncheckedUpdateManyWithoutServiceNestedInput> = z.object({
  create: z.union([ z.lazy(() => VisitCreateWithoutServiceInputSchema),z.lazy(() => VisitCreateWithoutServiceInputSchema).array(),z.lazy(() => VisitUncheckedCreateWithoutServiceInputSchema),z.lazy(() => VisitUncheckedCreateWithoutServiceInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => VisitCreateOrConnectWithoutServiceInputSchema),z.lazy(() => VisitCreateOrConnectWithoutServiceInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => VisitUpsertWithWhereUniqueWithoutServiceInputSchema),z.lazy(() => VisitUpsertWithWhereUniqueWithoutServiceInputSchema).array() ]).optional(),
  createMany: z.lazy(() => VisitCreateManyServiceInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => VisitWhereUniqueInputSchema),z.lazy(() => VisitWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => VisitWhereUniqueInputSchema),z.lazy(() => VisitWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => VisitWhereUniqueInputSchema),z.lazy(() => VisitWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => VisitWhereUniqueInputSchema),z.lazy(() => VisitWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => VisitUpdateWithWhereUniqueWithoutServiceInputSchema),z.lazy(() => VisitUpdateWithWhereUniqueWithoutServiceInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => VisitUpdateManyWithWhereWithoutServiceInputSchema),z.lazy(() => VisitUpdateManyWithWhereWithoutServiceInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => VisitScalarWhereInputSchema),z.lazy(() => VisitScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const RelatedServiceUncheckedUpdateManyWithoutParentNestedInputSchema: z.ZodType<Prisma.RelatedServiceUncheckedUpdateManyWithoutParentNestedInput> = z.object({
  create: z.union([ z.lazy(() => RelatedServiceCreateWithoutParentInputSchema),z.lazy(() => RelatedServiceCreateWithoutParentInputSchema).array(),z.lazy(() => RelatedServiceUncheckedCreateWithoutParentInputSchema),z.lazy(() => RelatedServiceUncheckedCreateWithoutParentInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => RelatedServiceCreateOrConnectWithoutParentInputSchema),z.lazy(() => RelatedServiceCreateOrConnectWithoutParentInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => RelatedServiceUpsertWithWhereUniqueWithoutParentInputSchema),z.lazy(() => RelatedServiceUpsertWithWhereUniqueWithoutParentInputSchema).array() ]).optional(),
  createMany: z.lazy(() => RelatedServiceCreateManyParentInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => RelatedServiceWhereUniqueInputSchema),z.lazy(() => RelatedServiceWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => RelatedServiceWhereUniqueInputSchema),z.lazy(() => RelatedServiceWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => RelatedServiceWhereUniqueInputSchema),z.lazy(() => RelatedServiceWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => RelatedServiceWhereUniqueInputSchema),z.lazy(() => RelatedServiceWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => RelatedServiceUpdateWithWhereUniqueWithoutParentInputSchema),z.lazy(() => RelatedServiceUpdateWithWhereUniqueWithoutParentInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => RelatedServiceUpdateManyWithWhereWithoutParentInputSchema),z.lazy(() => RelatedServiceUpdateManyWithWhereWithoutParentInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => RelatedServiceScalarWhereInputSchema),z.lazy(() => RelatedServiceScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ServiceCreateNestedOneWithoutChildrenInputSchema: z.ZodType<Prisma.ServiceCreateNestedOneWithoutChildrenInput> = z.object({
  create: z.union([ z.lazy(() => ServiceCreateWithoutChildrenInputSchema),z.lazy(() => ServiceUncheckedCreateWithoutChildrenInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ServiceCreateOrConnectWithoutChildrenInputSchema).optional(),
  connect: z.lazy(() => ServiceWhereUniqueInputSchema).optional()
}).strict();

export const ServiceUpdateOneRequiredWithoutChildrenNestedInputSchema: z.ZodType<Prisma.ServiceUpdateOneRequiredWithoutChildrenNestedInput> = z.object({
  create: z.union([ z.lazy(() => ServiceCreateWithoutChildrenInputSchema),z.lazy(() => ServiceUncheckedCreateWithoutChildrenInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ServiceCreateOrConnectWithoutChildrenInputSchema).optional(),
  upsert: z.lazy(() => ServiceUpsertWithoutChildrenInputSchema).optional(),
  connect: z.lazy(() => ServiceWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => ServiceUpdateToOneWithWhereWithoutChildrenInputSchema),z.lazy(() => ServiceUpdateWithoutChildrenInputSchema),z.lazy(() => ServiceUncheckedUpdateWithoutChildrenInputSchema) ]).optional(),
}).strict();

export const ServiceCreateNestedOneWithoutMaterialsInputSchema: z.ZodType<Prisma.ServiceCreateNestedOneWithoutMaterialsInput> = z.object({
  create: z.union([ z.lazy(() => ServiceCreateWithoutMaterialsInputSchema),z.lazy(() => ServiceUncheckedCreateWithoutMaterialsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ServiceCreateOrConnectWithoutMaterialsInputSchema).optional(),
  connect: z.lazy(() => ServiceWhereUniqueInputSchema).optional()
}).strict();

export const MaterialCreateNestedOneWithoutServicesInputSchema: z.ZodType<Prisma.MaterialCreateNestedOneWithoutServicesInput> = z.object({
  create: z.union([ z.lazy(() => MaterialCreateWithoutServicesInputSchema),z.lazy(() => MaterialUncheckedCreateWithoutServicesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => MaterialCreateOrConnectWithoutServicesInputSchema).optional(),
  connect: z.lazy(() => MaterialWhereUniqueInputSchema).optional()
}).strict();

export const ServiceUpdateOneRequiredWithoutMaterialsNestedInputSchema: z.ZodType<Prisma.ServiceUpdateOneRequiredWithoutMaterialsNestedInput> = z.object({
  create: z.union([ z.lazy(() => ServiceCreateWithoutMaterialsInputSchema),z.lazy(() => ServiceUncheckedCreateWithoutMaterialsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ServiceCreateOrConnectWithoutMaterialsInputSchema).optional(),
  upsert: z.lazy(() => ServiceUpsertWithoutMaterialsInputSchema).optional(),
  connect: z.lazy(() => ServiceWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => ServiceUpdateToOneWithWhereWithoutMaterialsInputSchema),z.lazy(() => ServiceUpdateWithoutMaterialsInputSchema),z.lazy(() => ServiceUncheckedUpdateWithoutMaterialsInputSchema) ]).optional(),
}).strict();

export const MaterialUpdateOneRequiredWithoutServicesNestedInputSchema: z.ZodType<Prisma.MaterialUpdateOneRequiredWithoutServicesNestedInput> = z.object({
  create: z.union([ z.lazy(() => MaterialCreateWithoutServicesInputSchema),z.lazy(() => MaterialUncheckedCreateWithoutServicesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => MaterialCreateOrConnectWithoutServicesInputSchema).optional(),
  upsert: z.lazy(() => MaterialUpsertWithoutServicesInputSchema).optional(),
  connect: z.lazy(() => MaterialWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => MaterialUpdateToOneWithWhereWithoutServicesInputSchema),z.lazy(() => MaterialUpdateWithoutServicesInputSchema),z.lazy(() => MaterialUncheckedUpdateWithoutServicesInputSchema) ]).optional(),
}).strict();

export const EnumPriceTypeFieldUpdateOperationsInputSchema: z.ZodType<Prisma.EnumPriceTypeFieldUpdateOperationsInput> = z.object({
  set: z.lazy(() => PriceTypeSchema).optional()
}).strict();

export const ServiceCreateNestedManyWithoutCategoryInputSchema: z.ZodType<Prisma.ServiceCreateNestedManyWithoutCategoryInput> = z.object({
  create: z.union([ z.lazy(() => ServiceCreateWithoutCategoryInputSchema),z.lazy(() => ServiceCreateWithoutCategoryInputSchema).array(),z.lazy(() => ServiceUncheckedCreateWithoutCategoryInputSchema),z.lazy(() => ServiceUncheckedCreateWithoutCategoryInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ServiceCreateOrConnectWithoutCategoryInputSchema),z.lazy(() => ServiceCreateOrConnectWithoutCategoryInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ServiceCreateManyCategoryInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ServiceWhereUniqueInputSchema),z.lazy(() => ServiceWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ServiceUncheckedCreateNestedManyWithoutCategoryInputSchema: z.ZodType<Prisma.ServiceUncheckedCreateNestedManyWithoutCategoryInput> = z.object({
  create: z.union([ z.lazy(() => ServiceCreateWithoutCategoryInputSchema),z.lazy(() => ServiceCreateWithoutCategoryInputSchema).array(),z.lazy(() => ServiceUncheckedCreateWithoutCategoryInputSchema),z.lazy(() => ServiceUncheckedCreateWithoutCategoryInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ServiceCreateOrConnectWithoutCategoryInputSchema),z.lazy(() => ServiceCreateOrConnectWithoutCategoryInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ServiceCreateManyCategoryInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ServiceWhereUniqueInputSchema),z.lazy(() => ServiceWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ServiceUpdateManyWithoutCategoryNestedInputSchema: z.ZodType<Prisma.ServiceUpdateManyWithoutCategoryNestedInput> = z.object({
  create: z.union([ z.lazy(() => ServiceCreateWithoutCategoryInputSchema),z.lazy(() => ServiceCreateWithoutCategoryInputSchema).array(),z.lazy(() => ServiceUncheckedCreateWithoutCategoryInputSchema),z.lazy(() => ServiceUncheckedCreateWithoutCategoryInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ServiceCreateOrConnectWithoutCategoryInputSchema),z.lazy(() => ServiceCreateOrConnectWithoutCategoryInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ServiceUpsertWithWhereUniqueWithoutCategoryInputSchema),z.lazy(() => ServiceUpsertWithWhereUniqueWithoutCategoryInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ServiceCreateManyCategoryInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ServiceWhereUniqueInputSchema),z.lazy(() => ServiceWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ServiceWhereUniqueInputSchema),z.lazy(() => ServiceWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ServiceWhereUniqueInputSchema),z.lazy(() => ServiceWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ServiceWhereUniqueInputSchema),z.lazy(() => ServiceWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ServiceUpdateWithWhereUniqueWithoutCategoryInputSchema),z.lazy(() => ServiceUpdateWithWhereUniqueWithoutCategoryInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ServiceUpdateManyWithWhereWithoutCategoryInputSchema),z.lazy(() => ServiceUpdateManyWithWhereWithoutCategoryInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ServiceScalarWhereInputSchema),z.lazy(() => ServiceScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ServiceUncheckedUpdateManyWithoutCategoryNestedInputSchema: z.ZodType<Prisma.ServiceUncheckedUpdateManyWithoutCategoryNestedInput> = z.object({
  create: z.union([ z.lazy(() => ServiceCreateWithoutCategoryInputSchema),z.lazy(() => ServiceCreateWithoutCategoryInputSchema).array(),z.lazy(() => ServiceUncheckedCreateWithoutCategoryInputSchema),z.lazy(() => ServiceUncheckedCreateWithoutCategoryInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ServiceCreateOrConnectWithoutCategoryInputSchema),z.lazy(() => ServiceCreateOrConnectWithoutCategoryInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ServiceUpsertWithWhereUniqueWithoutCategoryInputSchema),z.lazy(() => ServiceUpsertWithWhereUniqueWithoutCategoryInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ServiceCreateManyCategoryInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ServiceWhereUniqueInputSchema),z.lazy(() => ServiceWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ServiceWhereUniqueInputSchema),z.lazy(() => ServiceWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ServiceWhereUniqueInputSchema),z.lazy(() => ServiceWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ServiceWhereUniqueInputSchema),z.lazy(() => ServiceWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ServiceUpdateWithWhereUniqueWithoutCategoryInputSchema),z.lazy(() => ServiceUpdateWithWhereUniqueWithoutCategoryInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ServiceUpdateManyWithWhereWithoutCategoryInputSchema),z.lazy(() => ServiceUpdateManyWithWhereWithoutCategoryInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ServiceScalarWhereInputSchema),z.lazy(() => ServiceScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const TreatmentPlanCreateNestedOneWithoutTreatmentsInputSchema: z.ZodType<Prisma.TreatmentPlanCreateNestedOneWithoutTreatmentsInput> = z.object({
  create: z.union([ z.lazy(() => TreatmentPlanCreateWithoutTreatmentsInputSchema),z.lazy(() => TreatmentPlanUncheckedCreateWithoutTreatmentsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => TreatmentPlanCreateOrConnectWithoutTreatmentsInputSchema).optional(),
  connect: z.lazy(() => TreatmentPlanWhereUniqueInputSchema).optional()
}).strict();

export const VisitCreateNestedManyWithoutTreatmentInputSchema: z.ZodType<Prisma.VisitCreateNestedManyWithoutTreatmentInput> = z.object({
  create: z.union([ z.lazy(() => VisitCreateWithoutTreatmentInputSchema),z.lazy(() => VisitCreateWithoutTreatmentInputSchema).array(),z.lazy(() => VisitUncheckedCreateWithoutTreatmentInputSchema),z.lazy(() => VisitUncheckedCreateWithoutTreatmentInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => VisitCreateOrConnectWithoutTreatmentInputSchema),z.lazy(() => VisitCreateOrConnectWithoutTreatmentInputSchema).array() ]).optional(),
  createMany: z.lazy(() => VisitCreateManyTreatmentInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => VisitWhereUniqueInputSchema),z.lazy(() => VisitWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const VisitUncheckedCreateNestedManyWithoutTreatmentInputSchema: z.ZodType<Prisma.VisitUncheckedCreateNestedManyWithoutTreatmentInput> = z.object({
  create: z.union([ z.lazy(() => VisitCreateWithoutTreatmentInputSchema),z.lazy(() => VisitCreateWithoutTreatmentInputSchema).array(),z.lazy(() => VisitUncheckedCreateWithoutTreatmentInputSchema),z.lazy(() => VisitUncheckedCreateWithoutTreatmentInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => VisitCreateOrConnectWithoutTreatmentInputSchema),z.lazy(() => VisitCreateOrConnectWithoutTreatmentInputSchema).array() ]).optional(),
  createMany: z.lazy(() => VisitCreateManyTreatmentInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => VisitWhereUniqueInputSchema),z.lazy(() => VisitWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const EnumTreatmentStatusFieldUpdateOperationsInputSchema: z.ZodType<Prisma.EnumTreatmentStatusFieldUpdateOperationsInput> = z.object({
  set: z.lazy(() => TreatmentStatusSchema).optional()
}).strict();

export const TreatmentPlanUpdateOneWithoutTreatmentsNestedInputSchema: z.ZodType<Prisma.TreatmentPlanUpdateOneWithoutTreatmentsNestedInput> = z.object({
  create: z.union([ z.lazy(() => TreatmentPlanCreateWithoutTreatmentsInputSchema),z.lazy(() => TreatmentPlanUncheckedCreateWithoutTreatmentsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => TreatmentPlanCreateOrConnectWithoutTreatmentsInputSchema).optional(),
  upsert: z.lazy(() => TreatmentPlanUpsertWithoutTreatmentsInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => TreatmentPlanWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => TreatmentPlanWhereInputSchema) ]).optional(),
  connect: z.lazy(() => TreatmentPlanWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => TreatmentPlanUpdateToOneWithWhereWithoutTreatmentsInputSchema),z.lazy(() => TreatmentPlanUpdateWithoutTreatmentsInputSchema),z.lazy(() => TreatmentPlanUncheckedUpdateWithoutTreatmentsInputSchema) ]).optional(),
}).strict();

export const VisitUpdateManyWithoutTreatmentNestedInputSchema: z.ZodType<Prisma.VisitUpdateManyWithoutTreatmentNestedInput> = z.object({
  create: z.union([ z.lazy(() => VisitCreateWithoutTreatmentInputSchema),z.lazy(() => VisitCreateWithoutTreatmentInputSchema).array(),z.lazy(() => VisitUncheckedCreateWithoutTreatmentInputSchema),z.lazy(() => VisitUncheckedCreateWithoutTreatmentInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => VisitCreateOrConnectWithoutTreatmentInputSchema),z.lazy(() => VisitCreateOrConnectWithoutTreatmentInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => VisitUpsertWithWhereUniqueWithoutTreatmentInputSchema),z.lazy(() => VisitUpsertWithWhereUniqueWithoutTreatmentInputSchema).array() ]).optional(),
  createMany: z.lazy(() => VisitCreateManyTreatmentInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => VisitWhereUniqueInputSchema),z.lazy(() => VisitWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => VisitWhereUniqueInputSchema),z.lazy(() => VisitWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => VisitWhereUniqueInputSchema),z.lazy(() => VisitWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => VisitWhereUniqueInputSchema),z.lazy(() => VisitWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => VisitUpdateWithWhereUniqueWithoutTreatmentInputSchema),z.lazy(() => VisitUpdateWithWhereUniqueWithoutTreatmentInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => VisitUpdateManyWithWhereWithoutTreatmentInputSchema),z.lazy(() => VisitUpdateManyWithWhereWithoutTreatmentInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => VisitScalarWhereInputSchema),z.lazy(() => VisitScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const VisitUncheckedUpdateManyWithoutTreatmentNestedInputSchema: z.ZodType<Prisma.VisitUncheckedUpdateManyWithoutTreatmentNestedInput> = z.object({
  create: z.union([ z.lazy(() => VisitCreateWithoutTreatmentInputSchema),z.lazy(() => VisitCreateWithoutTreatmentInputSchema).array(),z.lazy(() => VisitUncheckedCreateWithoutTreatmentInputSchema),z.lazy(() => VisitUncheckedCreateWithoutTreatmentInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => VisitCreateOrConnectWithoutTreatmentInputSchema),z.lazy(() => VisitCreateOrConnectWithoutTreatmentInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => VisitUpsertWithWhereUniqueWithoutTreatmentInputSchema),z.lazy(() => VisitUpsertWithWhereUniqueWithoutTreatmentInputSchema).array() ]).optional(),
  createMany: z.lazy(() => VisitCreateManyTreatmentInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => VisitWhereUniqueInputSchema),z.lazy(() => VisitWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => VisitWhereUniqueInputSchema),z.lazy(() => VisitWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => VisitWhereUniqueInputSchema),z.lazy(() => VisitWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => VisitWhereUniqueInputSchema),z.lazy(() => VisitWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => VisitUpdateWithWhereUniqueWithoutTreatmentInputSchema),z.lazy(() => VisitUpdateWithWhereUniqueWithoutTreatmentInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => VisitUpdateManyWithWhereWithoutTreatmentInputSchema),z.lazy(() => VisitUpdateManyWithWhereWithoutTreatmentInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => VisitScalarWhereInputSchema),z.lazy(() => VisitScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ServiceCreateNestedOneWithoutVisitsInputSchema: z.ZodType<Prisma.ServiceCreateNestedOneWithoutVisitsInput> = z.object({
  create: z.union([ z.lazy(() => ServiceCreateWithoutVisitsInputSchema),z.lazy(() => ServiceUncheckedCreateWithoutVisitsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ServiceCreateOrConnectWithoutVisitsInputSchema).optional(),
  connect: z.lazy(() => ServiceWhereUniqueInputSchema).optional()
}).strict();

export const TreatmentCreateNestedOneWithoutVisitsInputSchema: z.ZodType<Prisma.TreatmentCreateNestedOneWithoutVisitsInput> = z.object({
  create: z.union([ z.lazy(() => TreatmentCreateWithoutVisitsInputSchema),z.lazy(() => TreatmentUncheckedCreateWithoutVisitsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => TreatmentCreateOrConnectWithoutVisitsInputSchema).optional(),
  connect: z.lazy(() => TreatmentWhereUniqueInputSchema).optional()
}).strict();

export const EventCreateNestedOneWithoutVisitsInputSchema: z.ZodType<Prisma.EventCreateNestedOneWithoutVisitsInput> = z.object({
  create: z.union([ z.lazy(() => EventCreateWithoutVisitsInputSchema),z.lazy(() => EventUncheckedCreateWithoutVisitsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => EventCreateOrConnectWithoutVisitsInputSchema).optional(),
  connect: z.lazy(() => EventWhereUniqueInputSchema).optional()
}).strict();

export const ServiceUpdateOneRequiredWithoutVisitsNestedInputSchema: z.ZodType<Prisma.ServiceUpdateOneRequiredWithoutVisitsNestedInput> = z.object({
  create: z.union([ z.lazy(() => ServiceCreateWithoutVisitsInputSchema),z.lazy(() => ServiceUncheckedCreateWithoutVisitsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ServiceCreateOrConnectWithoutVisitsInputSchema).optional(),
  upsert: z.lazy(() => ServiceUpsertWithoutVisitsInputSchema).optional(),
  connect: z.lazy(() => ServiceWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => ServiceUpdateToOneWithWhereWithoutVisitsInputSchema),z.lazy(() => ServiceUpdateWithoutVisitsInputSchema),z.lazy(() => ServiceUncheckedUpdateWithoutVisitsInputSchema) ]).optional(),
}).strict();

export const TreatmentUpdateOneRequiredWithoutVisitsNestedInputSchema: z.ZodType<Prisma.TreatmentUpdateOneRequiredWithoutVisitsNestedInput> = z.object({
  create: z.union([ z.lazy(() => TreatmentCreateWithoutVisitsInputSchema),z.lazy(() => TreatmentUncheckedCreateWithoutVisitsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => TreatmentCreateOrConnectWithoutVisitsInputSchema).optional(),
  upsert: z.lazy(() => TreatmentUpsertWithoutVisitsInputSchema).optional(),
  connect: z.lazy(() => TreatmentWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => TreatmentUpdateToOneWithWhereWithoutVisitsInputSchema),z.lazy(() => TreatmentUpdateWithoutVisitsInputSchema),z.lazy(() => TreatmentUncheckedUpdateWithoutVisitsInputSchema) ]).optional(),
}).strict();

export const EventUpdateOneWithoutVisitsNestedInputSchema: z.ZodType<Prisma.EventUpdateOneWithoutVisitsNestedInput> = z.object({
  create: z.union([ z.lazy(() => EventCreateWithoutVisitsInputSchema),z.lazy(() => EventUncheckedCreateWithoutVisitsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => EventCreateOrConnectWithoutVisitsInputSchema).optional(),
  upsert: z.lazy(() => EventUpsertWithoutVisitsInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => EventWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => EventWhereInputSchema) ]).optional(),
  connect: z.lazy(() => EventWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => EventUpdateToOneWithWhereWithoutVisitsInputSchema),z.lazy(() => EventUpdateWithoutVisitsInputSchema),z.lazy(() => EventUncheckedUpdateWithoutVisitsInputSchema) ]).optional(),
}).strict();

export const TreatmentCreateNestedManyWithoutTreatmentPlanInputSchema: z.ZodType<Prisma.TreatmentCreateNestedManyWithoutTreatmentPlanInput> = z.object({
  create: z.union([ z.lazy(() => TreatmentCreateWithoutTreatmentPlanInputSchema),z.lazy(() => TreatmentCreateWithoutTreatmentPlanInputSchema).array(),z.lazy(() => TreatmentUncheckedCreateWithoutTreatmentPlanInputSchema),z.lazy(() => TreatmentUncheckedCreateWithoutTreatmentPlanInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TreatmentCreateOrConnectWithoutTreatmentPlanInputSchema),z.lazy(() => TreatmentCreateOrConnectWithoutTreatmentPlanInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TreatmentCreateManyTreatmentPlanInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => TreatmentWhereUniqueInputSchema),z.lazy(() => TreatmentWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const PatientCreateNestedOneWithoutTreatmentPlansInputSchema: z.ZodType<Prisma.PatientCreateNestedOneWithoutTreatmentPlansInput> = z.object({
  create: z.union([ z.lazy(() => PatientCreateWithoutTreatmentPlansInputSchema),z.lazy(() => PatientUncheckedCreateWithoutTreatmentPlansInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => PatientCreateOrConnectWithoutTreatmentPlansInputSchema).optional(),
  connect: z.lazy(() => PatientWhereUniqueInputSchema).optional()
}).strict();

export const UserCreateNestedOneWithoutTreatmentPlansInputSchema: z.ZodType<Prisma.UserCreateNestedOneWithoutTreatmentPlansInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutTreatmentPlansInputSchema),z.lazy(() => UserUncheckedCreateWithoutTreatmentPlansInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutTreatmentPlansInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional()
}).strict();

export const TreatmentUncheckedCreateNestedManyWithoutTreatmentPlanInputSchema: z.ZodType<Prisma.TreatmentUncheckedCreateNestedManyWithoutTreatmentPlanInput> = z.object({
  create: z.union([ z.lazy(() => TreatmentCreateWithoutTreatmentPlanInputSchema),z.lazy(() => TreatmentCreateWithoutTreatmentPlanInputSchema).array(),z.lazy(() => TreatmentUncheckedCreateWithoutTreatmentPlanInputSchema),z.lazy(() => TreatmentUncheckedCreateWithoutTreatmentPlanInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TreatmentCreateOrConnectWithoutTreatmentPlanInputSchema),z.lazy(() => TreatmentCreateOrConnectWithoutTreatmentPlanInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TreatmentCreateManyTreatmentPlanInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => TreatmentWhereUniqueInputSchema),z.lazy(() => TreatmentWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const TreatmentUpdateManyWithoutTreatmentPlanNestedInputSchema: z.ZodType<Prisma.TreatmentUpdateManyWithoutTreatmentPlanNestedInput> = z.object({
  create: z.union([ z.lazy(() => TreatmentCreateWithoutTreatmentPlanInputSchema),z.lazy(() => TreatmentCreateWithoutTreatmentPlanInputSchema).array(),z.lazy(() => TreatmentUncheckedCreateWithoutTreatmentPlanInputSchema),z.lazy(() => TreatmentUncheckedCreateWithoutTreatmentPlanInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TreatmentCreateOrConnectWithoutTreatmentPlanInputSchema),z.lazy(() => TreatmentCreateOrConnectWithoutTreatmentPlanInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => TreatmentUpsertWithWhereUniqueWithoutTreatmentPlanInputSchema),z.lazy(() => TreatmentUpsertWithWhereUniqueWithoutTreatmentPlanInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TreatmentCreateManyTreatmentPlanInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => TreatmentWhereUniqueInputSchema),z.lazy(() => TreatmentWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => TreatmentWhereUniqueInputSchema),z.lazy(() => TreatmentWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => TreatmentWhereUniqueInputSchema),z.lazy(() => TreatmentWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => TreatmentWhereUniqueInputSchema),z.lazy(() => TreatmentWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => TreatmentUpdateWithWhereUniqueWithoutTreatmentPlanInputSchema),z.lazy(() => TreatmentUpdateWithWhereUniqueWithoutTreatmentPlanInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => TreatmentUpdateManyWithWhereWithoutTreatmentPlanInputSchema),z.lazy(() => TreatmentUpdateManyWithWhereWithoutTreatmentPlanInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => TreatmentScalarWhereInputSchema),z.lazy(() => TreatmentScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const PatientUpdateOneRequiredWithoutTreatmentPlansNestedInputSchema: z.ZodType<Prisma.PatientUpdateOneRequiredWithoutTreatmentPlansNestedInput> = z.object({
  create: z.union([ z.lazy(() => PatientCreateWithoutTreatmentPlansInputSchema),z.lazy(() => PatientUncheckedCreateWithoutTreatmentPlansInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => PatientCreateOrConnectWithoutTreatmentPlansInputSchema).optional(),
  upsert: z.lazy(() => PatientUpsertWithoutTreatmentPlansInputSchema).optional(),
  connect: z.lazy(() => PatientWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => PatientUpdateToOneWithWhereWithoutTreatmentPlansInputSchema),z.lazy(() => PatientUpdateWithoutTreatmentPlansInputSchema),z.lazy(() => PatientUncheckedUpdateWithoutTreatmentPlansInputSchema) ]).optional(),
}).strict();

export const UserUpdateOneRequiredWithoutTreatmentPlansNestedInputSchema: z.ZodType<Prisma.UserUpdateOneRequiredWithoutTreatmentPlansNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutTreatmentPlansInputSchema),z.lazy(() => UserUncheckedCreateWithoutTreatmentPlansInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutTreatmentPlansInputSchema).optional(),
  upsert: z.lazy(() => UserUpsertWithoutTreatmentPlansInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => UserUpdateToOneWithWhereWithoutTreatmentPlansInputSchema),z.lazy(() => UserUpdateWithoutTreatmentPlansInputSchema),z.lazy(() => UserUncheckedUpdateWithoutTreatmentPlansInputSchema) ]).optional(),
}).strict();

export const TreatmentUncheckedUpdateManyWithoutTreatmentPlanNestedInputSchema: z.ZodType<Prisma.TreatmentUncheckedUpdateManyWithoutTreatmentPlanNestedInput> = z.object({
  create: z.union([ z.lazy(() => TreatmentCreateWithoutTreatmentPlanInputSchema),z.lazy(() => TreatmentCreateWithoutTreatmentPlanInputSchema).array(),z.lazy(() => TreatmentUncheckedCreateWithoutTreatmentPlanInputSchema),z.lazy(() => TreatmentUncheckedCreateWithoutTreatmentPlanInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TreatmentCreateOrConnectWithoutTreatmentPlanInputSchema),z.lazy(() => TreatmentCreateOrConnectWithoutTreatmentPlanInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => TreatmentUpsertWithWhereUniqueWithoutTreatmentPlanInputSchema),z.lazy(() => TreatmentUpsertWithWhereUniqueWithoutTreatmentPlanInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TreatmentCreateManyTreatmentPlanInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => TreatmentWhereUniqueInputSchema),z.lazy(() => TreatmentWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => TreatmentWhereUniqueInputSchema),z.lazy(() => TreatmentWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => TreatmentWhereUniqueInputSchema),z.lazy(() => TreatmentWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => TreatmentWhereUniqueInputSchema),z.lazy(() => TreatmentWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => TreatmentUpdateWithWhereUniqueWithoutTreatmentPlanInputSchema),z.lazy(() => TreatmentUpdateWithWhereUniqueWithoutTreatmentPlanInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => TreatmentUpdateManyWithWhereWithoutTreatmentPlanInputSchema),z.lazy(() => TreatmentUpdateManyWithWhereWithoutTreatmentPlanInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => TreatmentScalarWhereInputSchema),z.lazy(() => TreatmentScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const QuizCreateanswersInputSchema: z.ZodType<Prisma.QuizCreateanswersInput> = z.object({
  set: z.number().array()
}).strict();

export const PatientCreateNestedOneWithoutQuizesInputSchema: z.ZodType<Prisma.PatientCreateNestedOneWithoutQuizesInput> = z.object({
  create: z.union([ z.lazy(() => PatientCreateWithoutQuizesInputSchema),z.lazy(() => PatientUncheckedCreateWithoutQuizesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => PatientCreateOrConnectWithoutQuizesInputSchema).optional(),
  connect: z.lazy(() => PatientWhereUniqueInputSchema).optional()
}).strict();

export const EventCreateNestedOneWithoutQuizInputSchema: z.ZodType<Prisma.EventCreateNestedOneWithoutQuizInput> = z.object({
  create: z.union([ z.lazy(() => EventCreateWithoutQuizInputSchema),z.lazy(() => EventUncheckedCreateWithoutQuizInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => EventCreateOrConnectWithoutQuizInputSchema).optional(),
  connect: z.lazy(() => EventWhereUniqueInputSchema).optional()
}).strict();

export const QuizUpdateanswersInputSchema: z.ZodType<Prisma.QuizUpdateanswersInput> = z.object({
  set: z.number().array().optional(),
  push: z.union([ z.number(),z.number().array() ]).optional(),
}).strict();

export const PatientUpdateOneRequiredWithoutQuizesNestedInputSchema: z.ZodType<Prisma.PatientUpdateOneRequiredWithoutQuizesNestedInput> = z.object({
  create: z.union([ z.lazy(() => PatientCreateWithoutQuizesInputSchema),z.lazy(() => PatientUncheckedCreateWithoutQuizesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => PatientCreateOrConnectWithoutQuizesInputSchema).optional(),
  upsert: z.lazy(() => PatientUpsertWithoutQuizesInputSchema).optional(),
  connect: z.lazy(() => PatientWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => PatientUpdateToOneWithWhereWithoutQuizesInputSchema),z.lazy(() => PatientUpdateWithoutQuizesInputSchema),z.lazy(() => PatientUncheckedUpdateWithoutQuizesInputSchema) ]).optional(),
}).strict();

export const EventUpdateOneWithoutQuizNestedInputSchema: z.ZodType<Prisma.EventUpdateOneWithoutQuizNestedInput> = z.object({
  create: z.union([ z.lazy(() => EventCreateWithoutQuizInputSchema),z.lazy(() => EventUncheckedCreateWithoutQuizInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => EventCreateOrConnectWithoutQuizInputSchema).optional(),
  upsert: z.lazy(() => EventUpsertWithoutQuizInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => EventWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => EventWhereInputSchema) ]).optional(),
  connect: z.lazy(() => EventWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => EventUpdateToOneWithWhereWithoutQuizInputSchema),z.lazy(() => EventUpdateWithoutQuizInputSchema),z.lazy(() => EventUncheckedUpdateWithoutQuizInputSchema) ]).optional(),
}).strict();

export const UserCreateNestedOneWithoutTasksInputSchema: z.ZodType<Prisma.UserCreateNestedOneWithoutTasksInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutTasksInputSchema),z.lazy(() => UserUncheckedCreateWithoutTasksInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutTasksInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional()
}).strict();

export const UserUpdateOneRequiredWithoutTasksNestedInputSchema: z.ZodType<Prisma.UserUpdateOneRequiredWithoutTasksNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutTasksInputSchema),z.lazy(() => UserUncheckedCreateWithoutTasksInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutTasksInputSchema).optional(),
  upsert: z.lazy(() => UserUpsertWithoutTasksInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => UserUpdateToOneWithWhereWithoutTasksInputSchema),z.lazy(() => UserUpdateWithoutTasksInputSchema),z.lazy(() => UserUncheckedUpdateWithoutTasksInputSchema) ]).optional(),
}).strict();

export const TenantCreateNestedOneWithoutFilesInputSchema: z.ZodType<Prisma.TenantCreateNestedOneWithoutFilesInput> = z.object({
  create: z.union([ z.lazy(() => TenantCreateWithoutFilesInputSchema),z.lazy(() => TenantUncheckedCreateWithoutFilesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => TenantCreateOrConnectWithoutFilesInputSchema).optional(),
  connect: z.lazy(() => TenantWhereUniqueInputSchema).optional()
}).strict();

export const UserCreateNestedOneWithoutFilesInputSchema: z.ZodType<Prisma.UserCreateNestedOneWithoutFilesInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutFilesInputSchema),z.lazy(() => UserUncheckedCreateWithoutFilesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutFilesInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional()
}).strict();

export const EventCreateNestedOneWithoutFilesInputSchema: z.ZodType<Prisma.EventCreateNestedOneWithoutFilesInput> = z.object({
  create: z.union([ z.lazy(() => EventCreateWithoutFilesInputSchema),z.lazy(() => EventUncheckedCreateWithoutFilesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => EventCreateOrConnectWithoutFilesInputSchema).optional(),
  connect: z.lazy(() => EventWhereUniqueInputSchema).optional()
}).strict();

export const PatientCreateNestedOneWithoutFilesInputSchema: z.ZodType<Prisma.PatientCreateNestedOneWithoutFilesInput> = z.object({
  create: z.union([ z.lazy(() => PatientCreateWithoutFilesInputSchema),z.lazy(() => PatientUncheckedCreateWithoutFilesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => PatientCreateOrConnectWithoutFilesInputSchema).optional(),
  connect: z.lazy(() => PatientWhereUniqueInputSchema).optional()
}).strict();

export const TenantUpdateOneRequiredWithoutFilesNestedInputSchema: z.ZodType<Prisma.TenantUpdateOneRequiredWithoutFilesNestedInput> = z.object({
  create: z.union([ z.lazy(() => TenantCreateWithoutFilesInputSchema),z.lazy(() => TenantUncheckedCreateWithoutFilesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => TenantCreateOrConnectWithoutFilesInputSchema).optional(),
  upsert: z.lazy(() => TenantUpsertWithoutFilesInputSchema).optional(),
  connect: z.lazy(() => TenantWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => TenantUpdateToOneWithWhereWithoutFilesInputSchema),z.lazy(() => TenantUpdateWithoutFilesInputSchema),z.lazy(() => TenantUncheckedUpdateWithoutFilesInputSchema) ]).optional(),
}).strict();

export const UserUpdateOneRequiredWithoutFilesNestedInputSchema: z.ZodType<Prisma.UserUpdateOneRequiredWithoutFilesNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutFilesInputSchema),z.lazy(() => UserUncheckedCreateWithoutFilesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutFilesInputSchema).optional(),
  upsert: z.lazy(() => UserUpsertWithoutFilesInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => UserUpdateToOneWithWhereWithoutFilesInputSchema),z.lazy(() => UserUpdateWithoutFilesInputSchema),z.lazy(() => UserUncheckedUpdateWithoutFilesInputSchema) ]).optional(),
}).strict();

export const EventUpdateOneWithoutFilesNestedInputSchema: z.ZodType<Prisma.EventUpdateOneWithoutFilesNestedInput> = z.object({
  create: z.union([ z.lazy(() => EventCreateWithoutFilesInputSchema),z.lazy(() => EventUncheckedCreateWithoutFilesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => EventCreateOrConnectWithoutFilesInputSchema).optional(),
  upsert: z.lazy(() => EventUpsertWithoutFilesInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => EventWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => EventWhereInputSchema) ]).optional(),
  connect: z.lazy(() => EventWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => EventUpdateToOneWithWhereWithoutFilesInputSchema),z.lazy(() => EventUpdateWithoutFilesInputSchema),z.lazy(() => EventUncheckedUpdateWithoutFilesInputSchema) ]).optional(),
}).strict();

export const PatientUpdateOneWithoutFilesNestedInputSchema: z.ZodType<Prisma.PatientUpdateOneWithoutFilesNestedInput> = z.object({
  create: z.union([ z.lazy(() => PatientCreateWithoutFilesInputSchema),z.lazy(() => PatientUncheckedCreateWithoutFilesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => PatientCreateOrConnectWithoutFilesInputSchema).optional(),
  upsert: z.lazy(() => PatientUpsertWithoutFilesInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => PatientWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => PatientWhereInputSchema) ]).optional(),
  connect: z.lazy(() => PatientWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => PatientUpdateToOneWithWhereWithoutFilesInputSchema),z.lazy(() => PatientUpdateWithoutFilesInputSchema),z.lazy(() => PatientUncheckedUpdateWithoutFilesInputSchema) ]).optional(),
}).strict();

export const ProfileCreateNestedOneWithoutAvatarInputSchema: z.ZodType<Prisma.ProfileCreateNestedOneWithoutAvatarInput> = z.object({
  create: z.union([ z.lazy(() => ProfileCreateWithoutAvatarInputSchema),z.lazy(() => ProfileUncheckedCreateWithoutAvatarInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ProfileCreateOrConnectWithoutAvatarInputSchema).optional(),
  connect: z.lazy(() => ProfileWhereUniqueInputSchema).optional()
}).strict();

export const TenantProfileCreateNestedOneWithoutAvatarInputSchema: z.ZodType<Prisma.TenantProfileCreateNestedOneWithoutAvatarInput> = z.object({
  create: z.union([ z.lazy(() => TenantProfileCreateWithoutAvatarInputSchema),z.lazy(() => TenantProfileUncheckedCreateWithoutAvatarInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => TenantProfileCreateOrConnectWithoutAvatarInputSchema).optional(),
  connect: z.lazy(() => TenantProfileWhereUniqueInputSchema).optional()
}).strict();

export const ProfileUpdateOneWithoutAvatarNestedInputSchema: z.ZodType<Prisma.ProfileUpdateOneWithoutAvatarNestedInput> = z.object({
  create: z.union([ z.lazy(() => ProfileCreateWithoutAvatarInputSchema),z.lazy(() => ProfileUncheckedCreateWithoutAvatarInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ProfileCreateOrConnectWithoutAvatarInputSchema).optional(),
  upsert: z.lazy(() => ProfileUpsertWithoutAvatarInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => ProfileWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => ProfileWhereInputSchema) ]).optional(),
  connect: z.lazy(() => ProfileWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => ProfileUpdateToOneWithWhereWithoutAvatarInputSchema),z.lazy(() => ProfileUpdateWithoutAvatarInputSchema),z.lazy(() => ProfileUncheckedUpdateWithoutAvatarInputSchema) ]).optional(),
}).strict();

export const TenantProfileUpdateOneWithoutAvatarNestedInputSchema: z.ZodType<Prisma.TenantProfileUpdateOneWithoutAvatarNestedInput> = z.object({
  create: z.union([ z.lazy(() => TenantProfileCreateWithoutAvatarInputSchema),z.lazy(() => TenantProfileUncheckedCreateWithoutAvatarInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => TenantProfileCreateOrConnectWithoutAvatarInputSchema).optional(),
  upsert: z.lazy(() => TenantProfileUpsertWithoutAvatarInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => TenantProfileWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => TenantProfileWhereInputSchema) ]).optional(),
  connect: z.lazy(() => TenantProfileWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => TenantProfileUpdateToOneWithWhereWithoutAvatarInputSchema),z.lazy(() => TenantProfileUpdateWithoutAvatarInputSchema),z.lazy(() => TenantProfileUncheckedUpdateWithoutAvatarInputSchema) ]).optional(),
}).strict();

export const CityCreateNestedManyWithoutCountyInputSchema: z.ZodType<Prisma.CityCreateNestedManyWithoutCountyInput> = z.object({
  create: z.union([ z.lazy(() => CityCreateWithoutCountyInputSchema),z.lazy(() => CityCreateWithoutCountyInputSchema).array(),z.lazy(() => CityUncheckedCreateWithoutCountyInputSchema),z.lazy(() => CityUncheckedCreateWithoutCountyInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CityCreateOrConnectWithoutCountyInputSchema),z.lazy(() => CityCreateOrConnectWithoutCountyInputSchema).array() ]).optional(),
  createMany: z.lazy(() => CityCreateManyCountyInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => CityWhereUniqueInputSchema),z.lazy(() => CityWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const CityUncheckedCreateNestedManyWithoutCountyInputSchema: z.ZodType<Prisma.CityUncheckedCreateNestedManyWithoutCountyInput> = z.object({
  create: z.union([ z.lazy(() => CityCreateWithoutCountyInputSchema),z.lazy(() => CityCreateWithoutCountyInputSchema).array(),z.lazy(() => CityUncheckedCreateWithoutCountyInputSchema),z.lazy(() => CityUncheckedCreateWithoutCountyInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CityCreateOrConnectWithoutCountyInputSchema),z.lazy(() => CityCreateOrConnectWithoutCountyInputSchema).array() ]).optional(),
  createMany: z.lazy(() => CityCreateManyCountyInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => CityWhereUniqueInputSchema),z.lazy(() => CityWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const CityUpdateManyWithoutCountyNestedInputSchema: z.ZodType<Prisma.CityUpdateManyWithoutCountyNestedInput> = z.object({
  create: z.union([ z.lazy(() => CityCreateWithoutCountyInputSchema),z.lazy(() => CityCreateWithoutCountyInputSchema).array(),z.lazy(() => CityUncheckedCreateWithoutCountyInputSchema),z.lazy(() => CityUncheckedCreateWithoutCountyInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CityCreateOrConnectWithoutCountyInputSchema),z.lazy(() => CityCreateOrConnectWithoutCountyInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => CityUpsertWithWhereUniqueWithoutCountyInputSchema),z.lazy(() => CityUpsertWithWhereUniqueWithoutCountyInputSchema).array() ]).optional(),
  createMany: z.lazy(() => CityCreateManyCountyInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => CityWhereUniqueInputSchema),z.lazy(() => CityWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => CityWhereUniqueInputSchema),z.lazy(() => CityWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => CityWhereUniqueInputSchema),z.lazy(() => CityWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => CityWhereUniqueInputSchema),z.lazy(() => CityWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => CityUpdateWithWhereUniqueWithoutCountyInputSchema),z.lazy(() => CityUpdateWithWhereUniqueWithoutCountyInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => CityUpdateManyWithWhereWithoutCountyInputSchema),z.lazy(() => CityUpdateManyWithWhereWithoutCountyInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => CityScalarWhereInputSchema),z.lazy(() => CityScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const CityUncheckedUpdateManyWithoutCountyNestedInputSchema: z.ZodType<Prisma.CityUncheckedUpdateManyWithoutCountyNestedInput> = z.object({
  create: z.union([ z.lazy(() => CityCreateWithoutCountyInputSchema),z.lazy(() => CityCreateWithoutCountyInputSchema).array(),z.lazy(() => CityUncheckedCreateWithoutCountyInputSchema),z.lazy(() => CityUncheckedCreateWithoutCountyInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CityCreateOrConnectWithoutCountyInputSchema),z.lazy(() => CityCreateOrConnectWithoutCountyInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => CityUpsertWithWhereUniqueWithoutCountyInputSchema),z.lazy(() => CityUpsertWithWhereUniqueWithoutCountyInputSchema).array() ]).optional(),
  createMany: z.lazy(() => CityCreateManyCountyInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => CityWhereUniqueInputSchema),z.lazy(() => CityWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => CityWhereUniqueInputSchema),z.lazy(() => CityWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => CityWhereUniqueInputSchema),z.lazy(() => CityWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => CityWhereUniqueInputSchema),z.lazy(() => CityWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => CityUpdateWithWhereUniqueWithoutCountyInputSchema),z.lazy(() => CityUpdateWithWhereUniqueWithoutCountyInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => CityUpdateManyWithWhereWithoutCountyInputSchema),z.lazy(() => CityUpdateManyWithWhereWithoutCountyInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => CityScalarWhereInputSchema),z.lazy(() => CityScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const CountyCreateNestedOneWithoutCitiesInputSchema: z.ZodType<Prisma.CountyCreateNestedOneWithoutCitiesInput> = z.object({
  create: z.union([ z.lazy(() => CountyCreateWithoutCitiesInputSchema),z.lazy(() => CountyUncheckedCreateWithoutCitiesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => CountyCreateOrConnectWithoutCitiesInputSchema).optional(),
  connect: z.lazy(() => CountyWhereUniqueInputSchema).optional()
}).strict();

export const CountyUpdateOneRequiredWithoutCitiesNestedInputSchema: z.ZodType<Prisma.CountyUpdateOneRequiredWithoutCitiesNestedInput> = z.object({
  create: z.union([ z.lazy(() => CountyCreateWithoutCitiesInputSchema),z.lazy(() => CountyUncheckedCreateWithoutCitiesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => CountyCreateOrConnectWithoutCitiesInputSchema).optional(),
  upsert: z.lazy(() => CountyUpsertWithoutCitiesInputSchema).optional(),
  connect: z.lazy(() => CountyWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => CountyUpdateToOneWithWhereWithoutCitiesInputSchema),z.lazy(() => CountyUpdateWithoutCitiesInputSchema),z.lazy(() => CountyUncheckedUpdateWithoutCitiesInputSchema) ]).optional(),
}).strict();

export const NestedStringFilterSchema: z.ZodType<Prisma.NestedStringFilter> = z.object({
  equals: z.string().optional(),
  in: z.string().array().optional(),
  notIn: z.string().array().optional(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  contains: z.string().optional(),
  startsWith: z.string().optional(),
  endsWith: z.string().optional(),
  not: z.union([ z.string(),z.lazy(() => NestedStringFilterSchema) ]).optional(),
}).strict();

export const NestedDateTimeNullableFilterSchema: z.ZodType<Prisma.NestedDateTimeNullableFilter> = z.object({
  equals: z.coerce.date().optional().nullable(),
  in: z.coerce.date().array().optional().nullable(),
  notIn: z.coerce.date().array().optional().nullable(),
  lt: z.coerce.date().optional(),
  lte: z.coerce.date().optional(),
  gt: z.coerce.date().optional(),
  gte: z.coerce.date().optional(),
  not: z.union([ z.coerce.date(),z.lazy(() => NestedDateTimeNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const NestedDateTimeFilterSchema: z.ZodType<Prisma.NestedDateTimeFilter> = z.object({
  equals: z.coerce.date().optional(),
  in: z.coerce.date().array().optional(),
  notIn: z.coerce.date().array().optional(),
  lt: z.coerce.date().optional(),
  lte: z.coerce.date().optional(),
  gt: z.coerce.date().optional(),
  gte: z.coerce.date().optional(),
  not: z.union([ z.coerce.date(),z.lazy(() => NestedDateTimeFilterSchema) ]).optional(),
}).strict();

export const NestedStringWithAggregatesFilterSchema: z.ZodType<Prisma.NestedStringWithAggregatesFilter> = z.object({
  equals: z.string().optional(),
  in: z.string().array().optional(),
  notIn: z.string().array().optional(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  contains: z.string().optional(),
  startsWith: z.string().optional(),
  endsWith: z.string().optional(),
  not: z.union([ z.string(),z.lazy(() => NestedStringWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedStringFilterSchema).optional(),
  _max: z.lazy(() => NestedStringFilterSchema).optional()
}).strict();

export const NestedIntFilterSchema: z.ZodType<Prisma.NestedIntFilter> = z.object({
  equals: z.number().optional(),
  in: z.number().array().optional(),
  notIn: z.number().array().optional(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedIntFilterSchema) ]).optional(),
}).strict();

export const NestedDateTimeNullableWithAggregatesFilterSchema: z.ZodType<Prisma.NestedDateTimeNullableWithAggregatesFilter> = z.object({
  equals: z.coerce.date().optional().nullable(),
  in: z.coerce.date().array().optional().nullable(),
  notIn: z.coerce.date().array().optional().nullable(),
  lt: z.coerce.date().optional(),
  lte: z.coerce.date().optional(),
  gt: z.coerce.date().optional(),
  gte: z.coerce.date().optional(),
  not: z.union([ z.coerce.date(),z.lazy(() => NestedDateTimeNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedDateTimeNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedDateTimeNullableFilterSchema).optional()
}).strict();

export const NestedIntNullableFilterSchema: z.ZodType<Prisma.NestedIntNullableFilter> = z.object({
  equals: z.number().optional().nullable(),
  in: z.number().array().optional().nullable(),
  notIn: z.number().array().optional().nullable(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedIntNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const NestedDateTimeWithAggregatesFilterSchema: z.ZodType<Prisma.NestedDateTimeWithAggregatesFilter> = z.object({
  equals: z.coerce.date().optional(),
  in: z.coerce.date().array().optional(),
  notIn: z.coerce.date().array().optional(),
  lt: z.coerce.date().optional(),
  lte: z.coerce.date().optional(),
  gt: z.coerce.date().optional(),
  gte: z.coerce.date().optional(),
  not: z.union([ z.coerce.date(),z.lazy(() => NestedDateTimeWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedDateTimeFilterSchema).optional(),
  _max: z.lazy(() => NestedDateTimeFilterSchema).optional()
}).strict();

export const NestedStringNullableFilterSchema: z.ZodType<Prisma.NestedStringNullableFilter> = z.object({
  equals: z.string().optional().nullable(),
  in: z.string().array().optional().nullable(),
  notIn: z.string().array().optional().nullable(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  contains: z.string().optional(),
  startsWith: z.string().optional(),
  endsWith: z.string().optional(),
  not: z.union([ z.string(),z.lazy(() => NestedStringNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const NestedBoolFilterSchema: z.ZodType<Prisma.NestedBoolFilter> = z.object({
  equals: z.boolean().optional(),
  not: z.union([ z.boolean(),z.lazy(() => NestedBoolFilterSchema) ]).optional(),
}).strict();

export const NestedStringNullableWithAggregatesFilterSchema: z.ZodType<Prisma.NestedStringNullableWithAggregatesFilter> = z.object({
  equals: z.string().optional().nullable(),
  in: z.string().array().optional().nullable(),
  notIn: z.string().array().optional().nullable(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  contains: z.string().optional(),
  startsWith: z.string().optional(),
  endsWith: z.string().optional(),
  not: z.union([ z.string(),z.lazy(() => NestedStringNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedStringNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedStringNullableFilterSchema).optional()
}).strict();

export const NestedBoolWithAggregatesFilterSchema: z.ZodType<Prisma.NestedBoolWithAggregatesFilter> = z.object({
  equals: z.boolean().optional(),
  not: z.union([ z.boolean(),z.lazy(() => NestedBoolWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedBoolFilterSchema).optional(),
  _max: z.lazy(() => NestedBoolFilterSchema).optional()
}).strict();

export const NestedEnumRoleFilterSchema: z.ZodType<Prisma.NestedEnumRoleFilter> = z.object({
  equals: z.lazy(() => RoleSchema).optional(),
  in: z.lazy(() => RoleSchema).array().optional(),
  notIn: z.lazy(() => RoleSchema).array().optional(),
  not: z.union([ z.lazy(() => RoleSchema),z.lazy(() => NestedEnumRoleFilterSchema) ]).optional(),
}).strict();

export const NestedEnumDayOfWeekFilterSchema: z.ZodType<Prisma.NestedEnumDayOfWeekFilter> = z.object({
  equals: z.lazy(() => DayOfWeekSchema).optional(),
  in: z.lazy(() => DayOfWeekSchema).array().optional(),
  notIn: z.lazy(() => DayOfWeekSchema).array().optional(),
  not: z.union([ z.lazy(() => DayOfWeekSchema),z.lazy(() => NestedEnumDayOfWeekFilterSchema) ]).optional(),
}).strict();

export const NestedIntWithAggregatesFilterSchema: z.ZodType<Prisma.NestedIntWithAggregatesFilter> = z.object({
  equals: z.number().optional(),
  in: z.number().array().optional(),
  notIn: z.number().array().optional(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedIntWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _avg: z.lazy(() => NestedFloatFilterSchema).optional(),
  _sum: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedIntFilterSchema).optional(),
  _max: z.lazy(() => NestedIntFilterSchema).optional()
}).strict();

export const NestedFloatFilterSchema: z.ZodType<Prisma.NestedFloatFilter> = z.object({
  equals: z.number().optional(),
  in: z.number().array().optional(),
  notIn: z.number().array().optional(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedFloatFilterSchema) ]).optional(),
}).strict();

export const NestedEnumRoleWithAggregatesFilterSchema: z.ZodType<Prisma.NestedEnumRoleWithAggregatesFilter> = z.object({
  equals: z.lazy(() => RoleSchema).optional(),
  in: z.lazy(() => RoleSchema).array().optional(),
  notIn: z.lazy(() => RoleSchema).array().optional(),
  not: z.union([ z.lazy(() => RoleSchema),z.lazy(() => NestedEnumRoleWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumRoleFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumRoleFilterSchema).optional()
}).strict();

export const NestedJsonFilterSchema: z.ZodType<Prisma.NestedJsonFilter> = z.object({
  equals: InputJsonValueSchema.optional(),
  path: z.string().array().optional(),
  string_contains: z.string().optional(),
  string_starts_with: z.string().optional(),
  string_ends_with: z.string().optional(),
  array_contains: InputJsonValueSchema.optional().nullable(),
  array_starts_with: InputJsonValueSchema.optional().nullable(),
  array_ends_with: InputJsonValueSchema.optional().nullable(),
  lt: InputJsonValueSchema.optional(),
  lte: InputJsonValueSchema.optional(),
  gt: InputJsonValueSchema.optional(),
  gte: InputJsonValueSchema.optional(),
  not: InputJsonValueSchema.optional()
}).strict();

export const NestedEnumDayOfWeekWithAggregatesFilterSchema: z.ZodType<Prisma.NestedEnumDayOfWeekWithAggregatesFilter> = z.object({
  equals: z.lazy(() => DayOfWeekSchema).optional(),
  in: z.lazy(() => DayOfWeekSchema).array().optional(),
  notIn: z.lazy(() => DayOfWeekSchema).array().optional(),
  not: z.union([ z.lazy(() => DayOfWeekSchema),z.lazy(() => NestedEnumDayOfWeekWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumDayOfWeekFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumDayOfWeekFilterSchema).optional()
}).strict();

export const NestedIntNullableWithAggregatesFilterSchema: z.ZodType<Prisma.NestedIntNullableWithAggregatesFilter> = z.object({
  equals: z.number().optional().nullable(),
  in: z.number().array().optional().nullable(),
  notIn: z.number().array().optional().nullable(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedIntNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _avg: z.lazy(() => NestedFloatNullableFilterSchema).optional(),
  _sum: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedIntNullableFilterSchema).optional()
}).strict();

export const NestedFloatNullableFilterSchema: z.ZodType<Prisma.NestedFloatNullableFilter> = z.object({
  equals: z.number().optional().nullable(),
  in: z.number().array().optional().nullable(),
  notIn: z.number().array().optional().nullable(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedFloatNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const NestedEnumTokenTypeFilterSchema: z.ZodType<Prisma.NestedEnumTokenTypeFilter> = z.object({
  equals: z.lazy(() => TokenTypeSchema).optional(),
  in: z.lazy(() => TokenTypeSchema).array().optional(),
  notIn: z.lazy(() => TokenTypeSchema).array().optional(),
  not: z.union([ z.lazy(() => TokenTypeSchema),z.lazy(() => NestedEnumTokenTypeFilterSchema) ]).optional(),
}).strict();

export const NestedEnumTokenTypeWithAggregatesFilterSchema: z.ZodType<Prisma.NestedEnumTokenTypeWithAggregatesFilter> = z.object({
  equals: z.lazy(() => TokenTypeSchema).optional(),
  in: z.lazy(() => TokenTypeSchema).array().optional(),
  notIn: z.lazy(() => TokenTypeSchema).array().optional(),
  not: z.union([ z.lazy(() => TokenTypeSchema),z.lazy(() => NestedEnumTokenTypeWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumTokenTypeFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumTokenTypeFilterSchema).optional()
}).strict();

export const NestedEnumStatusFilterSchema: z.ZodType<Prisma.NestedEnumStatusFilter> = z.object({
  equals: z.lazy(() => StatusSchema).optional(),
  in: z.lazy(() => StatusSchema).array().optional(),
  notIn: z.lazy(() => StatusSchema).array().optional(),
  not: z.union([ z.lazy(() => StatusSchema),z.lazy(() => NestedEnumStatusFilterSchema) ]).optional(),
}).strict();

export const NestedEnumStatusWithAggregatesFilterSchema: z.ZodType<Prisma.NestedEnumStatusWithAggregatesFilter> = z.object({
  equals: z.lazy(() => StatusSchema).optional(),
  in: z.lazy(() => StatusSchema).array().optional(),
  notIn: z.lazy(() => StatusSchema).array().optional(),
  not: z.union([ z.lazy(() => StatusSchema),z.lazy(() => NestedEnumStatusWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumStatusFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumStatusFilterSchema).optional()
}).strict();

export const NestedEnumEventTypeFilterSchema: z.ZodType<Prisma.NestedEnumEventTypeFilter> = z.object({
  equals: z.lazy(() => EventTypeSchema).optional(),
  in: z.lazy(() => EventTypeSchema).array().optional(),
  notIn: z.lazy(() => EventTypeSchema).array().optional(),
  not: z.union([ z.lazy(() => EventTypeSchema),z.lazy(() => NestedEnumEventTypeFilterSchema) ]).optional(),
}).strict();

export const NestedEnumEventStatusFilterSchema: z.ZodType<Prisma.NestedEnumEventStatusFilter> = z.object({
  equals: z.lazy(() => EventStatusSchema).optional(),
  in: z.lazy(() => EventStatusSchema).array().optional(),
  notIn: z.lazy(() => EventStatusSchema).array().optional(),
  not: z.union([ z.lazy(() => EventStatusSchema),z.lazy(() => NestedEnumEventStatusFilterSchema) ]).optional(),
}).strict();

export const NestedEnumEventInitiatorFilterSchema: z.ZodType<Prisma.NestedEnumEventInitiatorFilter> = z.object({
  equals: z.lazy(() => EventInitiatorSchema).optional(),
  in: z.lazy(() => EventInitiatorSchema).array().optional(),
  notIn: z.lazy(() => EventInitiatorSchema).array().optional(),
  not: z.union([ z.lazy(() => EventInitiatorSchema),z.lazy(() => NestedEnumEventInitiatorFilterSchema) ]).optional(),
}).strict();

export const NestedEnumEventTypeWithAggregatesFilterSchema: z.ZodType<Prisma.NestedEnumEventTypeWithAggregatesFilter> = z.object({
  equals: z.lazy(() => EventTypeSchema).optional(),
  in: z.lazy(() => EventTypeSchema).array().optional(),
  notIn: z.lazy(() => EventTypeSchema).array().optional(),
  not: z.union([ z.lazy(() => EventTypeSchema),z.lazy(() => NestedEnumEventTypeWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumEventTypeFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumEventTypeFilterSchema).optional()
}).strict();

export const NestedEnumEventStatusWithAggregatesFilterSchema: z.ZodType<Prisma.NestedEnumEventStatusWithAggregatesFilter> = z.object({
  equals: z.lazy(() => EventStatusSchema).optional(),
  in: z.lazy(() => EventStatusSchema).array().optional(),
  notIn: z.lazy(() => EventStatusSchema).array().optional(),
  not: z.union([ z.lazy(() => EventStatusSchema),z.lazy(() => NestedEnumEventStatusWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumEventStatusFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumEventStatusFilterSchema).optional()
}).strict();

export const NestedEnumEventInitiatorWithAggregatesFilterSchema: z.ZodType<Prisma.NestedEnumEventInitiatorWithAggregatesFilter> = z.object({
  equals: z.lazy(() => EventInitiatorSchema).optional(),
  in: z.lazy(() => EventInitiatorSchema).array().optional(),
  notIn: z.lazy(() => EventInitiatorSchema).array().optional(),
  not: z.union([ z.lazy(() => EventInitiatorSchema),z.lazy(() => NestedEnumEventInitiatorWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumEventInitiatorFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumEventInitiatorFilterSchema).optional()
}).strict();

export const NestedEnumServiceUnitFilterSchema: z.ZodType<Prisma.NestedEnumServiceUnitFilter> = z.object({
  equals: z.lazy(() => ServiceUnitSchema).optional(),
  in: z.lazy(() => ServiceUnitSchema).array().optional(),
  notIn: z.lazy(() => ServiceUnitSchema).array().optional(),
  not: z.union([ z.lazy(() => ServiceUnitSchema),z.lazy(() => NestedEnumServiceUnitFilterSchema) ]).optional(),
}).strict();

export const NestedEnumServiceUnitWithAggregatesFilterSchema: z.ZodType<Prisma.NestedEnumServiceUnitWithAggregatesFilter> = z.object({
  equals: z.lazy(() => ServiceUnitSchema).optional(),
  in: z.lazy(() => ServiceUnitSchema).array().optional(),
  notIn: z.lazy(() => ServiceUnitSchema).array().optional(),
  not: z.union([ z.lazy(() => ServiceUnitSchema),z.lazy(() => NestedEnumServiceUnitWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumServiceUnitFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumServiceUnitFilterSchema).optional()
}).strict();

export const NestedEnumPriceTypeFilterSchema: z.ZodType<Prisma.NestedEnumPriceTypeFilter> = z.object({
  equals: z.lazy(() => PriceTypeSchema).optional(),
  in: z.lazy(() => PriceTypeSchema).array().optional(),
  notIn: z.lazy(() => PriceTypeSchema).array().optional(),
  not: z.union([ z.lazy(() => PriceTypeSchema),z.lazy(() => NestedEnumPriceTypeFilterSchema) ]).optional(),
}).strict();

export const NestedEnumPriceTypeWithAggregatesFilterSchema: z.ZodType<Prisma.NestedEnumPriceTypeWithAggregatesFilter> = z.object({
  equals: z.lazy(() => PriceTypeSchema).optional(),
  in: z.lazy(() => PriceTypeSchema).array().optional(),
  notIn: z.lazy(() => PriceTypeSchema).array().optional(),
  not: z.union([ z.lazy(() => PriceTypeSchema),z.lazy(() => NestedEnumPriceTypeWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumPriceTypeFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumPriceTypeFilterSchema).optional()
}).strict();

export const NestedEnumTreatmentStatusFilterSchema: z.ZodType<Prisma.NestedEnumTreatmentStatusFilter> = z.object({
  equals: z.lazy(() => TreatmentStatusSchema).optional(),
  in: z.lazy(() => TreatmentStatusSchema).array().optional(),
  notIn: z.lazy(() => TreatmentStatusSchema).array().optional(),
  not: z.union([ z.lazy(() => TreatmentStatusSchema),z.lazy(() => NestedEnumTreatmentStatusFilterSchema) ]).optional(),
}).strict();

export const NestedEnumTreatmentStatusWithAggregatesFilterSchema: z.ZodType<Prisma.NestedEnumTreatmentStatusWithAggregatesFilter> = z.object({
  equals: z.lazy(() => TreatmentStatusSchema).optional(),
  in: z.lazy(() => TreatmentStatusSchema).array().optional(),
  notIn: z.lazy(() => TreatmentStatusSchema).array().optional(),
  not: z.union([ z.lazy(() => TreatmentStatusSchema),z.lazy(() => NestedEnumTreatmentStatusWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumTreatmentStatusFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumTreatmentStatusFilterSchema).optional()
}).strict();

export const UserCreateWithoutTenantInputSchema: z.ZodType<Prisma.UserCreateWithoutTenantInput> = z.object({
  id: z.string().cuid().optional(),
  index: z.number().int().optional(),
  role: z.lazy(() => RoleSchema).optional(),
  workingHours: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  firstDayOfWeek: z.lazy(() => DayOfWeekSchema).optional(),
  showWeekends: z.boolean().optional(),
  webhookApiKey: z.string().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  activatedAt: z.coerce.date().optional().nullable(),
  lastLoginAt: z.coerce.date().optional().nullable(),
  bannedAt: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  speciality: z.lazy(() => SpecialityCreateNestedOneWithoutUsersInputSchema).optional(),
  profile: z.lazy(() => ProfileCreateNestedOneWithoutUsersInputSchema),
  invitation: z.lazy(() => InvitationCreateNestedOneWithoutUserInputSchema).optional(),
  patients: z.lazy(() => PatientCreateNestedManyWithoutUserInputSchema).optional(),
  events: z.lazy(() => EventCreateNestedManyWithoutUserInputSchema).optional(),
  eventActions: z.lazy(() => EventActionCreateNestedManyWithoutUserInputSchema).optional(),
  treatmentPlans: z.lazy(() => TreatmentPlanCreateNestedManyWithoutUserInputSchema).optional(),
  invitations: z.lazy(() => InvitationCreateNestedManyWithoutInvitedByInputSchema).optional(),
  files: z.lazy(() => FileCreateNestedManyWithoutUserInputSchema).optional(),
  tasks: z.lazy(() => TaskCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const UserUncheckedCreateWithoutTenantInputSchema: z.ZodType<Prisma.UserUncheckedCreateWithoutTenantInput> = z.object({
  id: z.string().cuid().optional(),
  index: z.number().int().optional(),
  role: z.lazy(() => RoleSchema).optional(),
  workingHours: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  firstDayOfWeek: z.lazy(() => DayOfWeekSchema).optional(),
  showWeekends: z.boolean().optional(),
  webhookApiKey: z.string().optional().nullable(),
  specialityId: z.string().optional().nullable(),
  profileId: z.string(),
  deletedAt: z.coerce.date().optional().nullable(),
  activatedAt: z.coerce.date().optional().nullable(),
  lastLoginAt: z.coerce.date().optional().nullable(),
  bannedAt: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  invitation: z.lazy(() => InvitationUncheckedCreateNestedOneWithoutUserInputSchema).optional(),
  patients: z.lazy(() => PatientUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  events: z.lazy(() => EventUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  eventActions: z.lazy(() => EventActionUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  treatmentPlans: z.lazy(() => TreatmentPlanUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedCreateNestedManyWithoutInvitedByInputSchema).optional(),
  files: z.lazy(() => FileUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  tasks: z.lazy(() => TaskUncheckedCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const UserCreateOrConnectWithoutTenantInputSchema: z.ZodType<Prisma.UserCreateOrConnectWithoutTenantInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UserCreateWithoutTenantInputSchema),z.lazy(() => UserUncheckedCreateWithoutTenantInputSchema) ]),
}).strict();

export const UserCreateManyTenantInputEnvelopeSchema: z.ZodType<Prisma.UserCreateManyTenantInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => UserCreateManyTenantInputSchema),z.lazy(() => UserCreateManyTenantInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const TenantProfileCreateWithoutTenantInputSchema: z.ZodType<Prisma.TenantProfileCreateWithoutTenantInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  county: z.string().optional().nullable(),
  address: z.string().optional().nullable(),
  zip: z.string().optional().nullable(),
  phone: z.string().optional().nullable(),
  size: z.string().optional().nullable(),
  stripeSubscriptionId: z.string(),
  activeSubscription: z.boolean().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  avatar: z.lazy(() => AvatarCreateNestedOneWithoutTenantProfileInputSchema).optional(),
  plan: z.lazy(() => PlanCreateNestedOneWithoutTenantProfilesInputSchema)
}).strict();

export const TenantProfileUncheckedCreateWithoutTenantInputSchema: z.ZodType<Prisma.TenantProfileUncheckedCreateWithoutTenantInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  county: z.string().optional().nullable(),
  address: z.string().optional().nullable(),
  zip: z.string().optional().nullable(),
  phone: z.string().optional().nullable(),
  size: z.string().optional().nullable(),
  stripeSubscriptionId: z.string(),
  activeSubscription: z.boolean().optional(),
  planId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  avatar: z.lazy(() => AvatarUncheckedCreateNestedOneWithoutTenantProfileInputSchema).optional()
}).strict();

export const TenantProfileCreateOrConnectWithoutTenantInputSchema: z.ZodType<Prisma.TenantProfileCreateOrConnectWithoutTenantInput> = z.object({
  where: z.lazy(() => TenantProfileWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => TenantProfileCreateWithoutTenantInputSchema),z.lazy(() => TenantProfileUncheckedCreateWithoutTenantInputSchema) ]),
}).strict();

export const SpecialityCreateWithoutTenantInputSchema: z.ZodType<Prisma.SpecialityCreateWithoutTenantInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  color: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  users: z.lazy(() => UserCreateNestedManyWithoutSpecialityInputSchema).optional()
}).strict();

export const SpecialityUncheckedCreateWithoutTenantInputSchema: z.ZodType<Prisma.SpecialityUncheckedCreateWithoutTenantInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  color: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  users: z.lazy(() => UserUncheckedCreateNestedManyWithoutSpecialityInputSchema).optional()
}).strict();

export const SpecialityCreateOrConnectWithoutTenantInputSchema: z.ZodType<Prisma.SpecialityCreateOrConnectWithoutTenantInput> = z.object({
  where: z.lazy(() => SpecialityWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => SpecialityCreateWithoutTenantInputSchema),z.lazy(() => SpecialityUncheckedCreateWithoutTenantInputSchema) ]),
}).strict();

export const SpecialityCreateManyTenantInputEnvelopeSchema: z.ZodType<Prisma.SpecialityCreateManyTenantInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => SpecialityCreateManyTenantInputSchema),z.lazy(() => SpecialityCreateManyTenantInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const ProfileCreateWithoutPreferredTenantInputSchema: z.ZodType<Prisma.ProfileCreateWithoutPreferredTenantInput> = z.object({
  id: z.string().cuid().optional(),
  title: z.string().optional().nullable(),
  firstName: z.string(),
  lastName: z.string(),
  email: z.string(),
  phone: z.string().optional().nullable(),
  activatedAt: z.coerce.date().optional().nullable(),
  stripeCustomerId: z.string().optional().nullable(),
  stripeFreeTrialUsed: z.boolean().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  avatar: z.lazy(() => AvatarCreateNestedOneWithoutProfileInputSchema).optional(),
  users: z.lazy(() => UserCreateNestedManyWithoutProfileInputSchema).optional(),
  accounts: z.lazy(() => AccountCreateNestedManyWithoutProfileInputSchema).optional(),
  tokens: z.lazy(() => TokenCreateNestedManyWithoutProfileInputSchema).optional()
}).strict();

export const ProfileUncheckedCreateWithoutPreferredTenantInputSchema: z.ZodType<Prisma.ProfileUncheckedCreateWithoutPreferredTenantInput> = z.object({
  id: z.string().cuid().optional(),
  title: z.string().optional().nullable(),
  firstName: z.string(),
  lastName: z.string(),
  email: z.string(),
  phone: z.string().optional().nullable(),
  activatedAt: z.coerce.date().optional().nullable(),
  stripeCustomerId: z.string().optional().nullable(),
  stripeFreeTrialUsed: z.boolean().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  avatar: z.lazy(() => AvatarUncheckedCreateNestedOneWithoutProfileInputSchema).optional(),
  users: z.lazy(() => UserUncheckedCreateNestedManyWithoutProfileInputSchema).optional(),
  accounts: z.lazy(() => AccountUncheckedCreateNestedManyWithoutProfileInputSchema).optional(),
  tokens: z.lazy(() => TokenUncheckedCreateNestedManyWithoutProfileInputSchema).optional()
}).strict();

export const ProfileCreateOrConnectWithoutPreferredTenantInputSchema: z.ZodType<Prisma.ProfileCreateOrConnectWithoutPreferredTenantInput> = z.object({
  where: z.lazy(() => ProfileWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ProfileCreateWithoutPreferredTenantInputSchema),z.lazy(() => ProfileUncheckedCreateWithoutPreferredTenantInputSchema) ]),
}).strict();

export const ProfileCreateManyPreferredTenantInputEnvelopeSchema: z.ZodType<Prisma.ProfileCreateManyPreferredTenantInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => ProfileCreateManyPreferredTenantInputSchema),z.lazy(() => ProfileCreateManyPreferredTenantInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const PatientCreateWithoutTenantInputSchema: z.ZodType<Prisma.PatientCreateWithoutTenantInput> = z.object({
  id: z.string().cuid().optional(),
  firstName: z.string(),
  lastName: z.string(),
  gender: z.string().optional().nullable(),
  dob: z.coerce.date().optional().nullable(),
  email: z.string().optional().nullable(),
  phone: z.string().optional().nullable(),
  city: z.string().optional().nullable(),
  county: z.string().optional().nullable(),
  status: z.lazy(() => StatusSchema).optional(),
  smsNotifications: z.boolean().optional(),
  emailNotifications: z.boolean().optional(),
  filters: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  user: z.lazy(() => UserCreateNestedOneWithoutPatientsInputSchema),
  files: z.lazy(() => FileCreateNestedManyWithoutPatientInputSchema).optional(),
  quizes: z.lazy(() => QuizCreateNestedManyWithoutPatientInputSchema).optional(),
  appointments: z.lazy(() => EventCreateNestedManyWithoutPatientInputSchema).optional(),
  treatmentPlans: z.lazy(() => TreatmentPlanCreateNestedManyWithoutPatientInputSchema).optional()
}).strict();

export const PatientUncheckedCreateWithoutTenantInputSchema: z.ZodType<Prisma.PatientUncheckedCreateWithoutTenantInput> = z.object({
  id: z.string().cuid().optional(),
  firstName: z.string(),
  lastName: z.string(),
  gender: z.string().optional().nullable(),
  dob: z.coerce.date().optional().nullable(),
  email: z.string().optional().nullable(),
  phone: z.string().optional().nullable(),
  city: z.string().optional().nullable(),
  county: z.string().optional().nullable(),
  status: z.lazy(() => StatusSchema).optional(),
  smsNotifications: z.boolean().optional(),
  emailNotifications: z.boolean().optional(),
  filters: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  userId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  files: z.lazy(() => FileUncheckedCreateNestedManyWithoutPatientInputSchema).optional(),
  quizes: z.lazy(() => QuizUncheckedCreateNestedManyWithoutPatientInputSchema).optional(),
  appointments: z.lazy(() => EventUncheckedCreateNestedManyWithoutPatientInputSchema).optional(),
  treatmentPlans: z.lazy(() => TreatmentPlanUncheckedCreateNestedManyWithoutPatientInputSchema).optional()
}).strict();

export const PatientCreateOrConnectWithoutTenantInputSchema: z.ZodType<Prisma.PatientCreateOrConnectWithoutTenantInput> = z.object({
  where: z.lazy(() => PatientWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => PatientCreateWithoutTenantInputSchema),z.lazy(() => PatientUncheckedCreateWithoutTenantInputSchema) ]),
}).strict();

export const PatientCreateManyTenantInputEnvelopeSchema: z.ZodType<Prisma.PatientCreateManyTenantInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => PatientCreateManyTenantInputSchema),z.lazy(() => PatientCreateManyTenantInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const ServiceCreateWithoutTenantInputSchema: z.ZodType<Prisma.ServiceCreateWithoutTenantInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  unit_price: z.number().int(),
  unit: z.lazy(() => ServiceUnitSchema),
  duration: z.number().int().optional(),
  image: z.string().optional().nullable(),
  tags: z.union([ z.lazy(() => ServiceCreatetagsInputSchema),z.string().array() ]).optional(),
  isActive: z.boolean().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  category: z.lazy(() => ServiceCategoryCreateNestedOneWithoutServicesInputSchema).optional(),
  materials: z.lazy(() => ServiceMaterialCreateNestedManyWithoutServiceInputSchema).optional(),
  visits: z.lazy(() => VisitCreateNestedManyWithoutServiceInputSchema).optional(),
  children: z.lazy(() => RelatedServiceCreateNestedManyWithoutParentInputSchema).optional()
}).strict();

export const ServiceUncheckedCreateWithoutTenantInputSchema: z.ZodType<Prisma.ServiceUncheckedCreateWithoutTenantInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  unit_price: z.number().int(),
  unit: z.lazy(() => ServiceUnitSchema),
  duration: z.number().int().optional(),
  image: z.string().optional().nullable(),
  tags: z.union([ z.lazy(() => ServiceCreatetagsInputSchema),z.string().array() ]).optional(),
  isActive: z.boolean().optional(),
  categoryId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  materials: z.lazy(() => ServiceMaterialUncheckedCreateNestedManyWithoutServiceInputSchema).optional(),
  visits: z.lazy(() => VisitUncheckedCreateNestedManyWithoutServiceInputSchema).optional(),
  children: z.lazy(() => RelatedServiceUncheckedCreateNestedManyWithoutParentInputSchema).optional()
}).strict();

export const ServiceCreateOrConnectWithoutTenantInputSchema: z.ZodType<Prisma.ServiceCreateOrConnectWithoutTenantInput> = z.object({
  where: z.lazy(() => ServiceWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ServiceCreateWithoutTenantInputSchema),z.lazy(() => ServiceUncheckedCreateWithoutTenantInputSchema) ]),
}).strict();

export const ServiceCreateManyTenantInputEnvelopeSchema: z.ZodType<Prisma.ServiceCreateManyTenantInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => ServiceCreateManyTenantInputSchema),z.lazy(() => ServiceCreateManyTenantInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const MaterialCreateWithoutTenantInputSchema: z.ZodType<Prisma.MaterialCreateWithoutTenantInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  unit_price: z.number().int(),
  unit: z.string().optional(),
  image: z.string().optional().nullable(),
  tags: z.union([ z.lazy(() => MaterialCreatetagsInputSchema),z.string().array() ]).optional(),
  isActive: z.boolean().optional(),
  keepInventory: z.boolean().optional(),
  stock: z.number().int().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  services: z.lazy(() => ServiceMaterialCreateNestedManyWithoutMaterialInputSchema).optional()
}).strict();

export const MaterialUncheckedCreateWithoutTenantInputSchema: z.ZodType<Prisma.MaterialUncheckedCreateWithoutTenantInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  unit_price: z.number().int(),
  unit: z.string().optional(),
  image: z.string().optional().nullable(),
  tags: z.union([ z.lazy(() => MaterialCreatetagsInputSchema),z.string().array() ]).optional(),
  isActive: z.boolean().optional(),
  keepInventory: z.boolean().optional(),
  stock: z.number().int().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  services: z.lazy(() => ServiceMaterialUncheckedCreateNestedManyWithoutMaterialInputSchema).optional()
}).strict();

export const MaterialCreateOrConnectWithoutTenantInputSchema: z.ZodType<Prisma.MaterialCreateOrConnectWithoutTenantInput> = z.object({
  where: z.lazy(() => MaterialWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => MaterialCreateWithoutTenantInputSchema),z.lazy(() => MaterialUncheckedCreateWithoutTenantInputSchema) ]),
}).strict();

export const MaterialCreateManyTenantInputEnvelopeSchema: z.ZodType<Prisma.MaterialCreateManyTenantInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => MaterialCreateManyTenantInputSchema),z.lazy(() => MaterialCreateManyTenantInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const EventCreateWithoutTenantInputSchema: z.ZodType<Prisma.EventCreateWithoutTenantInput> = z.object({
  id: z.string().cuid().optional(),
  index: z.number().int().optional(),
  title: z.string(),
  description: z.string().optional().nullable(),
  date: z.coerce.date(),
  start: z.coerce.date().optional().nullable(),
  end: z.coerce.date().optional().nullable(),
  allDay: z.boolean().optional(),
  type: z.lazy(() => EventTypeSchema).optional(),
  status: z.lazy(() => EventStatusSchema).optional(),
  initiator: z.lazy(() => EventInitiatorSchema).optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  visits: z.lazy(() => VisitCreateNestedManyWithoutEventInputSchema).optional(),
  quiz: z.lazy(() => QuizCreateNestedOneWithoutEventInputSchema).optional(),
  actions: z.lazy(() => EventActionCreateNestedManyWithoutEventInputSchema).optional(),
  files: z.lazy(() => FileCreateNestedManyWithoutEventInputSchema).optional(),
  patient: z.lazy(() => PatientCreateNestedOneWithoutAppointmentsInputSchema).optional(),
  user: z.lazy(() => UserCreateNestedOneWithoutEventsInputSchema)
}).strict();

export const EventUncheckedCreateWithoutTenantInputSchema: z.ZodType<Prisma.EventUncheckedCreateWithoutTenantInput> = z.object({
  id: z.string().cuid().optional(),
  index: z.number().int().optional(),
  title: z.string(),
  description: z.string().optional().nullable(),
  date: z.coerce.date(),
  start: z.coerce.date().optional().nullable(),
  end: z.coerce.date().optional().nullable(),
  allDay: z.boolean().optional(),
  type: z.lazy(() => EventTypeSchema).optional(),
  status: z.lazy(() => EventStatusSchema).optional(),
  initiator: z.lazy(() => EventInitiatorSchema).optional(),
  patientId: z.string().optional().nullable(),
  userId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  visits: z.lazy(() => VisitUncheckedCreateNestedManyWithoutEventInputSchema).optional(),
  quiz: z.lazy(() => QuizUncheckedCreateNestedOneWithoutEventInputSchema).optional(),
  actions: z.lazy(() => EventActionUncheckedCreateNestedManyWithoutEventInputSchema).optional(),
  files: z.lazy(() => FileUncheckedCreateNestedManyWithoutEventInputSchema).optional()
}).strict();

export const EventCreateOrConnectWithoutTenantInputSchema: z.ZodType<Prisma.EventCreateOrConnectWithoutTenantInput> = z.object({
  where: z.lazy(() => EventWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => EventCreateWithoutTenantInputSchema),z.lazy(() => EventUncheckedCreateWithoutTenantInputSchema) ]),
}).strict();

export const EventCreateManyTenantInputEnvelopeSchema: z.ZodType<Prisma.EventCreateManyTenantInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => EventCreateManyTenantInputSchema),z.lazy(() => EventCreateManyTenantInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const FileCreateWithoutTenantInputSchema: z.ZodType<Prisma.FileCreateWithoutTenantInput> = z.object({
  id: z.string().cuid().optional(),
  url: z.string(),
  key: z.string(),
  name: z.string(),
  extension: z.string(),
  contentType: z.string(),
  size: z.number().int(),
  confirmed: z.boolean().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  user: z.lazy(() => UserCreateNestedOneWithoutFilesInputSchema),
  event: z.lazy(() => EventCreateNestedOneWithoutFilesInputSchema).optional(),
  patient: z.lazy(() => PatientCreateNestedOneWithoutFilesInputSchema).optional()
}).strict();

export const FileUncheckedCreateWithoutTenantInputSchema: z.ZodType<Prisma.FileUncheckedCreateWithoutTenantInput> = z.object({
  id: z.string().cuid().optional(),
  url: z.string(),
  key: z.string(),
  name: z.string(),
  extension: z.string(),
  contentType: z.string(),
  size: z.number().int(),
  confirmed: z.boolean().optional(),
  userId: z.string(),
  eventId: z.string().optional().nullable(),
  patientId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const FileCreateOrConnectWithoutTenantInputSchema: z.ZodType<Prisma.FileCreateOrConnectWithoutTenantInput> = z.object({
  where: z.lazy(() => FileWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => FileCreateWithoutTenantInputSchema),z.lazy(() => FileUncheckedCreateWithoutTenantInputSchema) ]),
}).strict();

export const FileCreateManyTenantInputEnvelopeSchema: z.ZodType<Prisma.FileCreateManyTenantInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => FileCreateManyTenantInputSchema),z.lazy(() => FileCreateManyTenantInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const UserUpsertWithWhereUniqueWithoutTenantInputSchema: z.ZodType<Prisma.UserUpsertWithWhereUniqueWithoutTenantInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => UserUpdateWithoutTenantInputSchema),z.lazy(() => UserUncheckedUpdateWithoutTenantInputSchema) ]),
  create: z.union([ z.lazy(() => UserCreateWithoutTenantInputSchema),z.lazy(() => UserUncheckedCreateWithoutTenantInputSchema) ]),
}).strict();

export const UserUpdateWithWhereUniqueWithoutTenantInputSchema: z.ZodType<Prisma.UserUpdateWithWhereUniqueWithoutTenantInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => UserUpdateWithoutTenantInputSchema),z.lazy(() => UserUncheckedUpdateWithoutTenantInputSchema) ]),
}).strict();

export const UserUpdateManyWithWhereWithoutTenantInputSchema: z.ZodType<Prisma.UserUpdateManyWithWhereWithoutTenantInput> = z.object({
  where: z.lazy(() => UserScalarWhereInputSchema),
  data: z.union([ z.lazy(() => UserUpdateManyMutationInputSchema),z.lazy(() => UserUncheckedUpdateManyWithoutTenantInputSchema) ]),
}).strict();

export const UserScalarWhereInputSchema: z.ZodType<Prisma.UserScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => UserScalarWhereInputSchema),z.lazy(() => UserScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => UserScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => UserScalarWhereInputSchema),z.lazy(() => UserScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  index: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  role: z.union([ z.lazy(() => EnumRoleFilterSchema),z.lazy(() => RoleSchema) ]).optional(),
  workingHours: z.lazy(() => JsonFilterSchema).optional(),
  firstDayOfWeek: z.union([ z.lazy(() => EnumDayOfWeekFilterSchema),z.lazy(() => DayOfWeekSchema) ]).optional(),
  showWeekends: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  webhookApiKey: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  specialityId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  profileId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  tenantId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  deletedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  activatedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  lastLoginAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  bannedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const TenantProfileUpsertWithoutTenantInputSchema: z.ZodType<Prisma.TenantProfileUpsertWithoutTenantInput> = z.object({
  update: z.union([ z.lazy(() => TenantProfileUpdateWithoutTenantInputSchema),z.lazy(() => TenantProfileUncheckedUpdateWithoutTenantInputSchema) ]),
  create: z.union([ z.lazy(() => TenantProfileCreateWithoutTenantInputSchema),z.lazy(() => TenantProfileUncheckedCreateWithoutTenantInputSchema) ]),
  where: z.lazy(() => TenantProfileWhereInputSchema).optional()
}).strict();

export const TenantProfileUpdateToOneWithWhereWithoutTenantInputSchema: z.ZodType<Prisma.TenantProfileUpdateToOneWithWhereWithoutTenantInput> = z.object({
  where: z.lazy(() => TenantProfileWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => TenantProfileUpdateWithoutTenantInputSchema),z.lazy(() => TenantProfileUncheckedUpdateWithoutTenantInputSchema) ]),
}).strict();

export const TenantProfileUpdateWithoutTenantInputSchema: z.ZodType<Prisma.TenantProfileUpdateWithoutTenantInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  county: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  address: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  zip: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  size: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  stripeSubscriptionId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  activeSubscription: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  avatar: z.lazy(() => AvatarUpdateOneWithoutTenantProfileNestedInputSchema).optional(),
  plan: z.lazy(() => PlanUpdateOneRequiredWithoutTenantProfilesNestedInputSchema).optional()
}).strict();

export const TenantProfileUncheckedUpdateWithoutTenantInputSchema: z.ZodType<Prisma.TenantProfileUncheckedUpdateWithoutTenantInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  county: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  address: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  zip: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  size: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  stripeSubscriptionId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  activeSubscription: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  planId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  avatar: z.lazy(() => AvatarUncheckedUpdateOneWithoutTenantProfileNestedInputSchema).optional()
}).strict();

export const SpecialityUpsertWithWhereUniqueWithoutTenantInputSchema: z.ZodType<Prisma.SpecialityUpsertWithWhereUniqueWithoutTenantInput> = z.object({
  where: z.lazy(() => SpecialityWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => SpecialityUpdateWithoutTenantInputSchema),z.lazy(() => SpecialityUncheckedUpdateWithoutTenantInputSchema) ]),
  create: z.union([ z.lazy(() => SpecialityCreateWithoutTenantInputSchema),z.lazy(() => SpecialityUncheckedCreateWithoutTenantInputSchema) ]),
}).strict();

export const SpecialityUpdateWithWhereUniqueWithoutTenantInputSchema: z.ZodType<Prisma.SpecialityUpdateWithWhereUniqueWithoutTenantInput> = z.object({
  where: z.lazy(() => SpecialityWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => SpecialityUpdateWithoutTenantInputSchema),z.lazy(() => SpecialityUncheckedUpdateWithoutTenantInputSchema) ]),
}).strict();

export const SpecialityUpdateManyWithWhereWithoutTenantInputSchema: z.ZodType<Prisma.SpecialityUpdateManyWithWhereWithoutTenantInput> = z.object({
  where: z.lazy(() => SpecialityScalarWhereInputSchema),
  data: z.union([ z.lazy(() => SpecialityUpdateManyMutationInputSchema),z.lazy(() => SpecialityUncheckedUpdateManyWithoutTenantInputSchema) ]),
}).strict();

export const SpecialityScalarWhereInputSchema: z.ZodType<Prisma.SpecialityScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => SpecialityScalarWhereInputSchema),z.lazy(() => SpecialityScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => SpecialityScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => SpecialityScalarWhereInputSchema),z.lazy(() => SpecialityScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  color: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  tenantId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const ProfileUpsertWithWhereUniqueWithoutPreferredTenantInputSchema: z.ZodType<Prisma.ProfileUpsertWithWhereUniqueWithoutPreferredTenantInput> = z.object({
  where: z.lazy(() => ProfileWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => ProfileUpdateWithoutPreferredTenantInputSchema),z.lazy(() => ProfileUncheckedUpdateWithoutPreferredTenantInputSchema) ]),
  create: z.union([ z.lazy(() => ProfileCreateWithoutPreferredTenantInputSchema),z.lazy(() => ProfileUncheckedCreateWithoutPreferredTenantInputSchema) ]),
}).strict();

export const ProfileUpdateWithWhereUniqueWithoutPreferredTenantInputSchema: z.ZodType<Prisma.ProfileUpdateWithWhereUniqueWithoutPreferredTenantInput> = z.object({
  where: z.lazy(() => ProfileWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => ProfileUpdateWithoutPreferredTenantInputSchema),z.lazy(() => ProfileUncheckedUpdateWithoutPreferredTenantInputSchema) ]),
}).strict();

export const ProfileUpdateManyWithWhereWithoutPreferredTenantInputSchema: z.ZodType<Prisma.ProfileUpdateManyWithWhereWithoutPreferredTenantInput> = z.object({
  where: z.lazy(() => ProfileScalarWhereInputSchema),
  data: z.union([ z.lazy(() => ProfileUpdateManyMutationInputSchema),z.lazy(() => ProfileUncheckedUpdateManyWithoutPreferredTenantInputSchema) ]),
}).strict();

export const ProfileScalarWhereInputSchema: z.ZodType<Prisma.ProfileScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => ProfileScalarWhereInputSchema),z.lazy(() => ProfileScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ProfileScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ProfileScalarWhereInputSchema),z.lazy(() => ProfileScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  title: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  firstName: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  lastName: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  email: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  phone: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  activatedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  stripeCustomerId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  stripeFreeTrialUsed: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  preferredTenantId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const PatientUpsertWithWhereUniqueWithoutTenantInputSchema: z.ZodType<Prisma.PatientUpsertWithWhereUniqueWithoutTenantInput> = z.object({
  where: z.lazy(() => PatientWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => PatientUpdateWithoutTenantInputSchema),z.lazy(() => PatientUncheckedUpdateWithoutTenantInputSchema) ]),
  create: z.union([ z.lazy(() => PatientCreateWithoutTenantInputSchema),z.lazy(() => PatientUncheckedCreateWithoutTenantInputSchema) ]),
}).strict();

export const PatientUpdateWithWhereUniqueWithoutTenantInputSchema: z.ZodType<Prisma.PatientUpdateWithWhereUniqueWithoutTenantInput> = z.object({
  where: z.lazy(() => PatientWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => PatientUpdateWithoutTenantInputSchema),z.lazy(() => PatientUncheckedUpdateWithoutTenantInputSchema) ]),
}).strict();

export const PatientUpdateManyWithWhereWithoutTenantInputSchema: z.ZodType<Prisma.PatientUpdateManyWithWhereWithoutTenantInput> = z.object({
  where: z.lazy(() => PatientScalarWhereInputSchema),
  data: z.union([ z.lazy(() => PatientUpdateManyMutationInputSchema),z.lazy(() => PatientUncheckedUpdateManyWithoutTenantInputSchema) ]),
}).strict();

export const PatientScalarWhereInputSchema: z.ZodType<Prisma.PatientScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => PatientScalarWhereInputSchema),z.lazy(() => PatientScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => PatientScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => PatientScalarWhereInputSchema),z.lazy(() => PatientScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  firstName: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  lastName: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  gender: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  dob: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  email: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  phone: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  city: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  county: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  status: z.union([ z.lazy(() => EnumStatusFilterSchema),z.lazy(() => StatusSchema) ]).optional(),
  smsNotifications: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  emailNotifications: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  filters: z.lazy(() => JsonFilterSchema).optional(),
  userId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  tenantId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const ServiceUpsertWithWhereUniqueWithoutTenantInputSchema: z.ZodType<Prisma.ServiceUpsertWithWhereUniqueWithoutTenantInput> = z.object({
  where: z.lazy(() => ServiceWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => ServiceUpdateWithoutTenantInputSchema),z.lazy(() => ServiceUncheckedUpdateWithoutTenantInputSchema) ]),
  create: z.union([ z.lazy(() => ServiceCreateWithoutTenantInputSchema),z.lazy(() => ServiceUncheckedCreateWithoutTenantInputSchema) ]),
}).strict();

export const ServiceUpdateWithWhereUniqueWithoutTenantInputSchema: z.ZodType<Prisma.ServiceUpdateWithWhereUniqueWithoutTenantInput> = z.object({
  where: z.lazy(() => ServiceWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => ServiceUpdateWithoutTenantInputSchema),z.lazy(() => ServiceUncheckedUpdateWithoutTenantInputSchema) ]),
}).strict();

export const ServiceUpdateManyWithWhereWithoutTenantInputSchema: z.ZodType<Prisma.ServiceUpdateManyWithWhereWithoutTenantInput> = z.object({
  where: z.lazy(() => ServiceScalarWhereInputSchema),
  data: z.union([ z.lazy(() => ServiceUpdateManyMutationInputSchema),z.lazy(() => ServiceUncheckedUpdateManyWithoutTenantInputSchema) ]),
}).strict();

export const ServiceScalarWhereInputSchema: z.ZodType<Prisma.ServiceScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => ServiceScalarWhereInputSchema),z.lazy(() => ServiceScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ServiceScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ServiceScalarWhereInputSchema),z.lazy(() => ServiceScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  unit_price: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  unit: z.union([ z.lazy(() => EnumServiceUnitFilterSchema),z.lazy(() => ServiceUnitSchema) ]).optional(),
  duration: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  image: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  tags: z.lazy(() => StringNullableListFilterSchema).optional(),
  isActive: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  tenantId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  categoryId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const MaterialUpsertWithWhereUniqueWithoutTenantInputSchema: z.ZodType<Prisma.MaterialUpsertWithWhereUniqueWithoutTenantInput> = z.object({
  where: z.lazy(() => MaterialWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => MaterialUpdateWithoutTenantInputSchema),z.lazy(() => MaterialUncheckedUpdateWithoutTenantInputSchema) ]),
  create: z.union([ z.lazy(() => MaterialCreateWithoutTenantInputSchema),z.lazy(() => MaterialUncheckedCreateWithoutTenantInputSchema) ]),
}).strict();

export const MaterialUpdateWithWhereUniqueWithoutTenantInputSchema: z.ZodType<Prisma.MaterialUpdateWithWhereUniqueWithoutTenantInput> = z.object({
  where: z.lazy(() => MaterialWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => MaterialUpdateWithoutTenantInputSchema),z.lazy(() => MaterialUncheckedUpdateWithoutTenantInputSchema) ]),
}).strict();

export const MaterialUpdateManyWithWhereWithoutTenantInputSchema: z.ZodType<Prisma.MaterialUpdateManyWithWhereWithoutTenantInput> = z.object({
  where: z.lazy(() => MaterialScalarWhereInputSchema),
  data: z.union([ z.lazy(() => MaterialUpdateManyMutationInputSchema),z.lazy(() => MaterialUncheckedUpdateManyWithoutTenantInputSchema) ]),
}).strict();

export const MaterialScalarWhereInputSchema: z.ZodType<Prisma.MaterialScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => MaterialScalarWhereInputSchema),z.lazy(() => MaterialScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => MaterialScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => MaterialScalarWhereInputSchema),z.lazy(() => MaterialScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  unit_price: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  unit: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  image: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  tags: z.lazy(() => StringNullableListFilterSchema).optional(),
  isActive: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  keepInventory: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  stock: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  tenantId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const EventUpsertWithWhereUniqueWithoutTenantInputSchema: z.ZodType<Prisma.EventUpsertWithWhereUniqueWithoutTenantInput> = z.object({
  where: z.lazy(() => EventWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => EventUpdateWithoutTenantInputSchema),z.lazy(() => EventUncheckedUpdateWithoutTenantInputSchema) ]),
  create: z.union([ z.lazy(() => EventCreateWithoutTenantInputSchema),z.lazy(() => EventUncheckedCreateWithoutTenantInputSchema) ]),
}).strict();

export const EventUpdateWithWhereUniqueWithoutTenantInputSchema: z.ZodType<Prisma.EventUpdateWithWhereUniqueWithoutTenantInput> = z.object({
  where: z.lazy(() => EventWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => EventUpdateWithoutTenantInputSchema),z.lazy(() => EventUncheckedUpdateWithoutTenantInputSchema) ]),
}).strict();

export const EventUpdateManyWithWhereWithoutTenantInputSchema: z.ZodType<Prisma.EventUpdateManyWithWhereWithoutTenantInput> = z.object({
  where: z.lazy(() => EventScalarWhereInputSchema),
  data: z.union([ z.lazy(() => EventUpdateManyMutationInputSchema),z.lazy(() => EventUncheckedUpdateManyWithoutTenantInputSchema) ]),
}).strict();

export const EventScalarWhereInputSchema: z.ZodType<Prisma.EventScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => EventScalarWhereInputSchema),z.lazy(() => EventScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => EventScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => EventScalarWhereInputSchema),z.lazy(() => EventScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  index: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  title: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  date: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  start: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  end: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  allDay: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  type: z.union([ z.lazy(() => EnumEventTypeFilterSchema),z.lazy(() => EventTypeSchema) ]).optional(),
  status: z.union([ z.lazy(() => EnumEventStatusFilterSchema),z.lazy(() => EventStatusSchema) ]).optional(),
  initiator: z.union([ z.lazy(() => EnumEventInitiatorFilterSchema),z.lazy(() => EventInitiatorSchema) ]).optional(),
  patientId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  userId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  tenantId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const FileUpsertWithWhereUniqueWithoutTenantInputSchema: z.ZodType<Prisma.FileUpsertWithWhereUniqueWithoutTenantInput> = z.object({
  where: z.lazy(() => FileWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => FileUpdateWithoutTenantInputSchema),z.lazy(() => FileUncheckedUpdateWithoutTenantInputSchema) ]),
  create: z.union([ z.lazy(() => FileCreateWithoutTenantInputSchema),z.lazy(() => FileUncheckedCreateWithoutTenantInputSchema) ]),
}).strict();

export const FileUpdateWithWhereUniqueWithoutTenantInputSchema: z.ZodType<Prisma.FileUpdateWithWhereUniqueWithoutTenantInput> = z.object({
  where: z.lazy(() => FileWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => FileUpdateWithoutTenantInputSchema),z.lazy(() => FileUncheckedUpdateWithoutTenantInputSchema) ]),
}).strict();

export const FileUpdateManyWithWhereWithoutTenantInputSchema: z.ZodType<Prisma.FileUpdateManyWithWhereWithoutTenantInput> = z.object({
  where: z.lazy(() => FileScalarWhereInputSchema),
  data: z.union([ z.lazy(() => FileUpdateManyMutationInputSchema),z.lazy(() => FileUncheckedUpdateManyWithoutTenantInputSchema) ]),
}).strict();

export const FileScalarWhereInputSchema: z.ZodType<Prisma.FileScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => FileScalarWhereInputSchema),z.lazy(() => FileScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => FileScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => FileScalarWhereInputSchema),z.lazy(() => FileScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  url: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  key: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  extension: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  contentType: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  size: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  confirmed: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  tenantId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  userId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  eventId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  patientId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const AvatarCreateWithoutTenantProfileInputSchema: z.ZodType<Prisma.AvatarCreateWithoutTenantProfileInput> = z.object({
  id: z.string().cuid().optional(),
  url: z.string(),
  key: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  profile: z.lazy(() => ProfileCreateNestedOneWithoutAvatarInputSchema).optional()
}).strict();

export const AvatarUncheckedCreateWithoutTenantProfileInputSchema: z.ZodType<Prisma.AvatarUncheckedCreateWithoutTenantProfileInput> = z.object({
  id: z.string().cuid().optional(),
  url: z.string(),
  key: z.string(),
  profileId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const AvatarCreateOrConnectWithoutTenantProfileInputSchema: z.ZodType<Prisma.AvatarCreateOrConnectWithoutTenantProfileInput> = z.object({
  where: z.lazy(() => AvatarWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => AvatarCreateWithoutTenantProfileInputSchema),z.lazy(() => AvatarUncheckedCreateWithoutTenantProfileInputSchema) ]),
}).strict();

export const PlanCreateWithoutTenantProfilesInputSchema: z.ZodType<Prisma.PlanCreateWithoutTenantProfilesInput> = z.object({
  id: z.string().cuid().optional(),
  stripeProductId: z.string(),
  stripePriceId: z.string(),
  name: z.string(),
  maxUsers: z.number().int(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const PlanUncheckedCreateWithoutTenantProfilesInputSchema: z.ZodType<Prisma.PlanUncheckedCreateWithoutTenantProfilesInput> = z.object({
  id: z.string().cuid().optional(),
  stripeProductId: z.string(),
  stripePriceId: z.string(),
  name: z.string(),
  maxUsers: z.number().int(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const PlanCreateOrConnectWithoutTenantProfilesInputSchema: z.ZodType<Prisma.PlanCreateOrConnectWithoutTenantProfilesInput> = z.object({
  where: z.lazy(() => PlanWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => PlanCreateWithoutTenantProfilesInputSchema),z.lazy(() => PlanUncheckedCreateWithoutTenantProfilesInputSchema) ]),
}).strict();

export const TenantCreateWithoutProfileInputSchema: z.ZodType<Prisma.TenantCreateWithoutProfileInput> = z.object({
  id: z.string().cuid().optional(),
  email: z.string(),
  deletedAt: z.coerce.date().optional().nullable(),
  disabledAt: z.coerce.date().optional().nullable(),
  trialExpiresAt: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  users: z.lazy(() => UserCreateNestedManyWithoutTenantInputSchema).optional(),
  specialities: z.lazy(() => SpecialityCreateNestedManyWithoutTenantInputSchema).optional(),
  preferedByProfiles: z.lazy(() => ProfileCreateNestedManyWithoutPreferredTenantInputSchema).optional(),
  patients: z.lazy(() => PatientCreateNestedManyWithoutTenantInputSchema).optional(),
  services: z.lazy(() => ServiceCreateNestedManyWithoutTenantInputSchema).optional(),
  materials: z.lazy(() => MaterialCreateNestedManyWithoutTenantInputSchema).optional(),
  events: z.lazy(() => EventCreateNestedManyWithoutTenantInputSchema).optional(),
  files: z.lazy(() => FileCreateNestedManyWithoutTenantInputSchema).optional()
}).strict();

export const TenantUncheckedCreateWithoutProfileInputSchema: z.ZodType<Prisma.TenantUncheckedCreateWithoutProfileInput> = z.object({
  id: z.string().cuid().optional(),
  email: z.string(),
  deletedAt: z.coerce.date().optional().nullable(),
  disabledAt: z.coerce.date().optional().nullable(),
  trialExpiresAt: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  users: z.lazy(() => UserUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  specialities: z.lazy(() => SpecialityUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  preferedByProfiles: z.lazy(() => ProfileUncheckedCreateNestedManyWithoutPreferredTenantInputSchema).optional(),
  patients: z.lazy(() => PatientUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  services: z.lazy(() => ServiceUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  materials: z.lazy(() => MaterialUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  events: z.lazy(() => EventUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  files: z.lazy(() => FileUncheckedCreateNestedManyWithoutTenantInputSchema).optional()
}).strict();

export const TenantCreateOrConnectWithoutProfileInputSchema: z.ZodType<Prisma.TenantCreateOrConnectWithoutProfileInput> = z.object({
  where: z.lazy(() => TenantWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => TenantCreateWithoutProfileInputSchema),z.lazy(() => TenantUncheckedCreateWithoutProfileInputSchema) ]),
}).strict();

export const AvatarUpsertWithoutTenantProfileInputSchema: z.ZodType<Prisma.AvatarUpsertWithoutTenantProfileInput> = z.object({
  update: z.union([ z.lazy(() => AvatarUpdateWithoutTenantProfileInputSchema),z.lazy(() => AvatarUncheckedUpdateWithoutTenantProfileInputSchema) ]),
  create: z.union([ z.lazy(() => AvatarCreateWithoutTenantProfileInputSchema),z.lazy(() => AvatarUncheckedCreateWithoutTenantProfileInputSchema) ]),
  where: z.lazy(() => AvatarWhereInputSchema).optional()
}).strict();

export const AvatarUpdateToOneWithWhereWithoutTenantProfileInputSchema: z.ZodType<Prisma.AvatarUpdateToOneWithWhereWithoutTenantProfileInput> = z.object({
  where: z.lazy(() => AvatarWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => AvatarUpdateWithoutTenantProfileInputSchema),z.lazy(() => AvatarUncheckedUpdateWithoutTenantProfileInputSchema) ]),
}).strict();

export const AvatarUpdateWithoutTenantProfileInputSchema: z.ZodType<Prisma.AvatarUpdateWithoutTenantProfileInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  url: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  key: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  profile: z.lazy(() => ProfileUpdateOneWithoutAvatarNestedInputSchema).optional()
}).strict();

export const AvatarUncheckedUpdateWithoutTenantProfileInputSchema: z.ZodType<Prisma.AvatarUncheckedUpdateWithoutTenantProfileInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  url: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  key: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  profileId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const PlanUpsertWithoutTenantProfilesInputSchema: z.ZodType<Prisma.PlanUpsertWithoutTenantProfilesInput> = z.object({
  update: z.union([ z.lazy(() => PlanUpdateWithoutTenantProfilesInputSchema),z.lazy(() => PlanUncheckedUpdateWithoutTenantProfilesInputSchema) ]),
  create: z.union([ z.lazy(() => PlanCreateWithoutTenantProfilesInputSchema),z.lazy(() => PlanUncheckedCreateWithoutTenantProfilesInputSchema) ]),
  where: z.lazy(() => PlanWhereInputSchema).optional()
}).strict();

export const PlanUpdateToOneWithWhereWithoutTenantProfilesInputSchema: z.ZodType<Prisma.PlanUpdateToOneWithWhereWithoutTenantProfilesInput> = z.object({
  where: z.lazy(() => PlanWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => PlanUpdateWithoutTenantProfilesInputSchema),z.lazy(() => PlanUncheckedUpdateWithoutTenantProfilesInputSchema) ]),
}).strict();

export const PlanUpdateWithoutTenantProfilesInputSchema: z.ZodType<Prisma.PlanUpdateWithoutTenantProfilesInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  stripeProductId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  stripePriceId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  maxUsers: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const PlanUncheckedUpdateWithoutTenantProfilesInputSchema: z.ZodType<Prisma.PlanUncheckedUpdateWithoutTenantProfilesInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  stripeProductId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  stripePriceId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  maxUsers: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const TenantUpsertWithoutProfileInputSchema: z.ZodType<Prisma.TenantUpsertWithoutProfileInput> = z.object({
  update: z.union([ z.lazy(() => TenantUpdateWithoutProfileInputSchema),z.lazy(() => TenantUncheckedUpdateWithoutProfileInputSchema) ]),
  create: z.union([ z.lazy(() => TenantCreateWithoutProfileInputSchema),z.lazy(() => TenantUncheckedCreateWithoutProfileInputSchema) ]),
  where: z.lazy(() => TenantWhereInputSchema).optional()
}).strict();

export const TenantUpdateToOneWithWhereWithoutProfileInputSchema: z.ZodType<Prisma.TenantUpdateToOneWithWhereWithoutProfileInput> = z.object({
  where: z.lazy(() => TenantWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => TenantUpdateWithoutProfileInputSchema),z.lazy(() => TenantUncheckedUpdateWithoutProfileInputSchema) ]),
}).strict();

export const TenantUpdateWithoutProfileInputSchema: z.ZodType<Prisma.TenantUpdateWithoutProfileInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  disabledAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  trialExpiresAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  users: z.lazy(() => UserUpdateManyWithoutTenantNestedInputSchema).optional(),
  specialities: z.lazy(() => SpecialityUpdateManyWithoutTenantNestedInputSchema).optional(),
  preferedByProfiles: z.lazy(() => ProfileUpdateManyWithoutPreferredTenantNestedInputSchema).optional(),
  patients: z.lazy(() => PatientUpdateManyWithoutTenantNestedInputSchema).optional(),
  services: z.lazy(() => ServiceUpdateManyWithoutTenantNestedInputSchema).optional(),
  materials: z.lazy(() => MaterialUpdateManyWithoutTenantNestedInputSchema).optional(),
  events: z.lazy(() => EventUpdateManyWithoutTenantNestedInputSchema).optional(),
  files: z.lazy(() => FileUpdateManyWithoutTenantNestedInputSchema).optional()
}).strict();

export const TenantUncheckedUpdateWithoutProfileInputSchema: z.ZodType<Prisma.TenantUncheckedUpdateWithoutProfileInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  disabledAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  trialExpiresAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  users: z.lazy(() => UserUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  specialities: z.lazy(() => SpecialityUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  preferedByProfiles: z.lazy(() => ProfileUncheckedUpdateManyWithoutPreferredTenantNestedInputSchema).optional(),
  patients: z.lazy(() => PatientUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  services: z.lazy(() => ServiceUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  materials: z.lazy(() => MaterialUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  events: z.lazy(() => EventUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  files: z.lazy(() => FileUncheckedUpdateManyWithoutTenantNestedInputSchema).optional()
}).strict();

export const SpecialityCreateWithoutUsersInputSchema: z.ZodType<Prisma.SpecialityCreateWithoutUsersInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  color: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  tenant: z.lazy(() => TenantCreateNestedOneWithoutSpecialitiesInputSchema)
}).strict();

export const SpecialityUncheckedCreateWithoutUsersInputSchema: z.ZodType<Prisma.SpecialityUncheckedCreateWithoutUsersInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  color: z.string().optional(),
  tenantId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const SpecialityCreateOrConnectWithoutUsersInputSchema: z.ZodType<Prisma.SpecialityCreateOrConnectWithoutUsersInput> = z.object({
  where: z.lazy(() => SpecialityWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => SpecialityCreateWithoutUsersInputSchema),z.lazy(() => SpecialityUncheckedCreateWithoutUsersInputSchema) ]),
}).strict();

export const ProfileCreateWithoutUsersInputSchema: z.ZodType<Prisma.ProfileCreateWithoutUsersInput> = z.object({
  id: z.string().cuid().optional(),
  title: z.string().optional().nullable(),
  firstName: z.string(),
  lastName: z.string(),
  email: z.string(),
  phone: z.string().optional().nullable(),
  activatedAt: z.coerce.date().optional().nullable(),
  stripeCustomerId: z.string().optional().nullable(),
  stripeFreeTrialUsed: z.boolean().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  avatar: z.lazy(() => AvatarCreateNestedOneWithoutProfileInputSchema).optional(),
  preferredTenant: z.lazy(() => TenantCreateNestedOneWithoutPreferedByProfilesInputSchema).optional(),
  accounts: z.lazy(() => AccountCreateNestedManyWithoutProfileInputSchema).optional(),
  tokens: z.lazy(() => TokenCreateNestedManyWithoutProfileInputSchema).optional()
}).strict();

export const ProfileUncheckedCreateWithoutUsersInputSchema: z.ZodType<Prisma.ProfileUncheckedCreateWithoutUsersInput> = z.object({
  id: z.string().cuid().optional(),
  title: z.string().optional().nullable(),
  firstName: z.string(),
  lastName: z.string(),
  email: z.string(),
  phone: z.string().optional().nullable(),
  activatedAt: z.coerce.date().optional().nullable(),
  stripeCustomerId: z.string().optional().nullable(),
  stripeFreeTrialUsed: z.boolean().optional(),
  preferredTenantId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  avatar: z.lazy(() => AvatarUncheckedCreateNestedOneWithoutProfileInputSchema).optional(),
  accounts: z.lazy(() => AccountUncheckedCreateNestedManyWithoutProfileInputSchema).optional(),
  tokens: z.lazy(() => TokenUncheckedCreateNestedManyWithoutProfileInputSchema).optional()
}).strict();

export const ProfileCreateOrConnectWithoutUsersInputSchema: z.ZodType<Prisma.ProfileCreateOrConnectWithoutUsersInput> = z.object({
  where: z.lazy(() => ProfileWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ProfileCreateWithoutUsersInputSchema),z.lazy(() => ProfileUncheckedCreateWithoutUsersInputSchema) ]),
}).strict();

export const TenantCreateWithoutUsersInputSchema: z.ZodType<Prisma.TenantCreateWithoutUsersInput> = z.object({
  id: z.string().cuid().optional(),
  email: z.string(),
  deletedAt: z.coerce.date().optional().nullable(),
  disabledAt: z.coerce.date().optional().nullable(),
  trialExpiresAt: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  profile: z.lazy(() => TenantProfileCreateNestedOneWithoutTenantInputSchema),
  specialities: z.lazy(() => SpecialityCreateNestedManyWithoutTenantInputSchema).optional(),
  preferedByProfiles: z.lazy(() => ProfileCreateNestedManyWithoutPreferredTenantInputSchema).optional(),
  patients: z.lazy(() => PatientCreateNestedManyWithoutTenantInputSchema).optional(),
  services: z.lazy(() => ServiceCreateNestedManyWithoutTenantInputSchema).optional(),
  materials: z.lazy(() => MaterialCreateNestedManyWithoutTenantInputSchema).optional(),
  events: z.lazy(() => EventCreateNestedManyWithoutTenantInputSchema).optional(),
  files: z.lazy(() => FileCreateNestedManyWithoutTenantInputSchema).optional()
}).strict();

export const TenantUncheckedCreateWithoutUsersInputSchema: z.ZodType<Prisma.TenantUncheckedCreateWithoutUsersInput> = z.object({
  id: z.string().cuid().optional(),
  email: z.string(),
  profileId: z.string(),
  deletedAt: z.coerce.date().optional().nullable(),
  disabledAt: z.coerce.date().optional().nullable(),
  trialExpiresAt: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  specialities: z.lazy(() => SpecialityUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  preferedByProfiles: z.lazy(() => ProfileUncheckedCreateNestedManyWithoutPreferredTenantInputSchema).optional(),
  patients: z.lazy(() => PatientUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  services: z.lazy(() => ServiceUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  materials: z.lazy(() => MaterialUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  events: z.lazy(() => EventUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  files: z.lazy(() => FileUncheckedCreateNestedManyWithoutTenantInputSchema).optional()
}).strict();

export const TenantCreateOrConnectWithoutUsersInputSchema: z.ZodType<Prisma.TenantCreateOrConnectWithoutUsersInput> = z.object({
  where: z.lazy(() => TenantWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => TenantCreateWithoutUsersInputSchema),z.lazy(() => TenantUncheckedCreateWithoutUsersInputSchema) ]),
}).strict();

export const InvitationCreateWithoutUserInputSchema: z.ZodType<Prisma.InvitationCreateWithoutUserInput> = z.object({
  id: z.string().cuid().optional(),
  email: z.string(),
  role: z.lazy(() => RoleSchema),
  token: z.string(),
  expires: z.coerce.date(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  invitedBy: z.lazy(() => UserCreateNestedOneWithoutInvitationsInputSchema)
}).strict();

export const InvitationUncheckedCreateWithoutUserInputSchema: z.ZodType<Prisma.InvitationUncheckedCreateWithoutUserInput> = z.object({
  id: z.string().cuid().optional(),
  email: z.string(),
  role: z.lazy(() => RoleSchema),
  token: z.string(),
  expires: z.coerce.date(),
  invitedById: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const InvitationCreateOrConnectWithoutUserInputSchema: z.ZodType<Prisma.InvitationCreateOrConnectWithoutUserInput> = z.object({
  where: z.lazy(() => InvitationWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => InvitationCreateWithoutUserInputSchema),z.lazy(() => InvitationUncheckedCreateWithoutUserInputSchema) ]),
}).strict();

export const PatientCreateWithoutUserInputSchema: z.ZodType<Prisma.PatientCreateWithoutUserInput> = z.object({
  id: z.string().cuid().optional(),
  firstName: z.string(),
  lastName: z.string(),
  gender: z.string().optional().nullable(),
  dob: z.coerce.date().optional().nullable(),
  email: z.string().optional().nullable(),
  phone: z.string().optional().nullable(),
  city: z.string().optional().nullable(),
  county: z.string().optional().nullable(),
  status: z.lazy(() => StatusSchema).optional(),
  smsNotifications: z.boolean().optional(),
  emailNotifications: z.boolean().optional(),
  filters: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  tenant: z.lazy(() => TenantCreateNestedOneWithoutPatientsInputSchema),
  files: z.lazy(() => FileCreateNestedManyWithoutPatientInputSchema).optional(),
  quizes: z.lazy(() => QuizCreateNestedManyWithoutPatientInputSchema).optional(),
  appointments: z.lazy(() => EventCreateNestedManyWithoutPatientInputSchema).optional(),
  treatmentPlans: z.lazy(() => TreatmentPlanCreateNestedManyWithoutPatientInputSchema).optional()
}).strict();

export const PatientUncheckedCreateWithoutUserInputSchema: z.ZodType<Prisma.PatientUncheckedCreateWithoutUserInput> = z.object({
  id: z.string().cuid().optional(),
  firstName: z.string(),
  lastName: z.string(),
  gender: z.string().optional().nullable(),
  dob: z.coerce.date().optional().nullable(),
  email: z.string().optional().nullable(),
  phone: z.string().optional().nullable(),
  city: z.string().optional().nullable(),
  county: z.string().optional().nullable(),
  status: z.lazy(() => StatusSchema).optional(),
  smsNotifications: z.boolean().optional(),
  emailNotifications: z.boolean().optional(),
  filters: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  tenantId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  files: z.lazy(() => FileUncheckedCreateNestedManyWithoutPatientInputSchema).optional(),
  quizes: z.lazy(() => QuizUncheckedCreateNestedManyWithoutPatientInputSchema).optional(),
  appointments: z.lazy(() => EventUncheckedCreateNestedManyWithoutPatientInputSchema).optional(),
  treatmentPlans: z.lazy(() => TreatmentPlanUncheckedCreateNestedManyWithoutPatientInputSchema).optional()
}).strict();

export const PatientCreateOrConnectWithoutUserInputSchema: z.ZodType<Prisma.PatientCreateOrConnectWithoutUserInput> = z.object({
  where: z.lazy(() => PatientWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => PatientCreateWithoutUserInputSchema),z.lazy(() => PatientUncheckedCreateWithoutUserInputSchema) ]),
}).strict();

export const PatientCreateManyUserInputEnvelopeSchema: z.ZodType<Prisma.PatientCreateManyUserInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => PatientCreateManyUserInputSchema),z.lazy(() => PatientCreateManyUserInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const EventCreateWithoutUserInputSchema: z.ZodType<Prisma.EventCreateWithoutUserInput> = z.object({
  id: z.string().cuid().optional(),
  index: z.number().int().optional(),
  title: z.string(),
  description: z.string().optional().nullable(),
  date: z.coerce.date(),
  start: z.coerce.date().optional().nullable(),
  end: z.coerce.date().optional().nullable(),
  allDay: z.boolean().optional(),
  type: z.lazy(() => EventTypeSchema).optional(),
  status: z.lazy(() => EventStatusSchema).optional(),
  initiator: z.lazy(() => EventInitiatorSchema).optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  visits: z.lazy(() => VisitCreateNestedManyWithoutEventInputSchema).optional(),
  quiz: z.lazy(() => QuizCreateNestedOneWithoutEventInputSchema).optional(),
  actions: z.lazy(() => EventActionCreateNestedManyWithoutEventInputSchema).optional(),
  files: z.lazy(() => FileCreateNestedManyWithoutEventInputSchema).optional(),
  patient: z.lazy(() => PatientCreateNestedOneWithoutAppointmentsInputSchema).optional(),
  tenant: z.lazy(() => TenantCreateNestedOneWithoutEventsInputSchema)
}).strict();

export const EventUncheckedCreateWithoutUserInputSchema: z.ZodType<Prisma.EventUncheckedCreateWithoutUserInput> = z.object({
  id: z.string().cuid().optional(),
  index: z.number().int().optional(),
  title: z.string(),
  description: z.string().optional().nullable(),
  date: z.coerce.date(),
  start: z.coerce.date().optional().nullable(),
  end: z.coerce.date().optional().nullable(),
  allDay: z.boolean().optional(),
  type: z.lazy(() => EventTypeSchema).optional(),
  status: z.lazy(() => EventStatusSchema).optional(),
  initiator: z.lazy(() => EventInitiatorSchema).optional(),
  patientId: z.string().optional().nullable(),
  tenantId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  visits: z.lazy(() => VisitUncheckedCreateNestedManyWithoutEventInputSchema).optional(),
  quiz: z.lazy(() => QuizUncheckedCreateNestedOneWithoutEventInputSchema).optional(),
  actions: z.lazy(() => EventActionUncheckedCreateNestedManyWithoutEventInputSchema).optional(),
  files: z.lazy(() => FileUncheckedCreateNestedManyWithoutEventInputSchema).optional()
}).strict();

export const EventCreateOrConnectWithoutUserInputSchema: z.ZodType<Prisma.EventCreateOrConnectWithoutUserInput> = z.object({
  where: z.lazy(() => EventWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => EventCreateWithoutUserInputSchema),z.lazy(() => EventUncheckedCreateWithoutUserInputSchema) ]),
}).strict();

export const EventCreateManyUserInputEnvelopeSchema: z.ZodType<Prisma.EventCreateManyUserInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => EventCreateManyUserInputSchema),z.lazy(() => EventCreateManyUserInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const EventActionCreateWithoutUserInputSchema: z.ZodType<Prisma.EventActionCreateWithoutUserInput> = z.object({
  id: z.string().cuid().optional(),
  data: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  event: z.lazy(() => EventCreateNestedOneWithoutActionsInputSchema)
}).strict();

export const EventActionUncheckedCreateWithoutUserInputSchema: z.ZodType<Prisma.EventActionUncheckedCreateWithoutUserInput> = z.object({
  id: z.string().cuid().optional(),
  data: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  eventId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const EventActionCreateOrConnectWithoutUserInputSchema: z.ZodType<Prisma.EventActionCreateOrConnectWithoutUserInput> = z.object({
  where: z.lazy(() => EventActionWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => EventActionCreateWithoutUserInputSchema),z.lazy(() => EventActionUncheckedCreateWithoutUserInputSchema) ]),
}).strict();

export const EventActionCreateManyUserInputEnvelopeSchema: z.ZodType<Prisma.EventActionCreateManyUserInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => EventActionCreateManyUserInputSchema),z.lazy(() => EventActionCreateManyUserInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const TreatmentPlanCreateWithoutUserInputSchema: z.ZodType<Prisma.TreatmentPlanCreateWithoutUserInput> = z.object({
  id: z.string().cuid().optional(),
  description: z.string().optional().nullable(),
  isDone: z.boolean().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  treatments: z.lazy(() => TreatmentCreateNestedManyWithoutTreatmentPlanInputSchema).optional(),
  patient: z.lazy(() => PatientCreateNestedOneWithoutTreatmentPlansInputSchema)
}).strict();

export const TreatmentPlanUncheckedCreateWithoutUserInputSchema: z.ZodType<Prisma.TreatmentPlanUncheckedCreateWithoutUserInput> = z.object({
  id: z.string().cuid().optional(),
  description: z.string().optional().nullable(),
  isDone: z.boolean().optional(),
  patientId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  treatments: z.lazy(() => TreatmentUncheckedCreateNestedManyWithoutTreatmentPlanInputSchema).optional()
}).strict();

export const TreatmentPlanCreateOrConnectWithoutUserInputSchema: z.ZodType<Prisma.TreatmentPlanCreateOrConnectWithoutUserInput> = z.object({
  where: z.lazy(() => TreatmentPlanWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => TreatmentPlanCreateWithoutUserInputSchema),z.lazy(() => TreatmentPlanUncheckedCreateWithoutUserInputSchema) ]),
}).strict();

export const TreatmentPlanCreateManyUserInputEnvelopeSchema: z.ZodType<Prisma.TreatmentPlanCreateManyUserInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => TreatmentPlanCreateManyUserInputSchema),z.lazy(() => TreatmentPlanCreateManyUserInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const InvitationCreateWithoutInvitedByInputSchema: z.ZodType<Prisma.InvitationCreateWithoutInvitedByInput> = z.object({
  id: z.string().cuid().optional(),
  email: z.string(),
  role: z.lazy(() => RoleSchema),
  token: z.string(),
  expires: z.coerce.date(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  user: z.lazy(() => UserCreateNestedOneWithoutInvitationInputSchema).optional()
}).strict();

export const InvitationUncheckedCreateWithoutInvitedByInputSchema: z.ZodType<Prisma.InvitationUncheckedCreateWithoutInvitedByInput> = z.object({
  id: z.string().cuid().optional(),
  email: z.string(),
  role: z.lazy(() => RoleSchema),
  token: z.string(),
  expires: z.coerce.date(),
  userId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const InvitationCreateOrConnectWithoutInvitedByInputSchema: z.ZodType<Prisma.InvitationCreateOrConnectWithoutInvitedByInput> = z.object({
  where: z.lazy(() => InvitationWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => InvitationCreateWithoutInvitedByInputSchema),z.lazy(() => InvitationUncheckedCreateWithoutInvitedByInputSchema) ]),
}).strict();

export const InvitationCreateManyInvitedByInputEnvelopeSchema: z.ZodType<Prisma.InvitationCreateManyInvitedByInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => InvitationCreateManyInvitedByInputSchema),z.lazy(() => InvitationCreateManyInvitedByInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const FileCreateWithoutUserInputSchema: z.ZodType<Prisma.FileCreateWithoutUserInput> = z.object({
  id: z.string().cuid().optional(),
  url: z.string(),
  key: z.string(),
  name: z.string(),
  extension: z.string(),
  contentType: z.string(),
  size: z.number().int(),
  confirmed: z.boolean().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  tenant: z.lazy(() => TenantCreateNestedOneWithoutFilesInputSchema),
  event: z.lazy(() => EventCreateNestedOneWithoutFilesInputSchema).optional(),
  patient: z.lazy(() => PatientCreateNestedOneWithoutFilesInputSchema).optional()
}).strict();

export const FileUncheckedCreateWithoutUserInputSchema: z.ZodType<Prisma.FileUncheckedCreateWithoutUserInput> = z.object({
  id: z.string().cuid().optional(),
  url: z.string(),
  key: z.string(),
  name: z.string(),
  extension: z.string(),
  contentType: z.string(),
  size: z.number().int(),
  confirmed: z.boolean().optional(),
  tenantId: z.string(),
  eventId: z.string().optional().nullable(),
  patientId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const FileCreateOrConnectWithoutUserInputSchema: z.ZodType<Prisma.FileCreateOrConnectWithoutUserInput> = z.object({
  where: z.lazy(() => FileWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => FileCreateWithoutUserInputSchema),z.lazy(() => FileUncheckedCreateWithoutUserInputSchema) ]),
}).strict();

export const FileCreateManyUserInputEnvelopeSchema: z.ZodType<Prisma.FileCreateManyUserInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => FileCreateManyUserInputSchema),z.lazy(() => FileCreateManyUserInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const TaskCreateWithoutUserInputSchema: z.ZodType<Prisma.TaskCreateWithoutUserInput> = z.object({
  id: z.string().cuid().optional(),
  title: z.string(),
  isDone: z.boolean().optional(),
  dueDate: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const TaskUncheckedCreateWithoutUserInputSchema: z.ZodType<Prisma.TaskUncheckedCreateWithoutUserInput> = z.object({
  id: z.string().cuid().optional(),
  title: z.string(),
  isDone: z.boolean().optional(),
  dueDate: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const TaskCreateOrConnectWithoutUserInputSchema: z.ZodType<Prisma.TaskCreateOrConnectWithoutUserInput> = z.object({
  where: z.lazy(() => TaskWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => TaskCreateWithoutUserInputSchema),z.lazy(() => TaskUncheckedCreateWithoutUserInputSchema) ]),
}).strict();

export const TaskCreateManyUserInputEnvelopeSchema: z.ZodType<Prisma.TaskCreateManyUserInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => TaskCreateManyUserInputSchema),z.lazy(() => TaskCreateManyUserInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const SpecialityUpsertWithoutUsersInputSchema: z.ZodType<Prisma.SpecialityUpsertWithoutUsersInput> = z.object({
  update: z.union([ z.lazy(() => SpecialityUpdateWithoutUsersInputSchema),z.lazy(() => SpecialityUncheckedUpdateWithoutUsersInputSchema) ]),
  create: z.union([ z.lazy(() => SpecialityCreateWithoutUsersInputSchema),z.lazy(() => SpecialityUncheckedCreateWithoutUsersInputSchema) ]),
  where: z.lazy(() => SpecialityWhereInputSchema).optional()
}).strict();

export const SpecialityUpdateToOneWithWhereWithoutUsersInputSchema: z.ZodType<Prisma.SpecialityUpdateToOneWithWhereWithoutUsersInput> = z.object({
  where: z.lazy(() => SpecialityWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => SpecialityUpdateWithoutUsersInputSchema),z.lazy(() => SpecialityUncheckedUpdateWithoutUsersInputSchema) ]),
}).strict();

export const SpecialityUpdateWithoutUsersInputSchema: z.ZodType<Prisma.SpecialityUpdateWithoutUsersInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  color: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  tenant: z.lazy(() => TenantUpdateOneRequiredWithoutSpecialitiesNestedInputSchema).optional()
}).strict();

export const SpecialityUncheckedUpdateWithoutUsersInputSchema: z.ZodType<Prisma.SpecialityUncheckedUpdateWithoutUsersInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  color: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  tenantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ProfileUpsertWithoutUsersInputSchema: z.ZodType<Prisma.ProfileUpsertWithoutUsersInput> = z.object({
  update: z.union([ z.lazy(() => ProfileUpdateWithoutUsersInputSchema),z.lazy(() => ProfileUncheckedUpdateWithoutUsersInputSchema) ]),
  create: z.union([ z.lazy(() => ProfileCreateWithoutUsersInputSchema),z.lazy(() => ProfileUncheckedCreateWithoutUsersInputSchema) ]),
  where: z.lazy(() => ProfileWhereInputSchema).optional()
}).strict();

export const ProfileUpdateToOneWithWhereWithoutUsersInputSchema: z.ZodType<Prisma.ProfileUpdateToOneWithWhereWithoutUsersInput> = z.object({
  where: z.lazy(() => ProfileWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => ProfileUpdateWithoutUsersInputSchema),z.lazy(() => ProfileUncheckedUpdateWithoutUsersInputSchema) ]),
}).strict();

export const ProfileUpdateWithoutUsersInputSchema: z.ZodType<Prisma.ProfileUpdateWithoutUsersInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  title: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  firstName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  lastName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  activatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  stripeCustomerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  stripeFreeTrialUsed: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  avatar: z.lazy(() => AvatarUpdateOneWithoutProfileNestedInputSchema).optional(),
  preferredTenant: z.lazy(() => TenantUpdateOneWithoutPreferedByProfilesNestedInputSchema).optional(),
  accounts: z.lazy(() => AccountUpdateManyWithoutProfileNestedInputSchema).optional(),
  tokens: z.lazy(() => TokenUpdateManyWithoutProfileNestedInputSchema).optional()
}).strict();

export const ProfileUncheckedUpdateWithoutUsersInputSchema: z.ZodType<Prisma.ProfileUncheckedUpdateWithoutUsersInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  title: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  firstName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  lastName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  activatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  stripeCustomerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  stripeFreeTrialUsed: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  preferredTenantId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  avatar: z.lazy(() => AvatarUncheckedUpdateOneWithoutProfileNestedInputSchema).optional(),
  accounts: z.lazy(() => AccountUncheckedUpdateManyWithoutProfileNestedInputSchema).optional(),
  tokens: z.lazy(() => TokenUncheckedUpdateManyWithoutProfileNestedInputSchema).optional()
}).strict();

export const TenantUpsertWithoutUsersInputSchema: z.ZodType<Prisma.TenantUpsertWithoutUsersInput> = z.object({
  update: z.union([ z.lazy(() => TenantUpdateWithoutUsersInputSchema),z.lazy(() => TenantUncheckedUpdateWithoutUsersInputSchema) ]),
  create: z.union([ z.lazy(() => TenantCreateWithoutUsersInputSchema),z.lazy(() => TenantUncheckedCreateWithoutUsersInputSchema) ]),
  where: z.lazy(() => TenantWhereInputSchema).optional()
}).strict();

export const TenantUpdateToOneWithWhereWithoutUsersInputSchema: z.ZodType<Prisma.TenantUpdateToOneWithWhereWithoutUsersInput> = z.object({
  where: z.lazy(() => TenantWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => TenantUpdateWithoutUsersInputSchema),z.lazy(() => TenantUncheckedUpdateWithoutUsersInputSchema) ]),
}).strict();

export const TenantUpdateWithoutUsersInputSchema: z.ZodType<Prisma.TenantUpdateWithoutUsersInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  disabledAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  trialExpiresAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  profile: z.lazy(() => TenantProfileUpdateOneRequiredWithoutTenantNestedInputSchema).optional(),
  specialities: z.lazy(() => SpecialityUpdateManyWithoutTenantNestedInputSchema).optional(),
  preferedByProfiles: z.lazy(() => ProfileUpdateManyWithoutPreferredTenantNestedInputSchema).optional(),
  patients: z.lazy(() => PatientUpdateManyWithoutTenantNestedInputSchema).optional(),
  services: z.lazy(() => ServiceUpdateManyWithoutTenantNestedInputSchema).optional(),
  materials: z.lazy(() => MaterialUpdateManyWithoutTenantNestedInputSchema).optional(),
  events: z.lazy(() => EventUpdateManyWithoutTenantNestedInputSchema).optional(),
  files: z.lazy(() => FileUpdateManyWithoutTenantNestedInputSchema).optional()
}).strict();

export const TenantUncheckedUpdateWithoutUsersInputSchema: z.ZodType<Prisma.TenantUncheckedUpdateWithoutUsersInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  profileId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  disabledAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  trialExpiresAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  specialities: z.lazy(() => SpecialityUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  preferedByProfiles: z.lazy(() => ProfileUncheckedUpdateManyWithoutPreferredTenantNestedInputSchema).optional(),
  patients: z.lazy(() => PatientUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  services: z.lazy(() => ServiceUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  materials: z.lazy(() => MaterialUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  events: z.lazy(() => EventUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  files: z.lazy(() => FileUncheckedUpdateManyWithoutTenantNestedInputSchema).optional()
}).strict();

export const InvitationUpsertWithoutUserInputSchema: z.ZodType<Prisma.InvitationUpsertWithoutUserInput> = z.object({
  update: z.union([ z.lazy(() => InvitationUpdateWithoutUserInputSchema),z.lazy(() => InvitationUncheckedUpdateWithoutUserInputSchema) ]),
  create: z.union([ z.lazy(() => InvitationCreateWithoutUserInputSchema),z.lazy(() => InvitationUncheckedCreateWithoutUserInputSchema) ]),
  where: z.lazy(() => InvitationWhereInputSchema).optional()
}).strict();

export const InvitationUpdateToOneWithWhereWithoutUserInputSchema: z.ZodType<Prisma.InvitationUpdateToOneWithWhereWithoutUserInput> = z.object({
  where: z.lazy(() => InvitationWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => InvitationUpdateWithoutUserInputSchema),z.lazy(() => InvitationUncheckedUpdateWithoutUserInputSchema) ]),
}).strict();

export const InvitationUpdateWithoutUserInputSchema: z.ZodType<Prisma.InvitationUpdateWithoutUserInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.lazy(() => RoleSchema),z.lazy(() => EnumRoleFieldUpdateOperationsInputSchema) ]).optional(),
  token: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  expires: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  invitedBy: z.lazy(() => UserUpdateOneRequiredWithoutInvitationsNestedInputSchema).optional()
}).strict();

export const InvitationUncheckedUpdateWithoutUserInputSchema: z.ZodType<Prisma.InvitationUncheckedUpdateWithoutUserInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.lazy(() => RoleSchema),z.lazy(() => EnumRoleFieldUpdateOperationsInputSchema) ]).optional(),
  token: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  expires: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  invitedById: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const PatientUpsertWithWhereUniqueWithoutUserInputSchema: z.ZodType<Prisma.PatientUpsertWithWhereUniqueWithoutUserInput> = z.object({
  where: z.lazy(() => PatientWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => PatientUpdateWithoutUserInputSchema),z.lazy(() => PatientUncheckedUpdateWithoutUserInputSchema) ]),
  create: z.union([ z.lazy(() => PatientCreateWithoutUserInputSchema),z.lazy(() => PatientUncheckedCreateWithoutUserInputSchema) ]),
}).strict();

export const PatientUpdateWithWhereUniqueWithoutUserInputSchema: z.ZodType<Prisma.PatientUpdateWithWhereUniqueWithoutUserInput> = z.object({
  where: z.lazy(() => PatientWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => PatientUpdateWithoutUserInputSchema),z.lazy(() => PatientUncheckedUpdateWithoutUserInputSchema) ]),
}).strict();

export const PatientUpdateManyWithWhereWithoutUserInputSchema: z.ZodType<Prisma.PatientUpdateManyWithWhereWithoutUserInput> = z.object({
  where: z.lazy(() => PatientScalarWhereInputSchema),
  data: z.union([ z.lazy(() => PatientUpdateManyMutationInputSchema),z.lazy(() => PatientUncheckedUpdateManyWithoutUserInputSchema) ]),
}).strict();

export const EventUpsertWithWhereUniqueWithoutUserInputSchema: z.ZodType<Prisma.EventUpsertWithWhereUniqueWithoutUserInput> = z.object({
  where: z.lazy(() => EventWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => EventUpdateWithoutUserInputSchema),z.lazy(() => EventUncheckedUpdateWithoutUserInputSchema) ]),
  create: z.union([ z.lazy(() => EventCreateWithoutUserInputSchema),z.lazy(() => EventUncheckedCreateWithoutUserInputSchema) ]),
}).strict();

export const EventUpdateWithWhereUniqueWithoutUserInputSchema: z.ZodType<Prisma.EventUpdateWithWhereUniqueWithoutUserInput> = z.object({
  where: z.lazy(() => EventWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => EventUpdateWithoutUserInputSchema),z.lazy(() => EventUncheckedUpdateWithoutUserInputSchema) ]),
}).strict();

export const EventUpdateManyWithWhereWithoutUserInputSchema: z.ZodType<Prisma.EventUpdateManyWithWhereWithoutUserInput> = z.object({
  where: z.lazy(() => EventScalarWhereInputSchema),
  data: z.union([ z.lazy(() => EventUpdateManyMutationInputSchema),z.lazy(() => EventUncheckedUpdateManyWithoutUserInputSchema) ]),
}).strict();

export const EventActionUpsertWithWhereUniqueWithoutUserInputSchema: z.ZodType<Prisma.EventActionUpsertWithWhereUniqueWithoutUserInput> = z.object({
  where: z.lazy(() => EventActionWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => EventActionUpdateWithoutUserInputSchema),z.lazy(() => EventActionUncheckedUpdateWithoutUserInputSchema) ]),
  create: z.union([ z.lazy(() => EventActionCreateWithoutUserInputSchema),z.lazy(() => EventActionUncheckedCreateWithoutUserInputSchema) ]),
}).strict();

export const EventActionUpdateWithWhereUniqueWithoutUserInputSchema: z.ZodType<Prisma.EventActionUpdateWithWhereUniqueWithoutUserInput> = z.object({
  where: z.lazy(() => EventActionWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => EventActionUpdateWithoutUserInputSchema),z.lazy(() => EventActionUncheckedUpdateWithoutUserInputSchema) ]),
}).strict();

export const EventActionUpdateManyWithWhereWithoutUserInputSchema: z.ZodType<Prisma.EventActionUpdateManyWithWhereWithoutUserInput> = z.object({
  where: z.lazy(() => EventActionScalarWhereInputSchema),
  data: z.union([ z.lazy(() => EventActionUpdateManyMutationInputSchema),z.lazy(() => EventActionUncheckedUpdateManyWithoutUserInputSchema) ]),
}).strict();

export const EventActionScalarWhereInputSchema: z.ZodType<Prisma.EventActionScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => EventActionScalarWhereInputSchema),z.lazy(() => EventActionScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => EventActionScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => EventActionScalarWhereInputSchema),z.lazy(() => EventActionScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  data: z.lazy(() => JsonFilterSchema).optional(),
  userId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  eventId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const TreatmentPlanUpsertWithWhereUniqueWithoutUserInputSchema: z.ZodType<Prisma.TreatmentPlanUpsertWithWhereUniqueWithoutUserInput> = z.object({
  where: z.lazy(() => TreatmentPlanWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => TreatmentPlanUpdateWithoutUserInputSchema),z.lazy(() => TreatmentPlanUncheckedUpdateWithoutUserInputSchema) ]),
  create: z.union([ z.lazy(() => TreatmentPlanCreateWithoutUserInputSchema),z.lazy(() => TreatmentPlanUncheckedCreateWithoutUserInputSchema) ]),
}).strict();

export const TreatmentPlanUpdateWithWhereUniqueWithoutUserInputSchema: z.ZodType<Prisma.TreatmentPlanUpdateWithWhereUniqueWithoutUserInput> = z.object({
  where: z.lazy(() => TreatmentPlanWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => TreatmentPlanUpdateWithoutUserInputSchema),z.lazy(() => TreatmentPlanUncheckedUpdateWithoutUserInputSchema) ]),
}).strict();

export const TreatmentPlanUpdateManyWithWhereWithoutUserInputSchema: z.ZodType<Prisma.TreatmentPlanUpdateManyWithWhereWithoutUserInput> = z.object({
  where: z.lazy(() => TreatmentPlanScalarWhereInputSchema),
  data: z.union([ z.lazy(() => TreatmentPlanUpdateManyMutationInputSchema),z.lazy(() => TreatmentPlanUncheckedUpdateManyWithoutUserInputSchema) ]),
}).strict();

export const TreatmentPlanScalarWhereInputSchema: z.ZodType<Prisma.TreatmentPlanScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => TreatmentPlanScalarWhereInputSchema),z.lazy(() => TreatmentPlanScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => TreatmentPlanScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => TreatmentPlanScalarWhereInputSchema),z.lazy(() => TreatmentPlanScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  isDone: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  patientId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  userId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const InvitationUpsertWithWhereUniqueWithoutInvitedByInputSchema: z.ZodType<Prisma.InvitationUpsertWithWhereUniqueWithoutInvitedByInput> = z.object({
  where: z.lazy(() => InvitationWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => InvitationUpdateWithoutInvitedByInputSchema),z.lazy(() => InvitationUncheckedUpdateWithoutInvitedByInputSchema) ]),
  create: z.union([ z.lazy(() => InvitationCreateWithoutInvitedByInputSchema),z.lazy(() => InvitationUncheckedCreateWithoutInvitedByInputSchema) ]),
}).strict();

export const InvitationUpdateWithWhereUniqueWithoutInvitedByInputSchema: z.ZodType<Prisma.InvitationUpdateWithWhereUniqueWithoutInvitedByInput> = z.object({
  where: z.lazy(() => InvitationWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => InvitationUpdateWithoutInvitedByInputSchema),z.lazy(() => InvitationUncheckedUpdateWithoutInvitedByInputSchema) ]),
}).strict();

export const InvitationUpdateManyWithWhereWithoutInvitedByInputSchema: z.ZodType<Prisma.InvitationUpdateManyWithWhereWithoutInvitedByInput> = z.object({
  where: z.lazy(() => InvitationScalarWhereInputSchema),
  data: z.union([ z.lazy(() => InvitationUpdateManyMutationInputSchema),z.lazy(() => InvitationUncheckedUpdateManyWithoutInvitedByInputSchema) ]),
}).strict();

export const InvitationScalarWhereInputSchema: z.ZodType<Prisma.InvitationScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => InvitationScalarWhereInputSchema),z.lazy(() => InvitationScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => InvitationScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => InvitationScalarWhereInputSchema),z.lazy(() => InvitationScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  email: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  role: z.union([ z.lazy(() => EnumRoleFilterSchema),z.lazy(() => RoleSchema) ]).optional(),
  token: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  expires: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  invitedById: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  userId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const FileUpsertWithWhereUniqueWithoutUserInputSchema: z.ZodType<Prisma.FileUpsertWithWhereUniqueWithoutUserInput> = z.object({
  where: z.lazy(() => FileWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => FileUpdateWithoutUserInputSchema),z.lazy(() => FileUncheckedUpdateWithoutUserInputSchema) ]),
  create: z.union([ z.lazy(() => FileCreateWithoutUserInputSchema),z.lazy(() => FileUncheckedCreateWithoutUserInputSchema) ]),
}).strict();

export const FileUpdateWithWhereUniqueWithoutUserInputSchema: z.ZodType<Prisma.FileUpdateWithWhereUniqueWithoutUserInput> = z.object({
  where: z.lazy(() => FileWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => FileUpdateWithoutUserInputSchema),z.lazy(() => FileUncheckedUpdateWithoutUserInputSchema) ]),
}).strict();

export const FileUpdateManyWithWhereWithoutUserInputSchema: z.ZodType<Prisma.FileUpdateManyWithWhereWithoutUserInput> = z.object({
  where: z.lazy(() => FileScalarWhereInputSchema),
  data: z.union([ z.lazy(() => FileUpdateManyMutationInputSchema),z.lazy(() => FileUncheckedUpdateManyWithoutUserInputSchema) ]),
}).strict();

export const TaskUpsertWithWhereUniqueWithoutUserInputSchema: z.ZodType<Prisma.TaskUpsertWithWhereUniqueWithoutUserInput> = z.object({
  where: z.lazy(() => TaskWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => TaskUpdateWithoutUserInputSchema),z.lazy(() => TaskUncheckedUpdateWithoutUserInputSchema) ]),
  create: z.union([ z.lazy(() => TaskCreateWithoutUserInputSchema),z.lazy(() => TaskUncheckedCreateWithoutUserInputSchema) ]),
}).strict();

export const TaskUpdateWithWhereUniqueWithoutUserInputSchema: z.ZodType<Prisma.TaskUpdateWithWhereUniqueWithoutUserInput> = z.object({
  where: z.lazy(() => TaskWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => TaskUpdateWithoutUserInputSchema),z.lazy(() => TaskUncheckedUpdateWithoutUserInputSchema) ]),
}).strict();

export const TaskUpdateManyWithWhereWithoutUserInputSchema: z.ZodType<Prisma.TaskUpdateManyWithWhereWithoutUserInput> = z.object({
  where: z.lazy(() => TaskScalarWhereInputSchema),
  data: z.union([ z.lazy(() => TaskUpdateManyMutationInputSchema),z.lazy(() => TaskUncheckedUpdateManyWithoutUserInputSchema) ]),
}).strict();

export const TaskScalarWhereInputSchema: z.ZodType<Prisma.TaskScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => TaskScalarWhereInputSchema),z.lazy(() => TaskScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => TaskScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => TaskScalarWhereInputSchema),z.lazy(() => TaskScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  title: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  isDone: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  dueDate: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  userId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const AvatarCreateWithoutProfileInputSchema: z.ZodType<Prisma.AvatarCreateWithoutProfileInput> = z.object({
  id: z.string().cuid().optional(),
  url: z.string(),
  key: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  tenantProfile: z.lazy(() => TenantProfileCreateNestedOneWithoutAvatarInputSchema).optional()
}).strict();

export const AvatarUncheckedCreateWithoutProfileInputSchema: z.ZodType<Prisma.AvatarUncheckedCreateWithoutProfileInput> = z.object({
  id: z.string().cuid().optional(),
  url: z.string(),
  key: z.string(),
  tenantProfileId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const AvatarCreateOrConnectWithoutProfileInputSchema: z.ZodType<Prisma.AvatarCreateOrConnectWithoutProfileInput> = z.object({
  where: z.lazy(() => AvatarWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => AvatarCreateWithoutProfileInputSchema),z.lazy(() => AvatarUncheckedCreateWithoutProfileInputSchema) ]),
}).strict();

export const TenantCreateWithoutPreferedByProfilesInputSchema: z.ZodType<Prisma.TenantCreateWithoutPreferedByProfilesInput> = z.object({
  id: z.string().cuid().optional(),
  email: z.string(),
  deletedAt: z.coerce.date().optional().nullable(),
  disabledAt: z.coerce.date().optional().nullable(),
  trialExpiresAt: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  users: z.lazy(() => UserCreateNestedManyWithoutTenantInputSchema).optional(),
  profile: z.lazy(() => TenantProfileCreateNestedOneWithoutTenantInputSchema),
  specialities: z.lazy(() => SpecialityCreateNestedManyWithoutTenantInputSchema).optional(),
  patients: z.lazy(() => PatientCreateNestedManyWithoutTenantInputSchema).optional(),
  services: z.lazy(() => ServiceCreateNestedManyWithoutTenantInputSchema).optional(),
  materials: z.lazy(() => MaterialCreateNestedManyWithoutTenantInputSchema).optional(),
  events: z.lazy(() => EventCreateNestedManyWithoutTenantInputSchema).optional(),
  files: z.lazy(() => FileCreateNestedManyWithoutTenantInputSchema).optional()
}).strict();

export const TenantUncheckedCreateWithoutPreferedByProfilesInputSchema: z.ZodType<Prisma.TenantUncheckedCreateWithoutPreferedByProfilesInput> = z.object({
  id: z.string().cuid().optional(),
  email: z.string(),
  profileId: z.string(),
  deletedAt: z.coerce.date().optional().nullable(),
  disabledAt: z.coerce.date().optional().nullable(),
  trialExpiresAt: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  users: z.lazy(() => UserUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  specialities: z.lazy(() => SpecialityUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  patients: z.lazy(() => PatientUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  services: z.lazy(() => ServiceUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  materials: z.lazy(() => MaterialUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  events: z.lazy(() => EventUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  files: z.lazy(() => FileUncheckedCreateNestedManyWithoutTenantInputSchema).optional()
}).strict();

export const TenantCreateOrConnectWithoutPreferedByProfilesInputSchema: z.ZodType<Prisma.TenantCreateOrConnectWithoutPreferedByProfilesInput> = z.object({
  where: z.lazy(() => TenantWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => TenantCreateWithoutPreferedByProfilesInputSchema),z.lazy(() => TenantUncheckedCreateWithoutPreferedByProfilesInputSchema) ]),
}).strict();

export const UserCreateWithoutProfileInputSchema: z.ZodType<Prisma.UserCreateWithoutProfileInput> = z.object({
  id: z.string().cuid().optional(),
  index: z.number().int().optional(),
  role: z.lazy(() => RoleSchema).optional(),
  workingHours: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  firstDayOfWeek: z.lazy(() => DayOfWeekSchema).optional(),
  showWeekends: z.boolean().optional(),
  webhookApiKey: z.string().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  activatedAt: z.coerce.date().optional().nullable(),
  lastLoginAt: z.coerce.date().optional().nullable(),
  bannedAt: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  speciality: z.lazy(() => SpecialityCreateNestedOneWithoutUsersInputSchema).optional(),
  tenant: z.lazy(() => TenantCreateNestedOneWithoutUsersInputSchema),
  invitation: z.lazy(() => InvitationCreateNestedOneWithoutUserInputSchema).optional(),
  patients: z.lazy(() => PatientCreateNestedManyWithoutUserInputSchema).optional(),
  events: z.lazy(() => EventCreateNestedManyWithoutUserInputSchema).optional(),
  eventActions: z.lazy(() => EventActionCreateNestedManyWithoutUserInputSchema).optional(),
  treatmentPlans: z.lazy(() => TreatmentPlanCreateNestedManyWithoutUserInputSchema).optional(),
  invitations: z.lazy(() => InvitationCreateNestedManyWithoutInvitedByInputSchema).optional(),
  files: z.lazy(() => FileCreateNestedManyWithoutUserInputSchema).optional(),
  tasks: z.lazy(() => TaskCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const UserUncheckedCreateWithoutProfileInputSchema: z.ZodType<Prisma.UserUncheckedCreateWithoutProfileInput> = z.object({
  id: z.string().cuid().optional(),
  index: z.number().int().optional(),
  role: z.lazy(() => RoleSchema).optional(),
  workingHours: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  firstDayOfWeek: z.lazy(() => DayOfWeekSchema).optional(),
  showWeekends: z.boolean().optional(),
  webhookApiKey: z.string().optional().nullable(),
  specialityId: z.string().optional().nullable(),
  tenantId: z.string(),
  deletedAt: z.coerce.date().optional().nullable(),
  activatedAt: z.coerce.date().optional().nullable(),
  lastLoginAt: z.coerce.date().optional().nullable(),
  bannedAt: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  invitation: z.lazy(() => InvitationUncheckedCreateNestedOneWithoutUserInputSchema).optional(),
  patients: z.lazy(() => PatientUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  events: z.lazy(() => EventUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  eventActions: z.lazy(() => EventActionUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  treatmentPlans: z.lazy(() => TreatmentPlanUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedCreateNestedManyWithoutInvitedByInputSchema).optional(),
  files: z.lazy(() => FileUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  tasks: z.lazy(() => TaskUncheckedCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const UserCreateOrConnectWithoutProfileInputSchema: z.ZodType<Prisma.UserCreateOrConnectWithoutProfileInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UserCreateWithoutProfileInputSchema),z.lazy(() => UserUncheckedCreateWithoutProfileInputSchema) ]),
}).strict();

export const UserCreateManyProfileInputEnvelopeSchema: z.ZodType<Prisma.UserCreateManyProfileInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => UserCreateManyProfileInputSchema),z.lazy(() => UserCreateManyProfileInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const AccountCreateWithoutProfileInputSchema: z.ZodType<Prisma.AccountCreateWithoutProfileInput> = z.object({
  id: z.string().cuid().optional(),
  type: z.string(),
  provider: z.string(),
  passwordHash: z.string().optional().nullable(),
  refresh_token: z.string().optional().nullable(),
  access_token: z.string().optional().nullable(),
  expires_at: z.coerce.date().optional().nullable(),
  refresh_token_expires_in: z.number().int().optional().nullable(),
  token_type: z.string().optional().nullable(),
  scope: z.string().optional().nullable(),
  id_token: z.string().optional().nullable(),
  session_state: z.string().optional().nullable()
}).strict();

export const AccountUncheckedCreateWithoutProfileInputSchema: z.ZodType<Prisma.AccountUncheckedCreateWithoutProfileInput> = z.object({
  id: z.string().cuid().optional(),
  type: z.string(),
  provider: z.string(),
  passwordHash: z.string().optional().nullable(),
  refresh_token: z.string().optional().nullable(),
  access_token: z.string().optional().nullable(),
  expires_at: z.coerce.date().optional().nullable(),
  refresh_token_expires_in: z.number().int().optional().nullable(),
  token_type: z.string().optional().nullable(),
  scope: z.string().optional().nullable(),
  id_token: z.string().optional().nullable(),
  session_state: z.string().optional().nullable()
}).strict();

export const AccountCreateOrConnectWithoutProfileInputSchema: z.ZodType<Prisma.AccountCreateOrConnectWithoutProfileInput> = z.object({
  where: z.lazy(() => AccountWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => AccountCreateWithoutProfileInputSchema),z.lazy(() => AccountUncheckedCreateWithoutProfileInputSchema) ]),
}).strict();

export const AccountCreateManyProfileInputEnvelopeSchema: z.ZodType<Prisma.AccountCreateManyProfileInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => AccountCreateManyProfileInputSchema),z.lazy(() => AccountCreateManyProfileInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const TokenCreateWithoutProfileInputSchema: z.ZodType<Prisma.TokenCreateWithoutProfileInput> = z.object({
  id: z.string().cuid().optional(),
  type: z.lazy(() => TokenTypeSchema),
  token: z.string(),
  expires: z.coerce.date()
}).strict();

export const TokenUncheckedCreateWithoutProfileInputSchema: z.ZodType<Prisma.TokenUncheckedCreateWithoutProfileInput> = z.object({
  id: z.string().cuid().optional(),
  type: z.lazy(() => TokenTypeSchema),
  token: z.string(),
  expires: z.coerce.date()
}).strict();

export const TokenCreateOrConnectWithoutProfileInputSchema: z.ZodType<Prisma.TokenCreateOrConnectWithoutProfileInput> = z.object({
  where: z.lazy(() => TokenWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => TokenCreateWithoutProfileInputSchema),z.lazy(() => TokenUncheckedCreateWithoutProfileInputSchema) ]),
}).strict();

export const TokenCreateManyProfileInputEnvelopeSchema: z.ZodType<Prisma.TokenCreateManyProfileInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => TokenCreateManyProfileInputSchema),z.lazy(() => TokenCreateManyProfileInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const AvatarUpsertWithoutProfileInputSchema: z.ZodType<Prisma.AvatarUpsertWithoutProfileInput> = z.object({
  update: z.union([ z.lazy(() => AvatarUpdateWithoutProfileInputSchema),z.lazy(() => AvatarUncheckedUpdateWithoutProfileInputSchema) ]),
  create: z.union([ z.lazy(() => AvatarCreateWithoutProfileInputSchema),z.lazy(() => AvatarUncheckedCreateWithoutProfileInputSchema) ]),
  where: z.lazy(() => AvatarWhereInputSchema).optional()
}).strict();

export const AvatarUpdateToOneWithWhereWithoutProfileInputSchema: z.ZodType<Prisma.AvatarUpdateToOneWithWhereWithoutProfileInput> = z.object({
  where: z.lazy(() => AvatarWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => AvatarUpdateWithoutProfileInputSchema),z.lazy(() => AvatarUncheckedUpdateWithoutProfileInputSchema) ]),
}).strict();

export const AvatarUpdateWithoutProfileInputSchema: z.ZodType<Prisma.AvatarUpdateWithoutProfileInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  url: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  key: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  tenantProfile: z.lazy(() => TenantProfileUpdateOneWithoutAvatarNestedInputSchema).optional()
}).strict();

export const AvatarUncheckedUpdateWithoutProfileInputSchema: z.ZodType<Prisma.AvatarUncheckedUpdateWithoutProfileInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  url: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  key: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  tenantProfileId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const TenantUpsertWithoutPreferedByProfilesInputSchema: z.ZodType<Prisma.TenantUpsertWithoutPreferedByProfilesInput> = z.object({
  update: z.union([ z.lazy(() => TenantUpdateWithoutPreferedByProfilesInputSchema),z.lazy(() => TenantUncheckedUpdateWithoutPreferedByProfilesInputSchema) ]),
  create: z.union([ z.lazy(() => TenantCreateWithoutPreferedByProfilesInputSchema),z.lazy(() => TenantUncheckedCreateWithoutPreferedByProfilesInputSchema) ]),
  where: z.lazy(() => TenantWhereInputSchema).optional()
}).strict();

export const TenantUpdateToOneWithWhereWithoutPreferedByProfilesInputSchema: z.ZodType<Prisma.TenantUpdateToOneWithWhereWithoutPreferedByProfilesInput> = z.object({
  where: z.lazy(() => TenantWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => TenantUpdateWithoutPreferedByProfilesInputSchema),z.lazy(() => TenantUncheckedUpdateWithoutPreferedByProfilesInputSchema) ]),
}).strict();

export const TenantUpdateWithoutPreferedByProfilesInputSchema: z.ZodType<Prisma.TenantUpdateWithoutPreferedByProfilesInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  disabledAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  trialExpiresAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  users: z.lazy(() => UserUpdateManyWithoutTenantNestedInputSchema).optional(),
  profile: z.lazy(() => TenantProfileUpdateOneRequiredWithoutTenantNestedInputSchema).optional(),
  specialities: z.lazy(() => SpecialityUpdateManyWithoutTenantNestedInputSchema).optional(),
  patients: z.lazy(() => PatientUpdateManyWithoutTenantNestedInputSchema).optional(),
  services: z.lazy(() => ServiceUpdateManyWithoutTenantNestedInputSchema).optional(),
  materials: z.lazy(() => MaterialUpdateManyWithoutTenantNestedInputSchema).optional(),
  events: z.lazy(() => EventUpdateManyWithoutTenantNestedInputSchema).optional(),
  files: z.lazy(() => FileUpdateManyWithoutTenantNestedInputSchema).optional()
}).strict();

export const TenantUncheckedUpdateWithoutPreferedByProfilesInputSchema: z.ZodType<Prisma.TenantUncheckedUpdateWithoutPreferedByProfilesInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  profileId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  disabledAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  trialExpiresAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  users: z.lazy(() => UserUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  specialities: z.lazy(() => SpecialityUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  patients: z.lazy(() => PatientUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  services: z.lazy(() => ServiceUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  materials: z.lazy(() => MaterialUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  events: z.lazy(() => EventUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  files: z.lazy(() => FileUncheckedUpdateManyWithoutTenantNestedInputSchema).optional()
}).strict();

export const UserUpsertWithWhereUniqueWithoutProfileInputSchema: z.ZodType<Prisma.UserUpsertWithWhereUniqueWithoutProfileInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => UserUpdateWithoutProfileInputSchema),z.lazy(() => UserUncheckedUpdateWithoutProfileInputSchema) ]),
  create: z.union([ z.lazy(() => UserCreateWithoutProfileInputSchema),z.lazy(() => UserUncheckedCreateWithoutProfileInputSchema) ]),
}).strict();

export const UserUpdateWithWhereUniqueWithoutProfileInputSchema: z.ZodType<Prisma.UserUpdateWithWhereUniqueWithoutProfileInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => UserUpdateWithoutProfileInputSchema),z.lazy(() => UserUncheckedUpdateWithoutProfileInputSchema) ]),
}).strict();

export const UserUpdateManyWithWhereWithoutProfileInputSchema: z.ZodType<Prisma.UserUpdateManyWithWhereWithoutProfileInput> = z.object({
  where: z.lazy(() => UserScalarWhereInputSchema),
  data: z.union([ z.lazy(() => UserUpdateManyMutationInputSchema),z.lazy(() => UserUncheckedUpdateManyWithoutProfileInputSchema) ]),
}).strict();

export const AccountUpsertWithWhereUniqueWithoutProfileInputSchema: z.ZodType<Prisma.AccountUpsertWithWhereUniqueWithoutProfileInput> = z.object({
  where: z.lazy(() => AccountWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => AccountUpdateWithoutProfileInputSchema),z.lazy(() => AccountUncheckedUpdateWithoutProfileInputSchema) ]),
  create: z.union([ z.lazy(() => AccountCreateWithoutProfileInputSchema),z.lazy(() => AccountUncheckedCreateWithoutProfileInputSchema) ]),
}).strict();

export const AccountUpdateWithWhereUniqueWithoutProfileInputSchema: z.ZodType<Prisma.AccountUpdateWithWhereUniqueWithoutProfileInput> = z.object({
  where: z.lazy(() => AccountWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => AccountUpdateWithoutProfileInputSchema),z.lazy(() => AccountUncheckedUpdateWithoutProfileInputSchema) ]),
}).strict();

export const AccountUpdateManyWithWhereWithoutProfileInputSchema: z.ZodType<Prisma.AccountUpdateManyWithWhereWithoutProfileInput> = z.object({
  where: z.lazy(() => AccountScalarWhereInputSchema),
  data: z.union([ z.lazy(() => AccountUpdateManyMutationInputSchema),z.lazy(() => AccountUncheckedUpdateManyWithoutProfileInputSchema) ]),
}).strict();

export const AccountScalarWhereInputSchema: z.ZodType<Prisma.AccountScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => AccountScalarWhereInputSchema),z.lazy(() => AccountScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => AccountScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => AccountScalarWhereInputSchema),z.lazy(() => AccountScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  profileId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  type: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  provider: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  passwordHash: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  refresh_token: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  access_token: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  expires_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  refresh_token_expires_in: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  token_type: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  scope: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  id_token: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  session_state: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
}).strict();

export const TokenUpsertWithWhereUniqueWithoutProfileInputSchema: z.ZodType<Prisma.TokenUpsertWithWhereUniqueWithoutProfileInput> = z.object({
  where: z.lazy(() => TokenWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => TokenUpdateWithoutProfileInputSchema),z.lazy(() => TokenUncheckedUpdateWithoutProfileInputSchema) ]),
  create: z.union([ z.lazy(() => TokenCreateWithoutProfileInputSchema),z.lazy(() => TokenUncheckedCreateWithoutProfileInputSchema) ]),
}).strict();

export const TokenUpdateWithWhereUniqueWithoutProfileInputSchema: z.ZodType<Prisma.TokenUpdateWithWhereUniqueWithoutProfileInput> = z.object({
  where: z.lazy(() => TokenWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => TokenUpdateWithoutProfileInputSchema),z.lazy(() => TokenUncheckedUpdateWithoutProfileInputSchema) ]),
}).strict();

export const TokenUpdateManyWithWhereWithoutProfileInputSchema: z.ZodType<Prisma.TokenUpdateManyWithWhereWithoutProfileInput> = z.object({
  where: z.lazy(() => TokenScalarWhereInputSchema),
  data: z.union([ z.lazy(() => TokenUpdateManyMutationInputSchema),z.lazy(() => TokenUncheckedUpdateManyWithoutProfileInputSchema) ]),
}).strict();

export const TokenScalarWhereInputSchema: z.ZodType<Prisma.TokenScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => TokenScalarWhereInputSchema),z.lazy(() => TokenScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => TokenScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => TokenScalarWhereInputSchema),z.lazy(() => TokenScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  type: z.union([ z.lazy(() => EnumTokenTypeFilterSchema),z.lazy(() => TokenTypeSchema) ]).optional(),
  token: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  expires: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  profileId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
}).strict();

export const ProfileCreateWithoutAccountsInputSchema: z.ZodType<Prisma.ProfileCreateWithoutAccountsInput> = z.object({
  id: z.string().cuid().optional(),
  title: z.string().optional().nullable(),
  firstName: z.string(),
  lastName: z.string(),
  email: z.string(),
  phone: z.string().optional().nullable(),
  activatedAt: z.coerce.date().optional().nullable(),
  stripeCustomerId: z.string().optional().nullable(),
  stripeFreeTrialUsed: z.boolean().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  avatar: z.lazy(() => AvatarCreateNestedOneWithoutProfileInputSchema).optional(),
  preferredTenant: z.lazy(() => TenantCreateNestedOneWithoutPreferedByProfilesInputSchema).optional(),
  users: z.lazy(() => UserCreateNestedManyWithoutProfileInputSchema).optional(),
  tokens: z.lazy(() => TokenCreateNestedManyWithoutProfileInputSchema).optional()
}).strict();

export const ProfileUncheckedCreateWithoutAccountsInputSchema: z.ZodType<Prisma.ProfileUncheckedCreateWithoutAccountsInput> = z.object({
  id: z.string().cuid().optional(),
  title: z.string().optional().nullable(),
  firstName: z.string(),
  lastName: z.string(),
  email: z.string(),
  phone: z.string().optional().nullable(),
  activatedAt: z.coerce.date().optional().nullable(),
  stripeCustomerId: z.string().optional().nullable(),
  stripeFreeTrialUsed: z.boolean().optional(),
  preferredTenantId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  avatar: z.lazy(() => AvatarUncheckedCreateNestedOneWithoutProfileInputSchema).optional(),
  users: z.lazy(() => UserUncheckedCreateNestedManyWithoutProfileInputSchema).optional(),
  tokens: z.lazy(() => TokenUncheckedCreateNestedManyWithoutProfileInputSchema).optional()
}).strict();

export const ProfileCreateOrConnectWithoutAccountsInputSchema: z.ZodType<Prisma.ProfileCreateOrConnectWithoutAccountsInput> = z.object({
  where: z.lazy(() => ProfileWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ProfileCreateWithoutAccountsInputSchema),z.lazy(() => ProfileUncheckedCreateWithoutAccountsInputSchema) ]),
}).strict();

export const ProfileUpsertWithoutAccountsInputSchema: z.ZodType<Prisma.ProfileUpsertWithoutAccountsInput> = z.object({
  update: z.union([ z.lazy(() => ProfileUpdateWithoutAccountsInputSchema),z.lazy(() => ProfileUncheckedUpdateWithoutAccountsInputSchema) ]),
  create: z.union([ z.lazy(() => ProfileCreateWithoutAccountsInputSchema),z.lazy(() => ProfileUncheckedCreateWithoutAccountsInputSchema) ]),
  where: z.lazy(() => ProfileWhereInputSchema).optional()
}).strict();

export const ProfileUpdateToOneWithWhereWithoutAccountsInputSchema: z.ZodType<Prisma.ProfileUpdateToOneWithWhereWithoutAccountsInput> = z.object({
  where: z.lazy(() => ProfileWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => ProfileUpdateWithoutAccountsInputSchema),z.lazy(() => ProfileUncheckedUpdateWithoutAccountsInputSchema) ]),
}).strict();

export const ProfileUpdateWithoutAccountsInputSchema: z.ZodType<Prisma.ProfileUpdateWithoutAccountsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  title: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  firstName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  lastName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  activatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  stripeCustomerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  stripeFreeTrialUsed: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  avatar: z.lazy(() => AvatarUpdateOneWithoutProfileNestedInputSchema).optional(),
  preferredTenant: z.lazy(() => TenantUpdateOneWithoutPreferedByProfilesNestedInputSchema).optional(),
  users: z.lazy(() => UserUpdateManyWithoutProfileNestedInputSchema).optional(),
  tokens: z.lazy(() => TokenUpdateManyWithoutProfileNestedInputSchema).optional()
}).strict();

export const ProfileUncheckedUpdateWithoutAccountsInputSchema: z.ZodType<Prisma.ProfileUncheckedUpdateWithoutAccountsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  title: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  firstName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  lastName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  activatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  stripeCustomerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  stripeFreeTrialUsed: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  preferredTenantId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  avatar: z.lazy(() => AvatarUncheckedUpdateOneWithoutProfileNestedInputSchema).optional(),
  users: z.lazy(() => UserUncheckedUpdateManyWithoutProfileNestedInputSchema).optional(),
  tokens: z.lazy(() => TokenUncheckedUpdateManyWithoutProfileNestedInputSchema).optional()
}).strict();

export const TenantProfileCreateWithoutPlanInputSchema: z.ZodType<Prisma.TenantProfileCreateWithoutPlanInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  county: z.string().optional().nullable(),
  address: z.string().optional().nullable(),
  zip: z.string().optional().nullable(),
  phone: z.string().optional().nullable(),
  size: z.string().optional().nullable(),
  stripeSubscriptionId: z.string(),
  activeSubscription: z.boolean().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  avatar: z.lazy(() => AvatarCreateNestedOneWithoutTenantProfileInputSchema).optional(),
  tenant: z.lazy(() => TenantCreateNestedOneWithoutProfileInputSchema).optional()
}).strict();

export const TenantProfileUncheckedCreateWithoutPlanInputSchema: z.ZodType<Prisma.TenantProfileUncheckedCreateWithoutPlanInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  county: z.string().optional().nullable(),
  address: z.string().optional().nullable(),
  zip: z.string().optional().nullable(),
  phone: z.string().optional().nullable(),
  size: z.string().optional().nullable(),
  stripeSubscriptionId: z.string(),
  activeSubscription: z.boolean().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  avatar: z.lazy(() => AvatarUncheckedCreateNestedOneWithoutTenantProfileInputSchema).optional(),
  tenant: z.lazy(() => TenantUncheckedCreateNestedOneWithoutProfileInputSchema).optional()
}).strict();

export const TenantProfileCreateOrConnectWithoutPlanInputSchema: z.ZodType<Prisma.TenantProfileCreateOrConnectWithoutPlanInput> = z.object({
  where: z.lazy(() => TenantProfileWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => TenantProfileCreateWithoutPlanInputSchema),z.lazy(() => TenantProfileUncheckedCreateWithoutPlanInputSchema) ]),
}).strict();

export const TenantProfileCreateManyPlanInputEnvelopeSchema: z.ZodType<Prisma.TenantProfileCreateManyPlanInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => TenantProfileCreateManyPlanInputSchema),z.lazy(() => TenantProfileCreateManyPlanInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const TenantProfileUpsertWithWhereUniqueWithoutPlanInputSchema: z.ZodType<Prisma.TenantProfileUpsertWithWhereUniqueWithoutPlanInput> = z.object({
  where: z.lazy(() => TenantProfileWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => TenantProfileUpdateWithoutPlanInputSchema),z.lazy(() => TenantProfileUncheckedUpdateWithoutPlanInputSchema) ]),
  create: z.union([ z.lazy(() => TenantProfileCreateWithoutPlanInputSchema),z.lazy(() => TenantProfileUncheckedCreateWithoutPlanInputSchema) ]),
}).strict();

export const TenantProfileUpdateWithWhereUniqueWithoutPlanInputSchema: z.ZodType<Prisma.TenantProfileUpdateWithWhereUniqueWithoutPlanInput> = z.object({
  where: z.lazy(() => TenantProfileWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => TenantProfileUpdateWithoutPlanInputSchema),z.lazy(() => TenantProfileUncheckedUpdateWithoutPlanInputSchema) ]),
}).strict();

export const TenantProfileUpdateManyWithWhereWithoutPlanInputSchema: z.ZodType<Prisma.TenantProfileUpdateManyWithWhereWithoutPlanInput> = z.object({
  where: z.lazy(() => TenantProfileScalarWhereInputSchema),
  data: z.union([ z.lazy(() => TenantProfileUpdateManyMutationInputSchema),z.lazy(() => TenantProfileUncheckedUpdateManyWithoutPlanInputSchema) ]),
}).strict();

export const TenantProfileScalarWhereInputSchema: z.ZodType<Prisma.TenantProfileScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => TenantProfileScalarWhereInputSchema),z.lazy(() => TenantProfileScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => TenantProfileScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => TenantProfileScalarWhereInputSchema),z.lazy(() => TenantProfileScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  county: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  address: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  zip: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  phone: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  size: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  stripeSubscriptionId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  activeSubscription: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  planId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const ProfileCreateWithoutTokensInputSchema: z.ZodType<Prisma.ProfileCreateWithoutTokensInput> = z.object({
  id: z.string().cuid().optional(),
  title: z.string().optional().nullable(),
  firstName: z.string(),
  lastName: z.string(),
  email: z.string(),
  phone: z.string().optional().nullable(),
  activatedAt: z.coerce.date().optional().nullable(),
  stripeCustomerId: z.string().optional().nullable(),
  stripeFreeTrialUsed: z.boolean().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  avatar: z.lazy(() => AvatarCreateNestedOneWithoutProfileInputSchema).optional(),
  preferredTenant: z.lazy(() => TenantCreateNestedOneWithoutPreferedByProfilesInputSchema).optional(),
  users: z.lazy(() => UserCreateNestedManyWithoutProfileInputSchema).optional(),
  accounts: z.lazy(() => AccountCreateNestedManyWithoutProfileInputSchema).optional()
}).strict();

export const ProfileUncheckedCreateWithoutTokensInputSchema: z.ZodType<Prisma.ProfileUncheckedCreateWithoutTokensInput> = z.object({
  id: z.string().cuid().optional(),
  title: z.string().optional().nullable(),
  firstName: z.string(),
  lastName: z.string(),
  email: z.string(),
  phone: z.string().optional().nullable(),
  activatedAt: z.coerce.date().optional().nullable(),
  stripeCustomerId: z.string().optional().nullable(),
  stripeFreeTrialUsed: z.boolean().optional(),
  preferredTenantId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  avatar: z.lazy(() => AvatarUncheckedCreateNestedOneWithoutProfileInputSchema).optional(),
  users: z.lazy(() => UserUncheckedCreateNestedManyWithoutProfileInputSchema).optional(),
  accounts: z.lazy(() => AccountUncheckedCreateNestedManyWithoutProfileInputSchema).optional()
}).strict();

export const ProfileCreateOrConnectWithoutTokensInputSchema: z.ZodType<Prisma.ProfileCreateOrConnectWithoutTokensInput> = z.object({
  where: z.lazy(() => ProfileWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ProfileCreateWithoutTokensInputSchema),z.lazy(() => ProfileUncheckedCreateWithoutTokensInputSchema) ]),
}).strict();

export const ProfileUpsertWithoutTokensInputSchema: z.ZodType<Prisma.ProfileUpsertWithoutTokensInput> = z.object({
  update: z.union([ z.lazy(() => ProfileUpdateWithoutTokensInputSchema),z.lazy(() => ProfileUncheckedUpdateWithoutTokensInputSchema) ]),
  create: z.union([ z.lazy(() => ProfileCreateWithoutTokensInputSchema),z.lazy(() => ProfileUncheckedCreateWithoutTokensInputSchema) ]),
  where: z.lazy(() => ProfileWhereInputSchema).optional()
}).strict();

export const ProfileUpdateToOneWithWhereWithoutTokensInputSchema: z.ZodType<Prisma.ProfileUpdateToOneWithWhereWithoutTokensInput> = z.object({
  where: z.lazy(() => ProfileWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => ProfileUpdateWithoutTokensInputSchema),z.lazy(() => ProfileUncheckedUpdateWithoutTokensInputSchema) ]),
}).strict();

export const ProfileUpdateWithoutTokensInputSchema: z.ZodType<Prisma.ProfileUpdateWithoutTokensInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  title: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  firstName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  lastName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  activatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  stripeCustomerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  stripeFreeTrialUsed: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  avatar: z.lazy(() => AvatarUpdateOneWithoutProfileNestedInputSchema).optional(),
  preferredTenant: z.lazy(() => TenantUpdateOneWithoutPreferedByProfilesNestedInputSchema).optional(),
  users: z.lazy(() => UserUpdateManyWithoutProfileNestedInputSchema).optional(),
  accounts: z.lazy(() => AccountUpdateManyWithoutProfileNestedInputSchema).optional()
}).strict();

export const ProfileUncheckedUpdateWithoutTokensInputSchema: z.ZodType<Prisma.ProfileUncheckedUpdateWithoutTokensInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  title: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  firstName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  lastName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  activatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  stripeCustomerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  stripeFreeTrialUsed: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  preferredTenantId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  avatar: z.lazy(() => AvatarUncheckedUpdateOneWithoutProfileNestedInputSchema).optional(),
  users: z.lazy(() => UserUncheckedUpdateManyWithoutProfileNestedInputSchema).optional(),
  accounts: z.lazy(() => AccountUncheckedUpdateManyWithoutProfileNestedInputSchema).optional()
}).strict();

export const UserCreateWithoutInvitationsInputSchema: z.ZodType<Prisma.UserCreateWithoutInvitationsInput> = z.object({
  id: z.string().cuid().optional(),
  index: z.number().int().optional(),
  role: z.lazy(() => RoleSchema).optional(),
  workingHours: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  firstDayOfWeek: z.lazy(() => DayOfWeekSchema).optional(),
  showWeekends: z.boolean().optional(),
  webhookApiKey: z.string().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  activatedAt: z.coerce.date().optional().nullable(),
  lastLoginAt: z.coerce.date().optional().nullable(),
  bannedAt: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  speciality: z.lazy(() => SpecialityCreateNestedOneWithoutUsersInputSchema).optional(),
  profile: z.lazy(() => ProfileCreateNestedOneWithoutUsersInputSchema),
  tenant: z.lazy(() => TenantCreateNestedOneWithoutUsersInputSchema),
  invitation: z.lazy(() => InvitationCreateNestedOneWithoutUserInputSchema).optional(),
  patients: z.lazy(() => PatientCreateNestedManyWithoutUserInputSchema).optional(),
  events: z.lazy(() => EventCreateNestedManyWithoutUserInputSchema).optional(),
  eventActions: z.lazy(() => EventActionCreateNestedManyWithoutUserInputSchema).optional(),
  treatmentPlans: z.lazy(() => TreatmentPlanCreateNestedManyWithoutUserInputSchema).optional(),
  files: z.lazy(() => FileCreateNestedManyWithoutUserInputSchema).optional(),
  tasks: z.lazy(() => TaskCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const UserUncheckedCreateWithoutInvitationsInputSchema: z.ZodType<Prisma.UserUncheckedCreateWithoutInvitationsInput> = z.object({
  id: z.string().cuid().optional(),
  index: z.number().int().optional(),
  role: z.lazy(() => RoleSchema).optional(),
  workingHours: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  firstDayOfWeek: z.lazy(() => DayOfWeekSchema).optional(),
  showWeekends: z.boolean().optional(),
  webhookApiKey: z.string().optional().nullable(),
  specialityId: z.string().optional().nullable(),
  profileId: z.string(),
  tenantId: z.string(),
  deletedAt: z.coerce.date().optional().nullable(),
  activatedAt: z.coerce.date().optional().nullable(),
  lastLoginAt: z.coerce.date().optional().nullable(),
  bannedAt: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  invitation: z.lazy(() => InvitationUncheckedCreateNestedOneWithoutUserInputSchema).optional(),
  patients: z.lazy(() => PatientUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  events: z.lazy(() => EventUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  eventActions: z.lazy(() => EventActionUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  treatmentPlans: z.lazy(() => TreatmentPlanUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  files: z.lazy(() => FileUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  tasks: z.lazy(() => TaskUncheckedCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const UserCreateOrConnectWithoutInvitationsInputSchema: z.ZodType<Prisma.UserCreateOrConnectWithoutInvitationsInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UserCreateWithoutInvitationsInputSchema),z.lazy(() => UserUncheckedCreateWithoutInvitationsInputSchema) ]),
}).strict();

export const UserCreateWithoutInvitationInputSchema: z.ZodType<Prisma.UserCreateWithoutInvitationInput> = z.object({
  id: z.string().cuid().optional(),
  index: z.number().int().optional(),
  role: z.lazy(() => RoleSchema).optional(),
  workingHours: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  firstDayOfWeek: z.lazy(() => DayOfWeekSchema).optional(),
  showWeekends: z.boolean().optional(),
  webhookApiKey: z.string().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  activatedAt: z.coerce.date().optional().nullable(),
  lastLoginAt: z.coerce.date().optional().nullable(),
  bannedAt: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  speciality: z.lazy(() => SpecialityCreateNestedOneWithoutUsersInputSchema).optional(),
  profile: z.lazy(() => ProfileCreateNestedOneWithoutUsersInputSchema),
  tenant: z.lazy(() => TenantCreateNestedOneWithoutUsersInputSchema),
  patients: z.lazy(() => PatientCreateNestedManyWithoutUserInputSchema).optional(),
  events: z.lazy(() => EventCreateNestedManyWithoutUserInputSchema).optional(),
  eventActions: z.lazy(() => EventActionCreateNestedManyWithoutUserInputSchema).optional(),
  treatmentPlans: z.lazy(() => TreatmentPlanCreateNestedManyWithoutUserInputSchema).optional(),
  invitations: z.lazy(() => InvitationCreateNestedManyWithoutInvitedByInputSchema).optional(),
  files: z.lazy(() => FileCreateNestedManyWithoutUserInputSchema).optional(),
  tasks: z.lazy(() => TaskCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const UserUncheckedCreateWithoutInvitationInputSchema: z.ZodType<Prisma.UserUncheckedCreateWithoutInvitationInput> = z.object({
  id: z.string().cuid().optional(),
  index: z.number().int().optional(),
  role: z.lazy(() => RoleSchema).optional(),
  workingHours: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  firstDayOfWeek: z.lazy(() => DayOfWeekSchema).optional(),
  showWeekends: z.boolean().optional(),
  webhookApiKey: z.string().optional().nullable(),
  specialityId: z.string().optional().nullable(),
  profileId: z.string(),
  tenantId: z.string(),
  deletedAt: z.coerce.date().optional().nullable(),
  activatedAt: z.coerce.date().optional().nullable(),
  lastLoginAt: z.coerce.date().optional().nullable(),
  bannedAt: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  patients: z.lazy(() => PatientUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  events: z.lazy(() => EventUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  eventActions: z.lazy(() => EventActionUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  treatmentPlans: z.lazy(() => TreatmentPlanUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedCreateNestedManyWithoutInvitedByInputSchema).optional(),
  files: z.lazy(() => FileUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  tasks: z.lazy(() => TaskUncheckedCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const UserCreateOrConnectWithoutInvitationInputSchema: z.ZodType<Prisma.UserCreateOrConnectWithoutInvitationInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UserCreateWithoutInvitationInputSchema),z.lazy(() => UserUncheckedCreateWithoutInvitationInputSchema) ]),
}).strict();

export const UserUpsertWithoutInvitationsInputSchema: z.ZodType<Prisma.UserUpsertWithoutInvitationsInput> = z.object({
  update: z.union([ z.lazy(() => UserUpdateWithoutInvitationsInputSchema),z.lazy(() => UserUncheckedUpdateWithoutInvitationsInputSchema) ]),
  create: z.union([ z.lazy(() => UserCreateWithoutInvitationsInputSchema),z.lazy(() => UserUncheckedCreateWithoutInvitationsInputSchema) ]),
  where: z.lazy(() => UserWhereInputSchema).optional()
}).strict();

export const UserUpdateToOneWithWhereWithoutInvitationsInputSchema: z.ZodType<Prisma.UserUpdateToOneWithWhereWithoutInvitationsInput> = z.object({
  where: z.lazy(() => UserWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => UserUpdateWithoutInvitationsInputSchema),z.lazy(() => UserUncheckedUpdateWithoutInvitationsInputSchema) ]),
}).strict();

export const UserUpdateWithoutInvitationsInputSchema: z.ZodType<Prisma.UserUpdateWithoutInvitationsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  index: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.lazy(() => RoleSchema),z.lazy(() => EnumRoleFieldUpdateOperationsInputSchema) ]).optional(),
  workingHours: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  firstDayOfWeek: z.union([ z.lazy(() => DayOfWeekSchema),z.lazy(() => EnumDayOfWeekFieldUpdateOperationsInputSchema) ]).optional(),
  showWeekends: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  webhookApiKey: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  activatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastLoginAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bannedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  speciality: z.lazy(() => SpecialityUpdateOneWithoutUsersNestedInputSchema).optional(),
  profile: z.lazy(() => ProfileUpdateOneRequiredWithoutUsersNestedInputSchema).optional(),
  tenant: z.lazy(() => TenantUpdateOneRequiredWithoutUsersNestedInputSchema).optional(),
  invitation: z.lazy(() => InvitationUpdateOneWithoutUserNestedInputSchema).optional(),
  patients: z.lazy(() => PatientUpdateManyWithoutUserNestedInputSchema).optional(),
  events: z.lazy(() => EventUpdateManyWithoutUserNestedInputSchema).optional(),
  eventActions: z.lazy(() => EventActionUpdateManyWithoutUserNestedInputSchema).optional(),
  treatmentPlans: z.lazy(() => TreatmentPlanUpdateManyWithoutUserNestedInputSchema).optional(),
  files: z.lazy(() => FileUpdateManyWithoutUserNestedInputSchema).optional(),
  tasks: z.lazy(() => TaskUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const UserUncheckedUpdateWithoutInvitationsInputSchema: z.ZodType<Prisma.UserUncheckedUpdateWithoutInvitationsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  index: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.lazy(() => RoleSchema),z.lazy(() => EnumRoleFieldUpdateOperationsInputSchema) ]).optional(),
  workingHours: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  firstDayOfWeek: z.union([ z.lazy(() => DayOfWeekSchema),z.lazy(() => EnumDayOfWeekFieldUpdateOperationsInputSchema) ]).optional(),
  showWeekends: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  webhookApiKey: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  specialityId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  profileId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  tenantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  activatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastLoginAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bannedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  invitation: z.lazy(() => InvitationUncheckedUpdateOneWithoutUserNestedInputSchema).optional(),
  patients: z.lazy(() => PatientUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  events: z.lazy(() => EventUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  eventActions: z.lazy(() => EventActionUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  treatmentPlans: z.lazy(() => TreatmentPlanUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  files: z.lazy(() => FileUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  tasks: z.lazy(() => TaskUncheckedUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const UserUpsertWithoutInvitationInputSchema: z.ZodType<Prisma.UserUpsertWithoutInvitationInput> = z.object({
  update: z.union([ z.lazy(() => UserUpdateWithoutInvitationInputSchema),z.lazy(() => UserUncheckedUpdateWithoutInvitationInputSchema) ]),
  create: z.union([ z.lazy(() => UserCreateWithoutInvitationInputSchema),z.lazy(() => UserUncheckedCreateWithoutInvitationInputSchema) ]),
  where: z.lazy(() => UserWhereInputSchema).optional()
}).strict();

export const UserUpdateToOneWithWhereWithoutInvitationInputSchema: z.ZodType<Prisma.UserUpdateToOneWithWhereWithoutInvitationInput> = z.object({
  where: z.lazy(() => UserWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => UserUpdateWithoutInvitationInputSchema),z.lazy(() => UserUncheckedUpdateWithoutInvitationInputSchema) ]),
}).strict();

export const UserUpdateWithoutInvitationInputSchema: z.ZodType<Prisma.UserUpdateWithoutInvitationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  index: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.lazy(() => RoleSchema),z.lazy(() => EnumRoleFieldUpdateOperationsInputSchema) ]).optional(),
  workingHours: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  firstDayOfWeek: z.union([ z.lazy(() => DayOfWeekSchema),z.lazy(() => EnumDayOfWeekFieldUpdateOperationsInputSchema) ]).optional(),
  showWeekends: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  webhookApiKey: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  activatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastLoginAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bannedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  speciality: z.lazy(() => SpecialityUpdateOneWithoutUsersNestedInputSchema).optional(),
  profile: z.lazy(() => ProfileUpdateOneRequiredWithoutUsersNestedInputSchema).optional(),
  tenant: z.lazy(() => TenantUpdateOneRequiredWithoutUsersNestedInputSchema).optional(),
  patients: z.lazy(() => PatientUpdateManyWithoutUserNestedInputSchema).optional(),
  events: z.lazy(() => EventUpdateManyWithoutUserNestedInputSchema).optional(),
  eventActions: z.lazy(() => EventActionUpdateManyWithoutUserNestedInputSchema).optional(),
  treatmentPlans: z.lazy(() => TreatmentPlanUpdateManyWithoutUserNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUpdateManyWithoutInvitedByNestedInputSchema).optional(),
  files: z.lazy(() => FileUpdateManyWithoutUserNestedInputSchema).optional(),
  tasks: z.lazy(() => TaskUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const UserUncheckedUpdateWithoutInvitationInputSchema: z.ZodType<Prisma.UserUncheckedUpdateWithoutInvitationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  index: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.lazy(() => RoleSchema),z.lazy(() => EnumRoleFieldUpdateOperationsInputSchema) ]).optional(),
  workingHours: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  firstDayOfWeek: z.union([ z.lazy(() => DayOfWeekSchema),z.lazy(() => EnumDayOfWeekFieldUpdateOperationsInputSchema) ]).optional(),
  showWeekends: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  webhookApiKey: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  specialityId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  profileId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  tenantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  activatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastLoginAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bannedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  patients: z.lazy(() => PatientUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  events: z.lazy(() => EventUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  eventActions: z.lazy(() => EventActionUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  treatmentPlans: z.lazy(() => TreatmentPlanUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedUpdateManyWithoutInvitedByNestedInputSchema).optional(),
  files: z.lazy(() => FileUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  tasks: z.lazy(() => TaskUncheckedUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const UserCreateWithoutPatientsInputSchema: z.ZodType<Prisma.UserCreateWithoutPatientsInput> = z.object({
  id: z.string().cuid().optional(),
  index: z.number().int().optional(),
  role: z.lazy(() => RoleSchema).optional(),
  workingHours: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  firstDayOfWeek: z.lazy(() => DayOfWeekSchema).optional(),
  showWeekends: z.boolean().optional(),
  webhookApiKey: z.string().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  activatedAt: z.coerce.date().optional().nullable(),
  lastLoginAt: z.coerce.date().optional().nullable(),
  bannedAt: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  speciality: z.lazy(() => SpecialityCreateNestedOneWithoutUsersInputSchema).optional(),
  profile: z.lazy(() => ProfileCreateNestedOneWithoutUsersInputSchema),
  tenant: z.lazy(() => TenantCreateNestedOneWithoutUsersInputSchema),
  invitation: z.lazy(() => InvitationCreateNestedOneWithoutUserInputSchema).optional(),
  events: z.lazy(() => EventCreateNestedManyWithoutUserInputSchema).optional(),
  eventActions: z.lazy(() => EventActionCreateNestedManyWithoutUserInputSchema).optional(),
  treatmentPlans: z.lazy(() => TreatmentPlanCreateNestedManyWithoutUserInputSchema).optional(),
  invitations: z.lazy(() => InvitationCreateNestedManyWithoutInvitedByInputSchema).optional(),
  files: z.lazy(() => FileCreateNestedManyWithoutUserInputSchema).optional(),
  tasks: z.lazy(() => TaskCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const UserUncheckedCreateWithoutPatientsInputSchema: z.ZodType<Prisma.UserUncheckedCreateWithoutPatientsInput> = z.object({
  id: z.string().cuid().optional(),
  index: z.number().int().optional(),
  role: z.lazy(() => RoleSchema).optional(),
  workingHours: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  firstDayOfWeek: z.lazy(() => DayOfWeekSchema).optional(),
  showWeekends: z.boolean().optional(),
  webhookApiKey: z.string().optional().nullable(),
  specialityId: z.string().optional().nullable(),
  profileId: z.string(),
  tenantId: z.string(),
  deletedAt: z.coerce.date().optional().nullable(),
  activatedAt: z.coerce.date().optional().nullable(),
  lastLoginAt: z.coerce.date().optional().nullable(),
  bannedAt: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  invitation: z.lazy(() => InvitationUncheckedCreateNestedOneWithoutUserInputSchema).optional(),
  events: z.lazy(() => EventUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  eventActions: z.lazy(() => EventActionUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  treatmentPlans: z.lazy(() => TreatmentPlanUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedCreateNestedManyWithoutInvitedByInputSchema).optional(),
  files: z.lazy(() => FileUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  tasks: z.lazy(() => TaskUncheckedCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const UserCreateOrConnectWithoutPatientsInputSchema: z.ZodType<Prisma.UserCreateOrConnectWithoutPatientsInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UserCreateWithoutPatientsInputSchema),z.lazy(() => UserUncheckedCreateWithoutPatientsInputSchema) ]),
}).strict();

export const TenantCreateWithoutPatientsInputSchema: z.ZodType<Prisma.TenantCreateWithoutPatientsInput> = z.object({
  id: z.string().cuid().optional(),
  email: z.string(),
  deletedAt: z.coerce.date().optional().nullable(),
  disabledAt: z.coerce.date().optional().nullable(),
  trialExpiresAt: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  users: z.lazy(() => UserCreateNestedManyWithoutTenantInputSchema).optional(),
  profile: z.lazy(() => TenantProfileCreateNestedOneWithoutTenantInputSchema),
  specialities: z.lazy(() => SpecialityCreateNestedManyWithoutTenantInputSchema).optional(),
  preferedByProfiles: z.lazy(() => ProfileCreateNestedManyWithoutPreferredTenantInputSchema).optional(),
  services: z.lazy(() => ServiceCreateNestedManyWithoutTenantInputSchema).optional(),
  materials: z.lazy(() => MaterialCreateNestedManyWithoutTenantInputSchema).optional(),
  events: z.lazy(() => EventCreateNestedManyWithoutTenantInputSchema).optional(),
  files: z.lazy(() => FileCreateNestedManyWithoutTenantInputSchema).optional()
}).strict();

export const TenantUncheckedCreateWithoutPatientsInputSchema: z.ZodType<Prisma.TenantUncheckedCreateWithoutPatientsInput> = z.object({
  id: z.string().cuid().optional(),
  email: z.string(),
  profileId: z.string(),
  deletedAt: z.coerce.date().optional().nullable(),
  disabledAt: z.coerce.date().optional().nullable(),
  trialExpiresAt: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  users: z.lazy(() => UserUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  specialities: z.lazy(() => SpecialityUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  preferedByProfiles: z.lazy(() => ProfileUncheckedCreateNestedManyWithoutPreferredTenantInputSchema).optional(),
  services: z.lazy(() => ServiceUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  materials: z.lazy(() => MaterialUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  events: z.lazy(() => EventUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  files: z.lazy(() => FileUncheckedCreateNestedManyWithoutTenantInputSchema).optional()
}).strict();

export const TenantCreateOrConnectWithoutPatientsInputSchema: z.ZodType<Prisma.TenantCreateOrConnectWithoutPatientsInput> = z.object({
  where: z.lazy(() => TenantWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => TenantCreateWithoutPatientsInputSchema),z.lazy(() => TenantUncheckedCreateWithoutPatientsInputSchema) ]),
}).strict();

export const FileCreateWithoutPatientInputSchema: z.ZodType<Prisma.FileCreateWithoutPatientInput> = z.object({
  id: z.string().cuid().optional(),
  url: z.string(),
  key: z.string(),
  name: z.string(),
  extension: z.string(),
  contentType: z.string(),
  size: z.number().int(),
  confirmed: z.boolean().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  tenant: z.lazy(() => TenantCreateNestedOneWithoutFilesInputSchema),
  user: z.lazy(() => UserCreateNestedOneWithoutFilesInputSchema),
  event: z.lazy(() => EventCreateNestedOneWithoutFilesInputSchema).optional()
}).strict();

export const FileUncheckedCreateWithoutPatientInputSchema: z.ZodType<Prisma.FileUncheckedCreateWithoutPatientInput> = z.object({
  id: z.string().cuid().optional(),
  url: z.string(),
  key: z.string(),
  name: z.string(),
  extension: z.string(),
  contentType: z.string(),
  size: z.number().int(),
  confirmed: z.boolean().optional(),
  tenantId: z.string(),
  userId: z.string(),
  eventId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const FileCreateOrConnectWithoutPatientInputSchema: z.ZodType<Prisma.FileCreateOrConnectWithoutPatientInput> = z.object({
  where: z.lazy(() => FileWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => FileCreateWithoutPatientInputSchema),z.lazy(() => FileUncheckedCreateWithoutPatientInputSchema) ]),
}).strict();

export const FileCreateManyPatientInputEnvelopeSchema: z.ZodType<Prisma.FileCreateManyPatientInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => FileCreateManyPatientInputSchema),z.lazy(() => FileCreateManyPatientInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const QuizCreateWithoutPatientInputSchema: z.ZodType<Prisma.QuizCreateWithoutPatientInput> = z.object({
  id: z.string().cuid().optional(),
  quiz: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  answers: z.union([ z.lazy(() => QuizCreateanswersInputSchema),z.number().int().array() ]).optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  event: z.lazy(() => EventCreateNestedOneWithoutQuizInputSchema).optional()
}).strict();

export const QuizUncheckedCreateWithoutPatientInputSchema: z.ZodType<Prisma.QuizUncheckedCreateWithoutPatientInput> = z.object({
  id: z.string().cuid().optional(),
  quiz: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  answers: z.union([ z.lazy(() => QuizCreateanswersInputSchema),z.number().int().array() ]).optional(),
  eventId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const QuizCreateOrConnectWithoutPatientInputSchema: z.ZodType<Prisma.QuizCreateOrConnectWithoutPatientInput> = z.object({
  where: z.lazy(() => QuizWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => QuizCreateWithoutPatientInputSchema),z.lazy(() => QuizUncheckedCreateWithoutPatientInputSchema) ]),
}).strict();

export const QuizCreateManyPatientInputEnvelopeSchema: z.ZodType<Prisma.QuizCreateManyPatientInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => QuizCreateManyPatientInputSchema),z.lazy(() => QuizCreateManyPatientInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const EventCreateWithoutPatientInputSchema: z.ZodType<Prisma.EventCreateWithoutPatientInput> = z.object({
  id: z.string().cuid().optional(),
  index: z.number().int().optional(),
  title: z.string(),
  description: z.string().optional().nullable(),
  date: z.coerce.date(),
  start: z.coerce.date().optional().nullable(),
  end: z.coerce.date().optional().nullable(),
  allDay: z.boolean().optional(),
  type: z.lazy(() => EventTypeSchema).optional(),
  status: z.lazy(() => EventStatusSchema).optional(),
  initiator: z.lazy(() => EventInitiatorSchema).optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  visits: z.lazy(() => VisitCreateNestedManyWithoutEventInputSchema).optional(),
  quiz: z.lazy(() => QuizCreateNestedOneWithoutEventInputSchema).optional(),
  actions: z.lazy(() => EventActionCreateNestedManyWithoutEventInputSchema).optional(),
  files: z.lazy(() => FileCreateNestedManyWithoutEventInputSchema).optional(),
  user: z.lazy(() => UserCreateNestedOneWithoutEventsInputSchema),
  tenant: z.lazy(() => TenantCreateNestedOneWithoutEventsInputSchema)
}).strict();

export const EventUncheckedCreateWithoutPatientInputSchema: z.ZodType<Prisma.EventUncheckedCreateWithoutPatientInput> = z.object({
  id: z.string().cuid().optional(),
  index: z.number().int().optional(),
  title: z.string(),
  description: z.string().optional().nullable(),
  date: z.coerce.date(),
  start: z.coerce.date().optional().nullable(),
  end: z.coerce.date().optional().nullable(),
  allDay: z.boolean().optional(),
  type: z.lazy(() => EventTypeSchema).optional(),
  status: z.lazy(() => EventStatusSchema).optional(),
  initiator: z.lazy(() => EventInitiatorSchema).optional(),
  userId: z.string(),
  tenantId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  visits: z.lazy(() => VisitUncheckedCreateNestedManyWithoutEventInputSchema).optional(),
  quiz: z.lazy(() => QuizUncheckedCreateNestedOneWithoutEventInputSchema).optional(),
  actions: z.lazy(() => EventActionUncheckedCreateNestedManyWithoutEventInputSchema).optional(),
  files: z.lazy(() => FileUncheckedCreateNestedManyWithoutEventInputSchema).optional()
}).strict();

export const EventCreateOrConnectWithoutPatientInputSchema: z.ZodType<Prisma.EventCreateOrConnectWithoutPatientInput> = z.object({
  where: z.lazy(() => EventWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => EventCreateWithoutPatientInputSchema),z.lazy(() => EventUncheckedCreateWithoutPatientInputSchema) ]),
}).strict();

export const EventCreateManyPatientInputEnvelopeSchema: z.ZodType<Prisma.EventCreateManyPatientInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => EventCreateManyPatientInputSchema),z.lazy(() => EventCreateManyPatientInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const TreatmentPlanCreateWithoutPatientInputSchema: z.ZodType<Prisma.TreatmentPlanCreateWithoutPatientInput> = z.object({
  id: z.string().cuid().optional(),
  description: z.string().optional().nullable(),
  isDone: z.boolean().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  treatments: z.lazy(() => TreatmentCreateNestedManyWithoutTreatmentPlanInputSchema).optional(),
  user: z.lazy(() => UserCreateNestedOneWithoutTreatmentPlansInputSchema)
}).strict();

export const TreatmentPlanUncheckedCreateWithoutPatientInputSchema: z.ZodType<Prisma.TreatmentPlanUncheckedCreateWithoutPatientInput> = z.object({
  id: z.string().cuid().optional(),
  description: z.string().optional().nullable(),
  isDone: z.boolean().optional(),
  userId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  treatments: z.lazy(() => TreatmentUncheckedCreateNestedManyWithoutTreatmentPlanInputSchema).optional()
}).strict();

export const TreatmentPlanCreateOrConnectWithoutPatientInputSchema: z.ZodType<Prisma.TreatmentPlanCreateOrConnectWithoutPatientInput> = z.object({
  where: z.lazy(() => TreatmentPlanWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => TreatmentPlanCreateWithoutPatientInputSchema),z.lazy(() => TreatmentPlanUncheckedCreateWithoutPatientInputSchema) ]),
}).strict();

export const TreatmentPlanCreateManyPatientInputEnvelopeSchema: z.ZodType<Prisma.TreatmentPlanCreateManyPatientInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => TreatmentPlanCreateManyPatientInputSchema),z.lazy(() => TreatmentPlanCreateManyPatientInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const UserUpsertWithoutPatientsInputSchema: z.ZodType<Prisma.UserUpsertWithoutPatientsInput> = z.object({
  update: z.union([ z.lazy(() => UserUpdateWithoutPatientsInputSchema),z.lazy(() => UserUncheckedUpdateWithoutPatientsInputSchema) ]),
  create: z.union([ z.lazy(() => UserCreateWithoutPatientsInputSchema),z.lazy(() => UserUncheckedCreateWithoutPatientsInputSchema) ]),
  where: z.lazy(() => UserWhereInputSchema).optional()
}).strict();

export const UserUpdateToOneWithWhereWithoutPatientsInputSchema: z.ZodType<Prisma.UserUpdateToOneWithWhereWithoutPatientsInput> = z.object({
  where: z.lazy(() => UserWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => UserUpdateWithoutPatientsInputSchema),z.lazy(() => UserUncheckedUpdateWithoutPatientsInputSchema) ]),
}).strict();

export const UserUpdateWithoutPatientsInputSchema: z.ZodType<Prisma.UserUpdateWithoutPatientsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  index: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.lazy(() => RoleSchema),z.lazy(() => EnumRoleFieldUpdateOperationsInputSchema) ]).optional(),
  workingHours: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  firstDayOfWeek: z.union([ z.lazy(() => DayOfWeekSchema),z.lazy(() => EnumDayOfWeekFieldUpdateOperationsInputSchema) ]).optional(),
  showWeekends: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  webhookApiKey: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  activatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastLoginAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bannedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  speciality: z.lazy(() => SpecialityUpdateOneWithoutUsersNestedInputSchema).optional(),
  profile: z.lazy(() => ProfileUpdateOneRequiredWithoutUsersNestedInputSchema).optional(),
  tenant: z.lazy(() => TenantUpdateOneRequiredWithoutUsersNestedInputSchema).optional(),
  invitation: z.lazy(() => InvitationUpdateOneWithoutUserNestedInputSchema).optional(),
  events: z.lazy(() => EventUpdateManyWithoutUserNestedInputSchema).optional(),
  eventActions: z.lazy(() => EventActionUpdateManyWithoutUserNestedInputSchema).optional(),
  treatmentPlans: z.lazy(() => TreatmentPlanUpdateManyWithoutUserNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUpdateManyWithoutInvitedByNestedInputSchema).optional(),
  files: z.lazy(() => FileUpdateManyWithoutUserNestedInputSchema).optional(),
  tasks: z.lazy(() => TaskUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const UserUncheckedUpdateWithoutPatientsInputSchema: z.ZodType<Prisma.UserUncheckedUpdateWithoutPatientsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  index: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.lazy(() => RoleSchema),z.lazy(() => EnumRoleFieldUpdateOperationsInputSchema) ]).optional(),
  workingHours: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  firstDayOfWeek: z.union([ z.lazy(() => DayOfWeekSchema),z.lazy(() => EnumDayOfWeekFieldUpdateOperationsInputSchema) ]).optional(),
  showWeekends: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  webhookApiKey: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  specialityId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  profileId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  tenantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  activatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastLoginAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bannedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  invitation: z.lazy(() => InvitationUncheckedUpdateOneWithoutUserNestedInputSchema).optional(),
  events: z.lazy(() => EventUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  eventActions: z.lazy(() => EventActionUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  treatmentPlans: z.lazy(() => TreatmentPlanUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedUpdateManyWithoutInvitedByNestedInputSchema).optional(),
  files: z.lazy(() => FileUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  tasks: z.lazy(() => TaskUncheckedUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const TenantUpsertWithoutPatientsInputSchema: z.ZodType<Prisma.TenantUpsertWithoutPatientsInput> = z.object({
  update: z.union([ z.lazy(() => TenantUpdateWithoutPatientsInputSchema),z.lazy(() => TenantUncheckedUpdateWithoutPatientsInputSchema) ]),
  create: z.union([ z.lazy(() => TenantCreateWithoutPatientsInputSchema),z.lazy(() => TenantUncheckedCreateWithoutPatientsInputSchema) ]),
  where: z.lazy(() => TenantWhereInputSchema).optional()
}).strict();

export const TenantUpdateToOneWithWhereWithoutPatientsInputSchema: z.ZodType<Prisma.TenantUpdateToOneWithWhereWithoutPatientsInput> = z.object({
  where: z.lazy(() => TenantWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => TenantUpdateWithoutPatientsInputSchema),z.lazy(() => TenantUncheckedUpdateWithoutPatientsInputSchema) ]),
}).strict();

export const TenantUpdateWithoutPatientsInputSchema: z.ZodType<Prisma.TenantUpdateWithoutPatientsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  disabledAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  trialExpiresAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  users: z.lazy(() => UserUpdateManyWithoutTenantNestedInputSchema).optional(),
  profile: z.lazy(() => TenantProfileUpdateOneRequiredWithoutTenantNestedInputSchema).optional(),
  specialities: z.lazy(() => SpecialityUpdateManyWithoutTenantNestedInputSchema).optional(),
  preferedByProfiles: z.lazy(() => ProfileUpdateManyWithoutPreferredTenantNestedInputSchema).optional(),
  services: z.lazy(() => ServiceUpdateManyWithoutTenantNestedInputSchema).optional(),
  materials: z.lazy(() => MaterialUpdateManyWithoutTenantNestedInputSchema).optional(),
  events: z.lazy(() => EventUpdateManyWithoutTenantNestedInputSchema).optional(),
  files: z.lazy(() => FileUpdateManyWithoutTenantNestedInputSchema).optional()
}).strict();

export const TenantUncheckedUpdateWithoutPatientsInputSchema: z.ZodType<Prisma.TenantUncheckedUpdateWithoutPatientsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  profileId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  disabledAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  trialExpiresAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  users: z.lazy(() => UserUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  specialities: z.lazy(() => SpecialityUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  preferedByProfiles: z.lazy(() => ProfileUncheckedUpdateManyWithoutPreferredTenantNestedInputSchema).optional(),
  services: z.lazy(() => ServiceUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  materials: z.lazy(() => MaterialUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  events: z.lazy(() => EventUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  files: z.lazy(() => FileUncheckedUpdateManyWithoutTenantNestedInputSchema).optional()
}).strict();

export const FileUpsertWithWhereUniqueWithoutPatientInputSchema: z.ZodType<Prisma.FileUpsertWithWhereUniqueWithoutPatientInput> = z.object({
  where: z.lazy(() => FileWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => FileUpdateWithoutPatientInputSchema),z.lazy(() => FileUncheckedUpdateWithoutPatientInputSchema) ]),
  create: z.union([ z.lazy(() => FileCreateWithoutPatientInputSchema),z.lazy(() => FileUncheckedCreateWithoutPatientInputSchema) ]),
}).strict();

export const FileUpdateWithWhereUniqueWithoutPatientInputSchema: z.ZodType<Prisma.FileUpdateWithWhereUniqueWithoutPatientInput> = z.object({
  where: z.lazy(() => FileWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => FileUpdateWithoutPatientInputSchema),z.lazy(() => FileUncheckedUpdateWithoutPatientInputSchema) ]),
}).strict();

export const FileUpdateManyWithWhereWithoutPatientInputSchema: z.ZodType<Prisma.FileUpdateManyWithWhereWithoutPatientInput> = z.object({
  where: z.lazy(() => FileScalarWhereInputSchema),
  data: z.union([ z.lazy(() => FileUpdateManyMutationInputSchema),z.lazy(() => FileUncheckedUpdateManyWithoutPatientInputSchema) ]),
}).strict();

export const QuizUpsertWithWhereUniqueWithoutPatientInputSchema: z.ZodType<Prisma.QuizUpsertWithWhereUniqueWithoutPatientInput> = z.object({
  where: z.lazy(() => QuizWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => QuizUpdateWithoutPatientInputSchema),z.lazy(() => QuizUncheckedUpdateWithoutPatientInputSchema) ]),
  create: z.union([ z.lazy(() => QuizCreateWithoutPatientInputSchema),z.lazy(() => QuizUncheckedCreateWithoutPatientInputSchema) ]),
}).strict();

export const QuizUpdateWithWhereUniqueWithoutPatientInputSchema: z.ZodType<Prisma.QuizUpdateWithWhereUniqueWithoutPatientInput> = z.object({
  where: z.lazy(() => QuizWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => QuizUpdateWithoutPatientInputSchema),z.lazy(() => QuizUncheckedUpdateWithoutPatientInputSchema) ]),
}).strict();

export const QuizUpdateManyWithWhereWithoutPatientInputSchema: z.ZodType<Prisma.QuizUpdateManyWithWhereWithoutPatientInput> = z.object({
  where: z.lazy(() => QuizScalarWhereInputSchema),
  data: z.union([ z.lazy(() => QuizUpdateManyMutationInputSchema),z.lazy(() => QuizUncheckedUpdateManyWithoutPatientInputSchema) ]),
}).strict();

export const QuizScalarWhereInputSchema: z.ZodType<Prisma.QuizScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => QuizScalarWhereInputSchema),z.lazy(() => QuizScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => QuizScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => QuizScalarWhereInputSchema),z.lazy(() => QuizScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  quiz: z.lazy(() => JsonFilterSchema).optional(),
  answers: z.lazy(() => IntNullableListFilterSchema).optional(),
  patientId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  eventId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const EventUpsertWithWhereUniqueWithoutPatientInputSchema: z.ZodType<Prisma.EventUpsertWithWhereUniqueWithoutPatientInput> = z.object({
  where: z.lazy(() => EventWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => EventUpdateWithoutPatientInputSchema),z.lazy(() => EventUncheckedUpdateWithoutPatientInputSchema) ]),
  create: z.union([ z.lazy(() => EventCreateWithoutPatientInputSchema),z.lazy(() => EventUncheckedCreateWithoutPatientInputSchema) ]),
}).strict();

export const EventUpdateWithWhereUniqueWithoutPatientInputSchema: z.ZodType<Prisma.EventUpdateWithWhereUniqueWithoutPatientInput> = z.object({
  where: z.lazy(() => EventWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => EventUpdateWithoutPatientInputSchema),z.lazy(() => EventUncheckedUpdateWithoutPatientInputSchema) ]),
}).strict();

export const EventUpdateManyWithWhereWithoutPatientInputSchema: z.ZodType<Prisma.EventUpdateManyWithWhereWithoutPatientInput> = z.object({
  where: z.lazy(() => EventScalarWhereInputSchema),
  data: z.union([ z.lazy(() => EventUpdateManyMutationInputSchema),z.lazy(() => EventUncheckedUpdateManyWithoutPatientInputSchema) ]),
}).strict();

export const TreatmentPlanUpsertWithWhereUniqueWithoutPatientInputSchema: z.ZodType<Prisma.TreatmentPlanUpsertWithWhereUniqueWithoutPatientInput> = z.object({
  where: z.lazy(() => TreatmentPlanWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => TreatmentPlanUpdateWithoutPatientInputSchema),z.lazy(() => TreatmentPlanUncheckedUpdateWithoutPatientInputSchema) ]),
  create: z.union([ z.lazy(() => TreatmentPlanCreateWithoutPatientInputSchema),z.lazy(() => TreatmentPlanUncheckedCreateWithoutPatientInputSchema) ]),
}).strict();

export const TreatmentPlanUpdateWithWhereUniqueWithoutPatientInputSchema: z.ZodType<Prisma.TreatmentPlanUpdateWithWhereUniqueWithoutPatientInput> = z.object({
  where: z.lazy(() => TreatmentPlanWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => TreatmentPlanUpdateWithoutPatientInputSchema),z.lazy(() => TreatmentPlanUncheckedUpdateWithoutPatientInputSchema) ]),
}).strict();

export const TreatmentPlanUpdateManyWithWhereWithoutPatientInputSchema: z.ZodType<Prisma.TreatmentPlanUpdateManyWithWhereWithoutPatientInput> = z.object({
  where: z.lazy(() => TreatmentPlanScalarWhereInputSchema),
  data: z.union([ z.lazy(() => TreatmentPlanUpdateManyMutationInputSchema),z.lazy(() => TreatmentPlanUncheckedUpdateManyWithoutPatientInputSchema) ]),
}).strict();

export const UserCreateWithoutSpecialityInputSchema: z.ZodType<Prisma.UserCreateWithoutSpecialityInput> = z.object({
  id: z.string().cuid().optional(),
  index: z.number().int().optional(),
  role: z.lazy(() => RoleSchema).optional(),
  workingHours: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  firstDayOfWeek: z.lazy(() => DayOfWeekSchema).optional(),
  showWeekends: z.boolean().optional(),
  webhookApiKey: z.string().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  activatedAt: z.coerce.date().optional().nullable(),
  lastLoginAt: z.coerce.date().optional().nullable(),
  bannedAt: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  profile: z.lazy(() => ProfileCreateNestedOneWithoutUsersInputSchema),
  tenant: z.lazy(() => TenantCreateNestedOneWithoutUsersInputSchema),
  invitation: z.lazy(() => InvitationCreateNestedOneWithoutUserInputSchema).optional(),
  patients: z.lazy(() => PatientCreateNestedManyWithoutUserInputSchema).optional(),
  events: z.lazy(() => EventCreateNestedManyWithoutUserInputSchema).optional(),
  eventActions: z.lazy(() => EventActionCreateNestedManyWithoutUserInputSchema).optional(),
  treatmentPlans: z.lazy(() => TreatmentPlanCreateNestedManyWithoutUserInputSchema).optional(),
  invitations: z.lazy(() => InvitationCreateNestedManyWithoutInvitedByInputSchema).optional(),
  files: z.lazy(() => FileCreateNestedManyWithoutUserInputSchema).optional(),
  tasks: z.lazy(() => TaskCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const UserUncheckedCreateWithoutSpecialityInputSchema: z.ZodType<Prisma.UserUncheckedCreateWithoutSpecialityInput> = z.object({
  id: z.string().cuid().optional(),
  index: z.number().int().optional(),
  role: z.lazy(() => RoleSchema).optional(),
  workingHours: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  firstDayOfWeek: z.lazy(() => DayOfWeekSchema).optional(),
  showWeekends: z.boolean().optional(),
  webhookApiKey: z.string().optional().nullable(),
  profileId: z.string(),
  tenantId: z.string(),
  deletedAt: z.coerce.date().optional().nullable(),
  activatedAt: z.coerce.date().optional().nullable(),
  lastLoginAt: z.coerce.date().optional().nullable(),
  bannedAt: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  invitation: z.lazy(() => InvitationUncheckedCreateNestedOneWithoutUserInputSchema).optional(),
  patients: z.lazy(() => PatientUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  events: z.lazy(() => EventUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  eventActions: z.lazy(() => EventActionUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  treatmentPlans: z.lazy(() => TreatmentPlanUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedCreateNestedManyWithoutInvitedByInputSchema).optional(),
  files: z.lazy(() => FileUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  tasks: z.lazy(() => TaskUncheckedCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const UserCreateOrConnectWithoutSpecialityInputSchema: z.ZodType<Prisma.UserCreateOrConnectWithoutSpecialityInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UserCreateWithoutSpecialityInputSchema),z.lazy(() => UserUncheckedCreateWithoutSpecialityInputSchema) ]),
}).strict();

export const UserCreateManySpecialityInputEnvelopeSchema: z.ZodType<Prisma.UserCreateManySpecialityInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => UserCreateManySpecialityInputSchema),z.lazy(() => UserCreateManySpecialityInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const TenantCreateWithoutSpecialitiesInputSchema: z.ZodType<Prisma.TenantCreateWithoutSpecialitiesInput> = z.object({
  id: z.string().cuid().optional(),
  email: z.string(),
  deletedAt: z.coerce.date().optional().nullable(),
  disabledAt: z.coerce.date().optional().nullable(),
  trialExpiresAt: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  users: z.lazy(() => UserCreateNestedManyWithoutTenantInputSchema).optional(),
  profile: z.lazy(() => TenantProfileCreateNestedOneWithoutTenantInputSchema),
  preferedByProfiles: z.lazy(() => ProfileCreateNestedManyWithoutPreferredTenantInputSchema).optional(),
  patients: z.lazy(() => PatientCreateNestedManyWithoutTenantInputSchema).optional(),
  services: z.lazy(() => ServiceCreateNestedManyWithoutTenantInputSchema).optional(),
  materials: z.lazy(() => MaterialCreateNestedManyWithoutTenantInputSchema).optional(),
  events: z.lazy(() => EventCreateNestedManyWithoutTenantInputSchema).optional(),
  files: z.lazy(() => FileCreateNestedManyWithoutTenantInputSchema).optional()
}).strict();

export const TenantUncheckedCreateWithoutSpecialitiesInputSchema: z.ZodType<Prisma.TenantUncheckedCreateWithoutSpecialitiesInput> = z.object({
  id: z.string().cuid().optional(),
  email: z.string(),
  profileId: z.string(),
  deletedAt: z.coerce.date().optional().nullable(),
  disabledAt: z.coerce.date().optional().nullable(),
  trialExpiresAt: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  users: z.lazy(() => UserUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  preferedByProfiles: z.lazy(() => ProfileUncheckedCreateNestedManyWithoutPreferredTenantInputSchema).optional(),
  patients: z.lazy(() => PatientUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  services: z.lazy(() => ServiceUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  materials: z.lazy(() => MaterialUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  events: z.lazy(() => EventUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  files: z.lazy(() => FileUncheckedCreateNestedManyWithoutTenantInputSchema).optional()
}).strict();

export const TenantCreateOrConnectWithoutSpecialitiesInputSchema: z.ZodType<Prisma.TenantCreateOrConnectWithoutSpecialitiesInput> = z.object({
  where: z.lazy(() => TenantWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => TenantCreateWithoutSpecialitiesInputSchema),z.lazy(() => TenantUncheckedCreateWithoutSpecialitiesInputSchema) ]),
}).strict();

export const UserUpsertWithWhereUniqueWithoutSpecialityInputSchema: z.ZodType<Prisma.UserUpsertWithWhereUniqueWithoutSpecialityInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => UserUpdateWithoutSpecialityInputSchema),z.lazy(() => UserUncheckedUpdateWithoutSpecialityInputSchema) ]),
  create: z.union([ z.lazy(() => UserCreateWithoutSpecialityInputSchema),z.lazy(() => UserUncheckedCreateWithoutSpecialityInputSchema) ]),
}).strict();

export const UserUpdateWithWhereUniqueWithoutSpecialityInputSchema: z.ZodType<Prisma.UserUpdateWithWhereUniqueWithoutSpecialityInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => UserUpdateWithoutSpecialityInputSchema),z.lazy(() => UserUncheckedUpdateWithoutSpecialityInputSchema) ]),
}).strict();

export const UserUpdateManyWithWhereWithoutSpecialityInputSchema: z.ZodType<Prisma.UserUpdateManyWithWhereWithoutSpecialityInput> = z.object({
  where: z.lazy(() => UserScalarWhereInputSchema),
  data: z.union([ z.lazy(() => UserUpdateManyMutationInputSchema),z.lazy(() => UserUncheckedUpdateManyWithoutSpecialityInputSchema) ]),
}).strict();

export const TenantUpsertWithoutSpecialitiesInputSchema: z.ZodType<Prisma.TenantUpsertWithoutSpecialitiesInput> = z.object({
  update: z.union([ z.lazy(() => TenantUpdateWithoutSpecialitiesInputSchema),z.lazy(() => TenantUncheckedUpdateWithoutSpecialitiesInputSchema) ]),
  create: z.union([ z.lazy(() => TenantCreateWithoutSpecialitiesInputSchema),z.lazy(() => TenantUncheckedCreateWithoutSpecialitiesInputSchema) ]),
  where: z.lazy(() => TenantWhereInputSchema).optional()
}).strict();

export const TenantUpdateToOneWithWhereWithoutSpecialitiesInputSchema: z.ZodType<Prisma.TenantUpdateToOneWithWhereWithoutSpecialitiesInput> = z.object({
  where: z.lazy(() => TenantWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => TenantUpdateWithoutSpecialitiesInputSchema),z.lazy(() => TenantUncheckedUpdateWithoutSpecialitiesInputSchema) ]),
}).strict();

export const TenantUpdateWithoutSpecialitiesInputSchema: z.ZodType<Prisma.TenantUpdateWithoutSpecialitiesInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  disabledAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  trialExpiresAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  users: z.lazy(() => UserUpdateManyWithoutTenantNestedInputSchema).optional(),
  profile: z.lazy(() => TenantProfileUpdateOneRequiredWithoutTenantNestedInputSchema).optional(),
  preferedByProfiles: z.lazy(() => ProfileUpdateManyWithoutPreferredTenantNestedInputSchema).optional(),
  patients: z.lazy(() => PatientUpdateManyWithoutTenantNestedInputSchema).optional(),
  services: z.lazy(() => ServiceUpdateManyWithoutTenantNestedInputSchema).optional(),
  materials: z.lazy(() => MaterialUpdateManyWithoutTenantNestedInputSchema).optional(),
  events: z.lazy(() => EventUpdateManyWithoutTenantNestedInputSchema).optional(),
  files: z.lazy(() => FileUpdateManyWithoutTenantNestedInputSchema).optional()
}).strict();

export const TenantUncheckedUpdateWithoutSpecialitiesInputSchema: z.ZodType<Prisma.TenantUncheckedUpdateWithoutSpecialitiesInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  profileId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  disabledAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  trialExpiresAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  users: z.lazy(() => UserUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  preferedByProfiles: z.lazy(() => ProfileUncheckedUpdateManyWithoutPreferredTenantNestedInputSchema).optional(),
  patients: z.lazy(() => PatientUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  services: z.lazy(() => ServiceUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  materials: z.lazy(() => MaterialUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  events: z.lazy(() => EventUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  files: z.lazy(() => FileUncheckedUpdateManyWithoutTenantNestedInputSchema).optional()
}).strict();

export const VisitCreateWithoutEventInputSchema: z.ZodType<Prisma.VisitCreateWithoutEventInput> = z.object({
  id: z.string().cuid().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  service: z.lazy(() => ServiceCreateNestedOneWithoutVisitsInputSchema),
  treatment: z.lazy(() => TreatmentCreateNestedOneWithoutVisitsInputSchema)
}).strict();

export const VisitUncheckedCreateWithoutEventInputSchema: z.ZodType<Prisma.VisitUncheckedCreateWithoutEventInput> = z.object({
  id: z.string().cuid().optional(),
  serviceId: z.string(),
  treatmentId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const VisitCreateOrConnectWithoutEventInputSchema: z.ZodType<Prisma.VisitCreateOrConnectWithoutEventInput> = z.object({
  where: z.lazy(() => VisitWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => VisitCreateWithoutEventInputSchema),z.lazy(() => VisitUncheckedCreateWithoutEventInputSchema) ]),
}).strict();

export const VisitCreateManyEventInputEnvelopeSchema: z.ZodType<Prisma.VisitCreateManyEventInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => VisitCreateManyEventInputSchema),z.lazy(() => VisitCreateManyEventInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const QuizCreateWithoutEventInputSchema: z.ZodType<Prisma.QuizCreateWithoutEventInput> = z.object({
  id: z.string().cuid().optional(),
  quiz: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  answers: z.union([ z.lazy(() => QuizCreateanswersInputSchema),z.number().int().array() ]).optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  patient: z.lazy(() => PatientCreateNestedOneWithoutQuizesInputSchema)
}).strict();

export const QuizUncheckedCreateWithoutEventInputSchema: z.ZodType<Prisma.QuizUncheckedCreateWithoutEventInput> = z.object({
  id: z.string().cuid().optional(),
  quiz: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  answers: z.union([ z.lazy(() => QuizCreateanswersInputSchema),z.number().int().array() ]).optional(),
  patientId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const QuizCreateOrConnectWithoutEventInputSchema: z.ZodType<Prisma.QuizCreateOrConnectWithoutEventInput> = z.object({
  where: z.lazy(() => QuizWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => QuizCreateWithoutEventInputSchema),z.lazy(() => QuizUncheckedCreateWithoutEventInputSchema) ]),
}).strict();

export const EventActionCreateWithoutEventInputSchema: z.ZodType<Prisma.EventActionCreateWithoutEventInput> = z.object({
  id: z.string().cuid().optional(),
  data: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  user: z.lazy(() => UserCreateNestedOneWithoutEventActionsInputSchema)
}).strict();

export const EventActionUncheckedCreateWithoutEventInputSchema: z.ZodType<Prisma.EventActionUncheckedCreateWithoutEventInput> = z.object({
  id: z.string().cuid().optional(),
  data: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  userId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const EventActionCreateOrConnectWithoutEventInputSchema: z.ZodType<Prisma.EventActionCreateOrConnectWithoutEventInput> = z.object({
  where: z.lazy(() => EventActionWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => EventActionCreateWithoutEventInputSchema),z.lazy(() => EventActionUncheckedCreateWithoutEventInputSchema) ]),
}).strict();

export const EventActionCreateManyEventInputEnvelopeSchema: z.ZodType<Prisma.EventActionCreateManyEventInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => EventActionCreateManyEventInputSchema),z.lazy(() => EventActionCreateManyEventInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const FileCreateWithoutEventInputSchema: z.ZodType<Prisma.FileCreateWithoutEventInput> = z.object({
  id: z.string().cuid().optional(),
  url: z.string(),
  key: z.string(),
  name: z.string(),
  extension: z.string(),
  contentType: z.string(),
  size: z.number().int(),
  confirmed: z.boolean().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  tenant: z.lazy(() => TenantCreateNestedOneWithoutFilesInputSchema),
  user: z.lazy(() => UserCreateNestedOneWithoutFilesInputSchema),
  patient: z.lazy(() => PatientCreateNestedOneWithoutFilesInputSchema).optional()
}).strict();

export const FileUncheckedCreateWithoutEventInputSchema: z.ZodType<Prisma.FileUncheckedCreateWithoutEventInput> = z.object({
  id: z.string().cuid().optional(),
  url: z.string(),
  key: z.string(),
  name: z.string(),
  extension: z.string(),
  contentType: z.string(),
  size: z.number().int(),
  confirmed: z.boolean().optional(),
  tenantId: z.string(),
  userId: z.string(),
  patientId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const FileCreateOrConnectWithoutEventInputSchema: z.ZodType<Prisma.FileCreateOrConnectWithoutEventInput> = z.object({
  where: z.lazy(() => FileWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => FileCreateWithoutEventInputSchema),z.lazy(() => FileUncheckedCreateWithoutEventInputSchema) ]),
}).strict();

export const FileCreateManyEventInputEnvelopeSchema: z.ZodType<Prisma.FileCreateManyEventInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => FileCreateManyEventInputSchema),z.lazy(() => FileCreateManyEventInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const PatientCreateWithoutAppointmentsInputSchema: z.ZodType<Prisma.PatientCreateWithoutAppointmentsInput> = z.object({
  id: z.string().cuid().optional(),
  firstName: z.string(),
  lastName: z.string(),
  gender: z.string().optional().nullable(),
  dob: z.coerce.date().optional().nullable(),
  email: z.string().optional().nullable(),
  phone: z.string().optional().nullable(),
  city: z.string().optional().nullable(),
  county: z.string().optional().nullable(),
  status: z.lazy(() => StatusSchema).optional(),
  smsNotifications: z.boolean().optional(),
  emailNotifications: z.boolean().optional(),
  filters: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  user: z.lazy(() => UserCreateNestedOneWithoutPatientsInputSchema),
  tenant: z.lazy(() => TenantCreateNestedOneWithoutPatientsInputSchema),
  files: z.lazy(() => FileCreateNestedManyWithoutPatientInputSchema).optional(),
  quizes: z.lazy(() => QuizCreateNestedManyWithoutPatientInputSchema).optional(),
  treatmentPlans: z.lazy(() => TreatmentPlanCreateNestedManyWithoutPatientInputSchema).optional()
}).strict();

export const PatientUncheckedCreateWithoutAppointmentsInputSchema: z.ZodType<Prisma.PatientUncheckedCreateWithoutAppointmentsInput> = z.object({
  id: z.string().cuid().optional(),
  firstName: z.string(),
  lastName: z.string(),
  gender: z.string().optional().nullable(),
  dob: z.coerce.date().optional().nullable(),
  email: z.string().optional().nullable(),
  phone: z.string().optional().nullable(),
  city: z.string().optional().nullable(),
  county: z.string().optional().nullable(),
  status: z.lazy(() => StatusSchema).optional(),
  smsNotifications: z.boolean().optional(),
  emailNotifications: z.boolean().optional(),
  filters: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  userId: z.string(),
  tenantId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  files: z.lazy(() => FileUncheckedCreateNestedManyWithoutPatientInputSchema).optional(),
  quizes: z.lazy(() => QuizUncheckedCreateNestedManyWithoutPatientInputSchema).optional(),
  treatmentPlans: z.lazy(() => TreatmentPlanUncheckedCreateNestedManyWithoutPatientInputSchema).optional()
}).strict();

export const PatientCreateOrConnectWithoutAppointmentsInputSchema: z.ZodType<Prisma.PatientCreateOrConnectWithoutAppointmentsInput> = z.object({
  where: z.lazy(() => PatientWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => PatientCreateWithoutAppointmentsInputSchema),z.lazy(() => PatientUncheckedCreateWithoutAppointmentsInputSchema) ]),
}).strict();

export const UserCreateWithoutEventsInputSchema: z.ZodType<Prisma.UserCreateWithoutEventsInput> = z.object({
  id: z.string().cuid().optional(),
  index: z.number().int().optional(),
  role: z.lazy(() => RoleSchema).optional(),
  workingHours: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  firstDayOfWeek: z.lazy(() => DayOfWeekSchema).optional(),
  showWeekends: z.boolean().optional(),
  webhookApiKey: z.string().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  activatedAt: z.coerce.date().optional().nullable(),
  lastLoginAt: z.coerce.date().optional().nullable(),
  bannedAt: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  speciality: z.lazy(() => SpecialityCreateNestedOneWithoutUsersInputSchema).optional(),
  profile: z.lazy(() => ProfileCreateNestedOneWithoutUsersInputSchema),
  tenant: z.lazy(() => TenantCreateNestedOneWithoutUsersInputSchema),
  invitation: z.lazy(() => InvitationCreateNestedOneWithoutUserInputSchema).optional(),
  patients: z.lazy(() => PatientCreateNestedManyWithoutUserInputSchema).optional(),
  eventActions: z.lazy(() => EventActionCreateNestedManyWithoutUserInputSchema).optional(),
  treatmentPlans: z.lazy(() => TreatmentPlanCreateNestedManyWithoutUserInputSchema).optional(),
  invitations: z.lazy(() => InvitationCreateNestedManyWithoutInvitedByInputSchema).optional(),
  files: z.lazy(() => FileCreateNestedManyWithoutUserInputSchema).optional(),
  tasks: z.lazy(() => TaskCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const UserUncheckedCreateWithoutEventsInputSchema: z.ZodType<Prisma.UserUncheckedCreateWithoutEventsInput> = z.object({
  id: z.string().cuid().optional(),
  index: z.number().int().optional(),
  role: z.lazy(() => RoleSchema).optional(),
  workingHours: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  firstDayOfWeek: z.lazy(() => DayOfWeekSchema).optional(),
  showWeekends: z.boolean().optional(),
  webhookApiKey: z.string().optional().nullable(),
  specialityId: z.string().optional().nullable(),
  profileId: z.string(),
  tenantId: z.string(),
  deletedAt: z.coerce.date().optional().nullable(),
  activatedAt: z.coerce.date().optional().nullable(),
  lastLoginAt: z.coerce.date().optional().nullable(),
  bannedAt: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  invitation: z.lazy(() => InvitationUncheckedCreateNestedOneWithoutUserInputSchema).optional(),
  patients: z.lazy(() => PatientUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  eventActions: z.lazy(() => EventActionUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  treatmentPlans: z.lazy(() => TreatmentPlanUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedCreateNestedManyWithoutInvitedByInputSchema).optional(),
  files: z.lazy(() => FileUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  tasks: z.lazy(() => TaskUncheckedCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const UserCreateOrConnectWithoutEventsInputSchema: z.ZodType<Prisma.UserCreateOrConnectWithoutEventsInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UserCreateWithoutEventsInputSchema),z.lazy(() => UserUncheckedCreateWithoutEventsInputSchema) ]),
}).strict();

export const TenantCreateWithoutEventsInputSchema: z.ZodType<Prisma.TenantCreateWithoutEventsInput> = z.object({
  id: z.string().cuid().optional(),
  email: z.string(),
  deletedAt: z.coerce.date().optional().nullable(),
  disabledAt: z.coerce.date().optional().nullable(),
  trialExpiresAt: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  users: z.lazy(() => UserCreateNestedManyWithoutTenantInputSchema).optional(),
  profile: z.lazy(() => TenantProfileCreateNestedOneWithoutTenantInputSchema),
  specialities: z.lazy(() => SpecialityCreateNestedManyWithoutTenantInputSchema).optional(),
  preferedByProfiles: z.lazy(() => ProfileCreateNestedManyWithoutPreferredTenantInputSchema).optional(),
  patients: z.lazy(() => PatientCreateNestedManyWithoutTenantInputSchema).optional(),
  services: z.lazy(() => ServiceCreateNestedManyWithoutTenantInputSchema).optional(),
  materials: z.lazy(() => MaterialCreateNestedManyWithoutTenantInputSchema).optional(),
  files: z.lazy(() => FileCreateNestedManyWithoutTenantInputSchema).optional()
}).strict();

export const TenantUncheckedCreateWithoutEventsInputSchema: z.ZodType<Prisma.TenantUncheckedCreateWithoutEventsInput> = z.object({
  id: z.string().cuid().optional(),
  email: z.string(),
  profileId: z.string(),
  deletedAt: z.coerce.date().optional().nullable(),
  disabledAt: z.coerce.date().optional().nullable(),
  trialExpiresAt: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  users: z.lazy(() => UserUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  specialities: z.lazy(() => SpecialityUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  preferedByProfiles: z.lazy(() => ProfileUncheckedCreateNestedManyWithoutPreferredTenantInputSchema).optional(),
  patients: z.lazy(() => PatientUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  services: z.lazy(() => ServiceUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  materials: z.lazy(() => MaterialUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  files: z.lazy(() => FileUncheckedCreateNestedManyWithoutTenantInputSchema).optional()
}).strict();

export const TenantCreateOrConnectWithoutEventsInputSchema: z.ZodType<Prisma.TenantCreateOrConnectWithoutEventsInput> = z.object({
  where: z.lazy(() => TenantWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => TenantCreateWithoutEventsInputSchema),z.lazy(() => TenantUncheckedCreateWithoutEventsInputSchema) ]),
}).strict();

export const VisitUpsertWithWhereUniqueWithoutEventInputSchema: z.ZodType<Prisma.VisitUpsertWithWhereUniqueWithoutEventInput> = z.object({
  where: z.lazy(() => VisitWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => VisitUpdateWithoutEventInputSchema),z.lazy(() => VisitUncheckedUpdateWithoutEventInputSchema) ]),
  create: z.union([ z.lazy(() => VisitCreateWithoutEventInputSchema),z.lazy(() => VisitUncheckedCreateWithoutEventInputSchema) ]),
}).strict();

export const VisitUpdateWithWhereUniqueWithoutEventInputSchema: z.ZodType<Prisma.VisitUpdateWithWhereUniqueWithoutEventInput> = z.object({
  where: z.lazy(() => VisitWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => VisitUpdateWithoutEventInputSchema),z.lazy(() => VisitUncheckedUpdateWithoutEventInputSchema) ]),
}).strict();

export const VisitUpdateManyWithWhereWithoutEventInputSchema: z.ZodType<Prisma.VisitUpdateManyWithWhereWithoutEventInput> = z.object({
  where: z.lazy(() => VisitScalarWhereInputSchema),
  data: z.union([ z.lazy(() => VisitUpdateManyMutationInputSchema),z.lazy(() => VisitUncheckedUpdateManyWithoutEventInputSchema) ]),
}).strict();

export const VisitScalarWhereInputSchema: z.ZodType<Prisma.VisitScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => VisitScalarWhereInputSchema),z.lazy(() => VisitScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => VisitScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => VisitScalarWhereInputSchema),z.lazy(() => VisitScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  serviceId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  treatmentId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  eventId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const QuizUpsertWithoutEventInputSchema: z.ZodType<Prisma.QuizUpsertWithoutEventInput> = z.object({
  update: z.union([ z.lazy(() => QuizUpdateWithoutEventInputSchema),z.lazy(() => QuizUncheckedUpdateWithoutEventInputSchema) ]),
  create: z.union([ z.lazy(() => QuizCreateWithoutEventInputSchema),z.lazy(() => QuizUncheckedCreateWithoutEventInputSchema) ]),
  where: z.lazy(() => QuizWhereInputSchema).optional()
}).strict();

export const QuizUpdateToOneWithWhereWithoutEventInputSchema: z.ZodType<Prisma.QuizUpdateToOneWithWhereWithoutEventInput> = z.object({
  where: z.lazy(() => QuizWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => QuizUpdateWithoutEventInputSchema),z.lazy(() => QuizUncheckedUpdateWithoutEventInputSchema) ]),
}).strict();

export const QuizUpdateWithoutEventInputSchema: z.ZodType<Prisma.QuizUpdateWithoutEventInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  quiz: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  answers: z.union([ z.lazy(() => QuizUpdateanswersInputSchema),z.number().int().array() ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  patient: z.lazy(() => PatientUpdateOneRequiredWithoutQuizesNestedInputSchema).optional()
}).strict();

export const QuizUncheckedUpdateWithoutEventInputSchema: z.ZodType<Prisma.QuizUncheckedUpdateWithoutEventInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  quiz: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  answers: z.union([ z.lazy(() => QuizUpdateanswersInputSchema),z.number().int().array() ]).optional(),
  patientId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const EventActionUpsertWithWhereUniqueWithoutEventInputSchema: z.ZodType<Prisma.EventActionUpsertWithWhereUniqueWithoutEventInput> = z.object({
  where: z.lazy(() => EventActionWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => EventActionUpdateWithoutEventInputSchema),z.lazy(() => EventActionUncheckedUpdateWithoutEventInputSchema) ]),
  create: z.union([ z.lazy(() => EventActionCreateWithoutEventInputSchema),z.lazy(() => EventActionUncheckedCreateWithoutEventInputSchema) ]),
}).strict();

export const EventActionUpdateWithWhereUniqueWithoutEventInputSchema: z.ZodType<Prisma.EventActionUpdateWithWhereUniqueWithoutEventInput> = z.object({
  where: z.lazy(() => EventActionWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => EventActionUpdateWithoutEventInputSchema),z.lazy(() => EventActionUncheckedUpdateWithoutEventInputSchema) ]),
}).strict();

export const EventActionUpdateManyWithWhereWithoutEventInputSchema: z.ZodType<Prisma.EventActionUpdateManyWithWhereWithoutEventInput> = z.object({
  where: z.lazy(() => EventActionScalarWhereInputSchema),
  data: z.union([ z.lazy(() => EventActionUpdateManyMutationInputSchema),z.lazy(() => EventActionUncheckedUpdateManyWithoutEventInputSchema) ]),
}).strict();

export const FileUpsertWithWhereUniqueWithoutEventInputSchema: z.ZodType<Prisma.FileUpsertWithWhereUniqueWithoutEventInput> = z.object({
  where: z.lazy(() => FileWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => FileUpdateWithoutEventInputSchema),z.lazy(() => FileUncheckedUpdateWithoutEventInputSchema) ]),
  create: z.union([ z.lazy(() => FileCreateWithoutEventInputSchema),z.lazy(() => FileUncheckedCreateWithoutEventInputSchema) ]),
}).strict();

export const FileUpdateWithWhereUniqueWithoutEventInputSchema: z.ZodType<Prisma.FileUpdateWithWhereUniqueWithoutEventInput> = z.object({
  where: z.lazy(() => FileWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => FileUpdateWithoutEventInputSchema),z.lazy(() => FileUncheckedUpdateWithoutEventInputSchema) ]),
}).strict();

export const FileUpdateManyWithWhereWithoutEventInputSchema: z.ZodType<Prisma.FileUpdateManyWithWhereWithoutEventInput> = z.object({
  where: z.lazy(() => FileScalarWhereInputSchema),
  data: z.union([ z.lazy(() => FileUpdateManyMutationInputSchema),z.lazy(() => FileUncheckedUpdateManyWithoutEventInputSchema) ]),
}).strict();

export const PatientUpsertWithoutAppointmentsInputSchema: z.ZodType<Prisma.PatientUpsertWithoutAppointmentsInput> = z.object({
  update: z.union([ z.lazy(() => PatientUpdateWithoutAppointmentsInputSchema),z.lazy(() => PatientUncheckedUpdateWithoutAppointmentsInputSchema) ]),
  create: z.union([ z.lazy(() => PatientCreateWithoutAppointmentsInputSchema),z.lazy(() => PatientUncheckedCreateWithoutAppointmentsInputSchema) ]),
  where: z.lazy(() => PatientWhereInputSchema).optional()
}).strict();

export const PatientUpdateToOneWithWhereWithoutAppointmentsInputSchema: z.ZodType<Prisma.PatientUpdateToOneWithWhereWithoutAppointmentsInput> = z.object({
  where: z.lazy(() => PatientWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => PatientUpdateWithoutAppointmentsInputSchema),z.lazy(() => PatientUncheckedUpdateWithoutAppointmentsInputSchema) ]),
}).strict();

export const PatientUpdateWithoutAppointmentsInputSchema: z.ZodType<Prisma.PatientUpdateWithoutAppointmentsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  firstName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  lastName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  gender: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  dob: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  city: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  county: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.lazy(() => StatusSchema),z.lazy(() => EnumStatusFieldUpdateOperationsInputSchema) ]).optional(),
  smsNotifications: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  emailNotifications: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  filters: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  user: z.lazy(() => UserUpdateOneRequiredWithoutPatientsNestedInputSchema).optional(),
  tenant: z.lazy(() => TenantUpdateOneRequiredWithoutPatientsNestedInputSchema).optional(),
  files: z.lazy(() => FileUpdateManyWithoutPatientNestedInputSchema).optional(),
  quizes: z.lazy(() => QuizUpdateManyWithoutPatientNestedInputSchema).optional(),
  treatmentPlans: z.lazy(() => TreatmentPlanUpdateManyWithoutPatientNestedInputSchema).optional()
}).strict();

export const PatientUncheckedUpdateWithoutAppointmentsInputSchema: z.ZodType<Prisma.PatientUncheckedUpdateWithoutAppointmentsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  firstName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  lastName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  gender: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  dob: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  city: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  county: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.lazy(() => StatusSchema),z.lazy(() => EnumStatusFieldUpdateOperationsInputSchema) ]).optional(),
  smsNotifications: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  emailNotifications: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  filters: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  tenantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  files: z.lazy(() => FileUncheckedUpdateManyWithoutPatientNestedInputSchema).optional(),
  quizes: z.lazy(() => QuizUncheckedUpdateManyWithoutPatientNestedInputSchema).optional(),
  treatmentPlans: z.lazy(() => TreatmentPlanUncheckedUpdateManyWithoutPatientNestedInputSchema).optional()
}).strict();

export const UserUpsertWithoutEventsInputSchema: z.ZodType<Prisma.UserUpsertWithoutEventsInput> = z.object({
  update: z.union([ z.lazy(() => UserUpdateWithoutEventsInputSchema),z.lazy(() => UserUncheckedUpdateWithoutEventsInputSchema) ]),
  create: z.union([ z.lazy(() => UserCreateWithoutEventsInputSchema),z.lazy(() => UserUncheckedCreateWithoutEventsInputSchema) ]),
  where: z.lazy(() => UserWhereInputSchema).optional()
}).strict();

export const UserUpdateToOneWithWhereWithoutEventsInputSchema: z.ZodType<Prisma.UserUpdateToOneWithWhereWithoutEventsInput> = z.object({
  where: z.lazy(() => UserWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => UserUpdateWithoutEventsInputSchema),z.lazy(() => UserUncheckedUpdateWithoutEventsInputSchema) ]),
}).strict();

export const UserUpdateWithoutEventsInputSchema: z.ZodType<Prisma.UserUpdateWithoutEventsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  index: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.lazy(() => RoleSchema),z.lazy(() => EnumRoleFieldUpdateOperationsInputSchema) ]).optional(),
  workingHours: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  firstDayOfWeek: z.union([ z.lazy(() => DayOfWeekSchema),z.lazy(() => EnumDayOfWeekFieldUpdateOperationsInputSchema) ]).optional(),
  showWeekends: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  webhookApiKey: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  activatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastLoginAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bannedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  speciality: z.lazy(() => SpecialityUpdateOneWithoutUsersNestedInputSchema).optional(),
  profile: z.lazy(() => ProfileUpdateOneRequiredWithoutUsersNestedInputSchema).optional(),
  tenant: z.lazy(() => TenantUpdateOneRequiredWithoutUsersNestedInputSchema).optional(),
  invitation: z.lazy(() => InvitationUpdateOneWithoutUserNestedInputSchema).optional(),
  patients: z.lazy(() => PatientUpdateManyWithoutUserNestedInputSchema).optional(),
  eventActions: z.lazy(() => EventActionUpdateManyWithoutUserNestedInputSchema).optional(),
  treatmentPlans: z.lazy(() => TreatmentPlanUpdateManyWithoutUserNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUpdateManyWithoutInvitedByNestedInputSchema).optional(),
  files: z.lazy(() => FileUpdateManyWithoutUserNestedInputSchema).optional(),
  tasks: z.lazy(() => TaskUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const UserUncheckedUpdateWithoutEventsInputSchema: z.ZodType<Prisma.UserUncheckedUpdateWithoutEventsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  index: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.lazy(() => RoleSchema),z.lazy(() => EnumRoleFieldUpdateOperationsInputSchema) ]).optional(),
  workingHours: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  firstDayOfWeek: z.union([ z.lazy(() => DayOfWeekSchema),z.lazy(() => EnumDayOfWeekFieldUpdateOperationsInputSchema) ]).optional(),
  showWeekends: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  webhookApiKey: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  specialityId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  profileId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  tenantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  activatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastLoginAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bannedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  invitation: z.lazy(() => InvitationUncheckedUpdateOneWithoutUserNestedInputSchema).optional(),
  patients: z.lazy(() => PatientUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  eventActions: z.lazy(() => EventActionUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  treatmentPlans: z.lazy(() => TreatmentPlanUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedUpdateManyWithoutInvitedByNestedInputSchema).optional(),
  files: z.lazy(() => FileUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  tasks: z.lazy(() => TaskUncheckedUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const TenantUpsertWithoutEventsInputSchema: z.ZodType<Prisma.TenantUpsertWithoutEventsInput> = z.object({
  update: z.union([ z.lazy(() => TenantUpdateWithoutEventsInputSchema),z.lazy(() => TenantUncheckedUpdateWithoutEventsInputSchema) ]),
  create: z.union([ z.lazy(() => TenantCreateWithoutEventsInputSchema),z.lazy(() => TenantUncheckedCreateWithoutEventsInputSchema) ]),
  where: z.lazy(() => TenantWhereInputSchema).optional()
}).strict();

export const TenantUpdateToOneWithWhereWithoutEventsInputSchema: z.ZodType<Prisma.TenantUpdateToOneWithWhereWithoutEventsInput> = z.object({
  where: z.lazy(() => TenantWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => TenantUpdateWithoutEventsInputSchema),z.lazy(() => TenantUncheckedUpdateWithoutEventsInputSchema) ]),
}).strict();

export const TenantUpdateWithoutEventsInputSchema: z.ZodType<Prisma.TenantUpdateWithoutEventsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  disabledAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  trialExpiresAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  users: z.lazy(() => UserUpdateManyWithoutTenantNestedInputSchema).optional(),
  profile: z.lazy(() => TenantProfileUpdateOneRequiredWithoutTenantNestedInputSchema).optional(),
  specialities: z.lazy(() => SpecialityUpdateManyWithoutTenantNestedInputSchema).optional(),
  preferedByProfiles: z.lazy(() => ProfileUpdateManyWithoutPreferredTenantNestedInputSchema).optional(),
  patients: z.lazy(() => PatientUpdateManyWithoutTenantNestedInputSchema).optional(),
  services: z.lazy(() => ServiceUpdateManyWithoutTenantNestedInputSchema).optional(),
  materials: z.lazy(() => MaterialUpdateManyWithoutTenantNestedInputSchema).optional(),
  files: z.lazy(() => FileUpdateManyWithoutTenantNestedInputSchema).optional()
}).strict();

export const TenantUncheckedUpdateWithoutEventsInputSchema: z.ZodType<Prisma.TenantUncheckedUpdateWithoutEventsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  profileId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  disabledAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  trialExpiresAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  users: z.lazy(() => UserUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  specialities: z.lazy(() => SpecialityUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  preferedByProfiles: z.lazy(() => ProfileUncheckedUpdateManyWithoutPreferredTenantNestedInputSchema).optional(),
  patients: z.lazy(() => PatientUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  services: z.lazy(() => ServiceUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  materials: z.lazy(() => MaterialUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  files: z.lazy(() => FileUncheckedUpdateManyWithoutTenantNestedInputSchema).optional()
}).strict();

export const UserCreateWithoutEventActionsInputSchema: z.ZodType<Prisma.UserCreateWithoutEventActionsInput> = z.object({
  id: z.string().cuid().optional(),
  index: z.number().int().optional(),
  role: z.lazy(() => RoleSchema).optional(),
  workingHours: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  firstDayOfWeek: z.lazy(() => DayOfWeekSchema).optional(),
  showWeekends: z.boolean().optional(),
  webhookApiKey: z.string().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  activatedAt: z.coerce.date().optional().nullable(),
  lastLoginAt: z.coerce.date().optional().nullable(),
  bannedAt: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  speciality: z.lazy(() => SpecialityCreateNestedOneWithoutUsersInputSchema).optional(),
  profile: z.lazy(() => ProfileCreateNestedOneWithoutUsersInputSchema),
  tenant: z.lazy(() => TenantCreateNestedOneWithoutUsersInputSchema),
  invitation: z.lazy(() => InvitationCreateNestedOneWithoutUserInputSchema).optional(),
  patients: z.lazy(() => PatientCreateNestedManyWithoutUserInputSchema).optional(),
  events: z.lazy(() => EventCreateNestedManyWithoutUserInputSchema).optional(),
  treatmentPlans: z.lazy(() => TreatmentPlanCreateNestedManyWithoutUserInputSchema).optional(),
  invitations: z.lazy(() => InvitationCreateNestedManyWithoutInvitedByInputSchema).optional(),
  files: z.lazy(() => FileCreateNestedManyWithoutUserInputSchema).optional(),
  tasks: z.lazy(() => TaskCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const UserUncheckedCreateWithoutEventActionsInputSchema: z.ZodType<Prisma.UserUncheckedCreateWithoutEventActionsInput> = z.object({
  id: z.string().cuid().optional(),
  index: z.number().int().optional(),
  role: z.lazy(() => RoleSchema).optional(),
  workingHours: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  firstDayOfWeek: z.lazy(() => DayOfWeekSchema).optional(),
  showWeekends: z.boolean().optional(),
  webhookApiKey: z.string().optional().nullable(),
  specialityId: z.string().optional().nullable(),
  profileId: z.string(),
  tenantId: z.string(),
  deletedAt: z.coerce.date().optional().nullable(),
  activatedAt: z.coerce.date().optional().nullable(),
  lastLoginAt: z.coerce.date().optional().nullable(),
  bannedAt: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  invitation: z.lazy(() => InvitationUncheckedCreateNestedOneWithoutUserInputSchema).optional(),
  patients: z.lazy(() => PatientUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  events: z.lazy(() => EventUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  treatmentPlans: z.lazy(() => TreatmentPlanUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedCreateNestedManyWithoutInvitedByInputSchema).optional(),
  files: z.lazy(() => FileUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  tasks: z.lazy(() => TaskUncheckedCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const UserCreateOrConnectWithoutEventActionsInputSchema: z.ZodType<Prisma.UserCreateOrConnectWithoutEventActionsInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UserCreateWithoutEventActionsInputSchema),z.lazy(() => UserUncheckedCreateWithoutEventActionsInputSchema) ]),
}).strict();

export const EventCreateWithoutActionsInputSchema: z.ZodType<Prisma.EventCreateWithoutActionsInput> = z.object({
  id: z.string().cuid().optional(),
  index: z.number().int().optional(),
  title: z.string(),
  description: z.string().optional().nullable(),
  date: z.coerce.date(),
  start: z.coerce.date().optional().nullable(),
  end: z.coerce.date().optional().nullable(),
  allDay: z.boolean().optional(),
  type: z.lazy(() => EventTypeSchema).optional(),
  status: z.lazy(() => EventStatusSchema).optional(),
  initiator: z.lazy(() => EventInitiatorSchema).optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  visits: z.lazy(() => VisitCreateNestedManyWithoutEventInputSchema).optional(),
  quiz: z.lazy(() => QuizCreateNestedOneWithoutEventInputSchema).optional(),
  files: z.lazy(() => FileCreateNestedManyWithoutEventInputSchema).optional(),
  patient: z.lazy(() => PatientCreateNestedOneWithoutAppointmentsInputSchema).optional(),
  user: z.lazy(() => UserCreateNestedOneWithoutEventsInputSchema),
  tenant: z.lazy(() => TenantCreateNestedOneWithoutEventsInputSchema)
}).strict();

export const EventUncheckedCreateWithoutActionsInputSchema: z.ZodType<Prisma.EventUncheckedCreateWithoutActionsInput> = z.object({
  id: z.string().cuid().optional(),
  index: z.number().int().optional(),
  title: z.string(),
  description: z.string().optional().nullable(),
  date: z.coerce.date(),
  start: z.coerce.date().optional().nullable(),
  end: z.coerce.date().optional().nullable(),
  allDay: z.boolean().optional(),
  type: z.lazy(() => EventTypeSchema).optional(),
  status: z.lazy(() => EventStatusSchema).optional(),
  initiator: z.lazy(() => EventInitiatorSchema).optional(),
  patientId: z.string().optional().nullable(),
  userId: z.string(),
  tenantId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  visits: z.lazy(() => VisitUncheckedCreateNestedManyWithoutEventInputSchema).optional(),
  quiz: z.lazy(() => QuizUncheckedCreateNestedOneWithoutEventInputSchema).optional(),
  files: z.lazy(() => FileUncheckedCreateNestedManyWithoutEventInputSchema).optional()
}).strict();

export const EventCreateOrConnectWithoutActionsInputSchema: z.ZodType<Prisma.EventCreateOrConnectWithoutActionsInput> = z.object({
  where: z.lazy(() => EventWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => EventCreateWithoutActionsInputSchema),z.lazy(() => EventUncheckedCreateWithoutActionsInputSchema) ]),
}).strict();

export const UserUpsertWithoutEventActionsInputSchema: z.ZodType<Prisma.UserUpsertWithoutEventActionsInput> = z.object({
  update: z.union([ z.lazy(() => UserUpdateWithoutEventActionsInputSchema),z.lazy(() => UserUncheckedUpdateWithoutEventActionsInputSchema) ]),
  create: z.union([ z.lazy(() => UserCreateWithoutEventActionsInputSchema),z.lazy(() => UserUncheckedCreateWithoutEventActionsInputSchema) ]),
  where: z.lazy(() => UserWhereInputSchema).optional()
}).strict();

export const UserUpdateToOneWithWhereWithoutEventActionsInputSchema: z.ZodType<Prisma.UserUpdateToOneWithWhereWithoutEventActionsInput> = z.object({
  where: z.lazy(() => UserWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => UserUpdateWithoutEventActionsInputSchema),z.lazy(() => UserUncheckedUpdateWithoutEventActionsInputSchema) ]),
}).strict();

export const UserUpdateWithoutEventActionsInputSchema: z.ZodType<Prisma.UserUpdateWithoutEventActionsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  index: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.lazy(() => RoleSchema),z.lazy(() => EnumRoleFieldUpdateOperationsInputSchema) ]).optional(),
  workingHours: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  firstDayOfWeek: z.union([ z.lazy(() => DayOfWeekSchema),z.lazy(() => EnumDayOfWeekFieldUpdateOperationsInputSchema) ]).optional(),
  showWeekends: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  webhookApiKey: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  activatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastLoginAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bannedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  speciality: z.lazy(() => SpecialityUpdateOneWithoutUsersNestedInputSchema).optional(),
  profile: z.lazy(() => ProfileUpdateOneRequiredWithoutUsersNestedInputSchema).optional(),
  tenant: z.lazy(() => TenantUpdateOneRequiredWithoutUsersNestedInputSchema).optional(),
  invitation: z.lazy(() => InvitationUpdateOneWithoutUserNestedInputSchema).optional(),
  patients: z.lazy(() => PatientUpdateManyWithoutUserNestedInputSchema).optional(),
  events: z.lazy(() => EventUpdateManyWithoutUserNestedInputSchema).optional(),
  treatmentPlans: z.lazy(() => TreatmentPlanUpdateManyWithoutUserNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUpdateManyWithoutInvitedByNestedInputSchema).optional(),
  files: z.lazy(() => FileUpdateManyWithoutUserNestedInputSchema).optional(),
  tasks: z.lazy(() => TaskUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const UserUncheckedUpdateWithoutEventActionsInputSchema: z.ZodType<Prisma.UserUncheckedUpdateWithoutEventActionsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  index: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.lazy(() => RoleSchema),z.lazy(() => EnumRoleFieldUpdateOperationsInputSchema) ]).optional(),
  workingHours: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  firstDayOfWeek: z.union([ z.lazy(() => DayOfWeekSchema),z.lazy(() => EnumDayOfWeekFieldUpdateOperationsInputSchema) ]).optional(),
  showWeekends: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  webhookApiKey: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  specialityId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  profileId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  tenantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  activatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastLoginAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bannedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  invitation: z.lazy(() => InvitationUncheckedUpdateOneWithoutUserNestedInputSchema).optional(),
  patients: z.lazy(() => PatientUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  events: z.lazy(() => EventUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  treatmentPlans: z.lazy(() => TreatmentPlanUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedUpdateManyWithoutInvitedByNestedInputSchema).optional(),
  files: z.lazy(() => FileUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  tasks: z.lazy(() => TaskUncheckedUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const EventUpsertWithoutActionsInputSchema: z.ZodType<Prisma.EventUpsertWithoutActionsInput> = z.object({
  update: z.union([ z.lazy(() => EventUpdateWithoutActionsInputSchema),z.lazy(() => EventUncheckedUpdateWithoutActionsInputSchema) ]),
  create: z.union([ z.lazy(() => EventCreateWithoutActionsInputSchema),z.lazy(() => EventUncheckedCreateWithoutActionsInputSchema) ]),
  where: z.lazy(() => EventWhereInputSchema).optional()
}).strict();

export const EventUpdateToOneWithWhereWithoutActionsInputSchema: z.ZodType<Prisma.EventUpdateToOneWithWhereWithoutActionsInput> = z.object({
  where: z.lazy(() => EventWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => EventUpdateWithoutActionsInputSchema),z.lazy(() => EventUncheckedUpdateWithoutActionsInputSchema) ]),
}).strict();

export const EventUpdateWithoutActionsInputSchema: z.ZodType<Prisma.EventUpdateWithoutActionsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  title: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  start: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  end: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  allDay: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => EventTypeSchema),z.lazy(() => EnumEventTypeFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => EventStatusSchema),z.lazy(() => EnumEventStatusFieldUpdateOperationsInputSchema) ]).optional(),
  initiator: z.union([ z.lazy(() => EventInitiatorSchema),z.lazy(() => EnumEventInitiatorFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  visits: z.lazy(() => VisitUpdateManyWithoutEventNestedInputSchema).optional(),
  quiz: z.lazy(() => QuizUpdateOneWithoutEventNestedInputSchema).optional(),
  files: z.lazy(() => FileUpdateManyWithoutEventNestedInputSchema).optional(),
  patient: z.lazy(() => PatientUpdateOneWithoutAppointmentsNestedInputSchema).optional(),
  user: z.lazy(() => UserUpdateOneRequiredWithoutEventsNestedInputSchema).optional(),
  tenant: z.lazy(() => TenantUpdateOneRequiredWithoutEventsNestedInputSchema).optional()
}).strict();

export const EventUncheckedUpdateWithoutActionsInputSchema: z.ZodType<Prisma.EventUncheckedUpdateWithoutActionsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  index: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  title: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  start: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  end: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  allDay: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => EventTypeSchema),z.lazy(() => EnumEventTypeFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => EventStatusSchema),z.lazy(() => EnumEventStatusFieldUpdateOperationsInputSchema) ]).optional(),
  initiator: z.union([ z.lazy(() => EventInitiatorSchema),z.lazy(() => EnumEventInitiatorFieldUpdateOperationsInputSchema) ]).optional(),
  patientId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  tenantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  visits: z.lazy(() => VisitUncheckedUpdateManyWithoutEventNestedInputSchema).optional(),
  quiz: z.lazy(() => QuizUncheckedUpdateOneWithoutEventNestedInputSchema).optional(),
  files: z.lazy(() => FileUncheckedUpdateManyWithoutEventNestedInputSchema).optional()
}).strict();

export const ServiceMaterialCreateWithoutMaterialInputSchema: z.ZodType<Prisma.ServiceMaterialCreateWithoutMaterialInput> = z.object({
  id: z.string().cuid().optional(),
  quantity: z.number().int(),
  unit_price: z.number().int(),
  service: z.lazy(() => ServiceCreateNestedOneWithoutMaterialsInputSchema)
}).strict();

export const ServiceMaterialUncheckedCreateWithoutMaterialInputSchema: z.ZodType<Prisma.ServiceMaterialUncheckedCreateWithoutMaterialInput> = z.object({
  id: z.string().cuid().optional(),
  quantity: z.number().int(),
  unit_price: z.number().int(),
  serviceId: z.string()
}).strict();

export const ServiceMaterialCreateOrConnectWithoutMaterialInputSchema: z.ZodType<Prisma.ServiceMaterialCreateOrConnectWithoutMaterialInput> = z.object({
  where: z.lazy(() => ServiceMaterialWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ServiceMaterialCreateWithoutMaterialInputSchema),z.lazy(() => ServiceMaterialUncheckedCreateWithoutMaterialInputSchema) ]),
}).strict();

export const ServiceMaterialCreateManyMaterialInputEnvelopeSchema: z.ZodType<Prisma.ServiceMaterialCreateManyMaterialInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => ServiceMaterialCreateManyMaterialInputSchema),z.lazy(() => ServiceMaterialCreateManyMaterialInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const TenantCreateWithoutMaterialsInputSchema: z.ZodType<Prisma.TenantCreateWithoutMaterialsInput> = z.object({
  id: z.string().cuid().optional(),
  email: z.string(),
  deletedAt: z.coerce.date().optional().nullable(),
  disabledAt: z.coerce.date().optional().nullable(),
  trialExpiresAt: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  users: z.lazy(() => UserCreateNestedManyWithoutTenantInputSchema).optional(),
  profile: z.lazy(() => TenantProfileCreateNestedOneWithoutTenantInputSchema),
  specialities: z.lazy(() => SpecialityCreateNestedManyWithoutTenantInputSchema).optional(),
  preferedByProfiles: z.lazy(() => ProfileCreateNestedManyWithoutPreferredTenantInputSchema).optional(),
  patients: z.lazy(() => PatientCreateNestedManyWithoutTenantInputSchema).optional(),
  services: z.lazy(() => ServiceCreateNestedManyWithoutTenantInputSchema).optional(),
  events: z.lazy(() => EventCreateNestedManyWithoutTenantInputSchema).optional(),
  files: z.lazy(() => FileCreateNestedManyWithoutTenantInputSchema).optional()
}).strict();

export const TenantUncheckedCreateWithoutMaterialsInputSchema: z.ZodType<Prisma.TenantUncheckedCreateWithoutMaterialsInput> = z.object({
  id: z.string().cuid().optional(),
  email: z.string(),
  profileId: z.string(),
  deletedAt: z.coerce.date().optional().nullable(),
  disabledAt: z.coerce.date().optional().nullable(),
  trialExpiresAt: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  users: z.lazy(() => UserUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  specialities: z.lazy(() => SpecialityUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  preferedByProfiles: z.lazy(() => ProfileUncheckedCreateNestedManyWithoutPreferredTenantInputSchema).optional(),
  patients: z.lazy(() => PatientUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  services: z.lazy(() => ServiceUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  events: z.lazy(() => EventUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  files: z.lazy(() => FileUncheckedCreateNestedManyWithoutTenantInputSchema).optional()
}).strict();

export const TenantCreateOrConnectWithoutMaterialsInputSchema: z.ZodType<Prisma.TenantCreateOrConnectWithoutMaterialsInput> = z.object({
  where: z.lazy(() => TenantWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => TenantCreateWithoutMaterialsInputSchema),z.lazy(() => TenantUncheckedCreateWithoutMaterialsInputSchema) ]),
}).strict();

export const ServiceMaterialUpsertWithWhereUniqueWithoutMaterialInputSchema: z.ZodType<Prisma.ServiceMaterialUpsertWithWhereUniqueWithoutMaterialInput> = z.object({
  where: z.lazy(() => ServiceMaterialWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => ServiceMaterialUpdateWithoutMaterialInputSchema),z.lazy(() => ServiceMaterialUncheckedUpdateWithoutMaterialInputSchema) ]),
  create: z.union([ z.lazy(() => ServiceMaterialCreateWithoutMaterialInputSchema),z.lazy(() => ServiceMaterialUncheckedCreateWithoutMaterialInputSchema) ]),
}).strict();

export const ServiceMaterialUpdateWithWhereUniqueWithoutMaterialInputSchema: z.ZodType<Prisma.ServiceMaterialUpdateWithWhereUniqueWithoutMaterialInput> = z.object({
  where: z.lazy(() => ServiceMaterialWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => ServiceMaterialUpdateWithoutMaterialInputSchema),z.lazy(() => ServiceMaterialUncheckedUpdateWithoutMaterialInputSchema) ]),
}).strict();

export const ServiceMaterialUpdateManyWithWhereWithoutMaterialInputSchema: z.ZodType<Prisma.ServiceMaterialUpdateManyWithWhereWithoutMaterialInput> = z.object({
  where: z.lazy(() => ServiceMaterialScalarWhereInputSchema),
  data: z.union([ z.lazy(() => ServiceMaterialUpdateManyMutationInputSchema),z.lazy(() => ServiceMaterialUncheckedUpdateManyWithoutMaterialInputSchema) ]),
}).strict();

export const ServiceMaterialScalarWhereInputSchema: z.ZodType<Prisma.ServiceMaterialScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => ServiceMaterialScalarWhereInputSchema),z.lazy(() => ServiceMaterialScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ServiceMaterialScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ServiceMaterialScalarWhereInputSchema),z.lazy(() => ServiceMaterialScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  quantity: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  unit_price: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  serviceId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  materialId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
}).strict();

export const TenantUpsertWithoutMaterialsInputSchema: z.ZodType<Prisma.TenantUpsertWithoutMaterialsInput> = z.object({
  update: z.union([ z.lazy(() => TenantUpdateWithoutMaterialsInputSchema),z.lazy(() => TenantUncheckedUpdateWithoutMaterialsInputSchema) ]),
  create: z.union([ z.lazy(() => TenantCreateWithoutMaterialsInputSchema),z.lazy(() => TenantUncheckedCreateWithoutMaterialsInputSchema) ]),
  where: z.lazy(() => TenantWhereInputSchema).optional()
}).strict();

export const TenantUpdateToOneWithWhereWithoutMaterialsInputSchema: z.ZodType<Prisma.TenantUpdateToOneWithWhereWithoutMaterialsInput> = z.object({
  where: z.lazy(() => TenantWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => TenantUpdateWithoutMaterialsInputSchema),z.lazy(() => TenantUncheckedUpdateWithoutMaterialsInputSchema) ]),
}).strict();

export const TenantUpdateWithoutMaterialsInputSchema: z.ZodType<Prisma.TenantUpdateWithoutMaterialsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  disabledAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  trialExpiresAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  users: z.lazy(() => UserUpdateManyWithoutTenantNestedInputSchema).optional(),
  profile: z.lazy(() => TenantProfileUpdateOneRequiredWithoutTenantNestedInputSchema).optional(),
  specialities: z.lazy(() => SpecialityUpdateManyWithoutTenantNestedInputSchema).optional(),
  preferedByProfiles: z.lazy(() => ProfileUpdateManyWithoutPreferredTenantNestedInputSchema).optional(),
  patients: z.lazy(() => PatientUpdateManyWithoutTenantNestedInputSchema).optional(),
  services: z.lazy(() => ServiceUpdateManyWithoutTenantNestedInputSchema).optional(),
  events: z.lazy(() => EventUpdateManyWithoutTenantNestedInputSchema).optional(),
  files: z.lazy(() => FileUpdateManyWithoutTenantNestedInputSchema).optional()
}).strict();

export const TenantUncheckedUpdateWithoutMaterialsInputSchema: z.ZodType<Prisma.TenantUncheckedUpdateWithoutMaterialsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  profileId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  disabledAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  trialExpiresAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  users: z.lazy(() => UserUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  specialities: z.lazy(() => SpecialityUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  preferedByProfiles: z.lazy(() => ProfileUncheckedUpdateManyWithoutPreferredTenantNestedInputSchema).optional(),
  patients: z.lazy(() => PatientUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  services: z.lazy(() => ServiceUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  events: z.lazy(() => EventUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  files: z.lazy(() => FileUncheckedUpdateManyWithoutTenantNestedInputSchema).optional()
}).strict();

export const TenantCreateWithoutServicesInputSchema: z.ZodType<Prisma.TenantCreateWithoutServicesInput> = z.object({
  id: z.string().cuid().optional(),
  email: z.string(),
  deletedAt: z.coerce.date().optional().nullable(),
  disabledAt: z.coerce.date().optional().nullable(),
  trialExpiresAt: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  users: z.lazy(() => UserCreateNestedManyWithoutTenantInputSchema).optional(),
  profile: z.lazy(() => TenantProfileCreateNestedOneWithoutTenantInputSchema),
  specialities: z.lazy(() => SpecialityCreateNestedManyWithoutTenantInputSchema).optional(),
  preferedByProfiles: z.lazy(() => ProfileCreateNestedManyWithoutPreferredTenantInputSchema).optional(),
  patients: z.lazy(() => PatientCreateNestedManyWithoutTenantInputSchema).optional(),
  materials: z.lazy(() => MaterialCreateNestedManyWithoutTenantInputSchema).optional(),
  events: z.lazy(() => EventCreateNestedManyWithoutTenantInputSchema).optional(),
  files: z.lazy(() => FileCreateNestedManyWithoutTenantInputSchema).optional()
}).strict();

export const TenantUncheckedCreateWithoutServicesInputSchema: z.ZodType<Prisma.TenantUncheckedCreateWithoutServicesInput> = z.object({
  id: z.string().cuid().optional(),
  email: z.string(),
  profileId: z.string(),
  deletedAt: z.coerce.date().optional().nullable(),
  disabledAt: z.coerce.date().optional().nullable(),
  trialExpiresAt: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  users: z.lazy(() => UserUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  specialities: z.lazy(() => SpecialityUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  preferedByProfiles: z.lazy(() => ProfileUncheckedCreateNestedManyWithoutPreferredTenantInputSchema).optional(),
  patients: z.lazy(() => PatientUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  materials: z.lazy(() => MaterialUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  events: z.lazy(() => EventUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  files: z.lazy(() => FileUncheckedCreateNestedManyWithoutTenantInputSchema).optional()
}).strict();

export const TenantCreateOrConnectWithoutServicesInputSchema: z.ZodType<Prisma.TenantCreateOrConnectWithoutServicesInput> = z.object({
  where: z.lazy(() => TenantWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => TenantCreateWithoutServicesInputSchema),z.lazy(() => TenantUncheckedCreateWithoutServicesInputSchema) ]),
}).strict();

export const ServiceCategoryCreateWithoutServicesInputSchema: z.ZodType<Prisma.ServiceCategoryCreateWithoutServicesInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const ServiceCategoryUncheckedCreateWithoutServicesInputSchema: z.ZodType<Prisma.ServiceCategoryUncheckedCreateWithoutServicesInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const ServiceCategoryCreateOrConnectWithoutServicesInputSchema: z.ZodType<Prisma.ServiceCategoryCreateOrConnectWithoutServicesInput> = z.object({
  where: z.lazy(() => ServiceCategoryWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ServiceCategoryCreateWithoutServicesInputSchema),z.lazy(() => ServiceCategoryUncheckedCreateWithoutServicesInputSchema) ]),
}).strict();

export const ServiceMaterialCreateWithoutServiceInputSchema: z.ZodType<Prisma.ServiceMaterialCreateWithoutServiceInput> = z.object({
  id: z.string().cuid().optional(),
  quantity: z.number().int(),
  unit_price: z.number().int(),
  material: z.lazy(() => MaterialCreateNestedOneWithoutServicesInputSchema)
}).strict();

export const ServiceMaterialUncheckedCreateWithoutServiceInputSchema: z.ZodType<Prisma.ServiceMaterialUncheckedCreateWithoutServiceInput> = z.object({
  id: z.string().cuid().optional(),
  quantity: z.number().int(),
  unit_price: z.number().int(),
  materialId: z.string()
}).strict();

export const ServiceMaterialCreateOrConnectWithoutServiceInputSchema: z.ZodType<Prisma.ServiceMaterialCreateOrConnectWithoutServiceInput> = z.object({
  where: z.lazy(() => ServiceMaterialWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ServiceMaterialCreateWithoutServiceInputSchema),z.lazy(() => ServiceMaterialUncheckedCreateWithoutServiceInputSchema) ]),
}).strict();

export const ServiceMaterialCreateManyServiceInputEnvelopeSchema: z.ZodType<Prisma.ServiceMaterialCreateManyServiceInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => ServiceMaterialCreateManyServiceInputSchema),z.lazy(() => ServiceMaterialCreateManyServiceInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const VisitCreateWithoutServiceInputSchema: z.ZodType<Prisma.VisitCreateWithoutServiceInput> = z.object({
  id: z.string().cuid().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  treatment: z.lazy(() => TreatmentCreateNestedOneWithoutVisitsInputSchema),
  event: z.lazy(() => EventCreateNestedOneWithoutVisitsInputSchema).optional()
}).strict();

export const VisitUncheckedCreateWithoutServiceInputSchema: z.ZodType<Prisma.VisitUncheckedCreateWithoutServiceInput> = z.object({
  id: z.string().cuid().optional(),
  treatmentId: z.string(),
  eventId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const VisitCreateOrConnectWithoutServiceInputSchema: z.ZodType<Prisma.VisitCreateOrConnectWithoutServiceInput> = z.object({
  where: z.lazy(() => VisitWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => VisitCreateWithoutServiceInputSchema),z.lazy(() => VisitUncheckedCreateWithoutServiceInputSchema) ]),
}).strict();

export const VisitCreateManyServiceInputEnvelopeSchema: z.ZodType<Prisma.VisitCreateManyServiceInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => VisitCreateManyServiceInputSchema),z.lazy(() => VisitCreateManyServiceInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const RelatedServiceCreateWithoutParentInputSchema: z.ZodType<Prisma.RelatedServiceCreateWithoutParentInput> = z.object({
  id: z.string().cuid().optional(),
  order: z.number().int().optional(),
  quantity: z.number().int().optional(),
  unit_price: z.number().int(),
  service: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
}).strict();

export const RelatedServiceUncheckedCreateWithoutParentInputSchema: z.ZodType<Prisma.RelatedServiceUncheckedCreateWithoutParentInput> = z.object({
  id: z.string().cuid().optional(),
  order: z.number().int().optional(),
  quantity: z.number().int().optional(),
  unit_price: z.number().int(),
  service: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
}).strict();

export const RelatedServiceCreateOrConnectWithoutParentInputSchema: z.ZodType<Prisma.RelatedServiceCreateOrConnectWithoutParentInput> = z.object({
  where: z.lazy(() => RelatedServiceWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => RelatedServiceCreateWithoutParentInputSchema),z.lazy(() => RelatedServiceUncheckedCreateWithoutParentInputSchema) ]),
}).strict();

export const RelatedServiceCreateManyParentInputEnvelopeSchema: z.ZodType<Prisma.RelatedServiceCreateManyParentInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => RelatedServiceCreateManyParentInputSchema),z.lazy(() => RelatedServiceCreateManyParentInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const TenantUpsertWithoutServicesInputSchema: z.ZodType<Prisma.TenantUpsertWithoutServicesInput> = z.object({
  update: z.union([ z.lazy(() => TenantUpdateWithoutServicesInputSchema),z.lazy(() => TenantUncheckedUpdateWithoutServicesInputSchema) ]),
  create: z.union([ z.lazy(() => TenantCreateWithoutServicesInputSchema),z.lazy(() => TenantUncheckedCreateWithoutServicesInputSchema) ]),
  where: z.lazy(() => TenantWhereInputSchema).optional()
}).strict();

export const TenantUpdateToOneWithWhereWithoutServicesInputSchema: z.ZodType<Prisma.TenantUpdateToOneWithWhereWithoutServicesInput> = z.object({
  where: z.lazy(() => TenantWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => TenantUpdateWithoutServicesInputSchema),z.lazy(() => TenantUncheckedUpdateWithoutServicesInputSchema) ]),
}).strict();

export const TenantUpdateWithoutServicesInputSchema: z.ZodType<Prisma.TenantUpdateWithoutServicesInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  disabledAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  trialExpiresAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  users: z.lazy(() => UserUpdateManyWithoutTenantNestedInputSchema).optional(),
  profile: z.lazy(() => TenantProfileUpdateOneRequiredWithoutTenantNestedInputSchema).optional(),
  specialities: z.lazy(() => SpecialityUpdateManyWithoutTenantNestedInputSchema).optional(),
  preferedByProfiles: z.lazy(() => ProfileUpdateManyWithoutPreferredTenantNestedInputSchema).optional(),
  patients: z.lazy(() => PatientUpdateManyWithoutTenantNestedInputSchema).optional(),
  materials: z.lazy(() => MaterialUpdateManyWithoutTenantNestedInputSchema).optional(),
  events: z.lazy(() => EventUpdateManyWithoutTenantNestedInputSchema).optional(),
  files: z.lazy(() => FileUpdateManyWithoutTenantNestedInputSchema).optional()
}).strict();

export const TenantUncheckedUpdateWithoutServicesInputSchema: z.ZodType<Prisma.TenantUncheckedUpdateWithoutServicesInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  profileId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  disabledAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  trialExpiresAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  users: z.lazy(() => UserUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  specialities: z.lazy(() => SpecialityUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  preferedByProfiles: z.lazy(() => ProfileUncheckedUpdateManyWithoutPreferredTenantNestedInputSchema).optional(),
  patients: z.lazy(() => PatientUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  materials: z.lazy(() => MaterialUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  events: z.lazy(() => EventUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  files: z.lazy(() => FileUncheckedUpdateManyWithoutTenantNestedInputSchema).optional()
}).strict();

export const ServiceCategoryUpsertWithoutServicesInputSchema: z.ZodType<Prisma.ServiceCategoryUpsertWithoutServicesInput> = z.object({
  update: z.union([ z.lazy(() => ServiceCategoryUpdateWithoutServicesInputSchema),z.lazy(() => ServiceCategoryUncheckedUpdateWithoutServicesInputSchema) ]),
  create: z.union([ z.lazy(() => ServiceCategoryCreateWithoutServicesInputSchema),z.lazy(() => ServiceCategoryUncheckedCreateWithoutServicesInputSchema) ]),
  where: z.lazy(() => ServiceCategoryWhereInputSchema).optional()
}).strict();

export const ServiceCategoryUpdateToOneWithWhereWithoutServicesInputSchema: z.ZodType<Prisma.ServiceCategoryUpdateToOneWithWhereWithoutServicesInput> = z.object({
  where: z.lazy(() => ServiceCategoryWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => ServiceCategoryUpdateWithoutServicesInputSchema),z.lazy(() => ServiceCategoryUncheckedUpdateWithoutServicesInputSchema) ]),
}).strict();

export const ServiceCategoryUpdateWithoutServicesInputSchema: z.ZodType<Prisma.ServiceCategoryUpdateWithoutServicesInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ServiceCategoryUncheckedUpdateWithoutServicesInputSchema: z.ZodType<Prisma.ServiceCategoryUncheckedUpdateWithoutServicesInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ServiceMaterialUpsertWithWhereUniqueWithoutServiceInputSchema: z.ZodType<Prisma.ServiceMaterialUpsertWithWhereUniqueWithoutServiceInput> = z.object({
  where: z.lazy(() => ServiceMaterialWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => ServiceMaterialUpdateWithoutServiceInputSchema),z.lazy(() => ServiceMaterialUncheckedUpdateWithoutServiceInputSchema) ]),
  create: z.union([ z.lazy(() => ServiceMaterialCreateWithoutServiceInputSchema),z.lazy(() => ServiceMaterialUncheckedCreateWithoutServiceInputSchema) ]),
}).strict();

export const ServiceMaterialUpdateWithWhereUniqueWithoutServiceInputSchema: z.ZodType<Prisma.ServiceMaterialUpdateWithWhereUniqueWithoutServiceInput> = z.object({
  where: z.lazy(() => ServiceMaterialWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => ServiceMaterialUpdateWithoutServiceInputSchema),z.lazy(() => ServiceMaterialUncheckedUpdateWithoutServiceInputSchema) ]),
}).strict();

export const ServiceMaterialUpdateManyWithWhereWithoutServiceInputSchema: z.ZodType<Prisma.ServiceMaterialUpdateManyWithWhereWithoutServiceInput> = z.object({
  where: z.lazy(() => ServiceMaterialScalarWhereInputSchema),
  data: z.union([ z.lazy(() => ServiceMaterialUpdateManyMutationInputSchema),z.lazy(() => ServiceMaterialUncheckedUpdateManyWithoutServiceInputSchema) ]),
}).strict();

export const VisitUpsertWithWhereUniqueWithoutServiceInputSchema: z.ZodType<Prisma.VisitUpsertWithWhereUniqueWithoutServiceInput> = z.object({
  where: z.lazy(() => VisitWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => VisitUpdateWithoutServiceInputSchema),z.lazy(() => VisitUncheckedUpdateWithoutServiceInputSchema) ]),
  create: z.union([ z.lazy(() => VisitCreateWithoutServiceInputSchema),z.lazy(() => VisitUncheckedCreateWithoutServiceInputSchema) ]),
}).strict();

export const VisitUpdateWithWhereUniqueWithoutServiceInputSchema: z.ZodType<Prisma.VisitUpdateWithWhereUniqueWithoutServiceInput> = z.object({
  where: z.lazy(() => VisitWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => VisitUpdateWithoutServiceInputSchema),z.lazy(() => VisitUncheckedUpdateWithoutServiceInputSchema) ]),
}).strict();

export const VisitUpdateManyWithWhereWithoutServiceInputSchema: z.ZodType<Prisma.VisitUpdateManyWithWhereWithoutServiceInput> = z.object({
  where: z.lazy(() => VisitScalarWhereInputSchema),
  data: z.union([ z.lazy(() => VisitUpdateManyMutationInputSchema),z.lazy(() => VisitUncheckedUpdateManyWithoutServiceInputSchema) ]),
}).strict();

export const RelatedServiceUpsertWithWhereUniqueWithoutParentInputSchema: z.ZodType<Prisma.RelatedServiceUpsertWithWhereUniqueWithoutParentInput> = z.object({
  where: z.lazy(() => RelatedServiceWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => RelatedServiceUpdateWithoutParentInputSchema),z.lazy(() => RelatedServiceUncheckedUpdateWithoutParentInputSchema) ]),
  create: z.union([ z.lazy(() => RelatedServiceCreateWithoutParentInputSchema),z.lazy(() => RelatedServiceUncheckedCreateWithoutParentInputSchema) ]),
}).strict();

export const RelatedServiceUpdateWithWhereUniqueWithoutParentInputSchema: z.ZodType<Prisma.RelatedServiceUpdateWithWhereUniqueWithoutParentInput> = z.object({
  where: z.lazy(() => RelatedServiceWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => RelatedServiceUpdateWithoutParentInputSchema),z.lazy(() => RelatedServiceUncheckedUpdateWithoutParentInputSchema) ]),
}).strict();

export const RelatedServiceUpdateManyWithWhereWithoutParentInputSchema: z.ZodType<Prisma.RelatedServiceUpdateManyWithWhereWithoutParentInput> = z.object({
  where: z.lazy(() => RelatedServiceScalarWhereInputSchema),
  data: z.union([ z.lazy(() => RelatedServiceUpdateManyMutationInputSchema),z.lazy(() => RelatedServiceUncheckedUpdateManyWithoutParentInputSchema) ]),
}).strict();

export const RelatedServiceScalarWhereInputSchema: z.ZodType<Prisma.RelatedServiceScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => RelatedServiceScalarWhereInputSchema),z.lazy(() => RelatedServiceScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => RelatedServiceScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => RelatedServiceScalarWhereInputSchema),z.lazy(() => RelatedServiceScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  order: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  quantity: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  unit_price: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  service: z.lazy(() => JsonFilterSchema).optional(),
  parentId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
}).strict();

export const ServiceCreateWithoutChildrenInputSchema: z.ZodType<Prisma.ServiceCreateWithoutChildrenInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  unit_price: z.number().int(),
  unit: z.lazy(() => ServiceUnitSchema),
  duration: z.number().int().optional(),
  image: z.string().optional().nullable(),
  tags: z.union([ z.lazy(() => ServiceCreatetagsInputSchema),z.string().array() ]).optional(),
  isActive: z.boolean().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  tenant: z.lazy(() => TenantCreateNestedOneWithoutServicesInputSchema),
  category: z.lazy(() => ServiceCategoryCreateNestedOneWithoutServicesInputSchema).optional(),
  materials: z.lazy(() => ServiceMaterialCreateNestedManyWithoutServiceInputSchema).optional(),
  visits: z.lazy(() => VisitCreateNestedManyWithoutServiceInputSchema).optional()
}).strict();

export const ServiceUncheckedCreateWithoutChildrenInputSchema: z.ZodType<Prisma.ServiceUncheckedCreateWithoutChildrenInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  unit_price: z.number().int(),
  unit: z.lazy(() => ServiceUnitSchema),
  duration: z.number().int().optional(),
  image: z.string().optional().nullable(),
  tags: z.union([ z.lazy(() => ServiceCreatetagsInputSchema),z.string().array() ]).optional(),
  isActive: z.boolean().optional(),
  tenantId: z.string(),
  categoryId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  materials: z.lazy(() => ServiceMaterialUncheckedCreateNestedManyWithoutServiceInputSchema).optional(),
  visits: z.lazy(() => VisitUncheckedCreateNestedManyWithoutServiceInputSchema).optional()
}).strict();

export const ServiceCreateOrConnectWithoutChildrenInputSchema: z.ZodType<Prisma.ServiceCreateOrConnectWithoutChildrenInput> = z.object({
  where: z.lazy(() => ServiceWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ServiceCreateWithoutChildrenInputSchema),z.lazy(() => ServiceUncheckedCreateWithoutChildrenInputSchema) ]),
}).strict();

export const ServiceUpsertWithoutChildrenInputSchema: z.ZodType<Prisma.ServiceUpsertWithoutChildrenInput> = z.object({
  update: z.union([ z.lazy(() => ServiceUpdateWithoutChildrenInputSchema),z.lazy(() => ServiceUncheckedUpdateWithoutChildrenInputSchema) ]),
  create: z.union([ z.lazy(() => ServiceCreateWithoutChildrenInputSchema),z.lazy(() => ServiceUncheckedCreateWithoutChildrenInputSchema) ]),
  where: z.lazy(() => ServiceWhereInputSchema).optional()
}).strict();

export const ServiceUpdateToOneWithWhereWithoutChildrenInputSchema: z.ZodType<Prisma.ServiceUpdateToOneWithWhereWithoutChildrenInput> = z.object({
  where: z.lazy(() => ServiceWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => ServiceUpdateWithoutChildrenInputSchema),z.lazy(() => ServiceUncheckedUpdateWithoutChildrenInputSchema) ]),
}).strict();

export const ServiceUpdateWithoutChildrenInputSchema: z.ZodType<Prisma.ServiceUpdateWithoutChildrenInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  unit_price: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  unit: z.union([ z.lazy(() => ServiceUnitSchema),z.lazy(() => EnumServiceUnitFieldUpdateOperationsInputSchema) ]).optional(),
  duration: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  image: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tags: z.union([ z.lazy(() => ServiceUpdatetagsInputSchema),z.string().array() ]).optional(),
  isActive: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  tenant: z.lazy(() => TenantUpdateOneRequiredWithoutServicesNestedInputSchema).optional(),
  category: z.lazy(() => ServiceCategoryUpdateOneWithoutServicesNestedInputSchema).optional(),
  materials: z.lazy(() => ServiceMaterialUpdateManyWithoutServiceNestedInputSchema).optional(),
  visits: z.lazy(() => VisitUpdateManyWithoutServiceNestedInputSchema).optional()
}).strict();

export const ServiceUncheckedUpdateWithoutChildrenInputSchema: z.ZodType<Prisma.ServiceUncheckedUpdateWithoutChildrenInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  unit_price: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  unit: z.union([ z.lazy(() => ServiceUnitSchema),z.lazy(() => EnumServiceUnitFieldUpdateOperationsInputSchema) ]).optional(),
  duration: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  image: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tags: z.union([ z.lazy(() => ServiceUpdatetagsInputSchema),z.string().array() ]).optional(),
  isActive: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  tenantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  categoryId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  materials: z.lazy(() => ServiceMaterialUncheckedUpdateManyWithoutServiceNestedInputSchema).optional(),
  visits: z.lazy(() => VisitUncheckedUpdateManyWithoutServiceNestedInputSchema).optional()
}).strict();

export const ServiceCreateWithoutMaterialsInputSchema: z.ZodType<Prisma.ServiceCreateWithoutMaterialsInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  unit_price: z.number().int(),
  unit: z.lazy(() => ServiceUnitSchema),
  duration: z.number().int().optional(),
  image: z.string().optional().nullable(),
  tags: z.union([ z.lazy(() => ServiceCreatetagsInputSchema),z.string().array() ]).optional(),
  isActive: z.boolean().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  tenant: z.lazy(() => TenantCreateNestedOneWithoutServicesInputSchema),
  category: z.lazy(() => ServiceCategoryCreateNestedOneWithoutServicesInputSchema).optional(),
  visits: z.lazy(() => VisitCreateNestedManyWithoutServiceInputSchema).optional(),
  children: z.lazy(() => RelatedServiceCreateNestedManyWithoutParentInputSchema).optional()
}).strict();

export const ServiceUncheckedCreateWithoutMaterialsInputSchema: z.ZodType<Prisma.ServiceUncheckedCreateWithoutMaterialsInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  unit_price: z.number().int(),
  unit: z.lazy(() => ServiceUnitSchema),
  duration: z.number().int().optional(),
  image: z.string().optional().nullable(),
  tags: z.union([ z.lazy(() => ServiceCreatetagsInputSchema),z.string().array() ]).optional(),
  isActive: z.boolean().optional(),
  tenantId: z.string(),
  categoryId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  visits: z.lazy(() => VisitUncheckedCreateNestedManyWithoutServiceInputSchema).optional(),
  children: z.lazy(() => RelatedServiceUncheckedCreateNestedManyWithoutParentInputSchema).optional()
}).strict();

export const ServiceCreateOrConnectWithoutMaterialsInputSchema: z.ZodType<Prisma.ServiceCreateOrConnectWithoutMaterialsInput> = z.object({
  where: z.lazy(() => ServiceWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ServiceCreateWithoutMaterialsInputSchema),z.lazy(() => ServiceUncheckedCreateWithoutMaterialsInputSchema) ]),
}).strict();

export const MaterialCreateWithoutServicesInputSchema: z.ZodType<Prisma.MaterialCreateWithoutServicesInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  unit_price: z.number().int(),
  unit: z.string().optional(),
  image: z.string().optional().nullable(),
  tags: z.union([ z.lazy(() => MaterialCreatetagsInputSchema),z.string().array() ]).optional(),
  isActive: z.boolean().optional(),
  keepInventory: z.boolean().optional(),
  stock: z.number().int().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  tenant: z.lazy(() => TenantCreateNestedOneWithoutMaterialsInputSchema)
}).strict();

export const MaterialUncheckedCreateWithoutServicesInputSchema: z.ZodType<Prisma.MaterialUncheckedCreateWithoutServicesInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  unit_price: z.number().int(),
  unit: z.string().optional(),
  image: z.string().optional().nullable(),
  tags: z.union([ z.lazy(() => MaterialCreatetagsInputSchema),z.string().array() ]).optional(),
  isActive: z.boolean().optional(),
  keepInventory: z.boolean().optional(),
  stock: z.number().int().optional(),
  tenantId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const MaterialCreateOrConnectWithoutServicesInputSchema: z.ZodType<Prisma.MaterialCreateOrConnectWithoutServicesInput> = z.object({
  where: z.lazy(() => MaterialWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => MaterialCreateWithoutServicesInputSchema),z.lazy(() => MaterialUncheckedCreateWithoutServicesInputSchema) ]),
}).strict();

export const ServiceUpsertWithoutMaterialsInputSchema: z.ZodType<Prisma.ServiceUpsertWithoutMaterialsInput> = z.object({
  update: z.union([ z.lazy(() => ServiceUpdateWithoutMaterialsInputSchema),z.lazy(() => ServiceUncheckedUpdateWithoutMaterialsInputSchema) ]),
  create: z.union([ z.lazy(() => ServiceCreateWithoutMaterialsInputSchema),z.lazy(() => ServiceUncheckedCreateWithoutMaterialsInputSchema) ]),
  where: z.lazy(() => ServiceWhereInputSchema).optional()
}).strict();

export const ServiceUpdateToOneWithWhereWithoutMaterialsInputSchema: z.ZodType<Prisma.ServiceUpdateToOneWithWhereWithoutMaterialsInput> = z.object({
  where: z.lazy(() => ServiceWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => ServiceUpdateWithoutMaterialsInputSchema),z.lazy(() => ServiceUncheckedUpdateWithoutMaterialsInputSchema) ]),
}).strict();

export const ServiceUpdateWithoutMaterialsInputSchema: z.ZodType<Prisma.ServiceUpdateWithoutMaterialsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  unit_price: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  unit: z.union([ z.lazy(() => ServiceUnitSchema),z.lazy(() => EnumServiceUnitFieldUpdateOperationsInputSchema) ]).optional(),
  duration: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  image: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tags: z.union([ z.lazy(() => ServiceUpdatetagsInputSchema),z.string().array() ]).optional(),
  isActive: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  tenant: z.lazy(() => TenantUpdateOneRequiredWithoutServicesNestedInputSchema).optional(),
  category: z.lazy(() => ServiceCategoryUpdateOneWithoutServicesNestedInputSchema).optional(),
  visits: z.lazy(() => VisitUpdateManyWithoutServiceNestedInputSchema).optional(),
  children: z.lazy(() => RelatedServiceUpdateManyWithoutParentNestedInputSchema).optional()
}).strict();

export const ServiceUncheckedUpdateWithoutMaterialsInputSchema: z.ZodType<Prisma.ServiceUncheckedUpdateWithoutMaterialsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  unit_price: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  unit: z.union([ z.lazy(() => ServiceUnitSchema),z.lazy(() => EnumServiceUnitFieldUpdateOperationsInputSchema) ]).optional(),
  duration: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  image: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tags: z.union([ z.lazy(() => ServiceUpdatetagsInputSchema),z.string().array() ]).optional(),
  isActive: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  tenantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  categoryId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  visits: z.lazy(() => VisitUncheckedUpdateManyWithoutServiceNestedInputSchema).optional(),
  children: z.lazy(() => RelatedServiceUncheckedUpdateManyWithoutParentNestedInputSchema).optional()
}).strict();

export const MaterialUpsertWithoutServicesInputSchema: z.ZodType<Prisma.MaterialUpsertWithoutServicesInput> = z.object({
  update: z.union([ z.lazy(() => MaterialUpdateWithoutServicesInputSchema),z.lazy(() => MaterialUncheckedUpdateWithoutServicesInputSchema) ]),
  create: z.union([ z.lazy(() => MaterialCreateWithoutServicesInputSchema),z.lazy(() => MaterialUncheckedCreateWithoutServicesInputSchema) ]),
  where: z.lazy(() => MaterialWhereInputSchema).optional()
}).strict();

export const MaterialUpdateToOneWithWhereWithoutServicesInputSchema: z.ZodType<Prisma.MaterialUpdateToOneWithWhereWithoutServicesInput> = z.object({
  where: z.lazy(() => MaterialWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => MaterialUpdateWithoutServicesInputSchema),z.lazy(() => MaterialUncheckedUpdateWithoutServicesInputSchema) ]),
}).strict();

export const MaterialUpdateWithoutServicesInputSchema: z.ZodType<Prisma.MaterialUpdateWithoutServicesInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  unit_price: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  unit: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  image: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tags: z.union([ z.lazy(() => MaterialUpdatetagsInputSchema),z.string().array() ]).optional(),
  isActive: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  keepInventory: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  stock: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  tenant: z.lazy(() => TenantUpdateOneRequiredWithoutMaterialsNestedInputSchema).optional()
}).strict();

export const MaterialUncheckedUpdateWithoutServicesInputSchema: z.ZodType<Prisma.MaterialUncheckedUpdateWithoutServicesInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  unit_price: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  unit: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  image: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tags: z.union([ z.lazy(() => MaterialUpdatetagsInputSchema),z.string().array() ]).optional(),
  isActive: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  keepInventory: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  stock: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  tenantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ServiceCreateWithoutCategoryInputSchema: z.ZodType<Prisma.ServiceCreateWithoutCategoryInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  unit_price: z.number().int(),
  unit: z.lazy(() => ServiceUnitSchema),
  duration: z.number().int().optional(),
  image: z.string().optional().nullable(),
  tags: z.union([ z.lazy(() => ServiceCreatetagsInputSchema),z.string().array() ]).optional(),
  isActive: z.boolean().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  tenant: z.lazy(() => TenantCreateNestedOneWithoutServicesInputSchema),
  materials: z.lazy(() => ServiceMaterialCreateNestedManyWithoutServiceInputSchema).optional(),
  visits: z.lazy(() => VisitCreateNestedManyWithoutServiceInputSchema).optional(),
  children: z.lazy(() => RelatedServiceCreateNestedManyWithoutParentInputSchema).optional()
}).strict();

export const ServiceUncheckedCreateWithoutCategoryInputSchema: z.ZodType<Prisma.ServiceUncheckedCreateWithoutCategoryInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  unit_price: z.number().int(),
  unit: z.lazy(() => ServiceUnitSchema),
  duration: z.number().int().optional(),
  image: z.string().optional().nullable(),
  tags: z.union([ z.lazy(() => ServiceCreatetagsInputSchema),z.string().array() ]).optional(),
  isActive: z.boolean().optional(),
  tenantId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  materials: z.lazy(() => ServiceMaterialUncheckedCreateNestedManyWithoutServiceInputSchema).optional(),
  visits: z.lazy(() => VisitUncheckedCreateNestedManyWithoutServiceInputSchema).optional(),
  children: z.lazy(() => RelatedServiceUncheckedCreateNestedManyWithoutParentInputSchema).optional()
}).strict();

export const ServiceCreateOrConnectWithoutCategoryInputSchema: z.ZodType<Prisma.ServiceCreateOrConnectWithoutCategoryInput> = z.object({
  where: z.lazy(() => ServiceWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ServiceCreateWithoutCategoryInputSchema),z.lazy(() => ServiceUncheckedCreateWithoutCategoryInputSchema) ]),
}).strict();

export const ServiceCreateManyCategoryInputEnvelopeSchema: z.ZodType<Prisma.ServiceCreateManyCategoryInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => ServiceCreateManyCategoryInputSchema),z.lazy(() => ServiceCreateManyCategoryInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const ServiceUpsertWithWhereUniqueWithoutCategoryInputSchema: z.ZodType<Prisma.ServiceUpsertWithWhereUniqueWithoutCategoryInput> = z.object({
  where: z.lazy(() => ServiceWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => ServiceUpdateWithoutCategoryInputSchema),z.lazy(() => ServiceUncheckedUpdateWithoutCategoryInputSchema) ]),
  create: z.union([ z.lazy(() => ServiceCreateWithoutCategoryInputSchema),z.lazy(() => ServiceUncheckedCreateWithoutCategoryInputSchema) ]),
}).strict();

export const ServiceUpdateWithWhereUniqueWithoutCategoryInputSchema: z.ZodType<Prisma.ServiceUpdateWithWhereUniqueWithoutCategoryInput> = z.object({
  where: z.lazy(() => ServiceWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => ServiceUpdateWithoutCategoryInputSchema),z.lazy(() => ServiceUncheckedUpdateWithoutCategoryInputSchema) ]),
}).strict();

export const ServiceUpdateManyWithWhereWithoutCategoryInputSchema: z.ZodType<Prisma.ServiceUpdateManyWithWhereWithoutCategoryInput> = z.object({
  where: z.lazy(() => ServiceScalarWhereInputSchema),
  data: z.union([ z.lazy(() => ServiceUpdateManyMutationInputSchema),z.lazy(() => ServiceUncheckedUpdateManyWithoutCategoryInputSchema) ]),
}).strict();

export const TreatmentPlanCreateWithoutTreatmentsInputSchema: z.ZodType<Prisma.TreatmentPlanCreateWithoutTreatmentsInput> = z.object({
  id: z.string().cuid().optional(),
  description: z.string().optional().nullable(),
  isDone: z.boolean().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  patient: z.lazy(() => PatientCreateNestedOneWithoutTreatmentPlansInputSchema),
  user: z.lazy(() => UserCreateNestedOneWithoutTreatmentPlansInputSchema)
}).strict();

export const TreatmentPlanUncheckedCreateWithoutTreatmentsInputSchema: z.ZodType<Prisma.TreatmentPlanUncheckedCreateWithoutTreatmentsInput> = z.object({
  id: z.string().cuid().optional(),
  description: z.string().optional().nullable(),
  isDone: z.boolean().optional(),
  patientId: z.string(),
  userId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const TreatmentPlanCreateOrConnectWithoutTreatmentsInputSchema: z.ZodType<Prisma.TreatmentPlanCreateOrConnectWithoutTreatmentsInput> = z.object({
  where: z.lazy(() => TreatmentPlanWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => TreatmentPlanCreateWithoutTreatmentsInputSchema),z.lazy(() => TreatmentPlanUncheckedCreateWithoutTreatmentsInputSchema) ]),
}).strict();

export const VisitCreateWithoutTreatmentInputSchema: z.ZodType<Prisma.VisitCreateWithoutTreatmentInput> = z.object({
  id: z.string().cuid().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  service: z.lazy(() => ServiceCreateNestedOneWithoutVisitsInputSchema),
  event: z.lazy(() => EventCreateNestedOneWithoutVisitsInputSchema).optional()
}).strict();

export const VisitUncheckedCreateWithoutTreatmentInputSchema: z.ZodType<Prisma.VisitUncheckedCreateWithoutTreatmentInput> = z.object({
  id: z.string().cuid().optional(),
  serviceId: z.string(),
  eventId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const VisitCreateOrConnectWithoutTreatmentInputSchema: z.ZodType<Prisma.VisitCreateOrConnectWithoutTreatmentInput> = z.object({
  where: z.lazy(() => VisitWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => VisitCreateWithoutTreatmentInputSchema),z.lazy(() => VisitUncheckedCreateWithoutTreatmentInputSchema) ]),
}).strict();

export const VisitCreateManyTreatmentInputEnvelopeSchema: z.ZodType<Prisma.VisitCreateManyTreatmentInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => VisitCreateManyTreatmentInputSchema),z.lazy(() => VisitCreateManyTreatmentInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const TreatmentPlanUpsertWithoutTreatmentsInputSchema: z.ZodType<Prisma.TreatmentPlanUpsertWithoutTreatmentsInput> = z.object({
  update: z.union([ z.lazy(() => TreatmentPlanUpdateWithoutTreatmentsInputSchema),z.lazy(() => TreatmentPlanUncheckedUpdateWithoutTreatmentsInputSchema) ]),
  create: z.union([ z.lazy(() => TreatmentPlanCreateWithoutTreatmentsInputSchema),z.lazy(() => TreatmentPlanUncheckedCreateWithoutTreatmentsInputSchema) ]),
  where: z.lazy(() => TreatmentPlanWhereInputSchema).optional()
}).strict();

export const TreatmentPlanUpdateToOneWithWhereWithoutTreatmentsInputSchema: z.ZodType<Prisma.TreatmentPlanUpdateToOneWithWhereWithoutTreatmentsInput> = z.object({
  where: z.lazy(() => TreatmentPlanWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => TreatmentPlanUpdateWithoutTreatmentsInputSchema),z.lazy(() => TreatmentPlanUncheckedUpdateWithoutTreatmentsInputSchema) ]),
}).strict();

export const TreatmentPlanUpdateWithoutTreatmentsInputSchema: z.ZodType<Prisma.TreatmentPlanUpdateWithoutTreatmentsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isDone: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  patient: z.lazy(() => PatientUpdateOneRequiredWithoutTreatmentPlansNestedInputSchema).optional(),
  user: z.lazy(() => UserUpdateOneRequiredWithoutTreatmentPlansNestedInputSchema).optional()
}).strict();

export const TreatmentPlanUncheckedUpdateWithoutTreatmentsInputSchema: z.ZodType<Prisma.TreatmentPlanUncheckedUpdateWithoutTreatmentsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isDone: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  patientId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const VisitUpsertWithWhereUniqueWithoutTreatmentInputSchema: z.ZodType<Prisma.VisitUpsertWithWhereUniqueWithoutTreatmentInput> = z.object({
  where: z.lazy(() => VisitWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => VisitUpdateWithoutTreatmentInputSchema),z.lazy(() => VisitUncheckedUpdateWithoutTreatmentInputSchema) ]),
  create: z.union([ z.lazy(() => VisitCreateWithoutTreatmentInputSchema),z.lazy(() => VisitUncheckedCreateWithoutTreatmentInputSchema) ]),
}).strict();

export const VisitUpdateWithWhereUniqueWithoutTreatmentInputSchema: z.ZodType<Prisma.VisitUpdateWithWhereUniqueWithoutTreatmentInput> = z.object({
  where: z.lazy(() => VisitWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => VisitUpdateWithoutTreatmentInputSchema),z.lazy(() => VisitUncheckedUpdateWithoutTreatmentInputSchema) ]),
}).strict();

export const VisitUpdateManyWithWhereWithoutTreatmentInputSchema: z.ZodType<Prisma.VisitUpdateManyWithWhereWithoutTreatmentInput> = z.object({
  where: z.lazy(() => VisitScalarWhereInputSchema),
  data: z.union([ z.lazy(() => VisitUpdateManyMutationInputSchema),z.lazy(() => VisitUncheckedUpdateManyWithoutTreatmentInputSchema) ]),
}).strict();

export const ServiceCreateWithoutVisitsInputSchema: z.ZodType<Prisma.ServiceCreateWithoutVisitsInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  unit_price: z.number().int(),
  unit: z.lazy(() => ServiceUnitSchema),
  duration: z.number().int().optional(),
  image: z.string().optional().nullable(),
  tags: z.union([ z.lazy(() => ServiceCreatetagsInputSchema),z.string().array() ]).optional(),
  isActive: z.boolean().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  tenant: z.lazy(() => TenantCreateNestedOneWithoutServicesInputSchema),
  category: z.lazy(() => ServiceCategoryCreateNestedOneWithoutServicesInputSchema).optional(),
  materials: z.lazy(() => ServiceMaterialCreateNestedManyWithoutServiceInputSchema).optional(),
  children: z.lazy(() => RelatedServiceCreateNestedManyWithoutParentInputSchema).optional()
}).strict();

export const ServiceUncheckedCreateWithoutVisitsInputSchema: z.ZodType<Prisma.ServiceUncheckedCreateWithoutVisitsInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  unit_price: z.number().int(),
  unit: z.lazy(() => ServiceUnitSchema),
  duration: z.number().int().optional(),
  image: z.string().optional().nullable(),
  tags: z.union([ z.lazy(() => ServiceCreatetagsInputSchema),z.string().array() ]).optional(),
  isActive: z.boolean().optional(),
  tenantId: z.string(),
  categoryId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  materials: z.lazy(() => ServiceMaterialUncheckedCreateNestedManyWithoutServiceInputSchema).optional(),
  children: z.lazy(() => RelatedServiceUncheckedCreateNestedManyWithoutParentInputSchema).optional()
}).strict();

export const ServiceCreateOrConnectWithoutVisitsInputSchema: z.ZodType<Prisma.ServiceCreateOrConnectWithoutVisitsInput> = z.object({
  where: z.lazy(() => ServiceWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ServiceCreateWithoutVisitsInputSchema),z.lazy(() => ServiceUncheckedCreateWithoutVisitsInputSchema) ]),
}).strict();

export const TreatmentCreateWithoutVisitsInputSchema: z.ZodType<Prisma.TreatmentCreateWithoutVisitsInput> = z.object({
  id: z.string().cuid().optional(),
  price: z.number().int(),
  target: z.string().optional().nullable(),
  status: z.lazy(() => TreatmentStatusSchema).optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  treatmentPlan: z.lazy(() => TreatmentPlanCreateNestedOneWithoutTreatmentsInputSchema).optional()
}).strict();

export const TreatmentUncheckedCreateWithoutVisitsInputSchema: z.ZodType<Prisma.TreatmentUncheckedCreateWithoutVisitsInput> = z.object({
  id: z.string().cuid().optional(),
  price: z.number().int(),
  target: z.string().optional().nullable(),
  status: z.lazy(() => TreatmentStatusSchema).optional(),
  treatmentPlanId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const TreatmentCreateOrConnectWithoutVisitsInputSchema: z.ZodType<Prisma.TreatmentCreateOrConnectWithoutVisitsInput> = z.object({
  where: z.lazy(() => TreatmentWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => TreatmentCreateWithoutVisitsInputSchema),z.lazy(() => TreatmentUncheckedCreateWithoutVisitsInputSchema) ]),
}).strict();

export const EventCreateWithoutVisitsInputSchema: z.ZodType<Prisma.EventCreateWithoutVisitsInput> = z.object({
  id: z.string().cuid().optional(),
  index: z.number().int().optional(),
  title: z.string(),
  description: z.string().optional().nullable(),
  date: z.coerce.date(),
  start: z.coerce.date().optional().nullable(),
  end: z.coerce.date().optional().nullable(),
  allDay: z.boolean().optional(),
  type: z.lazy(() => EventTypeSchema).optional(),
  status: z.lazy(() => EventStatusSchema).optional(),
  initiator: z.lazy(() => EventInitiatorSchema).optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  quiz: z.lazy(() => QuizCreateNestedOneWithoutEventInputSchema).optional(),
  actions: z.lazy(() => EventActionCreateNestedManyWithoutEventInputSchema).optional(),
  files: z.lazy(() => FileCreateNestedManyWithoutEventInputSchema).optional(),
  patient: z.lazy(() => PatientCreateNestedOneWithoutAppointmentsInputSchema).optional(),
  user: z.lazy(() => UserCreateNestedOneWithoutEventsInputSchema),
  tenant: z.lazy(() => TenantCreateNestedOneWithoutEventsInputSchema)
}).strict();

export const EventUncheckedCreateWithoutVisitsInputSchema: z.ZodType<Prisma.EventUncheckedCreateWithoutVisitsInput> = z.object({
  id: z.string().cuid().optional(),
  index: z.number().int().optional(),
  title: z.string(),
  description: z.string().optional().nullable(),
  date: z.coerce.date(),
  start: z.coerce.date().optional().nullable(),
  end: z.coerce.date().optional().nullable(),
  allDay: z.boolean().optional(),
  type: z.lazy(() => EventTypeSchema).optional(),
  status: z.lazy(() => EventStatusSchema).optional(),
  initiator: z.lazy(() => EventInitiatorSchema).optional(),
  patientId: z.string().optional().nullable(),
  userId: z.string(),
  tenantId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  quiz: z.lazy(() => QuizUncheckedCreateNestedOneWithoutEventInputSchema).optional(),
  actions: z.lazy(() => EventActionUncheckedCreateNestedManyWithoutEventInputSchema).optional(),
  files: z.lazy(() => FileUncheckedCreateNestedManyWithoutEventInputSchema).optional()
}).strict();

export const EventCreateOrConnectWithoutVisitsInputSchema: z.ZodType<Prisma.EventCreateOrConnectWithoutVisitsInput> = z.object({
  where: z.lazy(() => EventWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => EventCreateWithoutVisitsInputSchema),z.lazy(() => EventUncheckedCreateWithoutVisitsInputSchema) ]),
}).strict();

export const ServiceUpsertWithoutVisitsInputSchema: z.ZodType<Prisma.ServiceUpsertWithoutVisitsInput> = z.object({
  update: z.union([ z.lazy(() => ServiceUpdateWithoutVisitsInputSchema),z.lazy(() => ServiceUncheckedUpdateWithoutVisitsInputSchema) ]),
  create: z.union([ z.lazy(() => ServiceCreateWithoutVisitsInputSchema),z.lazy(() => ServiceUncheckedCreateWithoutVisitsInputSchema) ]),
  where: z.lazy(() => ServiceWhereInputSchema).optional()
}).strict();

export const ServiceUpdateToOneWithWhereWithoutVisitsInputSchema: z.ZodType<Prisma.ServiceUpdateToOneWithWhereWithoutVisitsInput> = z.object({
  where: z.lazy(() => ServiceWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => ServiceUpdateWithoutVisitsInputSchema),z.lazy(() => ServiceUncheckedUpdateWithoutVisitsInputSchema) ]),
}).strict();

export const ServiceUpdateWithoutVisitsInputSchema: z.ZodType<Prisma.ServiceUpdateWithoutVisitsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  unit_price: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  unit: z.union([ z.lazy(() => ServiceUnitSchema),z.lazy(() => EnumServiceUnitFieldUpdateOperationsInputSchema) ]).optional(),
  duration: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  image: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tags: z.union([ z.lazy(() => ServiceUpdatetagsInputSchema),z.string().array() ]).optional(),
  isActive: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  tenant: z.lazy(() => TenantUpdateOneRequiredWithoutServicesNestedInputSchema).optional(),
  category: z.lazy(() => ServiceCategoryUpdateOneWithoutServicesNestedInputSchema).optional(),
  materials: z.lazy(() => ServiceMaterialUpdateManyWithoutServiceNestedInputSchema).optional(),
  children: z.lazy(() => RelatedServiceUpdateManyWithoutParentNestedInputSchema).optional()
}).strict();

export const ServiceUncheckedUpdateWithoutVisitsInputSchema: z.ZodType<Prisma.ServiceUncheckedUpdateWithoutVisitsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  unit_price: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  unit: z.union([ z.lazy(() => ServiceUnitSchema),z.lazy(() => EnumServiceUnitFieldUpdateOperationsInputSchema) ]).optional(),
  duration: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  image: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tags: z.union([ z.lazy(() => ServiceUpdatetagsInputSchema),z.string().array() ]).optional(),
  isActive: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  tenantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  categoryId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  materials: z.lazy(() => ServiceMaterialUncheckedUpdateManyWithoutServiceNestedInputSchema).optional(),
  children: z.lazy(() => RelatedServiceUncheckedUpdateManyWithoutParentNestedInputSchema).optional()
}).strict();

export const TreatmentUpsertWithoutVisitsInputSchema: z.ZodType<Prisma.TreatmentUpsertWithoutVisitsInput> = z.object({
  update: z.union([ z.lazy(() => TreatmentUpdateWithoutVisitsInputSchema),z.lazy(() => TreatmentUncheckedUpdateWithoutVisitsInputSchema) ]),
  create: z.union([ z.lazy(() => TreatmentCreateWithoutVisitsInputSchema),z.lazy(() => TreatmentUncheckedCreateWithoutVisitsInputSchema) ]),
  where: z.lazy(() => TreatmentWhereInputSchema).optional()
}).strict();

export const TreatmentUpdateToOneWithWhereWithoutVisitsInputSchema: z.ZodType<Prisma.TreatmentUpdateToOneWithWhereWithoutVisitsInput> = z.object({
  where: z.lazy(() => TreatmentWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => TreatmentUpdateWithoutVisitsInputSchema),z.lazy(() => TreatmentUncheckedUpdateWithoutVisitsInputSchema) ]),
}).strict();

export const TreatmentUpdateWithoutVisitsInputSchema: z.ZodType<Prisma.TreatmentUpdateWithoutVisitsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  price: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  target: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.lazy(() => TreatmentStatusSchema),z.lazy(() => EnumTreatmentStatusFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  treatmentPlan: z.lazy(() => TreatmentPlanUpdateOneWithoutTreatmentsNestedInputSchema).optional()
}).strict();

export const TreatmentUncheckedUpdateWithoutVisitsInputSchema: z.ZodType<Prisma.TreatmentUncheckedUpdateWithoutVisitsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  price: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  target: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.lazy(() => TreatmentStatusSchema),z.lazy(() => EnumTreatmentStatusFieldUpdateOperationsInputSchema) ]).optional(),
  treatmentPlanId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const EventUpsertWithoutVisitsInputSchema: z.ZodType<Prisma.EventUpsertWithoutVisitsInput> = z.object({
  update: z.union([ z.lazy(() => EventUpdateWithoutVisitsInputSchema),z.lazy(() => EventUncheckedUpdateWithoutVisitsInputSchema) ]),
  create: z.union([ z.lazy(() => EventCreateWithoutVisitsInputSchema),z.lazy(() => EventUncheckedCreateWithoutVisitsInputSchema) ]),
  where: z.lazy(() => EventWhereInputSchema).optional()
}).strict();

export const EventUpdateToOneWithWhereWithoutVisitsInputSchema: z.ZodType<Prisma.EventUpdateToOneWithWhereWithoutVisitsInput> = z.object({
  where: z.lazy(() => EventWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => EventUpdateWithoutVisitsInputSchema),z.lazy(() => EventUncheckedUpdateWithoutVisitsInputSchema) ]),
}).strict();

export const EventUpdateWithoutVisitsInputSchema: z.ZodType<Prisma.EventUpdateWithoutVisitsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  title: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  start: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  end: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  allDay: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => EventTypeSchema),z.lazy(() => EnumEventTypeFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => EventStatusSchema),z.lazy(() => EnumEventStatusFieldUpdateOperationsInputSchema) ]).optional(),
  initiator: z.union([ z.lazy(() => EventInitiatorSchema),z.lazy(() => EnumEventInitiatorFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  quiz: z.lazy(() => QuizUpdateOneWithoutEventNestedInputSchema).optional(),
  actions: z.lazy(() => EventActionUpdateManyWithoutEventNestedInputSchema).optional(),
  files: z.lazy(() => FileUpdateManyWithoutEventNestedInputSchema).optional(),
  patient: z.lazy(() => PatientUpdateOneWithoutAppointmentsNestedInputSchema).optional(),
  user: z.lazy(() => UserUpdateOneRequiredWithoutEventsNestedInputSchema).optional(),
  tenant: z.lazy(() => TenantUpdateOneRequiredWithoutEventsNestedInputSchema).optional()
}).strict();

export const EventUncheckedUpdateWithoutVisitsInputSchema: z.ZodType<Prisma.EventUncheckedUpdateWithoutVisitsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  index: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  title: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  start: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  end: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  allDay: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => EventTypeSchema),z.lazy(() => EnumEventTypeFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => EventStatusSchema),z.lazy(() => EnumEventStatusFieldUpdateOperationsInputSchema) ]).optional(),
  initiator: z.union([ z.lazy(() => EventInitiatorSchema),z.lazy(() => EnumEventInitiatorFieldUpdateOperationsInputSchema) ]).optional(),
  patientId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  tenantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  quiz: z.lazy(() => QuizUncheckedUpdateOneWithoutEventNestedInputSchema).optional(),
  actions: z.lazy(() => EventActionUncheckedUpdateManyWithoutEventNestedInputSchema).optional(),
  files: z.lazy(() => FileUncheckedUpdateManyWithoutEventNestedInputSchema).optional()
}).strict();

export const TreatmentCreateWithoutTreatmentPlanInputSchema: z.ZodType<Prisma.TreatmentCreateWithoutTreatmentPlanInput> = z.object({
  id: z.string().cuid().optional(),
  price: z.number().int(),
  target: z.string().optional().nullable(),
  status: z.lazy(() => TreatmentStatusSchema).optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  visits: z.lazy(() => VisitCreateNestedManyWithoutTreatmentInputSchema).optional()
}).strict();

export const TreatmentUncheckedCreateWithoutTreatmentPlanInputSchema: z.ZodType<Prisma.TreatmentUncheckedCreateWithoutTreatmentPlanInput> = z.object({
  id: z.string().cuid().optional(),
  price: z.number().int(),
  target: z.string().optional().nullable(),
  status: z.lazy(() => TreatmentStatusSchema).optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  visits: z.lazy(() => VisitUncheckedCreateNestedManyWithoutTreatmentInputSchema).optional()
}).strict();

export const TreatmentCreateOrConnectWithoutTreatmentPlanInputSchema: z.ZodType<Prisma.TreatmentCreateOrConnectWithoutTreatmentPlanInput> = z.object({
  where: z.lazy(() => TreatmentWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => TreatmentCreateWithoutTreatmentPlanInputSchema),z.lazy(() => TreatmentUncheckedCreateWithoutTreatmentPlanInputSchema) ]),
}).strict();

export const TreatmentCreateManyTreatmentPlanInputEnvelopeSchema: z.ZodType<Prisma.TreatmentCreateManyTreatmentPlanInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => TreatmentCreateManyTreatmentPlanInputSchema),z.lazy(() => TreatmentCreateManyTreatmentPlanInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const PatientCreateWithoutTreatmentPlansInputSchema: z.ZodType<Prisma.PatientCreateWithoutTreatmentPlansInput> = z.object({
  id: z.string().cuid().optional(),
  firstName: z.string(),
  lastName: z.string(),
  gender: z.string().optional().nullable(),
  dob: z.coerce.date().optional().nullable(),
  email: z.string().optional().nullable(),
  phone: z.string().optional().nullable(),
  city: z.string().optional().nullable(),
  county: z.string().optional().nullable(),
  status: z.lazy(() => StatusSchema).optional(),
  smsNotifications: z.boolean().optional(),
  emailNotifications: z.boolean().optional(),
  filters: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  user: z.lazy(() => UserCreateNestedOneWithoutPatientsInputSchema),
  tenant: z.lazy(() => TenantCreateNestedOneWithoutPatientsInputSchema),
  files: z.lazy(() => FileCreateNestedManyWithoutPatientInputSchema).optional(),
  quizes: z.lazy(() => QuizCreateNestedManyWithoutPatientInputSchema).optional(),
  appointments: z.lazy(() => EventCreateNestedManyWithoutPatientInputSchema).optional()
}).strict();

export const PatientUncheckedCreateWithoutTreatmentPlansInputSchema: z.ZodType<Prisma.PatientUncheckedCreateWithoutTreatmentPlansInput> = z.object({
  id: z.string().cuid().optional(),
  firstName: z.string(),
  lastName: z.string(),
  gender: z.string().optional().nullable(),
  dob: z.coerce.date().optional().nullable(),
  email: z.string().optional().nullable(),
  phone: z.string().optional().nullable(),
  city: z.string().optional().nullable(),
  county: z.string().optional().nullable(),
  status: z.lazy(() => StatusSchema).optional(),
  smsNotifications: z.boolean().optional(),
  emailNotifications: z.boolean().optional(),
  filters: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  userId: z.string(),
  tenantId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  files: z.lazy(() => FileUncheckedCreateNestedManyWithoutPatientInputSchema).optional(),
  quizes: z.lazy(() => QuizUncheckedCreateNestedManyWithoutPatientInputSchema).optional(),
  appointments: z.lazy(() => EventUncheckedCreateNestedManyWithoutPatientInputSchema).optional()
}).strict();

export const PatientCreateOrConnectWithoutTreatmentPlansInputSchema: z.ZodType<Prisma.PatientCreateOrConnectWithoutTreatmentPlansInput> = z.object({
  where: z.lazy(() => PatientWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => PatientCreateWithoutTreatmentPlansInputSchema),z.lazy(() => PatientUncheckedCreateWithoutTreatmentPlansInputSchema) ]),
}).strict();

export const UserCreateWithoutTreatmentPlansInputSchema: z.ZodType<Prisma.UserCreateWithoutTreatmentPlansInput> = z.object({
  id: z.string().cuid().optional(),
  index: z.number().int().optional(),
  role: z.lazy(() => RoleSchema).optional(),
  workingHours: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  firstDayOfWeek: z.lazy(() => DayOfWeekSchema).optional(),
  showWeekends: z.boolean().optional(),
  webhookApiKey: z.string().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  activatedAt: z.coerce.date().optional().nullable(),
  lastLoginAt: z.coerce.date().optional().nullable(),
  bannedAt: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  speciality: z.lazy(() => SpecialityCreateNestedOneWithoutUsersInputSchema).optional(),
  profile: z.lazy(() => ProfileCreateNestedOneWithoutUsersInputSchema),
  tenant: z.lazy(() => TenantCreateNestedOneWithoutUsersInputSchema),
  invitation: z.lazy(() => InvitationCreateNestedOneWithoutUserInputSchema).optional(),
  patients: z.lazy(() => PatientCreateNestedManyWithoutUserInputSchema).optional(),
  events: z.lazy(() => EventCreateNestedManyWithoutUserInputSchema).optional(),
  eventActions: z.lazy(() => EventActionCreateNestedManyWithoutUserInputSchema).optional(),
  invitations: z.lazy(() => InvitationCreateNestedManyWithoutInvitedByInputSchema).optional(),
  files: z.lazy(() => FileCreateNestedManyWithoutUserInputSchema).optional(),
  tasks: z.lazy(() => TaskCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const UserUncheckedCreateWithoutTreatmentPlansInputSchema: z.ZodType<Prisma.UserUncheckedCreateWithoutTreatmentPlansInput> = z.object({
  id: z.string().cuid().optional(),
  index: z.number().int().optional(),
  role: z.lazy(() => RoleSchema).optional(),
  workingHours: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  firstDayOfWeek: z.lazy(() => DayOfWeekSchema).optional(),
  showWeekends: z.boolean().optional(),
  webhookApiKey: z.string().optional().nullable(),
  specialityId: z.string().optional().nullable(),
  profileId: z.string(),
  tenantId: z.string(),
  deletedAt: z.coerce.date().optional().nullable(),
  activatedAt: z.coerce.date().optional().nullable(),
  lastLoginAt: z.coerce.date().optional().nullable(),
  bannedAt: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  invitation: z.lazy(() => InvitationUncheckedCreateNestedOneWithoutUserInputSchema).optional(),
  patients: z.lazy(() => PatientUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  events: z.lazy(() => EventUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  eventActions: z.lazy(() => EventActionUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedCreateNestedManyWithoutInvitedByInputSchema).optional(),
  files: z.lazy(() => FileUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  tasks: z.lazy(() => TaskUncheckedCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const UserCreateOrConnectWithoutTreatmentPlansInputSchema: z.ZodType<Prisma.UserCreateOrConnectWithoutTreatmentPlansInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UserCreateWithoutTreatmentPlansInputSchema),z.lazy(() => UserUncheckedCreateWithoutTreatmentPlansInputSchema) ]),
}).strict();

export const TreatmentUpsertWithWhereUniqueWithoutTreatmentPlanInputSchema: z.ZodType<Prisma.TreatmentUpsertWithWhereUniqueWithoutTreatmentPlanInput> = z.object({
  where: z.lazy(() => TreatmentWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => TreatmentUpdateWithoutTreatmentPlanInputSchema),z.lazy(() => TreatmentUncheckedUpdateWithoutTreatmentPlanInputSchema) ]),
  create: z.union([ z.lazy(() => TreatmentCreateWithoutTreatmentPlanInputSchema),z.lazy(() => TreatmentUncheckedCreateWithoutTreatmentPlanInputSchema) ]),
}).strict();

export const TreatmentUpdateWithWhereUniqueWithoutTreatmentPlanInputSchema: z.ZodType<Prisma.TreatmentUpdateWithWhereUniqueWithoutTreatmentPlanInput> = z.object({
  where: z.lazy(() => TreatmentWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => TreatmentUpdateWithoutTreatmentPlanInputSchema),z.lazy(() => TreatmentUncheckedUpdateWithoutTreatmentPlanInputSchema) ]),
}).strict();

export const TreatmentUpdateManyWithWhereWithoutTreatmentPlanInputSchema: z.ZodType<Prisma.TreatmentUpdateManyWithWhereWithoutTreatmentPlanInput> = z.object({
  where: z.lazy(() => TreatmentScalarWhereInputSchema),
  data: z.union([ z.lazy(() => TreatmentUpdateManyMutationInputSchema),z.lazy(() => TreatmentUncheckedUpdateManyWithoutTreatmentPlanInputSchema) ]),
}).strict();

export const TreatmentScalarWhereInputSchema: z.ZodType<Prisma.TreatmentScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => TreatmentScalarWhereInputSchema),z.lazy(() => TreatmentScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => TreatmentScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => TreatmentScalarWhereInputSchema),z.lazy(() => TreatmentScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  price: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  target: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  status: z.union([ z.lazy(() => EnumTreatmentStatusFilterSchema),z.lazy(() => TreatmentStatusSchema) ]).optional(),
  treatmentPlanId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const PatientUpsertWithoutTreatmentPlansInputSchema: z.ZodType<Prisma.PatientUpsertWithoutTreatmentPlansInput> = z.object({
  update: z.union([ z.lazy(() => PatientUpdateWithoutTreatmentPlansInputSchema),z.lazy(() => PatientUncheckedUpdateWithoutTreatmentPlansInputSchema) ]),
  create: z.union([ z.lazy(() => PatientCreateWithoutTreatmentPlansInputSchema),z.lazy(() => PatientUncheckedCreateWithoutTreatmentPlansInputSchema) ]),
  where: z.lazy(() => PatientWhereInputSchema).optional()
}).strict();

export const PatientUpdateToOneWithWhereWithoutTreatmentPlansInputSchema: z.ZodType<Prisma.PatientUpdateToOneWithWhereWithoutTreatmentPlansInput> = z.object({
  where: z.lazy(() => PatientWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => PatientUpdateWithoutTreatmentPlansInputSchema),z.lazy(() => PatientUncheckedUpdateWithoutTreatmentPlansInputSchema) ]),
}).strict();

export const PatientUpdateWithoutTreatmentPlansInputSchema: z.ZodType<Prisma.PatientUpdateWithoutTreatmentPlansInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  firstName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  lastName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  gender: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  dob: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  city: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  county: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.lazy(() => StatusSchema),z.lazy(() => EnumStatusFieldUpdateOperationsInputSchema) ]).optional(),
  smsNotifications: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  emailNotifications: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  filters: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  user: z.lazy(() => UserUpdateOneRequiredWithoutPatientsNestedInputSchema).optional(),
  tenant: z.lazy(() => TenantUpdateOneRequiredWithoutPatientsNestedInputSchema).optional(),
  files: z.lazy(() => FileUpdateManyWithoutPatientNestedInputSchema).optional(),
  quizes: z.lazy(() => QuizUpdateManyWithoutPatientNestedInputSchema).optional(),
  appointments: z.lazy(() => EventUpdateManyWithoutPatientNestedInputSchema).optional()
}).strict();

export const PatientUncheckedUpdateWithoutTreatmentPlansInputSchema: z.ZodType<Prisma.PatientUncheckedUpdateWithoutTreatmentPlansInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  firstName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  lastName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  gender: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  dob: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  city: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  county: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.lazy(() => StatusSchema),z.lazy(() => EnumStatusFieldUpdateOperationsInputSchema) ]).optional(),
  smsNotifications: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  emailNotifications: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  filters: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  tenantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  files: z.lazy(() => FileUncheckedUpdateManyWithoutPatientNestedInputSchema).optional(),
  quizes: z.lazy(() => QuizUncheckedUpdateManyWithoutPatientNestedInputSchema).optional(),
  appointments: z.lazy(() => EventUncheckedUpdateManyWithoutPatientNestedInputSchema).optional()
}).strict();

export const UserUpsertWithoutTreatmentPlansInputSchema: z.ZodType<Prisma.UserUpsertWithoutTreatmentPlansInput> = z.object({
  update: z.union([ z.lazy(() => UserUpdateWithoutTreatmentPlansInputSchema),z.lazy(() => UserUncheckedUpdateWithoutTreatmentPlansInputSchema) ]),
  create: z.union([ z.lazy(() => UserCreateWithoutTreatmentPlansInputSchema),z.lazy(() => UserUncheckedCreateWithoutTreatmentPlansInputSchema) ]),
  where: z.lazy(() => UserWhereInputSchema).optional()
}).strict();

export const UserUpdateToOneWithWhereWithoutTreatmentPlansInputSchema: z.ZodType<Prisma.UserUpdateToOneWithWhereWithoutTreatmentPlansInput> = z.object({
  where: z.lazy(() => UserWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => UserUpdateWithoutTreatmentPlansInputSchema),z.lazy(() => UserUncheckedUpdateWithoutTreatmentPlansInputSchema) ]),
}).strict();

export const UserUpdateWithoutTreatmentPlansInputSchema: z.ZodType<Prisma.UserUpdateWithoutTreatmentPlansInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  index: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.lazy(() => RoleSchema),z.lazy(() => EnumRoleFieldUpdateOperationsInputSchema) ]).optional(),
  workingHours: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  firstDayOfWeek: z.union([ z.lazy(() => DayOfWeekSchema),z.lazy(() => EnumDayOfWeekFieldUpdateOperationsInputSchema) ]).optional(),
  showWeekends: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  webhookApiKey: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  activatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastLoginAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bannedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  speciality: z.lazy(() => SpecialityUpdateOneWithoutUsersNestedInputSchema).optional(),
  profile: z.lazy(() => ProfileUpdateOneRequiredWithoutUsersNestedInputSchema).optional(),
  tenant: z.lazy(() => TenantUpdateOneRequiredWithoutUsersNestedInputSchema).optional(),
  invitation: z.lazy(() => InvitationUpdateOneWithoutUserNestedInputSchema).optional(),
  patients: z.lazy(() => PatientUpdateManyWithoutUserNestedInputSchema).optional(),
  events: z.lazy(() => EventUpdateManyWithoutUserNestedInputSchema).optional(),
  eventActions: z.lazy(() => EventActionUpdateManyWithoutUserNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUpdateManyWithoutInvitedByNestedInputSchema).optional(),
  files: z.lazy(() => FileUpdateManyWithoutUserNestedInputSchema).optional(),
  tasks: z.lazy(() => TaskUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const UserUncheckedUpdateWithoutTreatmentPlansInputSchema: z.ZodType<Prisma.UserUncheckedUpdateWithoutTreatmentPlansInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  index: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.lazy(() => RoleSchema),z.lazy(() => EnumRoleFieldUpdateOperationsInputSchema) ]).optional(),
  workingHours: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  firstDayOfWeek: z.union([ z.lazy(() => DayOfWeekSchema),z.lazy(() => EnumDayOfWeekFieldUpdateOperationsInputSchema) ]).optional(),
  showWeekends: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  webhookApiKey: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  specialityId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  profileId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  tenantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  activatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastLoginAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bannedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  invitation: z.lazy(() => InvitationUncheckedUpdateOneWithoutUserNestedInputSchema).optional(),
  patients: z.lazy(() => PatientUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  events: z.lazy(() => EventUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  eventActions: z.lazy(() => EventActionUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedUpdateManyWithoutInvitedByNestedInputSchema).optional(),
  files: z.lazy(() => FileUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  tasks: z.lazy(() => TaskUncheckedUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const PatientCreateWithoutQuizesInputSchema: z.ZodType<Prisma.PatientCreateWithoutQuizesInput> = z.object({
  id: z.string().cuid().optional(),
  firstName: z.string(),
  lastName: z.string(),
  gender: z.string().optional().nullable(),
  dob: z.coerce.date().optional().nullable(),
  email: z.string().optional().nullable(),
  phone: z.string().optional().nullable(),
  city: z.string().optional().nullable(),
  county: z.string().optional().nullable(),
  status: z.lazy(() => StatusSchema).optional(),
  smsNotifications: z.boolean().optional(),
  emailNotifications: z.boolean().optional(),
  filters: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  user: z.lazy(() => UserCreateNestedOneWithoutPatientsInputSchema),
  tenant: z.lazy(() => TenantCreateNestedOneWithoutPatientsInputSchema),
  files: z.lazy(() => FileCreateNestedManyWithoutPatientInputSchema).optional(),
  appointments: z.lazy(() => EventCreateNestedManyWithoutPatientInputSchema).optional(),
  treatmentPlans: z.lazy(() => TreatmentPlanCreateNestedManyWithoutPatientInputSchema).optional()
}).strict();

export const PatientUncheckedCreateWithoutQuizesInputSchema: z.ZodType<Prisma.PatientUncheckedCreateWithoutQuizesInput> = z.object({
  id: z.string().cuid().optional(),
  firstName: z.string(),
  lastName: z.string(),
  gender: z.string().optional().nullable(),
  dob: z.coerce.date().optional().nullable(),
  email: z.string().optional().nullable(),
  phone: z.string().optional().nullable(),
  city: z.string().optional().nullable(),
  county: z.string().optional().nullable(),
  status: z.lazy(() => StatusSchema).optional(),
  smsNotifications: z.boolean().optional(),
  emailNotifications: z.boolean().optional(),
  filters: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  userId: z.string(),
  tenantId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  files: z.lazy(() => FileUncheckedCreateNestedManyWithoutPatientInputSchema).optional(),
  appointments: z.lazy(() => EventUncheckedCreateNestedManyWithoutPatientInputSchema).optional(),
  treatmentPlans: z.lazy(() => TreatmentPlanUncheckedCreateNestedManyWithoutPatientInputSchema).optional()
}).strict();

export const PatientCreateOrConnectWithoutQuizesInputSchema: z.ZodType<Prisma.PatientCreateOrConnectWithoutQuizesInput> = z.object({
  where: z.lazy(() => PatientWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => PatientCreateWithoutQuizesInputSchema),z.lazy(() => PatientUncheckedCreateWithoutQuizesInputSchema) ]),
}).strict();

export const EventCreateWithoutQuizInputSchema: z.ZodType<Prisma.EventCreateWithoutQuizInput> = z.object({
  id: z.string().cuid().optional(),
  index: z.number().int().optional(),
  title: z.string(),
  description: z.string().optional().nullable(),
  date: z.coerce.date(),
  start: z.coerce.date().optional().nullable(),
  end: z.coerce.date().optional().nullable(),
  allDay: z.boolean().optional(),
  type: z.lazy(() => EventTypeSchema).optional(),
  status: z.lazy(() => EventStatusSchema).optional(),
  initiator: z.lazy(() => EventInitiatorSchema).optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  visits: z.lazy(() => VisitCreateNestedManyWithoutEventInputSchema).optional(),
  actions: z.lazy(() => EventActionCreateNestedManyWithoutEventInputSchema).optional(),
  files: z.lazy(() => FileCreateNestedManyWithoutEventInputSchema).optional(),
  patient: z.lazy(() => PatientCreateNestedOneWithoutAppointmentsInputSchema).optional(),
  user: z.lazy(() => UserCreateNestedOneWithoutEventsInputSchema),
  tenant: z.lazy(() => TenantCreateNestedOneWithoutEventsInputSchema)
}).strict();

export const EventUncheckedCreateWithoutQuizInputSchema: z.ZodType<Prisma.EventUncheckedCreateWithoutQuizInput> = z.object({
  id: z.string().cuid().optional(),
  index: z.number().int().optional(),
  title: z.string(),
  description: z.string().optional().nullable(),
  date: z.coerce.date(),
  start: z.coerce.date().optional().nullable(),
  end: z.coerce.date().optional().nullable(),
  allDay: z.boolean().optional(),
  type: z.lazy(() => EventTypeSchema).optional(),
  status: z.lazy(() => EventStatusSchema).optional(),
  initiator: z.lazy(() => EventInitiatorSchema).optional(),
  patientId: z.string().optional().nullable(),
  userId: z.string(),
  tenantId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  visits: z.lazy(() => VisitUncheckedCreateNestedManyWithoutEventInputSchema).optional(),
  actions: z.lazy(() => EventActionUncheckedCreateNestedManyWithoutEventInputSchema).optional(),
  files: z.lazy(() => FileUncheckedCreateNestedManyWithoutEventInputSchema).optional()
}).strict();

export const EventCreateOrConnectWithoutQuizInputSchema: z.ZodType<Prisma.EventCreateOrConnectWithoutQuizInput> = z.object({
  where: z.lazy(() => EventWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => EventCreateWithoutQuizInputSchema),z.lazy(() => EventUncheckedCreateWithoutQuizInputSchema) ]),
}).strict();

export const PatientUpsertWithoutQuizesInputSchema: z.ZodType<Prisma.PatientUpsertWithoutQuizesInput> = z.object({
  update: z.union([ z.lazy(() => PatientUpdateWithoutQuizesInputSchema),z.lazy(() => PatientUncheckedUpdateWithoutQuizesInputSchema) ]),
  create: z.union([ z.lazy(() => PatientCreateWithoutQuizesInputSchema),z.lazy(() => PatientUncheckedCreateWithoutQuizesInputSchema) ]),
  where: z.lazy(() => PatientWhereInputSchema).optional()
}).strict();

export const PatientUpdateToOneWithWhereWithoutQuizesInputSchema: z.ZodType<Prisma.PatientUpdateToOneWithWhereWithoutQuizesInput> = z.object({
  where: z.lazy(() => PatientWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => PatientUpdateWithoutQuizesInputSchema),z.lazy(() => PatientUncheckedUpdateWithoutQuizesInputSchema) ]),
}).strict();

export const PatientUpdateWithoutQuizesInputSchema: z.ZodType<Prisma.PatientUpdateWithoutQuizesInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  firstName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  lastName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  gender: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  dob: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  city: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  county: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.lazy(() => StatusSchema),z.lazy(() => EnumStatusFieldUpdateOperationsInputSchema) ]).optional(),
  smsNotifications: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  emailNotifications: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  filters: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  user: z.lazy(() => UserUpdateOneRequiredWithoutPatientsNestedInputSchema).optional(),
  tenant: z.lazy(() => TenantUpdateOneRequiredWithoutPatientsNestedInputSchema).optional(),
  files: z.lazy(() => FileUpdateManyWithoutPatientNestedInputSchema).optional(),
  appointments: z.lazy(() => EventUpdateManyWithoutPatientNestedInputSchema).optional(),
  treatmentPlans: z.lazy(() => TreatmentPlanUpdateManyWithoutPatientNestedInputSchema).optional()
}).strict();

export const PatientUncheckedUpdateWithoutQuizesInputSchema: z.ZodType<Prisma.PatientUncheckedUpdateWithoutQuizesInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  firstName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  lastName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  gender: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  dob: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  city: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  county: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.lazy(() => StatusSchema),z.lazy(() => EnumStatusFieldUpdateOperationsInputSchema) ]).optional(),
  smsNotifications: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  emailNotifications: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  filters: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  tenantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  files: z.lazy(() => FileUncheckedUpdateManyWithoutPatientNestedInputSchema).optional(),
  appointments: z.lazy(() => EventUncheckedUpdateManyWithoutPatientNestedInputSchema).optional(),
  treatmentPlans: z.lazy(() => TreatmentPlanUncheckedUpdateManyWithoutPatientNestedInputSchema).optional()
}).strict();

export const EventUpsertWithoutQuizInputSchema: z.ZodType<Prisma.EventUpsertWithoutQuizInput> = z.object({
  update: z.union([ z.lazy(() => EventUpdateWithoutQuizInputSchema),z.lazy(() => EventUncheckedUpdateWithoutQuizInputSchema) ]),
  create: z.union([ z.lazy(() => EventCreateWithoutQuizInputSchema),z.lazy(() => EventUncheckedCreateWithoutQuizInputSchema) ]),
  where: z.lazy(() => EventWhereInputSchema).optional()
}).strict();

export const EventUpdateToOneWithWhereWithoutQuizInputSchema: z.ZodType<Prisma.EventUpdateToOneWithWhereWithoutQuizInput> = z.object({
  where: z.lazy(() => EventWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => EventUpdateWithoutQuizInputSchema),z.lazy(() => EventUncheckedUpdateWithoutQuizInputSchema) ]),
}).strict();

export const EventUpdateWithoutQuizInputSchema: z.ZodType<Prisma.EventUpdateWithoutQuizInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  title: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  start: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  end: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  allDay: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => EventTypeSchema),z.lazy(() => EnumEventTypeFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => EventStatusSchema),z.lazy(() => EnumEventStatusFieldUpdateOperationsInputSchema) ]).optional(),
  initiator: z.union([ z.lazy(() => EventInitiatorSchema),z.lazy(() => EnumEventInitiatorFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  visits: z.lazy(() => VisitUpdateManyWithoutEventNestedInputSchema).optional(),
  actions: z.lazy(() => EventActionUpdateManyWithoutEventNestedInputSchema).optional(),
  files: z.lazy(() => FileUpdateManyWithoutEventNestedInputSchema).optional(),
  patient: z.lazy(() => PatientUpdateOneWithoutAppointmentsNestedInputSchema).optional(),
  user: z.lazy(() => UserUpdateOneRequiredWithoutEventsNestedInputSchema).optional(),
  tenant: z.lazy(() => TenantUpdateOneRequiredWithoutEventsNestedInputSchema).optional()
}).strict();

export const EventUncheckedUpdateWithoutQuizInputSchema: z.ZodType<Prisma.EventUncheckedUpdateWithoutQuizInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  index: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  title: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  start: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  end: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  allDay: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => EventTypeSchema),z.lazy(() => EnumEventTypeFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => EventStatusSchema),z.lazy(() => EnumEventStatusFieldUpdateOperationsInputSchema) ]).optional(),
  initiator: z.union([ z.lazy(() => EventInitiatorSchema),z.lazy(() => EnumEventInitiatorFieldUpdateOperationsInputSchema) ]).optional(),
  patientId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  tenantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  visits: z.lazy(() => VisitUncheckedUpdateManyWithoutEventNestedInputSchema).optional(),
  actions: z.lazy(() => EventActionUncheckedUpdateManyWithoutEventNestedInputSchema).optional(),
  files: z.lazy(() => FileUncheckedUpdateManyWithoutEventNestedInputSchema).optional()
}).strict();

export const UserCreateWithoutTasksInputSchema: z.ZodType<Prisma.UserCreateWithoutTasksInput> = z.object({
  id: z.string().cuid().optional(),
  index: z.number().int().optional(),
  role: z.lazy(() => RoleSchema).optional(),
  workingHours: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  firstDayOfWeek: z.lazy(() => DayOfWeekSchema).optional(),
  showWeekends: z.boolean().optional(),
  webhookApiKey: z.string().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  activatedAt: z.coerce.date().optional().nullable(),
  lastLoginAt: z.coerce.date().optional().nullable(),
  bannedAt: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  speciality: z.lazy(() => SpecialityCreateNestedOneWithoutUsersInputSchema).optional(),
  profile: z.lazy(() => ProfileCreateNestedOneWithoutUsersInputSchema),
  tenant: z.lazy(() => TenantCreateNestedOneWithoutUsersInputSchema),
  invitation: z.lazy(() => InvitationCreateNestedOneWithoutUserInputSchema).optional(),
  patients: z.lazy(() => PatientCreateNestedManyWithoutUserInputSchema).optional(),
  events: z.lazy(() => EventCreateNestedManyWithoutUserInputSchema).optional(),
  eventActions: z.lazy(() => EventActionCreateNestedManyWithoutUserInputSchema).optional(),
  treatmentPlans: z.lazy(() => TreatmentPlanCreateNestedManyWithoutUserInputSchema).optional(),
  invitations: z.lazy(() => InvitationCreateNestedManyWithoutInvitedByInputSchema).optional(),
  files: z.lazy(() => FileCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const UserUncheckedCreateWithoutTasksInputSchema: z.ZodType<Prisma.UserUncheckedCreateWithoutTasksInput> = z.object({
  id: z.string().cuid().optional(),
  index: z.number().int().optional(),
  role: z.lazy(() => RoleSchema).optional(),
  workingHours: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  firstDayOfWeek: z.lazy(() => DayOfWeekSchema).optional(),
  showWeekends: z.boolean().optional(),
  webhookApiKey: z.string().optional().nullable(),
  specialityId: z.string().optional().nullable(),
  profileId: z.string(),
  tenantId: z.string(),
  deletedAt: z.coerce.date().optional().nullable(),
  activatedAt: z.coerce.date().optional().nullable(),
  lastLoginAt: z.coerce.date().optional().nullable(),
  bannedAt: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  invitation: z.lazy(() => InvitationUncheckedCreateNestedOneWithoutUserInputSchema).optional(),
  patients: z.lazy(() => PatientUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  events: z.lazy(() => EventUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  eventActions: z.lazy(() => EventActionUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  treatmentPlans: z.lazy(() => TreatmentPlanUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedCreateNestedManyWithoutInvitedByInputSchema).optional(),
  files: z.lazy(() => FileUncheckedCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const UserCreateOrConnectWithoutTasksInputSchema: z.ZodType<Prisma.UserCreateOrConnectWithoutTasksInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UserCreateWithoutTasksInputSchema),z.lazy(() => UserUncheckedCreateWithoutTasksInputSchema) ]),
}).strict();

export const UserUpsertWithoutTasksInputSchema: z.ZodType<Prisma.UserUpsertWithoutTasksInput> = z.object({
  update: z.union([ z.lazy(() => UserUpdateWithoutTasksInputSchema),z.lazy(() => UserUncheckedUpdateWithoutTasksInputSchema) ]),
  create: z.union([ z.lazy(() => UserCreateWithoutTasksInputSchema),z.lazy(() => UserUncheckedCreateWithoutTasksInputSchema) ]),
  where: z.lazy(() => UserWhereInputSchema).optional()
}).strict();

export const UserUpdateToOneWithWhereWithoutTasksInputSchema: z.ZodType<Prisma.UserUpdateToOneWithWhereWithoutTasksInput> = z.object({
  where: z.lazy(() => UserWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => UserUpdateWithoutTasksInputSchema),z.lazy(() => UserUncheckedUpdateWithoutTasksInputSchema) ]),
}).strict();

export const UserUpdateWithoutTasksInputSchema: z.ZodType<Prisma.UserUpdateWithoutTasksInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  index: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.lazy(() => RoleSchema),z.lazy(() => EnumRoleFieldUpdateOperationsInputSchema) ]).optional(),
  workingHours: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  firstDayOfWeek: z.union([ z.lazy(() => DayOfWeekSchema),z.lazy(() => EnumDayOfWeekFieldUpdateOperationsInputSchema) ]).optional(),
  showWeekends: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  webhookApiKey: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  activatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastLoginAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bannedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  speciality: z.lazy(() => SpecialityUpdateOneWithoutUsersNestedInputSchema).optional(),
  profile: z.lazy(() => ProfileUpdateOneRequiredWithoutUsersNestedInputSchema).optional(),
  tenant: z.lazy(() => TenantUpdateOneRequiredWithoutUsersNestedInputSchema).optional(),
  invitation: z.lazy(() => InvitationUpdateOneWithoutUserNestedInputSchema).optional(),
  patients: z.lazy(() => PatientUpdateManyWithoutUserNestedInputSchema).optional(),
  events: z.lazy(() => EventUpdateManyWithoutUserNestedInputSchema).optional(),
  eventActions: z.lazy(() => EventActionUpdateManyWithoutUserNestedInputSchema).optional(),
  treatmentPlans: z.lazy(() => TreatmentPlanUpdateManyWithoutUserNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUpdateManyWithoutInvitedByNestedInputSchema).optional(),
  files: z.lazy(() => FileUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const UserUncheckedUpdateWithoutTasksInputSchema: z.ZodType<Prisma.UserUncheckedUpdateWithoutTasksInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  index: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.lazy(() => RoleSchema),z.lazy(() => EnumRoleFieldUpdateOperationsInputSchema) ]).optional(),
  workingHours: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  firstDayOfWeek: z.union([ z.lazy(() => DayOfWeekSchema),z.lazy(() => EnumDayOfWeekFieldUpdateOperationsInputSchema) ]).optional(),
  showWeekends: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  webhookApiKey: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  specialityId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  profileId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  tenantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  activatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastLoginAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bannedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  invitation: z.lazy(() => InvitationUncheckedUpdateOneWithoutUserNestedInputSchema).optional(),
  patients: z.lazy(() => PatientUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  events: z.lazy(() => EventUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  eventActions: z.lazy(() => EventActionUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  treatmentPlans: z.lazy(() => TreatmentPlanUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedUpdateManyWithoutInvitedByNestedInputSchema).optional(),
  files: z.lazy(() => FileUncheckedUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const TenantCreateWithoutFilesInputSchema: z.ZodType<Prisma.TenantCreateWithoutFilesInput> = z.object({
  id: z.string().cuid().optional(),
  email: z.string(),
  deletedAt: z.coerce.date().optional().nullable(),
  disabledAt: z.coerce.date().optional().nullable(),
  trialExpiresAt: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  users: z.lazy(() => UserCreateNestedManyWithoutTenantInputSchema).optional(),
  profile: z.lazy(() => TenantProfileCreateNestedOneWithoutTenantInputSchema),
  specialities: z.lazy(() => SpecialityCreateNestedManyWithoutTenantInputSchema).optional(),
  preferedByProfiles: z.lazy(() => ProfileCreateNestedManyWithoutPreferredTenantInputSchema).optional(),
  patients: z.lazy(() => PatientCreateNestedManyWithoutTenantInputSchema).optional(),
  services: z.lazy(() => ServiceCreateNestedManyWithoutTenantInputSchema).optional(),
  materials: z.lazy(() => MaterialCreateNestedManyWithoutTenantInputSchema).optional(),
  events: z.lazy(() => EventCreateNestedManyWithoutTenantInputSchema).optional()
}).strict();

export const TenantUncheckedCreateWithoutFilesInputSchema: z.ZodType<Prisma.TenantUncheckedCreateWithoutFilesInput> = z.object({
  id: z.string().cuid().optional(),
  email: z.string(),
  profileId: z.string(),
  deletedAt: z.coerce.date().optional().nullable(),
  disabledAt: z.coerce.date().optional().nullable(),
  trialExpiresAt: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  users: z.lazy(() => UserUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  specialities: z.lazy(() => SpecialityUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  preferedByProfiles: z.lazy(() => ProfileUncheckedCreateNestedManyWithoutPreferredTenantInputSchema).optional(),
  patients: z.lazy(() => PatientUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  services: z.lazy(() => ServiceUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  materials: z.lazy(() => MaterialUncheckedCreateNestedManyWithoutTenantInputSchema).optional(),
  events: z.lazy(() => EventUncheckedCreateNestedManyWithoutTenantInputSchema).optional()
}).strict();

export const TenantCreateOrConnectWithoutFilesInputSchema: z.ZodType<Prisma.TenantCreateOrConnectWithoutFilesInput> = z.object({
  where: z.lazy(() => TenantWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => TenantCreateWithoutFilesInputSchema),z.lazy(() => TenantUncheckedCreateWithoutFilesInputSchema) ]),
}).strict();

export const UserCreateWithoutFilesInputSchema: z.ZodType<Prisma.UserCreateWithoutFilesInput> = z.object({
  id: z.string().cuid().optional(),
  index: z.number().int().optional(),
  role: z.lazy(() => RoleSchema).optional(),
  workingHours: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  firstDayOfWeek: z.lazy(() => DayOfWeekSchema).optional(),
  showWeekends: z.boolean().optional(),
  webhookApiKey: z.string().optional().nullable(),
  deletedAt: z.coerce.date().optional().nullable(),
  activatedAt: z.coerce.date().optional().nullable(),
  lastLoginAt: z.coerce.date().optional().nullable(),
  bannedAt: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  speciality: z.lazy(() => SpecialityCreateNestedOneWithoutUsersInputSchema).optional(),
  profile: z.lazy(() => ProfileCreateNestedOneWithoutUsersInputSchema),
  tenant: z.lazy(() => TenantCreateNestedOneWithoutUsersInputSchema),
  invitation: z.lazy(() => InvitationCreateNestedOneWithoutUserInputSchema).optional(),
  patients: z.lazy(() => PatientCreateNestedManyWithoutUserInputSchema).optional(),
  events: z.lazy(() => EventCreateNestedManyWithoutUserInputSchema).optional(),
  eventActions: z.lazy(() => EventActionCreateNestedManyWithoutUserInputSchema).optional(),
  treatmentPlans: z.lazy(() => TreatmentPlanCreateNestedManyWithoutUserInputSchema).optional(),
  invitations: z.lazy(() => InvitationCreateNestedManyWithoutInvitedByInputSchema).optional(),
  tasks: z.lazy(() => TaskCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const UserUncheckedCreateWithoutFilesInputSchema: z.ZodType<Prisma.UserUncheckedCreateWithoutFilesInput> = z.object({
  id: z.string().cuid().optional(),
  index: z.number().int().optional(),
  role: z.lazy(() => RoleSchema).optional(),
  workingHours: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  firstDayOfWeek: z.lazy(() => DayOfWeekSchema).optional(),
  showWeekends: z.boolean().optional(),
  webhookApiKey: z.string().optional().nullable(),
  specialityId: z.string().optional().nullable(),
  profileId: z.string(),
  tenantId: z.string(),
  deletedAt: z.coerce.date().optional().nullable(),
  activatedAt: z.coerce.date().optional().nullable(),
  lastLoginAt: z.coerce.date().optional().nullable(),
  bannedAt: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  invitation: z.lazy(() => InvitationUncheckedCreateNestedOneWithoutUserInputSchema).optional(),
  patients: z.lazy(() => PatientUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  events: z.lazy(() => EventUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  eventActions: z.lazy(() => EventActionUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  treatmentPlans: z.lazy(() => TreatmentPlanUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedCreateNestedManyWithoutInvitedByInputSchema).optional(),
  tasks: z.lazy(() => TaskUncheckedCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const UserCreateOrConnectWithoutFilesInputSchema: z.ZodType<Prisma.UserCreateOrConnectWithoutFilesInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UserCreateWithoutFilesInputSchema),z.lazy(() => UserUncheckedCreateWithoutFilesInputSchema) ]),
}).strict();

export const EventCreateWithoutFilesInputSchema: z.ZodType<Prisma.EventCreateWithoutFilesInput> = z.object({
  id: z.string().cuid().optional(),
  index: z.number().int().optional(),
  title: z.string(),
  description: z.string().optional().nullable(),
  date: z.coerce.date(),
  start: z.coerce.date().optional().nullable(),
  end: z.coerce.date().optional().nullable(),
  allDay: z.boolean().optional(),
  type: z.lazy(() => EventTypeSchema).optional(),
  status: z.lazy(() => EventStatusSchema).optional(),
  initiator: z.lazy(() => EventInitiatorSchema).optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  visits: z.lazy(() => VisitCreateNestedManyWithoutEventInputSchema).optional(),
  quiz: z.lazy(() => QuizCreateNestedOneWithoutEventInputSchema).optional(),
  actions: z.lazy(() => EventActionCreateNestedManyWithoutEventInputSchema).optional(),
  patient: z.lazy(() => PatientCreateNestedOneWithoutAppointmentsInputSchema).optional(),
  user: z.lazy(() => UserCreateNestedOneWithoutEventsInputSchema),
  tenant: z.lazy(() => TenantCreateNestedOneWithoutEventsInputSchema)
}).strict();

export const EventUncheckedCreateWithoutFilesInputSchema: z.ZodType<Prisma.EventUncheckedCreateWithoutFilesInput> = z.object({
  id: z.string().cuid().optional(),
  index: z.number().int().optional(),
  title: z.string(),
  description: z.string().optional().nullable(),
  date: z.coerce.date(),
  start: z.coerce.date().optional().nullable(),
  end: z.coerce.date().optional().nullable(),
  allDay: z.boolean().optional(),
  type: z.lazy(() => EventTypeSchema).optional(),
  status: z.lazy(() => EventStatusSchema).optional(),
  initiator: z.lazy(() => EventInitiatorSchema).optional(),
  patientId: z.string().optional().nullable(),
  userId: z.string(),
  tenantId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  visits: z.lazy(() => VisitUncheckedCreateNestedManyWithoutEventInputSchema).optional(),
  quiz: z.lazy(() => QuizUncheckedCreateNestedOneWithoutEventInputSchema).optional(),
  actions: z.lazy(() => EventActionUncheckedCreateNestedManyWithoutEventInputSchema).optional()
}).strict();

export const EventCreateOrConnectWithoutFilesInputSchema: z.ZodType<Prisma.EventCreateOrConnectWithoutFilesInput> = z.object({
  where: z.lazy(() => EventWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => EventCreateWithoutFilesInputSchema),z.lazy(() => EventUncheckedCreateWithoutFilesInputSchema) ]),
}).strict();

export const PatientCreateWithoutFilesInputSchema: z.ZodType<Prisma.PatientCreateWithoutFilesInput> = z.object({
  id: z.string().cuid().optional(),
  firstName: z.string(),
  lastName: z.string(),
  gender: z.string().optional().nullable(),
  dob: z.coerce.date().optional().nullable(),
  email: z.string().optional().nullable(),
  phone: z.string().optional().nullable(),
  city: z.string().optional().nullable(),
  county: z.string().optional().nullable(),
  status: z.lazy(() => StatusSchema).optional(),
  smsNotifications: z.boolean().optional(),
  emailNotifications: z.boolean().optional(),
  filters: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  user: z.lazy(() => UserCreateNestedOneWithoutPatientsInputSchema),
  tenant: z.lazy(() => TenantCreateNestedOneWithoutPatientsInputSchema),
  quizes: z.lazy(() => QuizCreateNestedManyWithoutPatientInputSchema).optional(),
  appointments: z.lazy(() => EventCreateNestedManyWithoutPatientInputSchema).optional(),
  treatmentPlans: z.lazy(() => TreatmentPlanCreateNestedManyWithoutPatientInputSchema).optional()
}).strict();

export const PatientUncheckedCreateWithoutFilesInputSchema: z.ZodType<Prisma.PatientUncheckedCreateWithoutFilesInput> = z.object({
  id: z.string().cuid().optional(),
  firstName: z.string(),
  lastName: z.string(),
  gender: z.string().optional().nullable(),
  dob: z.coerce.date().optional().nullable(),
  email: z.string().optional().nullable(),
  phone: z.string().optional().nullable(),
  city: z.string().optional().nullable(),
  county: z.string().optional().nullable(),
  status: z.lazy(() => StatusSchema).optional(),
  smsNotifications: z.boolean().optional(),
  emailNotifications: z.boolean().optional(),
  filters: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  userId: z.string(),
  tenantId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  quizes: z.lazy(() => QuizUncheckedCreateNestedManyWithoutPatientInputSchema).optional(),
  appointments: z.lazy(() => EventUncheckedCreateNestedManyWithoutPatientInputSchema).optional(),
  treatmentPlans: z.lazy(() => TreatmentPlanUncheckedCreateNestedManyWithoutPatientInputSchema).optional()
}).strict();

export const PatientCreateOrConnectWithoutFilesInputSchema: z.ZodType<Prisma.PatientCreateOrConnectWithoutFilesInput> = z.object({
  where: z.lazy(() => PatientWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => PatientCreateWithoutFilesInputSchema),z.lazy(() => PatientUncheckedCreateWithoutFilesInputSchema) ]),
}).strict();

export const TenantUpsertWithoutFilesInputSchema: z.ZodType<Prisma.TenantUpsertWithoutFilesInput> = z.object({
  update: z.union([ z.lazy(() => TenantUpdateWithoutFilesInputSchema),z.lazy(() => TenantUncheckedUpdateWithoutFilesInputSchema) ]),
  create: z.union([ z.lazy(() => TenantCreateWithoutFilesInputSchema),z.lazy(() => TenantUncheckedCreateWithoutFilesInputSchema) ]),
  where: z.lazy(() => TenantWhereInputSchema).optional()
}).strict();

export const TenantUpdateToOneWithWhereWithoutFilesInputSchema: z.ZodType<Prisma.TenantUpdateToOneWithWhereWithoutFilesInput> = z.object({
  where: z.lazy(() => TenantWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => TenantUpdateWithoutFilesInputSchema),z.lazy(() => TenantUncheckedUpdateWithoutFilesInputSchema) ]),
}).strict();

export const TenantUpdateWithoutFilesInputSchema: z.ZodType<Prisma.TenantUpdateWithoutFilesInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  disabledAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  trialExpiresAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  users: z.lazy(() => UserUpdateManyWithoutTenantNestedInputSchema).optional(),
  profile: z.lazy(() => TenantProfileUpdateOneRequiredWithoutTenantNestedInputSchema).optional(),
  specialities: z.lazy(() => SpecialityUpdateManyWithoutTenantNestedInputSchema).optional(),
  preferedByProfiles: z.lazy(() => ProfileUpdateManyWithoutPreferredTenantNestedInputSchema).optional(),
  patients: z.lazy(() => PatientUpdateManyWithoutTenantNestedInputSchema).optional(),
  services: z.lazy(() => ServiceUpdateManyWithoutTenantNestedInputSchema).optional(),
  materials: z.lazy(() => MaterialUpdateManyWithoutTenantNestedInputSchema).optional(),
  events: z.lazy(() => EventUpdateManyWithoutTenantNestedInputSchema).optional()
}).strict();

export const TenantUncheckedUpdateWithoutFilesInputSchema: z.ZodType<Prisma.TenantUncheckedUpdateWithoutFilesInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  profileId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  disabledAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  trialExpiresAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  users: z.lazy(() => UserUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  specialities: z.lazy(() => SpecialityUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  preferedByProfiles: z.lazy(() => ProfileUncheckedUpdateManyWithoutPreferredTenantNestedInputSchema).optional(),
  patients: z.lazy(() => PatientUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  services: z.lazy(() => ServiceUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  materials: z.lazy(() => MaterialUncheckedUpdateManyWithoutTenantNestedInputSchema).optional(),
  events: z.lazy(() => EventUncheckedUpdateManyWithoutTenantNestedInputSchema).optional()
}).strict();

export const UserUpsertWithoutFilesInputSchema: z.ZodType<Prisma.UserUpsertWithoutFilesInput> = z.object({
  update: z.union([ z.lazy(() => UserUpdateWithoutFilesInputSchema),z.lazy(() => UserUncheckedUpdateWithoutFilesInputSchema) ]),
  create: z.union([ z.lazy(() => UserCreateWithoutFilesInputSchema),z.lazy(() => UserUncheckedCreateWithoutFilesInputSchema) ]),
  where: z.lazy(() => UserWhereInputSchema).optional()
}).strict();

export const UserUpdateToOneWithWhereWithoutFilesInputSchema: z.ZodType<Prisma.UserUpdateToOneWithWhereWithoutFilesInput> = z.object({
  where: z.lazy(() => UserWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => UserUpdateWithoutFilesInputSchema),z.lazy(() => UserUncheckedUpdateWithoutFilesInputSchema) ]),
}).strict();

export const UserUpdateWithoutFilesInputSchema: z.ZodType<Prisma.UserUpdateWithoutFilesInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  index: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.lazy(() => RoleSchema),z.lazy(() => EnumRoleFieldUpdateOperationsInputSchema) ]).optional(),
  workingHours: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  firstDayOfWeek: z.union([ z.lazy(() => DayOfWeekSchema),z.lazy(() => EnumDayOfWeekFieldUpdateOperationsInputSchema) ]).optional(),
  showWeekends: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  webhookApiKey: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  activatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastLoginAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bannedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  speciality: z.lazy(() => SpecialityUpdateOneWithoutUsersNestedInputSchema).optional(),
  profile: z.lazy(() => ProfileUpdateOneRequiredWithoutUsersNestedInputSchema).optional(),
  tenant: z.lazy(() => TenantUpdateOneRequiredWithoutUsersNestedInputSchema).optional(),
  invitation: z.lazy(() => InvitationUpdateOneWithoutUserNestedInputSchema).optional(),
  patients: z.lazy(() => PatientUpdateManyWithoutUserNestedInputSchema).optional(),
  events: z.lazy(() => EventUpdateManyWithoutUserNestedInputSchema).optional(),
  eventActions: z.lazy(() => EventActionUpdateManyWithoutUserNestedInputSchema).optional(),
  treatmentPlans: z.lazy(() => TreatmentPlanUpdateManyWithoutUserNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUpdateManyWithoutInvitedByNestedInputSchema).optional(),
  tasks: z.lazy(() => TaskUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const UserUncheckedUpdateWithoutFilesInputSchema: z.ZodType<Prisma.UserUncheckedUpdateWithoutFilesInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  index: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.lazy(() => RoleSchema),z.lazy(() => EnumRoleFieldUpdateOperationsInputSchema) ]).optional(),
  workingHours: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  firstDayOfWeek: z.union([ z.lazy(() => DayOfWeekSchema),z.lazy(() => EnumDayOfWeekFieldUpdateOperationsInputSchema) ]).optional(),
  showWeekends: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  webhookApiKey: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  specialityId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  profileId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  tenantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  activatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastLoginAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bannedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  invitation: z.lazy(() => InvitationUncheckedUpdateOneWithoutUserNestedInputSchema).optional(),
  patients: z.lazy(() => PatientUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  events: z.lazy(() => EventUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  eventActions: z.lazy(() => EventActionUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  treatmentPlans: z.lazy(() => TreatmentPlanUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedUpdateManyWithoutInvitedByNestedInputSchema).optional(),
  tasks: z.lazy(() => TaskUncheckedUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const EventUpsertWithoutFilesInputSchema: z.ZodType<Prisma.EventUpsertWithoutFilesInput> = z.object({
  update: z.union([ z.lazy(() => EventUpdateWithoutFilesInputSchema),z.lazy(() => EventUncheckedUpdateWithoutFilesInputSchema) ]),
  create: z.union([ z.lazy(() => EventCreateWithoutFilesInputSchema),z.lazy(() => EventUncheckedCreateWithoutFilesInputSchema) ]),
  where: z.lazy(() => EventWhereInputSchema).optional()
}).strict();

export const EventUpdateToOneWithWhereWithoutFilesInputSchema: z.ZodType<Prisma.EventUpdateToOneWithWhereWithoutFilesInput> = z.object({
  where: z.lazy(() => EventWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => EventUpdateWithoutFilesInputSchema),z.lazy(() => EventUncheckedUpdateWithoutFilesInputSchema) ]),
}).strict();

export const EventUpdateWithoutFilesInputSchema: z.ZodType<Prisma.EventUpdateWithoutFilesInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  title: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  start: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  end: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  allDay: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => EventTypeSchema),z.lazy(() => EnumEventTypeFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => EventStatusSchema),z.lazy(() => EnumEventStatusFieldUpdateOperationsInputSchema) ]).optional(),
  initiator: z.union([ z.lazy(() => EventInitiatorSchema),z.lazy(() => EnumEventInitiatorFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  visits: z.lazy(() => VisitUpdateManyWithoutEventNestedInputSchema).optional(),
  quiz: z.lazy(() => QuizUpdateOneWithoutEventNestedInputSchema).optional(),
  actions: z.lazy(() => EventActionUpdateManyWithoutEventNestedInputSchema).optional(),
  patient: z.lazy(() => PatientUpdateOneWithoutAppointmentsNestedInputSchema).optional(),
  user: z.lazy(() => UserUpdateOneRequiredWithoutEventsNestedInputSchema).optional(),
  tenant: z.lazy(() => TenantUpdateOneRequiredWithoutEventsNestedInputSchema).optional()
}).strict();

export const EventUncheckedUpdateWithoutFilesInputSchema: z.ZodType<Prisma.EventUncheckedUpdateWithoutFilesInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  index: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  title: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  start: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  end: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  allDay: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => EventTypeSchema),z.lazy(() => EnumEventTypeFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => EventStatusSchema),z.lazy(() => EnumEventStatusFieldUpdateOperationsInputSchema) ]).optional(),
  initiator: z.union([ z.lazy(() => EventInitiatorSchema),z.lazy(() => EnumEventInitiatorFieldUpdateOperationsInputSchema) ]).optional(),
  patientId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  tenantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  visits: z.lazy(() => VisitUncheckedUpdateManyWithoutEventNestedInputSchema).optional(),
  quiz: z.lazy(() => QuizUncheckedUpdateOneWithoutEventNestedInputSchema).optional(),
  actions: z.lazy(() => EventActionUncheckedUpdateManyWithoutEventNestedInputSchema).optional()
}).strict();

export const PatientUpsertWithoutFilesInputSchema: z.ZodType<Prisma.PatientUpsertWithoutFilesInput> = z.object({
  update: z.union([ z.lazy(() => PatientUpdateWithoutFilesInputSchema),z.lazy(() => PatientUncheckedUpdateWithoutFilesInputSchema) ]),
  create: z.union([ z.lazy(() => PatientCreateWithoutFilesInputSchema),z.lazy(() => PatientUncheckedCreateWithoutFilesInputSchema) ]),
  where: z.lazy(() => PatientWhereInputSchema).optional()
}).strict();

export const PatientUpdateToOneWithWhereWithoutFilesInputSchema: z.ZodType<Prisma.PatientUpdateToOneWithWhereWithoutFilesInput> = z.object({
  where: z.lazy(() => PatientWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => PatientUpdateWithoutFilesInputSchema),z.lazy(() => PatientUncheckedUpdateWithoutFilesInputSchema) ]),
}).strict();

export const PatientUpdateWithoutFilesInputSchema: z.ZodType<Prisma.PatientUpdateWithoutFilesInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  firstName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  lastName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  gender: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  dob: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  city: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  county: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.lazy(() => StatusSchema),z.lazy(() => EnumStatusFieldUpdateOperationsInputSchema) ]).optional(),
  smsNotifications: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  emailNotifications: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  filters: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  user: z.lazy(() => UserUpdateOneRequiredWithoutPatientsNestedInputSchema).optional(),
  tenant: z.lazy(() => TenantUpdateOneRequiredWithoutPatientsNestedInputSchema).optional(),
  quizes: z.lazy(() => QuizUpdateManyWithoutPatientNestedInputSchema).optional(),
  appointments: z.lazy(() => EventUpdateManyWithoutPatientNestedInputSchema).optional(),
  treatmentPlans: z.lazy(() => TreatmentPlanUpdateManyWithoutPatientNestedInputSchema).optional()
}).strict();

export const PatientUncheckedUpdateWithoutFilesInputSchema: z.ZodType<Prisma.PatientUncheckedUpdateWithoutFilesInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  firstName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  lastName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  gender: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  dob: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  city: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  county: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.lazy(() => StatusSchema),z.lazy(() => EnumStatusFieldUpdateOperationsInputSchema) ]).optional(),
  smsNotifications: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  emailNotifications: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  filters: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  tenantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  quizes: z.lazy(() => QuizUncheckedUpdateManyWithoutPatientNestedInputSchema).optional(),
  appointments: z.lazy(() => EventUncheckedUpdateManyWithoutPatientNestedInputSchema).optional(),
  treatmentPlans: z.lazy(() => TreatmentPlanUncheckedUpdateManyWithoutPatientNestedInputSchema).optional()
}).strict();

export const ProfileCreateWithoutAvatarInputSchema: z.ZodType<Prisma.ProfileCreateWithoutAvatarInput> = z.object({
  id: z.string().cuid().optional(),
  title: z.string().optional().nullable(),
  firstName: z.string(),
  lastName: z.string(),
  email: z.string(),
  phone: z.string().optional().nullable(),
  activatedAt: z.coerce.date().optional().nullable(),
  stripeCustomerId: z.string().optional().nullable(),
  stripeFreeTrialUsed: z.boolean().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  preferredTenant: z.lazy(() => TenantCreateNestedOneWithoutPreferedByProfilesInputSchema).optional(),
  users: z.lazy(() => UserCreateNestedManyWithoutProfileInputSchema).optional(),
  accounts: z.lazy(() => AccountCreateNestedManyWithoutProfileInputSchema).optional(),
  tokens: z.lazy(() => TokenCreateNestedManyWithoutProfileInputSchema).optional()
}).strict();

export const ProfileUncheckedCreateWithoutAvatarInputSchema: z.ZodType<Prisma.ProfileUncheckedCreateWithoutAvatarInput> = z.object({
  id: z.string().cuid().optional(),
  title: z.string().optional().nullable(),
  firstName: z.string(),
  lastName: z.string(),
  email: z.string(),
  phone: z.string().optional().nullable(),
  activatedAt: z.coerce.date().optional().nullable(),
  stripeCustomerId: z.string().optional().nullable(),
  stripeFreeTrialUsed: z.boolean().optional(),
  preferredTenantId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  users: z.lazy(() => UserUncheckedCreateNestedManyWithoutProfileInputSchema).optional(),
  accounts: z.lazy(() => AccountUncheckedCreateNestedManyWithoutProfileInputSchema).optional(),
  tokens: z.lazy(() => TokenUncheckedCreateNestedManyWithoutProfileInputSchema).optional()
}).strict();

export const ProfileCreateOrConnectWithoutAvatarInputSchema: z.ZodType<Prisma.ProfileCreateOrConnectWithoutAvatarInput> = z.object({
  where: z.lazy(() => ProfileWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ProfileCreateWithoutAvatarInputSchema),z.lazy(() => ProfileUncheckedCreateWithoutAvatarInputSchema) ]),
}).strict();

export const TenantProfileCreateWithoutAvatarInputSchema: z.ZodType<Prisma.TenantProfileCreateWithoutAvatarInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  county: z.string().optional().nullable(),
  address: z.string().optional().nullable(),
  zip: z.string().optional().nullable(),
  phone: z.string().optional().nullable(),
  size: z.string().optional().nullable(),
  stripeSubscriptionId: z.string(),
  activeSubscription: z.boolean().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  plan: z.lazy(() => PlanCreateNestedOneWithoutTenantProfilesInputSchema),
  tenant: z.lazy(() => TenantCreateNestedOneWithoutProfileInputSchema).optional()
}).strict();

export const TenantProfileUncheckedCreateWithoutAvatarInputSchema: z.ZodType<Prisma.TenantProfileUncheckedCreateWithoutAvatarInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  county: z.string().optional().nullable(),
  address: z.string().optional().nullable(),
  zip: z.string().optional().nullable(),
  phone: z.string().optional().nullable(),
  size: z.string().optional().nullable(),
  stripeSubscriptionId: z.string(),
  activeSubscription: z.boolean().optional(),
  planId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  tenant: z.lazy(() => TenantUncheckedCreateNestedOneWithoutProfileInputSchema).optional()
}).strict();

export const TenantProfileCreateOrConnectWithoutAvatarInputSchema: z.ZodType<Prisma.TenantProfileCreateOrConnectWithoutAvatarInput> = z.object({
  where: z.lazy(() => TenantProfileWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => TenantProfileCreateWithoutAvatarInputSchema),z.lazy(() => TenantProfileUncheckedCreateWithoutAvatarInputSchema) ]),
}).strict();

export const ProfileUpsertWithoutAvatarInputSchema: z.ZodType<Prisma.ProfileUpsertWithoutAvatarInput> = z.object({
  update: z.union([ z.lazy(() => ProfileUpdateWithoutAvatarInputSchema),z.lazy(() => ProfileUncheckedUpdateWithoutAvatarInputSchema) ]),
  create: z.union([ z.lazy(() => ProfileCreateWithoutAvatarInputSchema),z.lazy(() => ProfileUncheckedCreateWithoutAvatarInputSchema) ]),
  where: z.lazy(() => ProfileWhereInputSchema).optional()
}).strict();

export const ProfileUpdateToOneWithWhereWithoutAvatarInputSchema: z.ZodType<Prisma.ProfileUpdateToOneWithWhereWithoutAvatarInput> = z.object({
  where: z.lazy(() => ProfileWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => ProfileUpdateWithoutAvatarInputSchema),z.lazy(() => ProfileUncheckedUpdateWithoutAvatarInputSchema) ]),
}).strict();

export const ProfileUpdateWithoutAvatarInputSchema: z.ZodType<Prisma.ProfileUpdateWithoutAvatarInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  title: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  firstName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  lastName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  activatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  stripeCustomerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  stripeFreeTrialUsed: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  preferredTenant: z.lazy(() => TenantUpdateOneWithoutPreferedByProfilesNestedInputSchema).optional(),
  users: z.lazy(() => UserUpdateManyWithoutProfileNestedInputSchema).optional(),
  accounts: z.lazy(() => AccountUpdateManyWithoutProfileNestedInputSchema).optional(),
  tokens: z.lazy(() => TokenUpdateManyWithoutProfileNestedInputSchema).optional()
}).strict();

export const ProfileUncheckedUpdateWithoutAvatarInputSchema: z.ZodType<Prisma.ProfileUncheckedUpdateWithoutAvatarInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  title: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  firstName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  lastName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  activatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  stripeCustomerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  stripeFreeTrialUsed: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  preferredTenantId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  users: z.lazy(() => UserUncheckedUpdateManyWithoutProfileNestedInputSchema).optional(),
  accounts: z.lazy(() => AccountUncheckedUpdateManyWithoutProfileNestedInputSchema).optional(),
  tokens: z.lazy(() => TokenUncheckedUpdateManyWithoutProfileNestedInputSchema).optional()
}).strict();

export const TenantProfileUpsertWithoutAvatarInputSchema: z.ZodType<Prisma.TenantProfileUpsertWithoutAvatarInput> = z.object({
  update: z.union([ z.lazy(() => TenantProfileUpdateWithoutAvatarInputSchema),z.lazy(() => TenantProfileUncheckedUpdateWithoutAvatarInputSchema) ]),
  create: z.union([ z.lazy(() => TenantProfileCreateWithoutAvatarInputSchema),z.lazy(() => TenantProfileUncheckedCreateWithoutAvatarInputSchema) ]),
  where: z.lazy(() => TenantProfileWhereInputSchema).optional()
}).strict();

export const TenantProfileUpdateToOneWithWhereWithoutAvatarInputSchema: z.ZodType<Prisma.TenantProfileUpdateToOneWithWhereWithoutAvatarInput> = z.object({
  where: z.lazy(() => TenantProfileWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => TenantProfileUpdateWithoutAvatarInputSchema),z.lazy(() => TenantProfileUncheckedUpdateWithoutAvatarInputSchema) ]),
}).strict();

export const TenantProfileUpdateWithoutAvatarInputSchema: z.ZodType<Prisma.TenantProfileUpdateWithoutAvatarInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  county: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  address: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  zip: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  size: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  stripeSubscriptionId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  activeSubscription: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  plan: z.lazy(() => PlanUpdateOneRequiredWithoutTenantProfilesNestedInputSchema).optional(),
  tenant: z.lazy(() => TenantUpdateOneWithoutProfileNestedInputSchema).optional()
}).strict();

export const TenantProfileUncheckedUpdateWithoutAvatarInputSchema: z.ZodType<Prisma.TenantProfileUncheckedUpdateWithoutAvatarInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  county: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  address: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  zip: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  size: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  stripeSubscriptionId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  activeSubscription: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  planId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  tenant: z.lazy(() => TenantUncheckedUpdateOneWithoutProfileNestedInputSchema).optional()
}).strict();

export const CityCreateWithoutCountyInputSchema: z.ZodType<Prisma.CityCreateWithoutCountyInput> = z.object({
  id: z.string().optional(),
  name: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const CityUncheckedCreateWithoutCountyInputSchema: z.ZodType<Prisma.CityUncheckedCreateWithoutCountyInput> = z.object({
  id: z.string().optional(),
  name: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const CityCreateOrConnectWithoutCountyInputSchema: z.ZodType<Prisma.CityCreateOrConnectWithoutCountyInput> = z.object({
  where: z.lazy(() => CityWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => CityCreateWithoutCountyInputSchema),z.lazy(() => CityUncheckedCreateWithoutCountyInputSchema) ]),
}).strict();

export const CityCreateManyCountyInputEnvelopeSchema: z.ZodType<Prisma.CityCreateManyCountyInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => CityCreateManyCountyInputSchema),z.lazy(() => CityCreateManyCountyInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const CityUpsertWithWhereUniqueWithoutCountyInputSchema: z.ZodType<Prisma.CityUpsertWithWhereUniqueWithoutCountyInput> = z.object({
  where: z.lazy(() => CityWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => CityUpdateWithoutCountyInputSchema),z.lazy(() => CityUncheckedUpdateWithoutCountyInputSchema) ]),
  create: z.union([ z.lazy(() => CityCreateWithoutCountyInputSchema),z.lazy(() => CityUncheckedCreateWithoutCountyInputSchema) ]),
}).strict();

export const CityUpdateWithWhereUniqueWithoutCountyInputSchema: z.ZodType<Prisma.CityUpdateWithWhereUniqueWithoutCountyInput> = z.object({
  where: z.lazy(() => CityWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => CityUpdateWithoutCountyInputSchema),z.lazy(() => CityUncheckedUpdateWithoutCountyInputSchema) ]),
}).strict();

export const CityUpdateManyWithWhereWithoutCountyInputSchema: z.ZodType<Prisma.CityUpdateManyWithWhereWithoutCountyInput> = z.object({
  where: z.lazy(() => CityScalarWhereInputSchema),
  data: z.union([ z.lazy(() => CityUpdateManyMutationInputSchema),z.lazy(() => CityUncheckedUpdateManyWithoutCountyInputSchema) ]),
}).strict();

export const CityScalarWhereInputSchema: z.ZodType<Prisma.CityScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => CityScalarWhereInputSchema),z.lazy(() => CityScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => CityScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => CityScalarWhereInputSchema),z.lazy(() => CityScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  countyId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const CountyCreateWithoutCitiesInputSchema: z.ZodType<Prisma.CountyCreateWithoutCitiesInput> = z.object({
  id: z.string().optional(),
  name: z.string(),
  code: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const CountyUncheckedCreateWithoutCitiesInputSchema: z.ZodType<Prisma.CountyUncheckedCreateWithoutCitiesInput> = z.object({
  id: z.string().optional(),
  name: z.string(),
  code: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const CountyCreateOrConnectWithoutCitiesInputSchema: z.ZodType<Prisma.CountyCreateOrConnectWithoutCitiesInput> = z.object({
  where: z.lazy(() => CountyWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => CountyCreateWithoutCitiesInputSchema),z.lazy(() => CountyUncheckedCreateWithoutCitiesInputSchema) ]),
}).strict();

export const CountyUpsertWithoutCitiesInputSchema: z.ZodType<Prisma.CountyUpsertWithoutCitiesInput> = z.object({
  update: z.union([ z.lazy(() => CountyUpdateWithoutCitiesInputSchema),z.lazy(() => CountyUncheckedUpdateWithoutCitiesInputSchema) ]),
  create: z.union([ z.lazy(() => CountyCreateWithoutCitiesInputSchema),z.lazy(() => CountyUncheckedCreateWithoutCitiesInputSchema) ]),
  where: z.lazy(() => CountyWhereInputSchema).optional()
}).strict();

export const CountyUpdateToOneWithWhereWithoutCitiesInputSchema: z.ZodType<Prisma.CountyUpdateToOneWithWhereWithoutCitiesInput> = z.object({
  where: z.lazy(() => CountyWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => CountyUpdateWithoutCitiesInputSchema),z.lazy(() => CountyUncheckedUpdateWithoutCitiesInputSchema) ]),
}).strict();

export const CountyUpdateWithoutCitiesInputSchema: z.ZodType<Prisma.CountyUpdateWithoutCitiesInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  code: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const CountyUncheckedUpdateWithoutCitiesInputSchema: z.ZodType<Prisma.CountyUncheckedUpdateWithoutCitiesInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  code: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const UserCreateManyTenantInputSchema: z.ZodType<Prisma.UserCreateManyTenantInput> = z.object({
  id: z.string().cuid().optional(),
  index: z.number().int().optional(),
  role: z.lazy(() => RoleSchema).optional(),
  workingHours: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  firstDayOfWeek: z.lazy(() => DayOfWeekSchema).optional(),
  showWeekends: z.boolean().optional(),
  webhookApiKey: z.string().optional().nullable(),
  specialityId: z.string().optional().nullable(),
  profileId: z.string(),
  deletedAt: z.coerce.date().optional().nullable(),
  activatedAt: z.coerce.date().optional().nullable(),
  lastLoginAt: z.coerce.date().optional().nullable(),
  bannedAt: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const SpecialityCreateManyTenantInputSchema: z.ZodType<Prisma.SpecialityCreateManyTenantInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  color: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const ProfileCreateManyPreferredTenantInputSchema: z.ZodType<Prisma.ProfileCreateManyPreferredTenantInput> = z.object({
  id: z.string().cuid().optional(),
  title: z.string().optional().nullable(),
  firstName: z.string(),
  lastName: z.string(),
  email: z.string(),
  phone: z.string().optional().nullable(),
  activatedAt: z.coerce.date().optional().nullable(),
  stripeCustomerId: z.string().optional().nullable(),
  stripeFreeTrialUsed: z.boolean().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const PatientCreateManyTenantInputSchema: z.ZodType<Prisma.PatientCreateManyTenantInput> = z.object({
  id: z.string().cuid().optional(),
  firstName: z.string(),
  lastName: z.string(),
  gender: z.string().optional().nullable(),
  dob: z.coerce.date().optional().nullable(),
  email: z.string().optional().nullable(),
  phone: z.string().optional().nullable(),
  city: z.string().optional().nullable(),
  county: z.string().optional().nullable(),
  status: z.lazy(() => StatusSchema).optional(),
  smsNotifications: z.boolean().optional(),
  emailNotifications: z.boolean().optional(),
  filters: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  userId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const ServiceCreateManyTenantInputSchema: z.ZodType<Prisma.ServiceCreateManyTenantInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  unit_price: z.number().int(),
  unit: z.lazy(() => ServiceUnitSchema),
  duration: z.number().int().optional(),
  image: z.string().optional().nullable(),
  tags: z.union([ z.lazy(() => ServiceCreatetagsInputSchema),z.string().array() ]).optional(),
  isActive: z.boolean().optional(),
  categoryId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const MaterialCreateManyTenantInputSchema: z.ZodType<Prisma.MaterialCreateManyTenantInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  unit_price: z.number().int(),
  unit: z.string().optional(),
  image: z.string().optional().nullable(),
  tags: z.union([ z.lazy(() => MaterialCreatetagsInputSchema),z.string().array() ]).optional(),
  isActive: z.boolean().optional(),
  keepInventory: z.boolean().optional(),
  stock: z.number().int().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const EventCreateManyTenantInputSchema: z.ZodType<Prisma.EventCreateManyTenantInput> = z.object({
  id: z.string().cuid().optional(),
  index: z.number().int().optional(),
  title: z.string(),
  description: z.string().optional().nullable(),
  date: z.coerce.date(),
  start: z.coerce.date().optional().nullable(),
  end: z.coerce.date().optional().nullable(),
  allDay: z.boolean().optional(),
  type: z.lazy(() => EventTypeSchema).optional(),
  status: z.lazy(() => EventStatusSchema).optional(),
  initiator: z.lazy(() => EventInitiatorSchema).optional(),
  patientId: z.string().optional().nullable(),
  userId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const FileCreateManyTenantInputSchema: z.ZodType<Prisma.FileCreateManyTenantInput> = z.object({
  id: z.string().cuid().optional(),
  url: z.string(),
  key: z.string(),
  name: z.string(),
  extension: z.string(),
  contentType: z.string(),
  size: z.number().int(),
  confirmed: z.boolean().optional(),
  userId: z.string(),
  eventId: z.string().optional().nullable(),
  patientId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const UserUpdateWithoutTenantInputSchema: z.ZodType<Prisma.UserUpdateWithoutTenantInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  index: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.lazy(() => RoleSchema),z.lazy(() => EnumRoleFieldUpdateOperationsInputSchema) ]).optional(),
  workingHours: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  firstDayOfWeek: z.union([ z.lazy(() => DayOfWeekSchema),z.lazy(() => EnumDayOfWeekFieldUpdateOperationsInputSchema) ]).optional(),
  showWeekends: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  webhookApiKey: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  activatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastLoginAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bannedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  speciality: z.lazy(() => SpecialityUpdateOneWithoutUsersNestedInputSchema).optional(),
  profile: z.lazy(() => ProfileUpdateOneRequiredWithoutUsersNestedInputSchema).optional(),
  invitation: z.lazy(() => InvitationUpdateOneWithoutUserNestedInputSchema).optional(),
  patients: z.lazy(() => PatientUpdateManyWithoutUserNestedInputSchema).optional(),
  events: z.lazy(() => EventUpdateManyWithoutUserNestedInputSchema).optional(),
  eventActions: z.lazy(() => EventActionUpdateManyWithoutUserNestedInputSchema).optional(),
  treatmentPlans: z.lazy(() => TreatmentPlanUpdateManyWithoutUserNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUpdateManyWithoutInvitedByNestedInputSchema).optional(),
  files: z.lazy(() => FileUpdateManyWithoutUserNestedInputSchema).optional(),
  tasks: z.lazy(() => TaskUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const UserUncheckedUpdateWithoutTenantInputSchema: z.ZodType<Prisma.UserUncheckedUpdateWithoutTenantInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  index: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.lazy(() => RoleSchema),z.lazy(() => EnumRoleFieldUpdateOperationsInputSchema) ]).optional(),
  workingHours: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  firstDayOfWeek: z.union([ z.lazy(() => DayOfWeekSchema),z.lazy(() => EnumDayOfWeekFieldUpdateOperationsInputSchema) ]).optional(),
  showWeekends: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  webhookApiKey: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  specialityId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  profileId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  activatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastLoginAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bannedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  invitation: z.lazy(() => InvitationUncheckedUpdateOneWithoutUserNestedInputSchema).optional(),
  patients: z.lazy(() => PatientUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  events: z.lazy(() => EventUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  eventActions: z.lazy(() => EventActionUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  treatmentPlans: z.lazy(() => TreatmentPlanUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedUpdateManyWithoutInvitedByNestedInputSchema).optional(),
  files: z.lazy(() => FileUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  tasks: z.lazy(() => TaskUncheckedUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const UserUncheckedUpdateManyWithoutTenantInputSchema: z.ZodType<Prisma.UserUncheckedUpdateManyWithoutTenantInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  index: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.lazy(() => RoleSchema),z.lazy(() => EnumRoleFieldUpdateOperationsInputSchema) ]).optional(),
  workingHours: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  firstDayOfWeek: z.union([ z.lazy(() => DayOfWeekSchema),z.lazy(() => EnumDayOfWeekFieldUpdateOperationsInputSchema) ]).optional(),
  showWeekends: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  webhookApiKey: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  specialityId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  profileId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  activatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastLoginAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bannedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const SpecialityUpdateWithoutTenantInputSchema: z.ZodType<Prisma.SpecialityUpdateWithoutTenantInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  color: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  users: z.lazy(() => UserUpdateManyWithoutSpecialityNestedInputSchema).optional()
}).strict();

export const SpecialityUncheckedUpdateWithoutTenantInputSchema: z.ZodType<Prisma.SpecialityUncheckedUpdateWithoutTenantInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  color: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  users: z.lazy(() => UserUncheckedUpdateManyWithoutSpecialityNestedInputSchema).optional()
}).strict();

export const SpecialityUncheckedUpdateManyWithoutTenantInputSchema: z.ZodType<Prisma.SpecialityUncheckedUpdateManyWithoutTenantInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  color: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ProfileUpdateWithoutPreferredTenantInputSchema: z.ZodType<Prisma.ProfileUpdateWithoutPreferredTenantInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  title: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  firstName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  lastName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  activatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  stripeCustomerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  stripeFreeTrialUsed: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  avatar: z.lazy(() => AvatarUpdateOneWithoutProfileNestedInputSchema).optional(),
  users: z.lazy(() => UserUpdateManyWithoutProfileNestedInputSchema).optional(),
  accounts: z.lazy(() => AccountUpdateManyWithoutProfileNestedInputSchema).optional(),
  tokens: z.lazy(() => TokenUpdateManyWithoutProfileNestedInputSchema).optional()
}).strict();

export const ProfileUncheckedUpdateWithoutPreferredTenantInputSchema: z.ZodType<Prisma.ProfileUncheckedUpdateWithoutPreferredTenantInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  title: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  firstName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  lastName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  activatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  stripeCustomerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  stripeFreeTrialUsed: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  avatar: z.lazy(() => AvatarUncheckedUpdateOneWithoutProfileNestedInputSchema).optional(),
  users: z.lazy(() => UserUncheckedUpdateManyWithoutProfileNestedInputSchema).optional(),
  accounts: z.lazy(() => AccountUncheckedUpdateManyWithoutProfileNestedInputSchema).optional(),
  tokens: z.lazy(() => TokenUncheckedUpdateManyWithoutProfileNestedInputSchema).optional()
}).strict();

export const ProfileUncheckedUpdateManyWithoutPreferredTenantInputSchema: z.ZodType<Prisma.ProfileUncheckedUpdateManyWithoutPreferredTenantInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  title: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  firstName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  lastName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  activatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  stripeCustomerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  stripeFreeTrialUsed: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const PatientUpdateWithoutTenantInputSchema: z.ZodType<Prisma.PatientUpdateWithoutTenantInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  firstName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  lastName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  gender: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  dob: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  city: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  county: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.lazy(() => StatusSchema),z.lazy(() => EnumStatusFieldUpdateOperationsInputSchema) ]).optional(),
  smsNotifications: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  emailNotifications: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  filters: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  user: z.lazy(() => UserUpdateOneRequiredWithoutPatientsNestedInputSchema).optional(),
  files: z.lazy(() => FileUpdateManyWithoutPatientNestedInputSchema).optional(),
  quizes: z.lazy(() => QuizUpdateManyWithoutPatientNestedInputSchema).optional(),
  appointments: z.lazy(() => EventUpdateManyWithoutPatientNestedInputSchema).optional(),
  treatmentPlans: z.lazy(() => TreatmentPlanUpdateManyWithoutPatientNestedInputSchema).optional()
}).strict();

export const PatientUncheckedUpdateWithoutTenantInputSchema: z.ZodType<Prisma.PatientUncheckedUpdateWithoutTenantInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  firstName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  lastName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  gender: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  dob: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  city: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  county: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.lazy(() => StatusSchema),z.lazy(() => EnumStatusFieldUpdateOperationsInputSchema) ]).optional(),
  smsNotifications: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  emailNotifications: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  filters: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  files: z.lazy(() => FileUncheckedUpdateManyWithoutPatientNestedInputSchema).optional(),
  quizes: z.lazy(() => QuizUncheckedUpdateManyWithoutPatientNestedInputSchema).optional(),
  appointments: z.lazy(() => EventUncheckedUpdateManyWithoutPatientNestedInputSchema).optional(),
  treatmentPlans: z.lazy(() => TreatmentPlanUncheckedUpdateManyWithoutPatientNestedInputSchema).optional()
}).strict();

export const PatientUncheckedUpdateManyWithoutTenantInputSchema: z.ZodType<Prisma.PatientUncheckedUpdateManyWithoutTenantInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  firstName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  lastName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  gender: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  dob: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  city: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  county: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.lazy(() => StatusSchema),z.lazy(() => EnumStatusFieldUpdateOperationsInputSchema) ]).optional(),
  smsNotifications: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  emailNotifications: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  filters: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ServiceUpdateWithoutTenantInputSchema: z.ZodType<Prisma.ServiceUpdateWithoutTenantInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  unit_price: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  unit: z.union([ z.lazy(() => ServiceUnitSchema),z.lazy(() => EnumServiceUnitFieldUpdateOperationsInputSchema) ]).optional(),
  duration: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  image: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tags: z.union([ z.lazy(() => ServiceUpdatetagsInputSchema),z.string().array() ]).optional(),
  isActive: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  category: z.lazy(() => ServiceCategoryUpdateOneWithoutServicesNestedInputSchema).optional(),
  materials: z.lazy(() => ServiceMaterialUpdateManyWithoutServiceNestedInputSchema).optional(),
  visits: z.lazy(() => VisitUpdateManyWithoutServiceNestedInputSchema).optional(),
  children: z.lazy(() => RelatedServiceUpdateManyWithoutParentNestedInputSchema).optional()
}).strict();

export const ServiceUncheckedUpdateWithoutTenantInputSchema: z.ZodType<Prisma.ServiceUncheckedUpdateWithoutTenantInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  unit_price: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  unit: z.union([ z.lazy(() => ServiceUnitSchema),z.lazy(() => EnumServiceUnitFieldUpdateOperationsInputSchema) ]).optional(),
  duration: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  image: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tags: z.union([ z.lazy(() => ServiceUpdatetagsInputSchema),z.string().array() ]).optional(),
  isActive: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  categoryId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  materials: z.lazy(() => ServiceMaterialUncheckedUpdateManyWithoutServiceNestedInputSchema).optional(),
  visits: z.lazy(() => VisitUncheckedUpdateManyWithoutServiceNestedInputSchema).optional(),
  children: z.lazy(() => RelatedServiceUncheckedUpdateManyWithoutParentNestedInputSchema).optional()
}).strict();

export const ServiceUncheckedUpdateManyWithoutTenantInputSchema: z.ZodType<Prisma.ServiceUncheckedUpdateManyWithoutTenantInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  unit_price: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  unit: z.union([ z.lazy(() => ServiceUnitSchema),z.lazy(() => EnumServiceUnitFieldUpdateOperationsInputSchema) ]).optional(),
  duration: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  image: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tags: z.union([ z.lazy(() => ServiceUpdatetagsInputSchema),z.string().array() ]).optional(),
  isActive: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  categoryId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const MaterialUpdateWithoutTenantInputSchema: z.ZodType<Prisma.MaterialUpdateWithoutTenantInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  unit_price: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  unit: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  image: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tags: z.union([ z.lazy(() => MaterialUpdatetagsInputSchema),z.string().array() ]).optional(),
  isActive: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  keepInventory: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  stock: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  services: z.lazy(() => ServiceMaterialUpdateManyWithoutMaterialNestedInputSchema).optional()
}).strict();

export const MaterialUncheckedUpdateWithoutTenantInputSchema: z.ZodType<Prisma.MaterialUncheckedUpdateWithoutTenantInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  unit_price: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  unit: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  image: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tags: z.union([ z.lazy(() => MaterialUpdatetagsInputSchema),z.string().array() ]).optional(),
  isActive: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  keepInventory: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  stock: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  services: z.lazy(() => ServiceMaterialUncheckedUpdateManyWithoutMaterialNestedInputSchema).optional()
}).strict();

export const MaterialUncheckedUpdateManyWithoutTenantInputSchema: z.ZodType<Prisma.MaterialUncheckedUpdateManyWithoutTenantInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  unit_price: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  unit: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  image: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tags: z.union([ z.lazy(() => MaterialUpdatetagsInputSchema),z.string().array() ]).optional(),
  isActive: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  keepInventory: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  stock: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const EventUpdateWithoutTenantInputSchema: z.ZodType<Prisma.EventUpdateWithoutTenantInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  title: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  start: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  end: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  allDay: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => EventTypeSchema),z.lazy(() => EnumEventTypeFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => EventStatusSchema),z.lazy(() => EnumEventStatusFieldUpdateOperationsInputSchema) ]).optional(),
  initiator: z.union([ z.lazy(() => EventInitiatorSchema),z.lazy(() => EnumEventInitiatorFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  visits: z.lazy(() => VisitUpdateManyWithoutEventNestedInputSchema).optional(),
  quiz: z.lazy(() => QuizUpdateOneWithoutEventNestedInputSchema).optional(),
  actions: z.lazy(() => EventActionUpdateManyWithoutEventNestedInputSchema).optional(),
  files: z.lazy(() => FileUpdateManyWithoutEventNestedInputSchema).optional(),
  patient: z.lazy(() => PatientUpdateOneWithoutAppointmentsNestedInputSchema).optional(),
  user: z.lazy(() => UserUpdateOneRequiredWithoutEventsNestedInputSchema).optional()
}).strict();

export const EventUncheckedUpdateWithoutTenantInputSchema: z.ZodType<Prisma.EventUncheckedUpdateWithoutTenantInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  index: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  title: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  start: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  end: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  allDay: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => EventTypeSchema),z.lazy(() => EnumEventTypeFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => EventStatusSchema),z.lazy(() => EnumEventStatusFieldUpdateOperationsInputSchema) ]).optional(),
  initiator: z.union([ z.lazy(() => EventInitiatorSchema),z.lazy(() => EnumEventInitiatorFieldUpdateOperationsInputSchema) ]).optional(),
  patientId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  visits: z.lazy(() => VisitUncheckedUpdateManyWithoutEventNestedInputSchema).optional(),
  quiz: z.lazy(() => QuizUncheckedUpdateOneWithoutEventNestedInputSchema).optional(),
  actions: z.lazy(() => EventActionUncheckedUpdateManyWithoutEventNestedInputSchema).optional(),
  files: z.lazy(() => FileUncheckedUpdateManyWithoutEventNestedInputSchema).optional()
}).strict();

export const EventUncheckedUpdateManyWithoutTenantInputSchema: z.ZodType<Prisma.EventUncheckedUpdateManyWithoutTenantInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  index: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  title: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  start: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  end: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  allDay: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => EventTypeSchema),z.lazy(() => EnumEventTypeFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => EventStatusSchema),z.lazy(() => EnumEventStatusFieldUpdateOperationsInputSchema) ]).optional(),
  initiator: z.union([ z.lazy(() => EventInitiatorSchema),z.lazy(() => EnumEventInitiatorFieldUpdateOperationsInputSchema) ]).optional(),
  patientId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const FileUpdateWithoutTenantInputSchema: z.ZodType<Prisma.FileUpdateWithoutTenantInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  url: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  key: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  extension: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  contentType: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  size: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  confirmed: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  user: z.lazy(() => UserUpdateOneRequiredWithoutFilesNestedInputSchema).optional(),
  event: z.lazy(() => EventUpdateOneWithoutFilesNestedInputSchema).optional(),
  patient: z.lazy(() => PatientUpdateOneWithoutFilesNestedInputSchema).optional()
}).strict();

export const FileUncheckedUpdateWithoutTenantInputSchema: z.ZodType<Prisma.FileUncheckedUpdateWithoutTenantInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  url: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  key: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  extension: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  contentType: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  size: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  confirmed: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  eventId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  patientId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const FileUncheckedUpdateManyWithoutTenantInputSchema: z.ZodType<Prisma.FileUncheckedUpdateManyWithoutTenantInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  url: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  key: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  extension: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  contentType: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  size: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  confirmed: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  eventId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  patientId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const PatientCreateManyUserInputSchema: z.ZodType<Prisma.PatientCreateManyUserInput> = z.object({
  id: z.string().cuid().optional(),
  firstName: z.string(),
  lastName: z.string(),
  gender: z.string().optional().nullable(),
  dob: z.coerce.date().optional().nullable(),
  email: z.string().optional().nullable(),
  phone: z.string().optional().nullable(),
  city: z.string().optional().nullable(),
  county: z.string().optional().nullable(),
  status: z.lazy(() => StatusSchema).optional(),
  smsNotifications: z.boolean().optional(),
  emailNotifications: z.boolean().optional(),
  filters: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  tenantId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const EventCreateManyUserInputSchema: z.ZodType<Prisma.EventCreateManyUserInput> = z.object({
  id: z.string().cuid().optional(),
  index: z.number().int().optional(),
  title: z.string(),
  description: z.string().optional().nullable(),
  date: z.coerce.date(),
  start: z.coerce.date().optional().nullable(),
  end: z.coerce.date().optional().nullable(),
  allDay: z.boolean().optional(),
  type: z.lazy(() => EventTypeSchema).optional(),
  status: z.lazy(() => EventStatusSchema).optional(),
  initiator: z.lazy(() => EventInitiatorSchema).optional(),
  patientId: z.string().optional().nullable(),
  tenantId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const EventActionCreateManyUserInputSchema: z.ZodType<Prisma.EventActionCreateManyUserInput> = z.object({
  id: z.string().cuid().optional(),
  data: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  eventId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const TreatmentPlanCreateManyUserInputSchema: z.ZodType<Prisma.TreatmentPlanCreateManyUserInput> = z.object({
  id: z.string().cuid().optional(),
  description: z.string().optional().nullable(),
  isDone: z.boolean().optional(),
  patientId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const InvitationCreateManyInvitedByInputSchema: z.ZodType<Prisma.InvitationCreateManyInvitedByInput> = z.object({
  id: z.string().cuid().optional(),
  email: z.string(),
  role: z.lazy(() => RoleSchema),
  token: z.string(),
  expires: z.coerce.date(),
  userId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const FileCreateManyUserInputSchema: z.ZodType<Prisma.FileCreateManyUserInput> = z.object({
  id: z.string().cuid().optional(),
  url: z.string(),
  key: z.string(),
  name: z.string(),
  extension: z.string(),
  contentType: z.string(),
  size: z.number().int(),
  confirmed: z.boolean().optional(),
  tenantId: z.string(),
  eventId: z.string().optional().nullable(),
  patientId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const TaskCreateManyUserInputSchema: z.ZodType<Prisma.TaskCreateManyUserInput> = z.object({
  id: z.string().cuid().optional(),
  title: z.string(),
  isDone: z.boolean().optional(),
  dueDate: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const PatientUpdateWithoutUserInputSchema: z.ZodType<Prisma.PatientUpdateWithoutUserInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  firstName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  lastName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  gender: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  dob: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  city: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  county: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.lazy(() => StatusSchema),z.lazy(() => EnumStatusFieldUpdateOperationsInputSchema) ]).optional(),
  smsNotifications: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  emailNotifications: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  filters: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  tenant: z.lazy(() => TenantUpdateOneRequiredWithoutPatientsNestedInputSchema).optional(),
  files: z.lazy(() => FileUpdateManyWithoutPatientNestedInputSchema).optional(),
  quizes: z.lazy(() => QuizUpdateManyWithoutPatientNestedInputSchema).optional(),
  appointments: z.lazy(() => EventUpdateManyWithoutPatientNestedInputSchema).optional(),
  treatmentPlans: z.lazy(() => TreatmentPlanUpdateManyWithoutPatientNestedInputSchema).optional()
}).strict();

export const PatientUncheckedUpdateWithoutUserInputSchema: z.ZodType<Prisma.PatientUncheckedUpdateWithoutUserInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  firstName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  lastName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  gender: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  dob: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  city: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  county: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.lazy(() => StatusSchema),z.lazy(() => EnumStatusFieldUpdateOperationsInputSchema) ]).optional(),
  smsNotifications: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  emailNotifications: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  filters: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  tenantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  files: z.lazy(() => FileUncheckedUpdateManyWithoutPatientNestedInputSchema).optional(),
  quizes: z.lazy(() => QuizUncheckedUpdateManyWithoutPatientNestedInputSchema).optional(),
  appointments: z.lazy(() => EventUncheckedUpdateManyWithoutPatientNestedInputSchema).optional(),
  treatmentPlans: z.lazy(() => TreatmentPlanUncheckedUpdateManyWithoutPatientNestedInputSchema).optional()
}).strict();

export const PatientUncheckedUpdateManyWithoutUserInputSchema: z.ZodType<Prisma.PatientUncheckedUpdateManyWithoutUserInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  firstName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  lastName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  gender: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  dob: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  city: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  county: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.lazy(() => StatusSchema),z.lazy(() => EnumStatusFieldUpdateOperationsInputSchema) ]).optional(),
  smsNotifications: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  emailNotifications: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  filters: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  tenantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const EventUpdateWithoutUserInputSchema: z.ZodType<Prisma.EventUpdateWithoutUserInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  title: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  start: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  end: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  allDay: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => EventTypeSchema),z.lazy(() => EnumEventTypeFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => EventStatusSchema),z.lazy(() => EnumEventStatusFieldUpdateOperationsInputSchema) ]).optional(),
  initiator: z.union([ z.lazy(() => EventInitiatorSchema),z.lazy(() => EnumEventInitiatorFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  visits: z.lazy(() => VisitUpdateManyWithoutEventNestedInputSchema).optional(),
  quiz: z.lazy(() => QuizUpdateOneWithoutEventNestedInputSchema).optional(),
  actions: z.lazy(() => EventActionUpdateManyWithoutEventNestedInputSchema).optional(),
  files: z.lazy(() => FileUpdateManyWithoutEventNestedInputSchema).optional(),
  patient: z.lazy(() => PatientUpdateOneWithoutAppointmentsNestedInputSchema).optional(),
  tenant: z.lazy(() => TenantUpdateOneRequiredWithoutEventsNestedInputSchema).optional()
}).strict();

export const EventUncheckedUpdateWithoutUserInputSchema: z.ZodType<Prisma.EventUncheckedUpdateWithoutUserInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  index: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  title: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  start: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  end: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  allDay: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => EventTypeSchema),z.lazy(() => EnumEventTypeFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => EventStatusSchema),z.lazy(() => EnumEventStatusFieldUpdateOperationsInputSchema) ]).optional(),
  initiator: z.union([ z.lazy(() => EventInitiatorSchema),z.lazy(() => EnumEventInitiatorFieldUpdateOperationsInputSchema) ]).optional(),
  patientId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tenantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  visits: z.lazy(() => VisitUncheckedUpdateManyWithoutEventNestedInputSchema).optional(),
  quiz: z.lazy(() => QuizUncheckedUpdateOneWithoutEventNestedInputSchema).optional(),
  actions: z.lazy(() => EventActionUncheckedUpdateManyWithoutEventNestedInputSchema).optional(),
  files: z.lazy(() => FileUncheckedUpdateManyWithoutEventNestedInputSchema).optional()
}).strict();

export const EventUncheckedUpdateManyWithoutUserInputSchema: z.ZodType<Prisma.EventUncheckedUpdateManyWithoutUserInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  index: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  title: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  start: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  end: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  allDay: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => EventTypeSchema),z.lazy(() => EnumEventTypeFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => EventStatusSchema),z.lazy(() => EnumEventStatusFieldUpdateOperationsInputSchema) ]).optional(),
  initiator: z.union([ z.lazy(() => EventInitiatorSchema),z.lazy(() => EnumEventInitiatorFieldUpdateOperationsInputSchema) ]).optional(),
  patientId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tenantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const EventActionUpdateWithoutUserInputSchema: z.ZodType<Prisma.EventActionUpdateWithoutUserInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  data: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  event: z.lazy(() => EventUpdateOneRequiredWithoutActionsNestedInputSchema).optional()
}).strict();

export const EventActionUncheckedUpdateWithoutUserInputSchema: z.ZodType<Prisma.EventActionUncheckedUpdateWithoutUserInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  data: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  eventId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const EventActionUncheckedUpdateManyWithoutUserInputSchema: z.ZodType<Prisma.EventActionUncheckedUpdateManyWithoutUserInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  data: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  eventId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const TreatmentPlanUpdateWithoutUserInputSchema: z.ZodType<Prisma.TreatmentPlanUpdateWithoutUserInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isDone: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  treatments: z.lazy(() => TreatmentUpdateManyWithoutTreatmentPlanNestedInputSchema).optional(),
  patient: z.lazy(() => PatientUpdateOneRequiredWithoutTreatmentPlansNestedInputSchema).optional()
}).strict();

export const TreatmentPlanUncheckedUpdateWithoutUserInputSchema: z.ZodType<Prisma.TreatmentPlanUncheckedUpdateWithoutUserInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isDone: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  patientId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  treatments: z.lazy(() => TreatmentUncheckedUpdateManyWithoutTreatmentPlanNestedInputSchema).optional()
}).strict();

export const TreatmentPlanUncheckedUpdateManyWithoutUserInputSchema: z.ZodType<Prisma.TreatmentPlanUncheckedUpdateManyWithoutUserInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isDone: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  patientId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const InvitationUpdateWithoutInvitedByInputSchema: z.ZodType<Prisma.InvitationUpdateWithoutInvitedByInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.lazy(() => RoleSchema),z.lazy(() => EnumRoleFieldUpdateOperationsInputSchema) ]).optional(),
  token: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  expires: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  user: z.lazy(() => UserUpdateOneWithoutInvitationNestedInputSchema).optional()
}).strict();

export const InvitationUncheckedUpdateWithoutInvitedByInputSchema: z.ZodType<Prisma.InvitationUncheckedUpdateWithoutInvitedByInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.lazy(() => RoleSchema),z.lazy(() => EnumRoleFieldUpdateOperationsInputSchema) ]).optional(),
  token: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  expires: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const InvitationUncheckedUpdateManyWithoutInvitedByInputSchema: z.ZodType<Prisma.InvitationUncheckedUpdateManyWithoutInvitedByInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.lazy(() => RoleSchema),z.lazy(() => EnumRoleFieldUpdateOperationsInputSchema) ]).optional(),
  token: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  expires: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const FileUpdateWithoutUserInputSchema: z.ZodType<Prisma.FileUpdateWithoutUserInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  url: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  key: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  extension: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  contentType: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  size: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  confirmed: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  tenant: z.lazy(() => TenantUpdateOneRequiredWithoutFilesNestedInputSchema).optional(),
  event: z.lazy(() => EventUpdateOneWithoutFilesNestedInputSchema).optional(),
  patient: z.lazy(() => PatientUpdateOneWithoutFilesNestedInputSchema).optional()
}).strict();

export const FileUncheckedUpdateWithoutUserInputSchema: z.ZodType<Prisma.FileUncheckedUpdateWithoutUserInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  url: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  key: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  extension: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  contentType: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  size: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  confirmed: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  tenantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  eventId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  patientId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const FileUncheckedUpdateManyWithoutUserInputSchema: z.ZodType<Prisma.FileUncheckedUpdateManyWithoutUserInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  url: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  key: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  extension: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  contentType: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  size: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  confirmed: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  tenantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  eventId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  patientId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const TaskUpdateWithoutUserInputSchema: z.ZodType<Prisma.TaskUpdateWithoutUserInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  title: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  isDone: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  dueDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const TaskUncheckedUpdateWithoutUserInputSchema: z.ZodType<Prisma.TaskUncheckedUpdateWithoutUserInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  title: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  isDone: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  dueDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const TaskUncheckedUpdateManyWithoutUserInputSchema: z.ZodType<Prisma.TaskUncheckedUpdateManyWithoutUserInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  title: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  isDone: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  dueDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const UserCreateManyProfileInputSchema: z.ZodType<Prisma.UserCreateManyProfileInput> = z.object({
  id: z.string().cuid().optional(),
  index: z.number().int().optional(),
  role: z.lazy(() => RoleSchema).optional(),
  workingHours: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  firstDayOfWeek: z.lazy(() => DayOfWeekSchema).optional(),
  showWeekends: z.boolean().optional(),
  webhookApiKey: z.string().optional().nullable(),
  specialityId: z.string().optional().nullable(),
  tenantId: z.string(),
  deletedAt: z.coerce.date().optional().nullable(),
  activatedAt: z.coerce.date().optional().nullable(),
  lastLoginAt: z.coerce.date().optional().nullable(),
  bannedAt: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const AccountCreateManyProfileInputSchema: z.ZodType<Prisma.AccountCreateManyProfileInput> = z.object({
  id: z.string().cuid().optional(),
  type: z.string(),
  provider: z.string(),
  passwordHash: z.string().optional().nullable(),
  refresh_token: z.string().optional().nullable(),
  access_token: z.string().optional().nullable(),
  expires_at: z.coerce.date().optional().nullable(),
  refresh_token_expires_in: z.number().int().optional().nullable(),
  token_type: z.string().optional().nullable(),
  scope: z.string().optional().nullable(),
  id_token: z.string().optional().nullable(),
  session_state: z.string().optional().nullable()
}).strict();

export const TokenCreateManyProfileInputSchema: z.ZodType<Prisma.TokenCreateManyProfileInput> = z.object({
  id: z.string().cuid().optional(),
  type: z.lazy(() => TokenTypeSchema),
  token: z.string(),
  expires: z.coerce.date()
}).strict();

export const UserUpdateWithoutProfileInputSchema: z.ZodType<Prisma.UserUpdateWithoutProfileInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  index: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.lazy(() => RoleSchema),z.lazy(() => EnumRoleFieldUpdateOperationsInputSchema) ]).optional(),
  workingHours: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  firstDayOfWeek: z.union([ z.lazy(() => DayOfWeekSchema),z.lazy(() => EnumDayOfWeekFieldUpdateOperationsInputSchema) ]).optional(),
  showWeekends: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  webhookApiKey: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  activatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastLoginAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bannedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  speciality: z.lazy(() => SpecialityUpdateOneWithoutUsersNestedInputSchema).optional(),
  tenant: z.lazy(() => TenantUpdateOneRequiredWithoutUsersNestedInputSchema).optional(),
  invitation: z.lazy(() => InvitationUpdateOneWithoutUserNestedInputSchema).optional(),
  patients: z.lazy(() => PatientUpdateManyWithoutUserNestedInputSchema).optional(),
  events: z.lazy(() => EventUpdateManyWithoutUserNestedInputSchema).optional(),
  eventActions: z.lazy(() => EventActionUpdateManyWithoutUserNestedInputSchema).optional(),
  treatmentPlans: z.lazy(() => TreatmentPlanUpdateManyWithoutUserNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUpdateManyWithoutInvitedByNestedInputSchema).optional(),
  files: z.lazy(() => FileUpdateManyWithoutUserNestedInputSchema).optional(),
  tasks: z.lazy(() => TaskUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const UserUncheckedUpdateWithoutProfileInputSchema: z.ZodType<Prisma.UserUncheckedUpdateWithoutProfileInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  index: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.lazy(() => RoleSchema),z.lazy(() => EnumRoleFieldUpdateOperationsInputSchema) ]).optional(),
  workingHours: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  firstDayOfWeek: z.union([ z.lazy(() => DayOfWeekSchema),z.lazy(() => EnumDayOfWeekFieldUpdateOperationsInputSchema) ]).optional(),
  showWeekends: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  webhookApiKey: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  specialityId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tenantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  activatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastLoginAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bannedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  invitation: z.lazy(() => InvitationUncheckedUpdateOneWithoutUserNestedInputSchema).optional(),
  patients: z.lazy(() => PatientUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  events: z.lazy(() => EventUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  eventActions: z.lazy(() => EventActionUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  treatmentPlans: z.lazy(() => TreatmentPlanUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedUpdateManyWithoutInvitedByNestedInputSchema).optional(),
  files: z.lazy(() => FileUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  tasks: z.lazy(() => TaskUncheckedUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const UserUncheckedUpdateManyWithoutProfileInputSchema: z.ZodType<Prisma.UserUncheckedUpdateManyWithoutProfileInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  index: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.lazy(() => RoleSchema),z.lazy(() => EnumRoleFieldUpdateOperationsInputSchema) ]).optional(),
  workingHours: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  firstDayOfWeek: z.union([ z.lazy(() => DayOfWeekSchema),z.lazy(() => EnumDayOfWeekFieldUpdateOperationsInputSchema) ]).optional(),
  showWeekends: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  webhookApiKey: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  specialityId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tenantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  activatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastLoginAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bannedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const AccountUpdateWithoutProfileInputSchema: z.ZodType<Prisma.AccountUpdateWithoutProfileInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  provider: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  passwordHash: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  refresh_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  access_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  expires_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  refresh_token_expires_in: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  token_type: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  scope: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  id_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  session_state: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const AccountUncheckedUpdateWithoutProfileInputSchema: z.ZodType<Prisma.AccountUncheckedUpdateWithoutProfileInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  provider: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  passwordHash: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  refresh_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  access_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  expires_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  refresh_token_expires_in: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  token_type: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  scope: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  id_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  session_state: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const AccountUncheckedUpdateManyWithoutProfileInputSchema: z.ZodType<Prisma.AccountUncheckedUpdateManyWithoutProfileInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  provider: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  passwordHash: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  refresh_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  access_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  expires_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  refresh_token_expires_in: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  token_type: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  scope: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  id_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  session_state: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const TokenUpdateWithoutProfileInputSchema: z.ZodType<Prisma.TokenUpdateWithoutProfileInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => TokenTypeSchema),z.lazy(() => EnumTokenTypeFieldUpdateOperationsInputSchema) ]).optional(),
  token: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  expires: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const TokenUncheckedUpdateWithoutProfileInputSchema: z.ZodType<Prisma.TokenUncheckedUpdateWithoutProfileInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => TokenTypeSchema),z.lazy(() => EnumTokenTypeFieldUpdateOperationsInputSchema) ]).optional(),
  token: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  expires: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const TokenUncheckedUpdateManyWithoutProfileInputSchema: z.ZodType<Prisma.TokenUncheckedUpdateManyWithoutProfileInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => TokenTypeSchema),z.lazy(() => EnumTokenTypeFieldUpdateOperationsInputSchema) ]).optional(),
  token: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  expires: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const TenantProfileCreateManyPlanInputSchema: z.ZodType<Prisma.TenantProfileCreateManyPlanInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  county: z.string().optional().nullable(),
  address: z.string().optional().nullable(),
  zip: z.string().optional().nullable(),
  phone: z.string().optional().nullable(),
  size: z.string().optional().nullable(),
  stripeSubscriptionId: z.string(),
  activeSubscription: z.boolean().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const TenantProfileUpdateWithoutPlanInputSchema: z.ZodType<Prisma.TenantProfileUpdateWithoutPlanInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  county: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  address: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  zip: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  size: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  stripeSubscriptionId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  activeSubscription: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  avatar: z.lazy(() => AvatarUpdateOneWithoutTenantProfileNestedInputSchema).optional(),
  tenant: z.lazy(() => TenantUpdateOneWithoutProfileNestedInputSchema).optional()
}).strict();

export const TenantProfileUncheckedUpdateWithoutPlanInputSchema: z.ZodType<Prisma.TenantProfileUncheckedUpdateWithoutPlanInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  county: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  address: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  zip: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  size: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  stripeSubscriptionId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  activeSubscription: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  avatar: z.lazy(() => AvatarUncheckedUpdateOneWithoutTenantProfileNestedInputSchema).optional(),
  tenant: z.lazy(() => TenantUncheckedUpdateOneWithoutProfileNestedInputSchema).optional()
}).strict();

export const TenantProfileUncheckedUpdateManyWithoutPlanInputSchema: z.ZodType<Prisma.TenantProfileUncheckedUpdateManyWithoutPlanInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  county: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  address: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  zip: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  size: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  stripeSubscriptionId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  activeSubscription: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const FileCreateManyPatientInputSchema: z.ZodType<Prisma.FileCreateManyPatientInput> = z.object({
  id: z.string().cuid().optional(),
  url: z.string(),
  key: z.string(),
  name: z.string(),
  extension: z.string(),
  contentType: z.string(),
  size: z.number().int(),
  confirmed: z.boolean().optional(),
  tenantId: z.string(),
  userId: z.string(),
  eventId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const QuizCreateManyPatientInputSchema: z.ZodType<Prisma.QuizCreateManyPatientInput> = z.object({
  id: z.string().cuid().optional(),
  quiz: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  answers: z.union([ z.lazy(() => QuizCreateanswersInputSchema),z.number().int().array() ]).optional(),
  eventId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const EventCreateManyPatientInputSchema: z.ZodType<Prisma.EventCreateManyPatientInput> = z.object({
  id: z.string().cuid().optional(),
  index: z.number().int().optional(),
  title: z.string(),
  description: z.string().optional().nullable(),
  date: z.coerce.date(),
  start: z.coerce.date().optional().nullable(),
  end: z.coerce.date().optional().nullable(),
  allDay: z.boolean().optional(),
  type: z.lazy(() => EventTypeSchema).optional(),
  status: z.lazy(() => EventStatusSchema).optional(),
  initiator: z.lazy(() => EventInitiatorSchema).optional(),
  userId: z.string(),
  tenantId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const TreatmentPlanCreateManyPatientInputSchema: z.ZodType<Prisma.TreatmentPlanCreateManyPatientInput> = z.object({
  id: z.string().cuid().optional(),
  description: z.string().optional().nullable(),
  isDone: z.boolean().optional(),
  userId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const FileUpdateWithoutPatientInputSchema: z.ZodType<Prisma.FileUpdateWithoutPatientInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  url: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  key: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  extension: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  contentType: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  size: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  confirmed: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  tenant: z.lazy(() => TenantUpdateOneRequiredWithoutFilesNestedInputSchema).optional(),
  user: z.lazy(() => UserUpdateOneRequiredWithoutFilesNestedInputSchema).optional(),
  event: z.lazy(() => EventUpdateOneWithoutFilesNestedInputSchema).optional()
}).strict();

export const FileUncheckedUpdateWithoutPatientInputSchema: z.ZodType<Prisma.FileUncheckedUpdateWithoutPatientInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  url: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  key: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  extension: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  contentType: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  size: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  confirmed: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  tenantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  eventId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const FileUncheckedUpdateManyWithoutPatientInputSchema: z.ZodType<Prisma.FileUncheckedUpdateManyWithoutPatientInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  url: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  key: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  extension: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  contentType: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  size: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  confirmed: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  tenantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  eventId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const QuizUpdateWithoutPatientInputSchema: z.ZodType<Prisma.QuizUpdateWithoutPatientInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  quiz: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  answers: z.union([ z.lazy(() => QuizUpdateanswersInputSchema),z.number().int().array() ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  event: z.lazy(() => EventUpdateOneWithoutQuizNestedInputSchema).optional()
}).strict();

export const QuizUncheckedUpdateWithoutPatientInputSchema: z.ZodType<Prisma.QuizUncheckedUpdateWithoutPatientInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  quiz: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  answers: z.union([ z.lazy(() => QuizUpdateanswersInputSchema),z.number().int().array() ]).optional(),
  eventId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const QuizUncheckedUpdateManyWithoutPatientInputSchema: z.ZodType<Prisma.QuizUncheckedUpdateManyWithoutPatientInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  quiz: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  answers: z.union([ z.lazy(() => QuizUpdateanswersInputSchema),z.number().int().array() ]).optional(),
  eventId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const EventUpdateWithoutPatientInputSchema: z.ZodType<Prisma.EventUpdateWithoutPatientInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  title: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  start: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  end: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  allDay: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => EventTypeSchema),z.lazy(() => EnumEventTypeFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => EventStatusSchema),z.lazy(() => EnumEventStatusFieldUpdateOperationsInputSchema) ]).optional(),
  initiator: z.union([ z.lazy(() => EventInitiatorSchema),z.lazy(() => EnumEventInitiatorFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  visits: z.lazy(() => VisitUpdateManyWithoutEventNestedInputSchema).optional(),
  quiz: z.lazy(() => QuizUpdateOneWithoutEventNestedInputSchema).optional(),
  actions: z.lazy(() => EventActionUpdateManyWithoutEventNestedInputSchema).optional(),
  files: z.lazy(() => FileUpdateManyWithoutEventNestedInputSchema).optional(),
  user: z.lazy(() => UserUpdateOneRequiredWithoutEventsNestedInputSchema).optional(),
  tenant: z.lazy(() => TenantUpdateOneRequiredWithoutEventsNestedInputSchema).optional()
}).strict();

export const EventUncheckedUpdateWithoutPatientInputSchema: z.ZodType<Prisma.EventUncheckedUpdateWithoutPatientInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  index: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  title: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  start: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  end: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  allDay: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => EventTypeSchema),z.lazy(() => EnumEventTypeFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => EventStatusSchema),z.lazy(() => EnumEventStatusFieldUpdateOperationsInputSchema) ]).optional(),
  initiator: z.union([ z.lazy(() => EventInitiatorSchema),z.lazy(() => EnumEventInitiatorFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  tenantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  visits: z.lazy(() => VisitUncheckedUpdateManyWithoutEventNestedInputSchema).optional(),
  quiz: z.lazy(() => QuizUncheckedUpdateOneWithoutEventNestedInputSchema).optional(),
  actions: z.lazy(() => EventActionUncheckedUpdateManyWithoutEventNestedInputSchema).optional(),
  files: z.lazy(() => FileUncheckedUpdateManyWithoutEventNestedInputSchema).optional()
}).strict();

export const EventUncheckedUpdateManyWithoutPatientInputSchema: z.ZodType<Prisma.EventUncheckedUpdateManyWithoutPatientInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  index: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  title: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  start: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  end: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  allDay: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => EventTypeSchema),z.lazy(() => EnumEventTypeFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => EventStatusSchema),z.lazy(() => EnumEventStatusFieldUpdateOperationsInputSchema) ]).optional(),
  initiator: z.union([ z.lazy(() => EventInitiatorSchema),z.lazy(() => EnumEventInitiatorFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  tenantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const TreatmentPlanUpdateWithoutPatientInputSchema: z.ZodType<Prisma.TreatmentPlanUpdateWithoutPatientInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isDone: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  treatments: z.lazy(() => TreatmentUpdateManyWithoutTreatmentPlanNestedInputSchema).optional(),
  user: z.lazy(() => UserUpdateOneRequiredWithoutTreatmentPlansNestedInputSchema).optional()
}).strict();

export const TreatmentPlanUncheckedUpdateWithoutPatientInputSchema: z.ZodType<Prisma.TreatmentPlanUncheckedUpdateWithoutPatientInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isDone: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  treatments: z.lazy(() => TreatmentUncheckedUpdateManyWithoutTreatmentPlanNestedInputSchema).optional()
}).strict();

export const TreatmentPlanUncheckedUpdateManyWithoutPatientInputSchema: z.ZodType<Prisma.TreatmentPlanUncheckedUpdateManyWithoutPatientInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isDone: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const UserCreateManySpecialityInputSchema: z.ZodType<Prisma.UserCreateManySpecialityInput> = z.object({
  id: z.string().cuid().optional(),
  index: z.number().int().optional(),
  role: z.lazy(() => RoleSchema).optional(),
  workingHours: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  firstDayOfWeek: z.lazy(() => DayOfWeekSchema).optional(),
  showWeekends: z.boolean().optional(),
  webhookApiKey: z.string().optional().nullable(),
  profileId: z.string(),
  tenantId: z.string(),
  deletedAt: z.coerce.date().optional().nullable(),
  activatedAt: z.coerce.date().optional().nullable(),
  lastLoginAt: z.coerce.date().optional().nullable(),
  bannedAt: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const UserUpdateWithoutSpecialityInputSchema: z.ZodType<Prisma.UserUpdateWithoutSpecialityInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  index: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.lazy(() => RoleSchema),z.lazy(() => EnumRoleFieldUpdateOperationsInputSchema) ]).optional(),
  workingHours: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  firstDayOfWeek: z.union([ z.lazy(() => DayOfWeekSchema),z.lazy(() => EnumDayOfWeekFieldUpdateOperationsInputSchema) ]).optional(),
  showWeekends: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  webhookApiKey: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  activatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastLoginAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bannedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  profile: z.lazy(() => ProfileUpdateOneRequiredWithoutUsersNestedInputSchema).optional(),
  tenant: z.lazy(() => TenantUpdateOneRequiredWithoutUsersNestedInputSchema).optional(),
  invitation: z.lazy(() => InvitationUpdateOneWithoutUserNestedInputSchema).optional(),
  patients: z.lazy(() => PatientUpdateManyWithoutUserNestedInputSchema).optional(),
  events: z.lazy(() => EventUpdateManyWithoutUserNestedInputSchema).optional(),
  eventActions: z.lazy(() => EventActionUpdateManyWithoutUserNestedInputSchema).optional(),
  treatmentPlans: z.lazy(() => TreatmentPlanUpdateManyWithoutUserNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUpdateManyWithoutInvitedByNestedInputSchema).optional(),
  files: z.lazy(() => FileUpdateManyWithoutUserNestedInputSchema).optional(),
  tasks: z.lazy(() => TaskUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const UserUncheckedUpdateWithoutSpecialityInputSchema: z.ZodType<Prisma.UserUncheckedUpdateWithoutSpecialityInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  index: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.lazy(() => RoleSchema),z.lazy(() => EnumRoleFieldUpdateOperationsInputSchema) ]).optional(),
  workingHours: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  firstDayOfWeek: z.union([ z.lazy(() => DayOfWeekSchema),z.lazy(() => EnumDayOfWeekFieldUpdateOperationsInputSchema) ]).optional(),
  showWeekends: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  webhookApiKey: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  profileId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  tenantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  activatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastLoginAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bannedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  invitation: z.lazy(() => InvitationUncheckedUpdateOneWithoutUserNestedInputSchema).optional(),
  patients: z.lazy(() => PatientUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  events: z.lazy(() => EventUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  eventActions: z.lazy(() => EventActionUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  treatmentPlans: z.lazy(() => TreatmentPlanUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedUpdateManyWithoutInvitedByNestedInputSchema).optional(),
  files: z.lazy(() => FileUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  tasks: z.lazy(() => TaskUncheckedUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const UserUncheckedUpdateManyWithoutSpecialityInputSchema: z.ZodType<Prisma.UserUncheckedUpdateManyWithoutSpecialityInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  index: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.lazy(() => RoleSchema),z.lazy(() => EnumRoleFieldUpdateOperationsInputSchema) ]).optional(),
  workingHours: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  firstDayOfWeek: z.union([ z.lazy(() => DayOfWeekSchema),z.lazy(() => EnumDayOfWeekFieldUpdateOperationsInputSchema) ]).optional(),
  showWeekends: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  webhookApiKey: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  profileId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  tenantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  deletedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  activatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastLoginAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bannedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const VisitCreateManyEventInputSchema: z.ZodType<Prisma.VisitCreateManyEventInput> = z.object({
  id: z.string().cuid().optional(),
  serviceId: z.string(),
  treatmentId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const EventActionCreateManyEventInputSchema: z.ZodType<Prisma.EventActionCreateManyEventInput> = z.object({
  id: z.string().cuid().optional(),
  data: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  userId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const FileCreateManyEventInputSchema: z.ZodType<Prisma.FileCreateManyEventInput> = z.object({
  id: z.string().cuid().optional(),
  url: z.string(),
  key: z.string(),
  name: z.string(),
  extension: z.string(),
  contentType: z.string(),
  size: z.number().int(),
  confirmed: z.boolean().optional(),
  tenantId: z.string(),
  userId: z.string(),
  patientId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const VisitUpdateWithoutEventInputSchema: z.ZodType<Prisma.VisitUpdateWithoutEventInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  service: z.lazy(() => ServiceUpdateOneRequiredWithoutVisitsNestedInputSchema).optional(),
  treatment: z.lazy(() => TreatmentUpdateOneRequiredWithoutVisitsNestedInputSchema).optional()
}).strict();

export const VisitUncheckedUpdateWithoutEventInputSchema: z.ZodType<Prisma.VisitUncheckedUpdateWithoutEventInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  serviceId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  treatmentId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const VisitUncheckedUpdateManyWithoutEventInputSchema: z.ZodType<Prisma.VisitUncheckedUpdateManyWithoutEventInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  serviceId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  treatmentId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const EventActionUpdateWithoutEventInputSchema: z.ZodType<Prisma.EventActionUpdateWithoutEventInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  data: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  user: z.lazy(() => UserUpdateOneRequiredWithoutEventActionsNestedInputSchema).optional()
}).strict();

export const EventActionUncheckedUpdateWithoutEventInputSchema: z.ZodType<Prisma.EventActionUncheckedUpdateWithoutEventInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  data: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const EventActionUncheckedUpdateManyWithoutEventInputSchema: z.ZodType<Prisma.EventActionUncheckedUpdateManyWithoutEventInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  data: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const FileUpdateWithoutEventInputSchema: z.ZodType<Prisma.FileUpdateWithoutEventInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  url: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  key: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  extension: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  contentType: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  size: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  confirmed: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  tenant: z.lazy(() => TenantUpdateOneRequiredWithoutFilesNestedInputSchema).optional(),
  user: z.lazy(() => UserUpdateOneRequiredWithoutFilesNestedInputSchema).optional(),
  patient: z.lazy(() => PatientUpdateOneWithoutFilesNestedInputSchema).optional()
}).strict();

export const FileUncheckedUpdateWithoutEventInputSchema: z.ZodType<Prisma.FileUncheckedUpdateWithoutEventInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  url: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  key: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  extension: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  contentType: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  size: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  confirmed: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  tenantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  patientId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const FileUncheckedUpdateManyWithoutEventInputSchema: z.ZodType<Prisma.FileUncheckedUpdateManyWithoutEventInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  url: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  key: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  extension: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  contentType: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  size: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  confirmed: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  tenantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  patientId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ServiceMaterialCreateManyMaterialInputSchema: z.ZodType<Prisma.ServiceMaterialCreateManyMaterialInput> = z.object({
  id: z.string().cuid().optional(),
  quantity: z.number().int(),
  unit_price: z.number().int(),
  serviceId: z.string()
}).strict();

export const ServiceMaterialUpdateWithoutMaterialInputSchema: z.ZodType<Prisma.ServiceMaterialUpdateWithoutMaterialInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  quantity: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  unit_price: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  service: z.lazy(() => ServiceUpdateOneRequiredWithoutMaterialsNestedInputSchema).optional()
}).strict();

export const ServiceMaterialUncheckedUpdateWithoutMaterialInputSchema: z.ZodType<Prisma.ServiceMaterialUncheckedUpdateWithoutMaterialInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  quantity: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  unit_price: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  serviceId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ServiceMaterialUncheckedUpdateManyWithoutMaterialInputSchema: z.ZodType<Prisma.ServiceMaterialUncheckedUpdateManyWithoutMaterialInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  quantity: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  unit_price: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  serviceId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ServiceMaterialCreateManyServiceInputSchema: z.ZodType<Prisma.ServiceMaterialCreateManyServiceInput> = z.object({
  id: z.string().cuid().optional(),
  quantity: z.number().int(),
  unit_price: z.number().int(),
  materialId: z.string()
}).strict();

export const VisitCreateManyServiceInputSchema: z.ZodType<Prisma.VisitCreateManyServiceInput> = z.object({
  id: z.string().cuid().optional(),
  treatmentId: z.string(),
  eventId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const RelatedServiceCreateManyParentInputSchema: z.ZodType<Prisma.RelatedServiceCreateManyParentInput> = z.object({
  id: z.string().cuid().optional(),
  order: z.number().int().optional(),
  quantity: z.number().int().optional(),
  unit_price: z.number().int(),
  service: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
}).strict();

export const ServiceMaterialUpdateWithoutServiceInputSchema: z.ZodType<Prisma.ServiceMaterialUpdateWithoutServiceInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  quantity: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  unit_price: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  material: z.lazy(() => MaterialUpdateOneRequiredWithoutServicesNestedInputSchema).optional()
}).strict();

export const ServiceMaterialUncheckedUpdateWithoutServiceInputSchema: z.ZodType<Prisma.ServiceMaterialUncheckedUpdateWithoutServiceInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  quantity: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  unit_price: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  materialId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ServiceMaterialUncheckedUpdateManyWithoutServiceInputSchema: z.ZodType<Prisma.ServiceMaterialUncheckedUpdateManyWithoutServiceInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  quantity: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  unit_price: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  materialId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const VisitUpdateWithoutServiceInputSchema: z.ZodType<Prisma.VisitUpdateWithoutServiceInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  treatment: z.lazy(() => TreatmentUpdateOneRequiredWithoutVisitsNestedInputSchema).optional(),
  event: z.lazy(() => EventUpdateOneWithoutVisitsNestedInputSchema).optional()
}).strict();

export const VisitUncheckedUpdateWithoutServiceInputSchema: z.ZodType<Prisma.VisitUncheckedUpdateWithoutServiceInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  treatmentId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  eventId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const VisitUncheckedUpdateManyWithoutServiceInputSchema: z.ZodType<Prisma.VisitUncheckedUpdateManyWithoutServiceInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  treatmentId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  eventId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const RelatedServiceUpdateWithoutParentInputSchema: z.ZodType<Prisma.RelatedServiceUpdateWithoutParentInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  order: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  quantity: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  unit_price: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  service: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
}).strict();

export const RelatedServiceUncheckedUpdateWithoutParentInputSchema: z.ZodType<Prisma.RelatedServiceUncheckedUpdateWithoutParentInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  order: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  quantity: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  unit_price: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  service: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
}).strict();

export const RelatedServiceUncheckedUpdateManyWithoutParentInputSchema: z.ZodType<Prisma.RelatedServiceUncheckedUpdateManyWithoutParentInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  order: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  quantity: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  unit_price: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  service: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
}).strict();

export const ServiceCreateManyCategoryInputSchema: z.ZodType<Prisma.ServiceCreateManyCategoryInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  unit_price: z.number().int(),
  unit: z.lazy(() => ServiceUnitSchema),
  duration: z.number().int().optional(),
  image: z.string().optional().nullable(),
  tags: z.union([ z.lazy(() => ServiceCreatetagsInputSchema),z.string().array() ]).optional(),
  isActive: z.boolean().optional(),
  tenantId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const ServiceUpdateWithoutCategoryInputSchema: z.ZodType<Prisma.ServiceUpdateWithoutCategoryInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  unit_price: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  unit: z.union([ z.lazy(() => ServiceUnitSchema),z.lazy(() => EnumServiceUnitFieldUpdateOperationsInputSchema) ]).optional(),
  duration: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  image: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tags: z.union([ z.lazy(() => ServiceUpdatetagsInputSchema),z.string().array() ]).optional(),
  isActive: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  tenant: z.lazy(() => TenantUpdateOneRequiredWithoutServicesNestedInputSchema).optional(),
  materials: z.lazy(() => ServiceMaterialUpdateManyWithoutServiceNestedInputSchema).optional(),
  visits: z.lazy(() => VisitUpdateManyWithoutServiceNestedInputSchema).optional(),
  children: z.lazy(() => RelatedServiceUpdateManyWithoutParentNestedInputSchema).optional()
}).strict();

export const ServiceUncheckedUpdateWithoutCategoryInputSchema: z.ZodType<Prisma.ServiceUncheckedUpdateWithoutCategoryInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  unit_price: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  unit: z.union([ z.lazy(() => ServiceUnitSchema),z.lazy(() => EnumServiceUnitFieldUpdateOperationsInputSchema) ]).optional(),
  duration: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  image: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tags: z.union([ z.lazy(() => ServiceUpdatetagsInputSchema),z.string().array() ]).optional(),
  isActive: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  tenantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  materials: z.lazy(() => ServiceMaterialUncheckedUpdateManyWithoutServiceNestedInputSchema).optional(),
  visits: z.lazy(() => VisitUncheckedUpdateManyWithoutServiceNestedInputSchema).optional(),
  children: z.lazy(() => RelatedServiceUncheckedUpdateManyWithoutParentNestedInputSchema).optional()
}).strict();

export const ServiceUncheckedUpdateManyWithoutCategoryInputSchema: z.ZodType<Prisma.ServiceUncheckedUpdateManyWithoutCategoryInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  unit_price: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  unit: z.union([ z.lazy(() => ServiceUnitSchema),z.lazy(() => EnumServiceUnitFieldUpdateOperationsInputSchema) ]).optional(),
  duration: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  image: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tags: z.union([ z.lazy(() => ServiceUpdatetagsInputSchema),z.string().array() ]).optional(),
  isActive: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  tenantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const VisitCreateManyTreatmentInputSchema: z.ZodType<Prisma.VisitCreateManyTreatmentInput> = z.object({
  id: z.string().cuid().optional(),
  serviceId: z.string(),
  eventId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const VisitUpdateWithoutTreatmentInputSchema: z.ZodType<Prisma.VisitUpdateWithoutTreatmentInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  service: z.lazy(() => ServiceUpdateOneRequiredWithoutVisitsNestedInputSchema).optional(),
  event: z.lazy(() => EventUpdateOneWithoutVisitsNestedInputSchema).optional()
}).strict();

export const VisitUncheckedUpdateWithoutTreatmentInputSchema: z.ZodType<Prisma.VisitUncheckedUpdateWithoutTreatmentInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  serviceId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  eventId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const VisitUncheckedUpdateManyWithoutTreatmentInputSchema: z.ZodType<Prisma.VisitUncheckedUpdateManyWithoutTreatmentInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  serviceId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  eventId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const TreatmentCreateManyTreatmentPlanInputSchema: z.ZodType<Prisma.TreatmentCreateManyTreatmentPlanInput> = z.object({
  id: z.string().cuid().optional(),
  price: z.number().int(),
  target: z.string().optional().nullable(),
  status: z.lazy(() => TreatmentStatusSchema).optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const TreatmentUpdateWithoutTreatmentPlanInputSchema: z.ZodType<Prisma.TreatmentUpdateWithoutTreatmentPlanInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  price: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  target: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.lazy(() => TreatmentStatusSchema),z.lazy(() => EnumTreatmentStatusFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  visits: z.lazy(() => VisitUpdateManyWithoutTreatmentNestedInputSchema).optional()
}).strict();

export const TreatmentUncheckedUpdateWithoutTreatmentPlanInputSchema: z.ZodType<Prisma.TreatmentUncheckedUpdateWithoutTreatmentPlanInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  price: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  target: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.lazy(() => TreatmentStatusSchema),z.lazy(() => EnumTreatmentStatusFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  visits: z.lazy(() => VisitUncheckedUpdateManyWithoutTreatmentNestedInputSchema).optional()
}).strict();

export const TreatmentUncheckedUpdateManyWithoutTreatmentPlanInputSchema: z.ZodType<Prisma.TreatmentUncheckedUpdateManyWithoutTreatmentPlanInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  price: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  target: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.lazy(() => TreatmentStatusSchema),z.lazy(() => EnumTreatmentStatusFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const CityCreateManyCountyInputSchema: z.ZodType<Prisma.CityCreateManyCountyInput> = z.object({
  id: z.string().optional(),
  name: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const CityUpdateWithoutCountyInputSchema: z.ZodType<Prisma.CityUpdateWithoutCountyInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const CityUncheckedUpdateWithoutCountyInputSchema: z.ZodType<Prisma.CityUncheckedUpdateWithoutCountyInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const CityUncheckedUpdateManyWithoutCountyInputSchema: z.ZodType<Prisma.CityUncheckedUpdateManyWithoutCountyInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

/////////////////////////////////////////
// ARGS
/////////////////////////////////////////

export const TenantFindFirstArgsSchema: z.ZodType<Prisma.TenantFindFirstArgs> = z.object({
  select: TenantSelectSchema.optional(),
  include: TenantIncludeSchema.optional(),
  where: TenantWhereInputSchema.optional(),
  orderBy: z.union([ TenantOrderByWithRelationInputSchema.array(),TenantOrderByWithRelationInputSchema ]).optional(),
  cursor: TenantWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ TenantScalarFieldEnumSchema,TenantScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const TenantFindFirstOrThrowArgsSchema: z.ZodType<Prisma.TenantFindFirstOrThrowArgs> = z.object({
  select: TenantSelectSchema.optional(),
  include: TenantIncludeSchema.optional(),
  where: TenantWhereInputSchema.optional(),
  orderBy: z.union([ TenantOrderByWithRelationInputSchema.array(),TenantOrderByWithRelationInputSchema ]).optional(),
  cursor: TenantWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ TenantScalarFieldEnumSchema,TenantScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const TenantFindManyArgsSchema: z.ZodType<Prisma.TenantFindManyArgs> = z.object({
  select: TenantSelectSchema.optional(),
  include: TenantIncludeSchema.optional(),
  where: TenantWhereInputSchema.optional(),
  orderBy: z.union([ TenantOrderByWithRelationInputSchema.array(),TenantOrderByWithRelationInputSchema ]).optional(),
  cursor: TenantWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ TenantScalarFieldEnumSchema,TenantScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const TenantAggregateArgsSchema: z.ZodType<Prisma.TenantAggregateArgs> = z.object({
  where: TenantWhereInputSchema.optional(),
  orderBy: z.union([ TenantOrderByWithRelationInputSchema.array(),TenantOrderByWithRelationInputSchema ]).optional(),
  cursor: TenantWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const TenantGroupByArgsSchema: z.ZodType<Prisma.TenantGroupByArgs> = z.object({
  where: TenantWhereInputSchema.optional(),
  orderBy: z.union([ TenantOrderByWithAggregationInputSchema.array(),TenantOrderByWithAggregationInputSchema ]).optional(),
  by: TenantScalarFieldEnumSchema.array(),
  having: TenantScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const TenantFindUniqueArgsSchema: z.ZodType<Prisma.TenantFindUniqueArgs> = z.object({
  select: TenantSelectSchema.optional(),
  include: TenantIncludeSchema.optional(),
  where: TenantWhereUniqueInputSchema,
}).strict() ;

export const TenantFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.TenantFindUniqueOrThrowArgs> = z.object({
  select: TenantSelectSchema.optional(),
  include: TenantIncludeSchema.optional(),
  where: TenantWhereUniqueInputSchema,
}).strict() ;

export const TenantProfileFindFirstArgsSchema: z.ZodType<Prisma.TenantProfileFindFirstArgs> = z.object({
  select: TenantProfileSelectSchema.optional(),
  include: TenantProfileIncludeSchema.optional(),
  where: TenantProfileWhereInputSchema.optional(),
  orderBy: z.union([ TenantProfileOrderByWithRelationInputSchema.array(),TenantProfileOrderByWithRelationInputSchema ]).optional(),
  cursor: TenantProfileWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ TenantProfileScalarFieldEnumSchema,TenantProfileScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const TenantProfileFindFirstOrThrowArgsSchema: z.ZodType<Prisma.TenantProfileFindFirstOrThrowArgs> = z.object({
  select: TenantProfileSelectSchema.optional(),
  include: TenantProfileIncludeSchema.optional(),
  where: TenantProfileWhereInputSchema.optional(),
  orderBy: z.union([ TenantProfileOrderByWithRelationInputSchema.array(),TenantProfileOrderByWithRelationInputSchema ]).optional(),
  cursor: TenantProfileWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ TenantProfileScalarFieldEnumSchema,TenantProfileScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const TenantProfileFindManyArgsSchema: z.ZodType<Prisma.TenantProfileFindManyArgs> = z.object({
  select: TenantProfileSelectSchema.optional(),
  include: TenantProfileIncludeSchema.optional(),
  where: TenantProfileWhereInputSchema.optional(),
  orderBy: z.union([ TenantProfileOrderByWithRelationInputSchema.array(),TenantProfileOrderByWithRelationInputSchema ]).optional(),
  cursor: TenantProfileWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ TenantProfileScalarFieldEnumSchema,TenantProfileScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const TenantProfileAggregateArgsSchema: z.ZodType<Prisma.TenantProfileAggregateArgs> = z.object({
  where: TenantProfileWhereInputSchema.optional(),
  orderBy: z.union([ TenantProfileOrderByWithRelationInputSchema.array(),TenantProfileOrderByWithRelationInputSchema ]).optional(),
  cursor: TenantProfileWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const TenantProfileGroupByArgsSchema: z.ZodType<Prisma.TenantProfileGroupByArgs> = z.object({
  where: TenantProfileWhereInputSchema.optional(),
  orderBy: z.union([ TenantProfileOrderByWithAggregationInputSchema.array(),TenantProfileOrderByWithAggregationInputSchema ]).optional(),
  by: TenantProfileScalarFieldEnumSchema.array(),
  having: TenantProfileScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const TenantProfileFindUniqueArgsSchema: z.ZodType<Prisma.TenantProfileFindUniqueArgs> = z.object({
  select: TenantProfileSelectSchema.optional(),
  include: TenantProfileIncludeSchema.optional(),
  where: TenantProfileWhereUniqueInputSchema,
}).strict() ;

export const TenantProfileFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.TenantProfileFindUniqueOrThrowArgs> = z.object({
  select: TenantProfileSelectSchema.optional(),
  include: TenantProfileIncludeSchema.optional(),
  where: TenantProfileWhereUniqueInputSchema,
}).strict() ;

export const UserFindFirstArgsSchema: z.ZodType<Prisma.UserFindFirstArgs> = z.object({
  select: UserSelectSchema.optional(),
  include: UserIncludeSchema.optional(),
  where: UserWhereInputSchema.optional(),
  orderBy: z.union([ UserOrderByWithRelationInputSchema.array(),UserOrderByWithRelationInputSchema ]).optional(),
  cursor: UserWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ UserScalarFieldEnumSchema,UserScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const UserFindFirstOrThrowArgsSchema: z.ZodType<Prisma.UserFindFirstOrThrowArgs> = z.object({
  select: UserSelectSchema.optional(),
  include: UserIncludeSchema.optional(),
  where: UserWhereInputSchema.optional(),
  orderBy: z.union([ UserOrderByWithRelationInputSchema.array(),UserOrderByWithRelationInputSchema ]).optional(),
  cursor: UserWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ UserScalarFieldEnumSchema,UserScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const UserFindManyArgsSchema: z.ZodType<Prisma.UserFindManyArgs> = z.object({
  select: UserSelectSchema.optional(),
  include: UserIncludeSchema.optional(),
  where: UserWhereInputSchema.optional(),
  orderBy: z.union([ UserOrderByWithRelationInputSchema.array(),UserOrderByWithRelationInputSchema ]).optional(),
  cursor: UserWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ UserScalarFieldEnumSchema,UserScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const UserAggregateArgsSchema: z.ZodType<Prisma.UserAggregateArgs> = z.object({
  where: UserWhereInputSchema.optional(),
  orderBy: z.union([ UserOrderByWithRelationInputSchema.array(),UserOrderByWithRelationInputSchema ]).optional(),
  cursor: UserWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const UserGroupByArgsSchema: z.ZodType<Prisma.UserGroupByArgs> = z.object({
  where: UserWhereInputSchema.optional(),
  orderBy: z.union([ UserOrderByWithAggregationInputSchema.array(),UserOrderByWithAggregationInputSchema ]).optional(),
  by: UserScalarFieldEnumSchema.array(),
  having: UserScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const UserFindUniqueArgsSchema: z.ZodType<Prisma.UserFindUniqueArgs> = z.object({
  select: UserSelectSchema.optional(),
  include: UserIncludeSchema.optional(),
  where: UserWhereUniqueInputSchema,
}).strict() ;

export const UserFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.UserFindUniqueOrThrowArgs> = z.object({
  select: UserSelectSchema.optional(),
  include: UserIncludeSchema.optional(),
  where: UserWhereUniqueInputSchema,
}).strict() ;

export const ProfileFindFirstArgsSchema: z.ZodType<Prisma.ProfileFindFirstArgs> = z.object({
  select: ProfileSelectSchema.optional(),
  include: ProfileIncludeSchema.optional(),
  where: ProfileWhereInputSchema.optional(),
  orderBy: z.union([ ProfileOrderByWithRelationInputSchema.array(),ProfileOrderByWithRelationInputSchema ]).optional(),
  cursor: ProfileWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ProfileScalarFieldEnumSchema,ProfileScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const ProfileFindFirstOrThrowArgsSchema: z.ZodType<Prisma.ProfileFindFirstOrThrowArgs> = z.object({
  select: ProfileSelectSchema.optional(),
  include: ProfileIncludeSchema.optional(),
  where: ProfileWhereInputSchema.optional(),
  orderBy: z.union([ ProfileOrderByWithRelationInputSchema.array(),ProfileOrderByWithRelationInputSchema ]).optional(),
  cursor: ProfileWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ProfileScalarFieldEnumSchema,ProfileScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const ProfileFindManyArgsSchema: z.ZodType<Prisma.ProfileFindManyArgs> = z.object({
  select: ProfileSelectSchema.optional(),
  include: ProfileIncludeSchema.optional(),
  where: ProfileWhereInputSchema.optional(),
  orderBy: z.union([ ProfileOrderByWithRelationInputSchema.array(),ProfileOrderByWithRelationInputSchema ]).optional(),
  cursor: ProfileWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ProfileScalarFieldEnumSchema,ProfileScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const ProfileAggregateArgsSchema: z.ZodType<Prisma.ProfileAggregateArgs> = z.object({
  where: ProfileWhereInputSchema.optional(),
  orderBy: z.union([ ProfileOrderByWithRelationInputSchema.array(),ProfileOrderByWithRelationInputSchema ]).optional(),
  cursor: ProfileWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const ProfileGroupByArgsSchema: z.ZodType<Prisma.ProfileGroupByArgs> = z.object({
  where: ProfileWhereInputSchema.optional(),
  orderBy: z.union([ ProfileOrderByWithAggregationInputSchema.array(),ProfileOrderByWithAggregationInputSchema ]).optional(),
  by: ProfileScalarFieldEnumSchema.array(),
  having: ProfileScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const ProfileFindUniqueArgsSchema: z.ZodType<Prisma.ProfileFindUniqueArgs> = z.object({
  select: ProfileSelectSchema.optional(),
  include: ProfileIncludeSchema.optional(),
  where: ProfileWhereUniqueInputSchema,
}).strict() ;

export const ProfileFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.ProfileFindUniqueOrThrowArgs> = z.object({
  select: ProfileSelectSchema.optional(),
  include: ProfileIncludeSchema.optional(),
  where: ProfileWhereUniqueInputSchema,
}).strict() ;

export const AccountFindFirstArgsSchema: z.ZodType<Prisma.AccountFindFirstArgs> = z.object({
  select: AccountSelectSchema.optional(),
  include: AccountIncludeSchema.optional(),
  where: AccountWhereInputSchema.optional(),
  orderBy: z.union([ AccountOrderByWithRelationInputSchema.array(),AccountOrderByWithRelationInputSchema ]).optional(),
  cursor: AccountWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ AccountScalarFieldEnumSchema,AccountScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const AccountFindFirstOrThrowArgsSchema: z.ZodType<Prisma.AccountFindFirstOrThrowArgs> = z.object({
  select: AccountSelectSchema.optional(),
  include: AccountIncludeSchema.optional(),
  where: AccountWhereInputSchema.optional(),
  orderBy: z.union([ AccountOrderByWithRelationInputSchema.array(),AccountOrderByWithRelationInputSchema ]).optional(),
  cursor: AccountWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ AccountScalarFieldEnumSchema,AccountScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const AccountFindManyArgsSchema: z.ZodType<Prisma.AccountFindManyArgs> = z.object({
  select: AccountSelectSchema.optional(),
  include: AccountIncludeSchema.optional(),
  where: AccountWhereInputSchema.optional(),
  orderBy: z.union([ AccountOrderByWithRelationInputSchema.array(),AccountOrderByWithRelationInputSchema ]).optional(),
  cursor: AccountWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ AccountScalarFieldEnumSchema,AccountScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const AccountAggregateArgsSchema: z.ZodType<Prisma.AccountAggregateArgs> = z.object({
  where: AccountWhereInputSchema.optional(),
  orderBy: z.union([ AccountOrderByWithRelationInputSchema.array(),AccountOrderByWithRelationInputSchema ]).optional(),
  cursor: AccountWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const AccountGroupByArgsSchema: z.ZodType<Prisma.AccountGroupByArgs> = z.object({
  where: AccountWhereInputSchema.optional(),
  orderBy: z.union([ AccountOrderByWithAggregationInputSchema.array(),AccountOrderByWithAggregationInputSchema ]).optional(),
  by: AccountScalarFieldEnumSchema.array(),
  having: AccountScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const AccountFindUniqueArgsSchema: z.ZodType<Prisma.AccountFindUniqueArgs> = z.object({
  select: AccountSelectSchema.optional(),
  include: AccountIncludeSchema.optional(),
  where: AccountWhereUniqueInputSchema,
}).strict() ;

export const AccountFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.AccountFindUniqueOrThrowArgs> = z.object({
  select: AccountSelectSchema.optional(),
  include: AccountIncludeSchema.optional(),
  where: AccountWhereUniqueInputSchema,
}).strict() ;

export const PlanFindFirstArgsSchema: z.ZodType<Prisma.PlanFindFirstArgs> = z.object({
  select: PlanSelectSchema.optional(),
  include: PlanIncludeSchema.optional(),
  where: PlanWhereInputSchema.optional(),
  orderBy: z.union([ PlanOrderByWithRelationInputSchema.array(),PlanOrderByWithRelationInputSchema ]).optional(),
  cursor: PlanWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ PlanScalarFieldEnumSchema,PlanScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const PlanFindFirstOrThrowArgsSchema: z.ZodType<Prisma.PlanFindFirstOrThrowArgs> = z.object({
  select: PlanSelectSchema.optional(),
  include: PlanIncludeSchema.optional(),
  where: PlanWhereInputSchema.optional(),
  orderBy: z.union([ PlanOrderByWithRelationInputSchema.array(),PlanOrderByWithRelationInputSchema ]).optional(),
  cursor: PlanWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ PlanScalarFieldEnumSchema,PlanScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const PlanFindManyArgsSchema: z.ZodType<Prisma.PlanFindManyArgs> = z.object({
  select: PlanSelectSchema.optional(),
  include: PlanIncludeSchema.optional(),
  where: PlanWhereInputSchema.optional(),
  orderBy: z.union([ PlanOrderByWithRelationInputSchema.array(),PlanOrderByWithRelationInputSchema ]).optional(),
  cursor: PlanWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ PlanScalarFieldEnumSchema,PlanScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const PlanAggregateArgsSchema: z.ZodType<Prisma.PlanAggregateArgs> = z.object({
  where: PlanWhereInputSchema.optional(),
  orderBy: z.union([ PlanOrderByWithRelationInputSchema.array(),PlanOrderByWithRelationInputSchema ]).optional(),
  cursor: PlanWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const PlanGroupByArgsSchema: z.ZodType<Prisma.PlanGroupByArgs> = z.object({
  where: PlanWhereInputSchema.optional(),
  orderBy: z.union([ PlanOrderByWithAggregationInputSchema.array(),PlanOrderByWithAggregationInputSchema ]).optional(),
  by: PlanScalarFieldEnumSchema.array(),
  having: PlanScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const PlanFindUniqueArgsSchema: z.ZodType<Prisma.PlanFindUniqueArgs> = z.object({
  select: PlanSelectSchema.optional(),
  include: PlanIncludeSchema.optional(),
  where: PlanWhereUniqueInputSchema,
}).strict() ;

export const PlanFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.PlanFindUniqueOrThrowArgs> = z.object({
  select: PlanSelectSchema.optional(),
  include: PlanIncludeSchema.optional(),
  where: PlanWhereUniqueInputSchema,
}).strict() ;

export const TokenFindFirstArgsSchema: z.ZodType<Prisma.TokenFindFirstArgs> = z.object({
  select: TokenSelectSchema.optional(),
  include: TokenIncludeSchema.optional(),
  where: TokenWhereInputSchema.optional(),
  orderBy: z.union([ TokenOrderByWithRelationInputSchema.array(),TokenOrderByWithRelationInputSchema ]).optional(),
  cursor: TokenWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ TokenScalarFieldEnumSchema,TokenScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const TokenFindFirstOrThrowArgsSchema: z.ZodType<Prisma.TokenFindFirstOrThrowArgs> = z.object({
  select: TokenSelectSchema.optional(),
  include: TokenIncludeSchema.optional(),
  where: TokenWhereInputSchema.optional(),
  orderBy: z.union([ TokenOrderByWithRelationInputSchema.array(),TokenOrderByWithRelationInputSchema ]).optional(),
  cursor: TokenWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ TokenScalarFieldEnumSchema,TokenScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const TokenFindManyArgsSchema: z.ZodType<Prisma.TokenFindManyArgs> = z.object({
  select: TokenSelectSchema.optional(),
  include: TokenIncludeSchema.optional(),
  where: TokenWhereInputSchema.optional(),
  orderBy: z.union([ TokenOrderByWithRelationInputSchema.array(),TokenOrderByWithRelationInputSchema ]).optional(),
  cursor: TokenWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ TokenScalarFieldEnumSchema,TokenScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const TokenAggregateArgsSchema: z.ZodType<Prisma.TokenAggregateArgs> = z.object({
  where: TokenWhereInputSchema.optional(),
  orderBy: z.union([ TokenOrderByWithRelationInputSchema.array(),TokenOrderByWithRelationInputSchema ]).optional(),
  cursor: TokenWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const TokenGroupByArgsSchema: z.ZodType<Prisma.TokenGroupByArgs> = z.object({
  where: TokenWhereInputSchema.optional(),
  orderBy: z.union([ TokenOrderByWithAggregationInputSchema.array(),TokenOrderByWithAggregationInputSchema ]).optional(),
  by: TokenScalarFieldEnumSchema.array(),
  having: TokenScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const TokenFindUniqueArgsSchema: z.ZodType<Prisma.TokenFindUniqueArgs> = z.object({
  select: TokenSelectSchema.optional(),
  include: TokenIncludeSchema.optional(),
  where: TokenWhereUniqueInputSchema,
}).strict() ;

export const TokenFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.TokenFindUniqueOrThrowArgs> = z.object({
  select: TokenSelectSchema.optional(),
  include: TokenIncludeSchema.optional(),
  where: TokenWhereUniqueInputSchema,
}).strict() ;

export const InvitationFindFirstArgsSchema: z.ZodType<Prisma.InvitationFindFirstArgs> = z.object({
  select: InvitationSelectSchema.optional(),
  include: InvitationIncludeSchema.optional(),
  where: InvitationWhereInputSchema.optional(),
  orderBy: z.union([ InvitationOrderByWithRelationInputSchema.array(),InvitationOrderByWithRelationInputSchema ]).optional(),
  cursor: InvitationWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ InvitationScalarFieldEnumSchema,InvitationScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const InvitationFindFirstOrThrowArgsSchema: z.ZodType<Prisma.InvitationFindFirstOrThrowArgs> = z.object({
  select: InvitationSelectSchema.optional(),
  include: InvitationIncludeSchema.optional(),
  where: InvitationWhereInputSchema.optional(),
  orderBy: z.union([ InvitationOrderByWithRelationInputSchema.array(),InvitationOrderByWithRelationInputSchema ]).optional(),
  cursor: InvitationWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ InvitationScalarFieldEnumSchema,InvitationScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const InvitationFindManyArgsSchema: z.ZodType<Prisma.InvitationFindManyArgs> = z.object({
  select: InvitationSelectSchema.optional(),
  include: InvitationIncludeSchema.optional(),
  where: InvitationWhereInputSchema.optional(),
  orderBy: z.union([ InvitationOrderByWithRelationInputSchema.array(),InvitationOrderByWithRelationInputSchema ]).optional(),
  cursor: InvitationWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ InvitationScalarFieldEnumSchema,InvitationScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const InvitationAggregateArgsSchema: z.ZodType<Prisma.InvitationAggregateArgs> = z.object({
  where: InvitationWhereInputSchema.optional(),
  orderBy: z.union([ InvitationOrderByWithRelationInputSchema.array(),InvitationOrderByWithRelationInputSchema ]).optional(),
  cursor: InvitationWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const InvitationGroupByArgsSchema: z.ZodType<Prisma.InvitationGroupByArgs> = z.object({
  where: InvitationWhereInputSchema.optional(),
  orderBy: z.union([ InvitationOrderByWithAggregationInputSchema.array(),InvitationOrderByWithAggregationInputSchema ]).optional(),
  by: InvitationScalarFieldEnumSchema.array(),
  having: InvitationScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const InvitationFindUniqueArgsSchema: z.ZodType<Prisma.InvitationFindUniqueArgs> = z.object({
  select: InvitationSelectSchema.optional(),
  include: InvitationIncludeSchema.optional(),
  where: InvitationWhereUniqueInputSchema,
}).strict() ;

export const InvitationFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.InvitationFindUniqueOrThrowArgs> = z.object({
  select: InvitationSelectSchema.optional(),
  include: InvitationIncludeSchema.optional(),
  where: InvitationWhereUniqueInputSchema,
}).strict() ;

export const PatientFindFirstArgsSchema: z.ZodType<Prisma.PatientFindFirstArgs> = z.object({
  select: PatientSelectSchema.optional(),
  include: PatientIncludeSchema.optional(),
  where: PatientWhereInputSchema.optional(),
  orderBy: z.union([ PatientOrderByWithRelationInputSchema.array(),PatientOrderByWithRelationInputSchema ]).optional(),
  cursor: PatientWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ PatientScalarFieldEnumSchema,PatientScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const PatientFindFirstOrThrowArgsSchema: z.ZodType<Prisma.PatientFindFirstOrThrowArgs> = z.object({
  select: PatientSelectSchema.optional(),
  include: PatientIncludeSchema.optional(),
  where: PatientWhereInputSchema.optional(),
  orderBy: z.union([ PatientOrderByWithRelationInputSchema.array(),PatientOrderByWithRelationInputSchema ]).optional(),
  cursor: PatientWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ PatientScalarFieldEnumSchema,PatientScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const PatientFindManyArgsSchema: z.ZodType<Prisma.PatientFindManyArgs> = z.object({
  select: PatientSelectSchema.optional(),
  include: PatientIncludeSchema.optional(),
  where: PatientWhereInputSchema.optional(),
  orderBy: z.union([ PatientOrderByWithRelationInputSchema.array(),PatientOrderByWithRelationInputSchema ]).optional(),
  cursor: PatientWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ PatientScalarFieldEnumSchema,PatientScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const PatientAggregateArgsSchema: z.ZodType<Prisma.PatientAggregateArgs> = z.object({
  where: PatientWhereInputSchema.optional(),
  orderBy: z.union([ PatientOrderByWithRelationInputSchema.array(),PatientOrderByWithRelationInputSchema ]).optional(),
  cursor: PatientWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const PatientGroupByArgsSchema: z.ZodType<Prisma.PatientGroupByArgs> = z.object({
  where: PatientWhereInputSchema.optional(),
  orderBy: z.union([ PatientOrderByWithAggregationInputSchema.array(),PatientOrderByWithAggregationInputSchema ]).optional(),
  by: PatientScalarFieldEnumSchema.array(),
  having: PatientScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const PatientFindUniqueArgsSchema: z.ZodType<Prisma.PatientFindUniqueArgs> = z.object({
  select: PatientSelectSchema.optional(),
  include: PatientIncludeSchema.optional(),
  where: PatientWhereUniqueInputSchema,
}).strict() ;

export const PatientFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.PatientFindUniqueOrThrowArgs> = z.object({
  select: PatientSelectSchema.optional(),
  include: PatientIncludeSchema.optional(),
  where: PatientWhereUniqueInputSchema,
}).strict() ;

export const SpecialityFindFirstArgsSchema: z.ZodType<Prisma.SpecialityFindFirstArgs> = z.object({
  select: SpecialitySelectSchema.optional(),
  include: SpecialityIncludeSchema.optional(),
  where: SpecialityWhereInputSchema.optional(),
  orderBy: z.union([ SpecialityOrderByWithRelationInputSchema.array(),SpecialityOrderByWithRelationInputSchema ]).optional(),
  cursor: SpecialityWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ SpecialityScalarFieldEnumSchema,SpecialityScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const SpecialityFindFirstOrThrowArgsSchema: z.ZodType<Prisma.SpecialityFindFirstOrThrowArgs> = z.object({
  select: SpecialitySelectSchema.optional(),
  include: SpecialityIncludeSchema.optional(),
  where: SpecialityWhereInputSchema.optional(),
  orderBy: z.union([ SpecialityOrderByWithRelationInputSchema.array(),SpecialityOrderByWithRelationInputSchema ]).optional(),
  cursor: SpecialityWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ SpecialityScalarFieldEnumSchema,SpecialityScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const SpecialityFindManyArgsSchema: z.ZodType<Prisma.SpecialityFindManyArgs> = z.object({
  select: SpecialitySelectSchema.optional(),
  include: SpecialityIncludeSchema.optional(),
  where: SpecialityWhereInputSchema.optional(),
  orderBy: z.union([ SpecialityOrderByWithRelationInputSchema.array(),SpecialityOrderByWithRelationInputSchema ]).optional(),
  cursor: SpecialityWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ SpecialityScalarFieldEnumSchema,SpecialityScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const SpecialityAggregateArgsSchema: z.ZodType<Prisma.SpecialityAggregateArgs> = z.object({
  where: SpecialityWhereInputSchema.optional(),
  orderBy: z.union([ SpecialityOrderByWithRelationInputSchema.array(),SpecialityOrderByWithRelationInputSchema ]).optional(),
  cursor: SpecialityWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const SpecialityGroupByArgsSchema: z.ZodType<Prisma.SpecialityGroupByArgs> = z.object({
  where: SpecialityWhereInputSchema.optional(),
  orderBy: z.union([ SpecialityOrderByWithAggregationInputSchema.array(),SpecialityOrderByWithAggregationInputSchema ]).optional(),
  by: SpecialityScalarFieldEnumSchema.array(),
  having: SpecialityScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const SpecialityFindUniqueArgsSchema: z.ZodType<Prisma.SpecialityFindUniqueArgs> = z.object({
  select: SpecialitySelectSchema.optional(),
  include: SpecialityIncludeSchema.optional(),
  where: SpecialityWhereUniqueInputSchema,
}).strict() ;

export const SpecialityFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.SpecialityFindUniqueOrThrowArgs> = z.object({
  select: SpecialitySelectSchema.optional(),
  include: SpecialityIncludeSchema.optional(),
  where: SpecialityWhereUniqueInputSchema,
}).strict() ;

export const EventFindFirstArgsSchema: z.ZodType<Prisma.EventFindFirstArgs> = z.object({
  select: EventSelectSchema.optional(),
  include: EventIncludeSchema.optional(),
  where: EventWhereInputSchema.optional(),
  orderBy: z.union([ EventOrderByWithRelationInputSchema.array(),EventOrderByWithRelationInputSchema ]).optional(),
  cursor: EventWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ EventScalarFieldEnumSchema,EventScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const EventFindFirstOrThrowArgsSchema: z.ZodType<Prisma.EventFindFirstOrThrowArgs> = z.object({
  select: EventSelectSchema.optional(),
  include: EventIncludeSchema.optional(),
  where: EventWhereInputSchema.optional(),
  orderBy: z.union([ EventOrderByWithRelationInputSchema.array(),EventOrderByWithRelationInputSchema ]).optional(),
  cursor: EventWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ EventScalarFieldEnumSchema,EventScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const EventFindManyArgsSchema: z.ZodType<Prisma.EventFindManyArgs> = z.object({
  select: EventSelectSchema.optional(),
  include: EventIncludeSchema.optional(),
  where: EventWhereInputSchema.optional(),
  orderBy: z.union([ EventOrderByWithRelationInputSchema.array(),EventOrderByWithRelationInputSchema ]).optional(),
  cursor: EventWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ EventScalarFieldEnumSchema,EventScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const EventAggregateArgsSchema: z.ZodType<Prisma.EventAggregateArgs> = z.object({
  where: EventWhereInputSchema.optional(),
  orderBy: z.union([ EventOrderByWithRelationInputSchema.array(),EventOrderByWithRelationInputSchema ]).optional(),
  cursor: EventWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const EventGroupByArgsSchema: z.ZodType<Prisma.EventGroupByArgs> = z.object({
  where: EventWhereInputSchema.optional(),
  orderBy: z.union([ EventOrderByWithAggregationInputSchema.array(),EventOrderByWithAggregationInputSchema ]).optional(),
  by: EventScalarFieldEnumSchema.array(),
  having: EventScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const EventFindUniqueArgsSchema: z.ZodType<Prisma.EventFindUniqueArgs> = z.object({
  select: EventSelectSchema.optional(),
  include: EventIncludeSchema.optional(),
  where: EventWhereUniqueInputSchema,
}).strict() ;

export const EventFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.EventFindUniqueOrThrowArgs> = z.object({
  select: EventSelectSchema.optional(),
  include: EventIncludeSchema.optional(),
  where: EventWhereUniqueInputSchema,
}).strict() ;

export const EventActionFindFirstArgsSchema: z.ZodType<Prisma.EventActionFindFirstArgs> = z.object({
  select: EventActionSelectSchema.optional(),
  include: EventActionIncludeSchema.optional(),
  where: EventActionWhereInputSchema.optional(),
  orderBy: z.union([ EventActionOrderByWithRelationInputSchema.array(),EventActionOrderByWithRelationInputSchema ]).optional(),
  cursor: EventActionWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ EventActionScalarFieldEnumSchema,EventActionScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const EventActionFindFirstOrThrowArgsSchema: z.ZodType<Prisma.EventActionFindFirstOrThrowArgs> = z.object({
  select: EventActionSelectSchema.optional(),
  include: EventActionIncludeSchema.optional(),
  where: EventActionWhereInputSchema.optional(),
  orderBy: z.union([ EventActionOrderByWithRelationInputSchema.array(),EventActionOrderByWithRelationInputSchema ]).optional(),
  cursor: EventActionWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ EventActionScalarFieldEnumSchema,EventActionScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const EventActionFindManyArgsSchema: z.ZodType<Prisma.EventActionFindManyArgs> = z.object({
  select: EventActionSelectSchema.optional(),
  include: EventActionIncludeSchema.optional(),
  where: EventActionWhereInputSchema.optional(),
  orderBy: z.union([ EventActionOrderByWithRelationInputSchema.array(),EventActionOrderByWithRelationInputSchema ]).optional(),
  cursor: EventActionWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ EventActionScalarFieldEnumSchema,EventActionScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const EventActionAggregateArgsSchema: z.ZodType<Prisma.EventActionAggregateArgs> = z.object({
  where: EventActionWhereInputSchema.optional(),
  orderBy: z.union([ EventActionOrderByWithRelationInputSchema.array(),EventActionOrderByWithRelationInputSchema ]).optional(),
  cursor: EventActionWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const EventActionGroupByArgsSchema: z.ZodType<Prisma.EventActionGroupByArgs> = z.object({
  where: EventActionWhereInputSchema.optional(),
  orderBy: z.union([ EventActionOrderByWithAggregationInputSchema.array(),EventActionOrderByWithAggregationInputSchema ]).optional(),
  by: EventActionScalarFieldEnumSchema.array(),
  having: EventActionScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const EventActionFindUniqueArgsSchema: z.ZodType<Prisma.EventActionFindUniqueArgs> = z.object({
  select: EventActionSelectSchema.optional(),
  include: EventActionIncludeSchema.optional(),
  where: EventActionWhereUniqueInputSchema,
}).strict() ;

export const EventActionFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.EventActionFindUniqueOrThrowArgs> = z.object({
  select: EventActionSelectSchema.optional(),
  include: EventActionIncludeSchema.optional(),
  where: EventActionWhereUniqueInputSchema,
}).strict() ;

export const MaterialFindFirstArgsSchema: z.ZodType<Prisma.MaterialFindFirstArgs> = z.object({
  select: MaterialSelectSchema.optional(),
  include: MaterialIncludeSchema.optional(),
  where: MaterialWhereInputSchema.optional(),
  orderBy: z.union([ MaterialOrderByWithRelationInputSchema.array(),MaterialOrderByWithRelationInputSchema ]).optional(),
  cursor: MaterialWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ MaterialScalarFieldEnumSchema,MaterialScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const MaterialFindFirstOrThrowArgsSchema: z.ZodType<Prisma.MaterialFindFirstOrThrowArgs> = z.object({
  select: MaterialSelectSchema.optional(),
  include: MaterialIncludeSchema.optional(),
  where: MaterialWhereInputSchema.optional(),
  orderBy: z.union([ MaterialOrderByWithRelationInputSchema.array(),MaterialOrderByWithRelationInputSchema ]).optional(),
  cursor: MaterialWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ MaterialScalarFieldEnumSchema,MaterialScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const MaterialFindManyArgsSchema: z.ZodType<Prisma.MaterialFindManyArgs> = z.object({
  select: MaterialSelectSchema.optional(),
  include: MaterialIncludeSchema.optional(),
  where: MaterialWhereInputSchema.optional(),
  orderBy: z.union([ MaterialOrderByWithRelationInputSchema.array(),MaterialOrderByWithRelationInputSchema ]).optional(),
  cursor: MaterialWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ MaterialScalarFieldEnumSchema,MaterialScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const MaterialAggregateArgsSchema: z.ZodType<Prisma.MaterialAggregateArgs> = z.object({
  where: MaterialWhereInputSchema.optional(),
  orderBy: z.union([ MaterialOrderByWithRelationInputSchema.array(),MaterialOrderByWithRelationInputSchema ]).optional(),
  cursor: MaterialWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const MaterialGroupByArgsSchema: z.ZodType<Prisma.MaterialGroupByArgs> = z.object({
  where: MaterialWhereInputSchema.optional(),
  orderBy: z.union([ MaterialOrderByWithAggregationInputSchema.array(),MaterialOrderByWithAggregationInputSchema ]).optional(),
  by: MaterialScalarFieldEnumSchema.array(),
  having: MaterialScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const MaterialFindUniqueArgsSchema: z.ZodType<Prisma.MaterialFindUniqueArgs> = z.object({
  select: MaterialSelectSchema.optional(),
  include: MaterialIncludeSchema.optional(),
  where: MaterialWhereUniqueInputSchema,
}).strict() ;

export const MaterialFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.MaterialFindUniqueOrThrowArgs> = z.object({
  select: MaterialSelectSchema.optional(),
  include: MaterialIncludeSchema.optional(),
  where: MaterialWhereUniqueInputSchema,
}).strict() ;

export const ServiceFindFirstArgsSchema: z.ZodType<Prisma.ServiceFindFirstArgs> = z.object({
  select: ServiceSelectSchema.optional(),
  include: ServiceIncludeSchema.optional(),
  where: ServiceWhereInputSchema.optional(),
  orderBy: z.union([ ServiceOrderByWithRelationInputSchema.array(),ServiceOrderByWithRelationInputSchema ]).optional(),
  cursor: ServiceWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ServiceScalarFieldEnumSchema,ServiceScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const ServiceFindFirstOrThrowArgsSchema: z.ZodType<Prisma.ServiceFindFirstOrThrowArgs> = z.object({
  select: ServiceSelectSchema.optional(),
  include: ServiceIncludeSchema.optional(),
  where: ServiceWhereInputSchema.optional(),
  orderBy: z.union([ ServiceOrderByWithRelationInputSchema.array(),ServiceOrderByWithRelationInputSchema ]).optional(),
  cursor: ServiceWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ServiceScalarFieldEnumSchema,ServiceScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const ServiceFindManyArgsSchema: z.ZodType<Prisma.ServiceFindManyArgs> = z.object({
  select: ServiceSelectSchema.optional(),
  include: ServiceIncludeSchema.optional(),
  where: ServiceWhereInputSchema.optional(),
  orderBy: z.union([ ServiceOrderByWithRelationInputSchema.array(),ServiceOrderByWithRelationInputSchema ]).optional(),
  cursor: ServiceWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ServiceScalarFieldEnumSchema,ServiceScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const ServiceAggregateArgsSchema: z.ZodType<Prisma.ServiceAggregateArgs> = z.object({
  where: ServiceWhereInputSchema.optional(),
  orderBy: z.union([ ServiceOrderByWithRelationInputSchema.array(),ServiceOrderByWithRelationInputSchema ]).optional(),
  cursor: ServiceWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const ServiceGroupByArgsSchema: z.ZodType<Prisma.ServiceGroupByArgs> = z.object({
  where: ServiceWhereInputSchema.optional(),
  orderBy: z.union([ ServiceOrderByWithAggregationInputSchema.array(),ServiceOrderByWithAggregationInputSchema ]).optional(),
  by: ServiceScalarFieldEnumSchema.array(),
  having: ServiceScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const ServiceFindUniqueArgsSchema: z.ZodType<Prisma.ServiceFindUniqueArgs> = z.object({
  select: ServiceSelectSchema.optional(),
  include: ServiceIncludeSchema.optional(),
  where: ServiceWhereUniqueInputSchema,
}).strict() ;

export const ServiceFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.ServiceFindUniqueOrThrowArgs> = z.object({
  select: ServiceSelectSchema.optional(),
  include: ServiceIncludeSchema.optional(),
  where: ServiceWhereUniqueInputSchema,
}).strict() ;

export const RelatedServiceFindFirstArgsSchema: z.ZodType<Prisma.RelatedServiceFindFirstArgs> = z.object({
  select: RelatedServiceSelectSchema.optional(),
  include: RelatedServiceIncludeSchema.optional(),
  where: RelatedServiceWhereInputSchema.optional(),
  orderBy: z.union([ RelatedServiceOrderByWithRelationInputSchema.array(),RelatedServiceOrderByWithRelationInputSchema ]).optional(),
  cursor: RelatedServiceWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ RelatedServiceScalarFieldEnumSchema,RelatedServiceScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const RelatedServiceFindFirstOrThrowArgsSchema: z.ZodType<Prisma.RelatedServiceFindFirstOrThrowArgs> = z.object({
  select: RelatedServiceSelectSchema.optional(),
  include: RelatedServiceIncludeSchema.optional(),
  where: RelatedServiceWhereInputSchema.optional(),
  orderBy: z.union([ RelatedServiceOrderByWithRelationInputSchema.array(),RelatedServiceOrderByWithRelationInputSchema ]).optional(),
  cursor: RelatedServiceWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ RelatedServiceScalarFieldEnumSchema,RelatedServiceScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const RelatedServiceFindManyArgsSchema: z.ZodType<Prisma.RelatedServiceFindManyArgs> = z.object({
  select: RelatedServiceSelectSchema.optional(),
  include: RelatedServiceIncludeSchema.optional(),
  where: RelatedServiceWhereInputSchema.optional(),
  orderBy: z.union([ RelatedServiceOrderByWithRelationInputSchema.array(),RelatedServiceOrderByWithRelationInputSchema ]).optional(),
  cursor: RelatedServiceWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ RelatedServiceScalarFieldEnumSchema,RelatedServiceScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const RelatedServiceAggregateArgsSchema: z.ZodType<Prisma.RelatedServiceAggregateArgs> = z.object({
  where: RelatedServiceWhereInputSchema.optional(),
  orderBy: z.union([ RelatedServiceOrderByWithRelationInputSchema.array(),RelatedServiceOrderByWithRelationInputSchema ]).optional(),
  cursor: RelatedServiceWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const RelatedServiceGroupByArgsSchema: z.ZodType<Prisma.RelatedServiceGroupByArgs> = z.object({
  where: RelatedServiceWhereInputSchema.optional(),
  orderBy: z.union([ RelatedServiceOrderByWithAggregationInputSchema.array(),RelatedServiceOrderByWithAggregationInputSchema ]).optional(),
  by: RelatedServiceScalarFieldEnumSchema.array(),
  having: RelatedServiceScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const RelatedServiceFindUniqueArgsSchema: z.ZodType<Prisma.RelatedServiceFindUniqueArgs> = z.object({
  select: RelatedServiceSelectSchema.optional(),
  include: RelatedServiceIncludeSchema.optional(),
  where: RelatedServiceWhereUniqueInputSchema,
}).strict() ;

export const RelatedServiceFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.RelatedServiceFindUniqueOrThrowArgs> = z.object({
  select: RelatedServiceSelectSchema.optional(),
  include: RelatedServiceIncludeSchema.optional(),
  where: RelatedServiceWhereUniqueInputSchema,
}).strict() ;

export const ServiceMaterialFindFirstArgsSchema: z.ZodType<Prisma.ServiceMaterialFindFirstArgs> = z.object({
  select: ServiceMaterialSelectSchema.optional(),
  include: ServiceMaterialIncludeSchema.optional(),
  where: ServiceMaterialWhereInputSchema.optional(),
  orderBy: z.union([ ServiceMaterialOrderByWithRelationInputSchema.array(),ServiceMaterialOrderByWithRelationInputSchema ]).optional(),
  cursor: ServiceMaterialWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ServiceMaterialScalarFieldEnumSchema,ServiceMaterialScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const ServiceMaterialFindFirstOrThrowArgsSchema: z.ZodType<Prisma.ServiceMaterialFindFirstOrThrowArgs> = z.object({
  select: ServiceMaterialSelectSchema.optional(),
  include: ServiceMaterialIncludeSchema.optional(),
  where: ServiceMaterialWhereInputSchema.optional(),
  orderBy: z.union([ ServiceMaterialOrderByWithRelationInputSchema.array(),ServiceMaterialOrderByWithRelationInputSchema ]).optional(),
  cursor: ServiceMaterialWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ServiceMaterialScalarFieldEnumSchema,ServiceMaterialScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const ServiceMaterialFindManyArgsSchema: z.ZodType<Prisma.ServiceMaterialFindManyArgs> = z.object({
  select: ServiceMaterialSelectSchema.optional(),
  include: ServiceMaterialIncludeSchema.optional(),
  where: ServiceMaterialWhereInputSchema.optional(),
  orderBy: z.union([ ServiceMaterialOrderByWithRelationInputSchema.array(),ServiceMaterialOrderByWithRelationInputSchema ]).optional(),
  cursor: ServiceMaterialWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ServiceMaterialScalarFieldEnumSchema,ServiceMaterialScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const ServiceMaterialAggregateArgsSchema: z.ZodType<Prisma.ServiceMaterialAggregateArgs> = z.object({
  where: ServiceMaterialWhereInputSchema.optional(),
  orderBy: z.union([ ServiceMaterialOrderByWithRelationInputSchema.array(),ServiceMaterialOrderByWithRelationInputSchema ]).optional(),
  cursor: ServiceMaterialWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const ServiceMaterialGroupByArgsSchema: z.ZodType<Prisma.ServiceMaterialGroupByArgs> = z.object({
  where: ServiceMaterialWhereInputSchema.optional(),
  orderBy: z.union([ ServiceMaterialOrderByWithAggregationInputSchema.array(),ServiceMaterialOrderByWithAggregationInputSchema ]).optional(),
  by: ServiceMaterialScalarFieldEnumSchema.array(),
  having: ServiceMaterialScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const ServiceMaterialFindUniqueArgsSchema: z.ZodType<Prisma.ServiceMaterialFindUniqueArgs> = z.object({
  select: ServiceMaterialSelectSchema.optional(),
  include: ServiceMaterialIncludeSchema.optional(),
  where: ServiceMaterialWhereUniqueInputSchema,
}).strict() ;

export const ServiceMaterialFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.ServiceMaterialFindUniqueOrThrowArgs> = z.object({
  select: ServiceMaterialSelectSchema.optional(),
  include: ServiceMaterialIncludeSchema.optional(),
  where: ServiceMaterialWhereUniqueInputSchema,
}).strict() ;

export const PriceFindFirstArgsSchema: z.ZodType<Prisma.PriceFindFirstArgs> = z.object({
  select: PriceSelectSchema.optional(),
  where: PriceWhereInputSchema.optional(),
  orderBy: z.union([ PriceOrderByWithRelationInputSchema.array(),PriceOrderByWithRelationInputSchema ]).optional(),
  cursor: PriceWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ PriceScalarFieldEnumSchema,PriceScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const PriceFindFirstOrThrowArgsSchema: z.ZodType<Prisma.PriceFindFirstOrThrowArgs> = z.object({
  select: PriceSelectSchema.optional(),
  where: PriceWhereInputSchema.optional(),
  orderBy: z.union([ PriceOrderByWithRelationInputSchema.array(),PriceOrderByWithRelationInputSchema ]).optional(),
  cursor: PriceWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ PriceScalarFieldEnumSchema,PriceScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const PriceFindManyArgsSchema: z.ZodType<Prisma.PriceFindManyArgs> = z.object({
  select: PriceSelectSchema.optional(),
  where: PriceWhereInputSchema.optional(),
  orderBy: z.union([ PriceOrderByWithRelationInputSchema.array(),PriceOrderByWithRelationInputSchema ]).optional(),
  cursor: PriceWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ PriceScalarFieldEnumSchema,PriceScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const PriceAggregateArgsSchema: z.ZodType<Prisma.PriceAggregateArgs> = z.object({
  where: PriceWhereInputSchema.optional(),
  orderBy: z.union([ PriceOrderByWithRelationInputSchema.array(),PriceOrderByWithRelationInputSchema ]).optional(),
  cursor: PriceWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const PriceGroupByArgsSchema: z.ZodType<Prisma.PriceGroupByArgs> = z.object({
  where: PriceWhereInputSchema.optional(),
  orderBy: z.union([ PriceOrderByWithAggregationInputSchema.array(),PriceOrderByWithAggregationInputSchema ]).optional(),
  by: PriceScalarFieldEnumSchema.array(),
  having: PriceScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const PriceFindUniqueArgsSchema: z.ZodType<Prisma.PriceFindUniqueArgs> = z.object({
  select: PriceSelectSchema.optional(),
  where: PriceWhereUniqueInputSchema,
}).strict() ;

export const PriceFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.PriceFindUniqueOrThrowArgs> = z.object({
  select: PriceSelectSchema.optional(),
  where: PriceWhereUniqueInputSchema,
}).strict() ;

export const ServiceCategoryFindFirstArgsSchema: z.ZodType<Prisma.ServiceCategoryFindFirstArgs> = z.object({
  select: ServiceCategorySelectSchema.optional(),
  include: ServiceCategoryIncludeSchema.optional(),
  where: ServiceCategoryWhereInputSchema.optional(),
  orderBy: z.union([ ServiceCategoryOrderByWithRelationInputSchema.array(),ServiceCategoryOrderByWithRelationInputSchema ]).optional(),
  cursor: ServiceCategoryWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ServiceCategoryScalarFieldEnumSchema,ServiceCategoryScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const ServiceCategoryFindFirstOrThrowArgsSchema: z.ZodType<Prisma.ServiceCategoryFindFirstOrThrowArgs> = z.object({
  select: ServiceCategorySelectSchema.optional(),
  include: ServiceCategoryIncludeSchema.optional(),
  where: ServiceCategoryWhereInputSchema.optional(),
  orderBy: z.union([ ServiceCategoryOrderByWithRelationInputSchema.array(),ServiceCategoryOrderByWithRelationInputSchema ]).optional(),
  cursor: ServiceCategoryWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ServiceCategoryScalarFieldEnumSchema,ServiceCategoryScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const ServiceCategoryFindManyArgsSchema: z.ZodType<Prisma.ServiceCategoryFindManyArgs> = z.object({
  select: ServiceCategorySelectSchema.optional(),
  include: ServiceCategoryIncludeSchema.optional(),
  where: ServiceCategoryWhereInputSchema.optional(),
  orderBy: z.union([ ServiceCategoryOrderByWithRelationInputSchema.array(),ServiceCategoryOrderByWithRelationInputSchema ]).optional(),
  cursor: ServiceCategoryWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ServiceCategoryScalarFieldEnumSchema,ServiceCategoryScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const ServiceCategoryAggregateArgsSchema: z.ZodType<Prisma.ServiceCategoryAggregateArgs> = z.object({
  where: ServiceCategoryWhereInputSchema.optional(),
  orderBy: z.union([ ServiceCategoryOrderByWithRelationInputSchema.array(),ServiceCategoryOrderByWithRelationInputSchema ]).optional(),
  cursor: ServiceCategoryWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const ServiceCategoryGroupByArgsSchema: z.ZodType<Prisma.ServiceCategoryGroupByArgs> = z.object({
  where: ServiceCategoryWhereInputSchema.optional(),
  orderBy: z.union([ ServiceCategoryOrderByWithAggregationInputSchema.array(),ServiceCategoryOrderByWithAggregationInputSchema ]).optional(),
  by: ServiceCategoryScalarFieldEnumSchema.array(),
  having: ServiceCategoryScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const ServiceCategoryFindUniqueArgsSchema: z.ZodType<Prisma.ServiceCategoryFindUniqueArgs> = z.object({
  select: ServiceCategorySelectSchema.optional(),
  include: ServiceCategoryIncludeSchema.optional(),
  where: ServiceCategoryWhereUniqueInputSchema,
}).strict() ;

export const ServiceCategoryFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.ServiceCategoryFindUniqueOrThrowArgs> = z.object({
  select: ServiceCategorySelectSchema.optional(),
  include: ServiceCategoryIncludeSchema.optional(),
  where: ServiceCategoryWhereUniqueInputSchema,
}).strict() ;

export const TreatmentFindFirstArgsSchema: z.ZodType<Prisma.TreatmentFindFirstArgs> = z.object({
  select: TreatmentSelectSchema.optional(),
  include: TreatmentIncludeSchema.optional(),
  where: TreatmentWhereInputSchema.optional(),
  orderBy: z.union([ TreatmentOrderByWithRelationInputSchema.array(),TreatmentOrderByWithRelationInputSchema ]).optional(),
  cursor: TreatmentWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ TreatmentScalarFieldEnumSchema,TreatmentScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const TreatmentFindFirstOrThrowArgsSchema: z.ZodType<Prisma.TreatmentFindFirstOrThrowArgs> = z.object({
  select: TreatmentSelectSchema.optional(),
  include: TreatmentIncludeSchema.optional(),
  where: TreatmentWhereInputSchema.optional(),
  orderBy: z.union([ TreatmentOrderByWithRelationInputSchema.array(),TreatmentOrderByWithRelationInputSchema ]).optional(),
  cursor: TreatmentWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ TreatmentScalarFieldEnumSchema,TreatmentScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const TreatmentFindManyArgsSchema: z.ZodType<Prisma.TreatmentFindManyArgs> = z.object({
  select: TreatmentSelectSchema.optional(),
  include: TreatmentIncludeSchema.optional(),
  where: TreatmentWhereInputSchema.optional(),
  orderBy: z.union([ TreatmentOrderByWithRelationInputSchema.array(),TreatmentOrderByWithRelationInputSchema ]).optional(),
  cursor: TreatmentWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ TreatmentScalarFieldEnumSchema,TreatmentScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const TreatmentAggregateArgsSchema: z.ZodType<Prisma.TreatmentAggregateArgs> = z.object({
  where: TreatmentWhereInputSchema.optional(),
  orderBy: z.union([ TreatmentOrderByWithRelationInputSchema.array(),TreatmentOrderByWithRelationInputSchema ]).optional(),
  cursor: TreatmentWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const TreatmentGroupByArgsSchema: z.ZodType<Prisma.TreatmentGroupByArgs> = z.object({
  where: TreatmentWhereInputSchema.optional(),
  orderBy: z.union([ TreatmentOrderByWithAggregationInputSchema.array(),TreatmentOrderByWithAggregationInputSchema ]).optional(),
  by: TreatmentScalarFieldEnumSchema.array(),
  having: TreatmentScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const TreatmentFindUniqueArgsSchema: z.ZodType<Prisma.TreatmentFindUniqueArgs> = z.object({
  select: TreatmentSelectSchema.optional(),
  include: TreatmentIncludeSchema.optional(),
  where: TreatmentWhereUniqueInputSchema,
}).strict() ;

export const TreatmentFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.TreatmentFindUniqueOrThrowArgs> = z.object({
  select: TreatmentSelectSchema.optional(),
  include: TreatmentIncludeSchema.optional(),
  where: TreatmentWhereUniqueInputSchema,
}).strict() ;

export const VisitFindFirstArgsSchema: z.ZodType<Prisma.VisitFindFirstArgs> = z.object({
  select: VisitSelectSchema.optional(),
  include: VisitIncludeSchema.optional(),
  where: VisitWhereInputSchema.optional(),
  orderBy: z.union([ VisitOrderByWithRelationInputSchema.array(),VisitOrderByWithRelationInputSchema ]).optional(),
  cursor: VisitWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ VisitScalarFieldEnumSchema,VisitScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const VisitFindFirstOrThrowArgsSchema: z.ZodType<Prisma.VisitFindFirstOrThrowArgs> = z.object({
  select: VisitSelectSchema.optional(),
  include: VisitIncludeSchema.optional(),
  where: VisitWhereInputSchema.optional(),
  orderBy: z.union([ VisitOrderByWithRelationInputSchema.array(),VisitOrderByWithRelationInputSchema ]).optional(),
  cursor: VisitWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ VisitScalarFieldEnumSchema,VisitScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const VisitFindManyArgsSchema: z.ZodType<Prisma.VisitFindManyArgs> = z.object({
  select: VisitSelectSchema.optional(),
  include: VisitIncludeSchema.optional(),
  where: VisitWhereInputSchema.optional(),
  orderBy: z.union([ VisitOrderByWithRelationInputSchema.array(),VisitOrderByWithRelationInputSchema ]).optional(),
  cursor: VisitWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ VisitScalarFieldEnumSchema,VisitScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const VisitAggregateArgsSchema: z.ZodType<Prisma.VisitAggregateArgs> = z.object({
  where: VisitWhereInputSchema.optional(),
  orderBy: z.union([ VisitOrderByWithRelationInputSchema.array(),VisitOrderByWithRelationInputSchema ]).optional(),
  cursor: VisitWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const VisitGroupByArgsSchema: z.ZodType<Prisma.VisitGroupByArgs> = z.object({
  where: VisitWhereInputSchema.optional(),
  orderBy: z.union([ VisitOrderByWithAggregationInputSchema.array(),VisitOrderByWithAggregationInputSchema ]).optional(),
  by: VisitScalarFieldEnumSchema.array(),
  having: VisitScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const VisitFindUniqueArgsSchema: z.ZodType<Prisma.VisitFindUniqueArgs> = z.object({
  select: VisitSelectSchema.optional(),
  include: VisitIncludeSchema.optional(),
  where: VisitWhereUniqueInputSchema,
}).strict() ;

export const VisitFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.VisitFindUniqueOrThrowArgs> = z.object({
  select: VisitSelectSchema.optional(),
  include: VisitIncludeSchema.optional(),
  where: VisitWhereUniqueInputSchema,
}).strict() ;

export const TreatmentPlanFindFirstArgsSchema: z.ZodType<Prisma.TreatmentPlanFindFirstArgs> = z.object({
  select: TreatmentPlanSelectSchema.optional(),
  include: TreatmentPlanIncludeSchema.optional(),
  where: TreatmentPlanWhereInputSchema.optional(),
  orderBy: z.union([ TreatmentPlanOrderByWithRelationInputSchema.array(),TreatmentPlanOrderByWithRelationInputSchema ]).optional(),
  cursor: TreatmentPlanWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ TreatmentPlanScalarFieldEnumSchema,TreatmentPlanScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const TreatmentPlanFindFirstOrThrowArgsSchema: z.ZodType<Prisma.TreatmentPlanFindFirstOrThrowArgs> = z.object({
  select: TreatmentPlanSelectSchema.optional(),
  include: TreatmentPlanIncludeSchema.optional(),
  where: TreatmentPlanWhereInputSchema.optional(),
  orderBy: z.union([ TreatmentPlanOrderByWithRelationInputSchema.array(),TreatmentPlanOrderByWithRelationInputSchema ]).optional(),
  cursor: TreatmentPlanWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ TreatmentPlanScalarFieldEnumSchema,TreatmentPlanScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const TreatmentPlanFindManyArgsSchema: z.ZodType<Prisma.TreatmentPlanFindManyArgs> = z.object({
  select: TreatmentPlanSelectSchema.optional(),
  include: TreatmentPlanIncludeSchema.optional(),
  where: TreatmentPlanWhereInputSchema.optional(),
  orderBy: z.union([ TreatmentPlanOrderByWithRelationInputSchema.array(),TreatmentPlanOrderByWithRelationInputSchema ]).optional(),
  cursor: TreatmentPlanWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ TreatmentPlanScalarFieldEnumSchema,TreatmentPlanScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const TreatmentPlanAggregateArgsSchema: z.ZodType<Prisma.TreatmentPlanAggregateArgs> = z.object({
  where: TreatmentPlanWhereInputSchema.optional(),
  orderBy: z.union([ TreatmentPlanOrderByWithRelationInputSchema.array(),TreatmentPlanOrderByWithRelationInputSchema ]).optional(),
  cursor: TreatmentPlanWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const TreatmentPlanGroupByArgsSchema: z.ZodType<Prisma.TreatmentPlanGroupByArgs> = z.object({
  where: TreatmentPlanWhereInputSchema.optional(),
  orderBy: z.union([ TreatmentPlanOrderByWithAggregationInputSchema.array(),TreatmentPlanOrderByWithAggregationInputSchema ]).optional(),
  by: TreatmentPlanScalarFieldEnumSchema.array(),
  having: TreatmentPlanScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const TreatmentPlanFindUniqueArgsSchema: z.ZodType<Prisma.TreatmentPlanFindUniqueArgs> = z.object({
  select: TreatmentPlanSelectSchema.optional(),
  include: TreatmentPlanIncludeSchema.optional(),
  where: TreatmentPlanWhereUniqueInputSchema,
}).strict() ;

export const TreatmentPlanFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.TreatmentPlanFindUniqueOrThrowArgs> = z.object({
  select: TreatmentPlanSelectSchema.optional(),
  include: TreatmentPlanIncludeSchema.optional(),
  where: TreatmentPlanWhereUniqueInputSchema,
}).strict() ;

export const QuizFindFirstArgsSchema: z.ZodType<Prisma.QuizFindFirstArgs> = z.object({
  select: QuizSelectSchema.optional(),
  include: QuizIncludeSchema.optional(),
  where: QuizWhereInputSchema.optional(),
  orderBy: z.union([ QuizOrderByWithRelationInputSchema.array(),QuizOrderByWithRelationInputSchema ]).optional(),
  cursor: QuizWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ QuizScalarFieldEnumSchema,QuizScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const QuizFindFirstOrThrowArgsSchema: z.ZodType<Prisma.QuizFindFirstOrThrowArgs> = z.object({
  select: QuizSelectSchema.optional(),
  include: QuizIncludeSchema.optional(),
  where: QuizWhereInputSchema.optional(),
  orderBy: z.union([ QuizOrderByWithRelationInputSchema.array(),QuizOrderByWithRelationInputSchema ]).optional(),
  cursor: QuizWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ QuizScalarFieldEnumSchema,QuizScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const QuizFindManyArgsSchema: z.ZodType<Prisma.QuizFindManyArgs> = z.object({
  select: QuizSelectSchema.optional(),
  include: QuizIncludeSchema.optional(),
  where: QuizWhereInputSchema.optional(),
  orderBy: z.union([ QuizOrderByWithRelationInputSchema.array(),QuizOrderByWithRelationInputSchema ]).optional(),
  cursor: QuizWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ QuizScalarFieldEnumSchema,QuizScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const QuizAggregateArgsSchema: z.ZodType<Prisma.QuizAggregateArgs> = z.object({
  where: QuizWhereInputSchema.optional(),
  orderBy: z.union([ QuizOrderByWithRelationInputSchema.array(),QuizOrderByWithRelationInputSchema ]).optional(),
  cursor: QuizWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const QuizGroupByArgsSchema: z.ZodType<Prisma.QuizGroupByArgs> = z.object({
  where: QuizWhereInputSchema.optional(),
  orderBy: z.union([ QuizOrderByWithAggregationInputSchema.array(),QuizOrderByWithAggregationInputSchema ]).optional(),
  by: QuizScalarFieldEnumSchema.array(),
  having: QuizScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const QuizFindUniqueArgsSchema: z.ZodType<Prisma.QuizFindUniqueArgs> = z.object({
  select: QuizSelectSchema.optional(),
  include: QuizIncludeSchema.optional(),
  where: QuizWhereUniqueInputSchema,
}).strict() ;

export const QuizFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.QuizFindUniqueOrThrowArgs> = z.object({
  select: QuizSelectSchema.optional(),
  include: QuizIncludeSchema.optional(),
  where: QuizWhereUniqueInputSchema,
}).strict() ;

export const TagFindFirstArgsSchema: z.ZodType<Prisma.TagFindFirstArgs> = z.object({
  select: TagSelectSchema.optional(),
  where: TagWhereInputSchema.optional(),
  orderBy: z.union([ TagOrderByWithRelationInputSchema.array(),TagOrderByWithRelationInputSchema ]).optional(),
  cursor: TagWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ TagScalarFieldEnumSchema,TagScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const TagFindFirstOrThrowArgsSchema: z.ZodType<Prisma.TagFindFirstOrThrowArgs> = z.object({
  select: TagSelectSchema.optional(),
  where: TagWhereInputSchema.optional(),
  orderBy: z.union([ TagOrderByWithRelationInputSchema.array(),TagOrderByWithRelationInputSchema ]).optional(),
  cursor: TagWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ TagScalarFieldEnumSchema,TagScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const TagFindManyArgsSchema: z.ZodType<Prisma.TagFindManyArgs> = z.object({
  select: TagSelectSchema.optional(),
  where: TagWhereInputSchema.optional(),
  orderBy: z.union([ TagOrderByWithRelationInputSchema.array(),TagOrderByWithRelationInputSchema ]).optional(),
  cursor: TagWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ TagScalarFieldEnumSchema,TagScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const TagAggregateArgsSchema: z.ZodType<Prisma.TagAggregateArgs> = z.object({
  where: TagWhereInputSchema.optional(),
  orderBy: z.union([ TagOrderByWithRelationInputSchema.array(),TagOrderByWithRelationInputSchema ]).optional(),
  cursor: TagWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const TagGroupByArgsSchema: z.ZodType<Prisma.TagGroupByArgs> = z.object({
  where: TagWhereInputSchema.optional(),
  orderBy: z.union([ TagOrderByWithAggregationInputSchema.array(),TagOrderByWithAggregationInputSchema ]).optional(),
  by: TagScalarFieldEnumSchema.array(),
  having: TagScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const TagFindUniqueArgsSchema: z.ZodType<Prisma.TagFindUniqueArgs> = z.object({
  select: TagSelectSchema.optional(),
  where: TagWhereUniqueInputSchema,
}).strict() ;

export const TagFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.TagFindUniqueOrThrowArgs> = z.object({
  select: TagSelectSchema.optional(),
  where: TagWhereUniqueInputSchema,
}).strict() ;

export const TaskFindFirstArgsSchema: z.ZodType<Prisma.TaskFindFirstArgs> = z.object({
  select: TaskSelectSchema.optional(),
  include: TaskIncludeSchema.optional(),
  where: TaskWhereInputSchema.optional(),
  orderBy: z.union([ TaskOrderByWithRelationInputSchema.array(),TaskOrderByWithRelationInputSchema ]).optional(),
  cursor: TaskWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ TaskScalarFieldEnumSchema,TaskScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const TaskFindFirstOrThrowArgsSchema: z.ZodType<Prisma.TaskFindFirstOrThrowArgs> = z.object({
  select: TaskSelectSchema.optional(),
  include: TaskIncludeSchema.optional(),
  where: TaskWhereInputSchema.optional(),
  orderBy: z.union([ TaskOrderByWithRelationInputSchema.array(),TaskOrderByWithRelationInputSchema ]).optional(),
  cursor: TaskWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ TaskScalarFieldEnumSchema,TaskScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const TaskFindManyArgsSchema: z.ZodType<Prisma.TaskFindManyArgs> = z.object({
  select: TaskSelectSchema.optional(),
  include: TaskIncludeSchema.optional(),
  where: TaskWhereInputSchema.optional(),
  orderBy: z.union([ TaskOrderByWithRelationInputSchema.array(),TaskOrderByWithRelationInputSchema ]).optional(),
  cursor: TaskWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ TaskScalarFieldEnumSchema,TaskScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const TaskAggregateArgsSchema: z.ZodType<Prisma.TaskAggregateArgs> = z.object({
  where: TaskWhereInputSchema.optional(),
  orderBy: z.union([ TaskOrderByWithRelationInputSchema.array(),TaskOrderByWithRelationInputSchema ]).optional(),
  cursor: TaskWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const TaskGroupByArgsSchema: z.ZodType<Prisma.TaskGroupByArgs> = z.object({
  where: TaskWhereInputSchema.optional(),
  orderBy: z.union([ TaskOrderByWithAggregationInputSchema.array(),TaskOrderByWithAggregationInputSchema ]).optional(),
  by: TaskScalarFieldEnumSchema.array(),
  having: TaskScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const TaskFindUniqueArgsSchema: z.ZodType<Prisma.TaskFindUniqueArgs> = z.object({
  select: TaskSelectSchema.optional(),
  include: TaskIncludeSchema.optional(),
  where: TaskWhereUniqueInputSchema,
}).strict() ;

export const TaskFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.TaskFindUniqueOrThrowArgs> = z.object({
  select: TaskSelectSchema.optional(),
  include: TaskIncludeSchema.optional(),
  where: TaskWhereUniqueInputSchema,
}).strict() ;

export const FileFindFirstArgsSchema: z.ZodType<Prisma.FileFindFirstArgs> = z.object({
  select: FileSelectSchema.optional(),
  include: FileIncludeSchema.optional(),
  where: FileWhereInputSchema.optional(),
  orderBy: z.union([ FileOrderByWithRelationInputSchema.array(),FileOrderByWithRelationInputSchema ]).optional(),
  cursor: FileWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ FileScalarFieldEnumSchema,FileScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const FileFindFirstOrThrowArgsSchema: z.ZodType<Prisma.FileFindFirstOrThrowArgs> = z.object({
  select: FileSelectSchema.optional(),
  include: FileIncludeSchema.optional(),
  where: FileWhereInputSchema.optional(),
  orderBy: z.union([ FileOrderByWithRelationInputSchema.array(),FileOrderByWithRelationInputSchema ]).optional(),
  cursor: FileWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ FileScalarFieldEnumSchema,FileScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const FileFindManyArgsSchema: z.ZodType<Prisma.FileFindManyArgs> = z.object({
  select: FileSelectSchema.optional(),
  include: FileIncludeSchema.optional(),
  where: FileWhereInputSchema.optional(),
  orderBy: z.union([ FileOrderByWithRelationInputSchema.array(),FileOrderByWithRelationInputSchema ]).optional(),
  cursor: FileWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ FileScalarFieldEnumSchema,FileScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const FileAggregateArgsSchema: z.ZodType<Prisma.FileAggregateArgs> = z.object({
  where: FileWhereInputSchema.optional(),
  orderBy: z.union([ FileOrderByWithRelationInputSchema.array(),FileOrderByWithRelationInputSchema ]).optional(),
  cursor: FileWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const FileGroupByArgsSchema: z.ZodType<Prisma.FileGroupByArgs> = z.object({
  where: FileWhereInputSchema.optional(),
  orderBy: z.union([ FileOrderByWithAggregationInputSchema.array(),FileOrderByWithAggregationInputSchema ]).optional(),
  by: FileScalarFieldEnumSchema.array(),
  having: FileScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const FileFindUniqueArgsSchema: z.ZodType<Prisma.FileFindUniqueArgs> = z.object({
  select: FileSelectSchema.optional(),
  include: FileIncludeSchema.optional(),
  where: FileWhereUniqueInputSchema,
}).strict() ;

export const FileFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.FileFindUniqueOrThrowArgs> = z.object({
  select: FileSelectSchema.optional(),
  include: FileIncludeSchema.optional(),
  where: FileWhereUniqueInputSchema,
}).strict() ;

export const AvatarFindFirstArgsSchema: z.ZodType<Prisma.AvatarFindFirstArgs> = z.object({
  select: AvatarSelectSchema.optional(),
  include: AvatarIncludeSchema.optional(),
  where: AvatarWhereInputSchema.optional(),
  orderBy: z.union([ AvatarOrderByWithRelationInputSchema.array(),AvatarOrderByWithRelationInputSchema ]).optional(),
  cursor: AvatarWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ AvatarScalarFieldEnumSchema,AvatarScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const AvatarFindFirstOrThrowArgsSchema: z.ZodType<Prisma.AvatarFindFirstOrThrowArgs> = z.object({
  select: AvatarSelectSchema.optional(),
  include: AvatarIncludeSchema.optional(),
  where: AvatarWhereInputSchema.optional(),
  orderBy: z.union([ AvatarOrderByWithRelationInputSchema.array(),AvatarOrderByWithRelationInputSchema ]).optional(),
  cursor: AvatarWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ AvatarScalarFieldEnumSchema,AvatarScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const AvatarFindManyArgsSchema: z.ZodType<Prisma.AvatarFindManyArgs> = z.object({
  select: AvatarSelectSchema.optional(),
  include: AvatarIncludeSchema.optional(),
  where: AvatarWhereInputSchema.optional(),
  orderBy: z.union([ AvatarOrderByWithRelationInputSchema.array(),AvatarOrderByWithRelationInputSchema ]).optional(),
  cursor: AvatarWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ AvatarScalarFieldEnumSchema,AvatarScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const AvatarAggregateArgsSchema: z.ZodType<Prisma.AvatarAggregateArgs> = z.object({
  where: AvatarWhereInputSchema.optional(),
  orderBy: z.union([ AvatarOrderByWithRelationInputSchema.array(),AvatarOrderByWithRelationInputSchema ]).optional(),
  cursor: AvatarWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const AvatarGroupByArgsSchema: z.ZodType<Prisma.AvatarGroupByArgs> = z.object({
  where: AvatarWhereInputSchema.optional(),
  orderBy: z.union([ AvatarOrderByWithAggregationInputSchema.array(),AvatarOrderByWithAggregationInputSchema ]).optional(),
  by: AvatarScalarFieldEnumSchema.array(),
  having: AvatarScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const AvatarFindUniqueArgsSchema: z.ZodType<Prisma.AvatarFindUniqueArgs> = z.object({
  select: AvatarSelectSchema.optional(),
  include: AvatarIncludeSchema.optional(),
  where: AvatarWhereUniqueInputSchema,
}).strict() ;

export const AvatarFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.AvatarFindUniqueOrThrowArgs> = z.object({
  select: AvatarSelectSchema.optional(),
  include: AvatarIncludeSchema.optional(),
  where: AvatarWhereUniqueInputSchema,
}).strict() ;

export const CountyFindFirstArgsSchema: z.ZodType<Prisma.CountyFindFirstArgs> = z.object({
  select: CountySelectSchema.optional(),
  include: CountyIncludeSchema.optional(),
  where: CountyWhereInputSchema.optional(),
  orderBy: z.union([ CountyOrderByWithRelationInputSchema.array(),CountyOrderByWithRelationInputSchema ]).optional(),
  cursor: CountyWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ CountyScalarFieldEnumSchema,CountyScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const CountyFindFirstOrThrowArgsSchema: z.ZodType<Prisma.CountyFindFirstOrThrowArgs> = z.object({
  select: CountySelectSchema.optional(),
  include: CountyIncludeSchema.optional(),
  where: CountyWhereInputSchema.optional(),
  orderBy: z.union([ CountyOrderByWithRelationInputSchema.array(),CountyOrderByWithRelationInputSchema ]).optional(),
  cursor: CountyWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ CountyScalarFieldEnumSchema,CountyScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const CountyFindManyArgsSchema: z.ZodType<Prisma.CountyFindManyArgs> = z.object({
  select: CountySelectSchema.optional(),
  include: CountyIncludeSchema.optional(),
  where: CountyWhereInputSchema.optional(),
  orderBy: z.union([ CountyOrderByWithRelationInputSchema.array(),CountyOrderByWithRelationInputSchema ]).optional(),
  cursor: CountyWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ CountyScalarFieldEnumSchema,CountyScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const CountyAggregateArgsSchema: z.ZodType<Prisma.CountyAggregateArgs> = z.object({
  where: CountyWhereInputSchema.optional(),
  orderBy: z.union([ CountyOrderByWithRelationInputSchema.array(),CountyOrderByWithRelationInputSchema ]).optional(),
  cursor: CountyWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const CountyGroupByArgsSchema: z.ZodType<Prisma.CountyGroupByArgs> = z.object({
  where: CountyWhereInputSchema.optional(),
  orderBy: z.union([ CountyOrderByWithAggregationInputSchema.array(),CountyOrderByWithAggregationInputSchema ]).optional(),
  by: CountyScalarFieldEnumSchema.array(),
  having: CountyScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const CountyFindUniqueArgsSchema: z.ZodType<Prisma.CountyFindUniqueArgs> = z.object({
  select: CountySelectSchema.optional(),
  include: CountyIncludeSchema.optional(),
  where: CountyWhereUniqueInputSchema,
}).strict() ;

export const CountyFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.CountyFindUniqueOrThrowArgs> = z.object({
  select: CountySelectSchema.optional(),
  include: CountyIncludeSchema.optional(),
  where: CountyWhereUniqueInputSchema,
}).strict() ;

export const CityFindFirstArgsSchema: z.ZodType<Prisma.CityFindFirstArgs> = z.object({
  select: CitySelectSchema.optional(),
  include: CityIncludeSchema.optional(),
  where: CityWhereInputSchema.optional(),
  orderBy: z.union([ CityOrderByWithRelationInputSchema.array(),CityOrderByWithRelationInputSchema ]).optional(),
  cursor: CityWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ CityScalarFieldEnumSchema,CityScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const CityFindFirstOrThrowArgsSchema: z.ZodType<Prisma.CityFindFirstOrThrowArgs> = z.object({
  select: CitySelectSchema.optional(),
  include: CityIncludeSchema.optional(),
  where: CityWhereInputSchema.optional(),
  orderBy: z.union([ CityOrderByWithRelationInputSchema.array(),CityOrderByWithRelationInputSchema ]).optional(),
  cursor: CityWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ CityScalarFieldEnumSchema,CityScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const CityFindManyArgsSchema: z.ZodType<Prisma.CityFindManyArgs> = z.object({
  select: CitySelectSchema.optional(),
  include: CityIncludeSchema.optional(),
  where: CityWhereInputSchema.optional(),
  orderBy: z.union([ CityOrderByWithRelationInputSchema.array(),CityOrderByWithRelationInputSchema ]).optional(),
  cursor: CityWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ CityScalarFieldEnumSchema,CityScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const CityAggregateArgsSchema: z.ZodType<Prisma.CityAggregateArgs> = z.object({
  where: CityWhereInputSchema.optional(),
  orderBy: z.union([ CityOrderByWithRelationInputSchema.array(),CityOrderByWithRelationInputSchema ]).optional(),
  cursor: CityWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const CityGroupByArgsSchema: z.ZodType<Prisma.CityGroupByArgs> = z.object({
  where: CityWhereInputSchema.optional(),
  orderBy: z.union([ CityOrderByWithAggregationInputSchema.array(),CityOrderByWithAggregationInputSchema ]).optional(),
  by: CityScalarFieldEnumSchema.array(),
  having: CityScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const CityFindUniqueArgsSchema: z.ZodType<Prisma.CityFindUniqueArgs> = z.object({
  select: CitySelectSchema.optional(),
  include: CityIncludeSchema.optional(),
  where: CityWhereUniqueInputSchema,
}).strict() ;

export const CityFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.CityFindUniqueOrThrowArgs> = z.object({
  select: CitySelectSchema.optional(),
  include: CityIncludeSchema.optional(),
  where: CityWhereUniqueInputSchema,
}).strict() ;

export const TenantCreateArgsSchema: z.ZodType<Prisma.TenantCreateArgs> = z.object({
  select: TenantSelectSchema.optional(),
  include: TenantIncludeSchema.optional(),
  data: z.union([ TenantCreateInputSchema,TenantUncheckedCreateInputSchema ]),
}).strict() ;

export const TenantUpsertArgsSchema: z.ZodType<Prisma.TenantUpsertArgs> = z.object({
  select: TenantSelectSchema.optional(),
  include: TenantIncludeSchema.optional(),
  where: TenantWhereUniqueInputSchema,
  create: z.union([ TenantCreateInputSchema,TenantUncheckedCreateInputSchema ]),
  update: z.union([ TenantUpdateInputSchema,TenantUncheckedUpdateInputSchema ]),
}).strict() ;

export const TenantCreateManyArgsSchema: z.ZodType<Prisma.TenantCreateManyArgs> = z.object({
  data: z.union([ TenantCreateManyInputSchema,TenantCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const TenantCreateManyAndReturnArgsSchema: z.ZodType<Prisma.TenantCreateManyAndReturnArgs> = z.object({
  data: z.union([ TenantCreateManyInputSchema,TenantCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const TenantDeleteArgsSchema: z.ZodType<Prisma.TenantDeleteArgs> = z.object({
  select: TenantSelectSchema.optional(),
  include: TenantIncludeSchema.optional(),
  where: TenantWhereUniqueInputSchema,
}).strict() ;

export const TenantUpdateArgsSchema: z.ZodType<Prisma.TenantUpdateArgs> = z.object({
  select: TenantSelectSchema.optional(),
  include: TenantIncludeSchema.optional(),
  data: z.union([ TenantUpdateInputSchema,TenantUncheckedUpdateInputSchema ]),
  where: TenantWhereUniqueInputSchema,
}).strict() ;

export const TenantUpdateManyArgsSchema: z.ZodType<Prisma.TenantUpdateManyArgs> = z.object({
  data: z.union([ TenantUpdateManyMutationInputSchema,TenantUncheckedUpdateManyInputSchema ]),
  where: TenantWhereInputSchema.optional(),
}).strict() ;

export const TenantDeleteManyArgsSchema: z.ZodType<Prisma.TenantDeleteManyArgs> = z.object({
  where: TenantWhereInputSchema.optional(),
}).strict() ;

export const TenantProfileCreateArgsSchema: z.ZodType<Prisma.TenantProfileCreateArgs> = z.object({
  select: TenantProfileSelectSchema.optional(),
  include: TenantProfileIncludeSchema.optional(),
  data: z.union([ TenantProfileCreateInputSchema,TenantProfileUncheckedCreateInputSchema ]),
}).strict() ;

export const TenantProfileUpsertArgsSchema: z.ZodType<Prisma.TenantProfileUpsertArgs> = z.object({
  select: TenantProfileSelectSchema.optional(),
  include: TenantProfileIncludeSchema.optional(),
  where: TenantProfileWhereUniqueInputSchema,
  create: z.union([ TenantProfileCreateInputSchema,TenantProfileUncheckedCreateInputSchema ]),
  update: z.union([ TenantProfileUpdateInputSchema,TenantProfileUncheckedUpdateInputSchema ]),
}).strict() ;

export const TenantProfileCreateManyArgsSchema: z.ZodType<Prisma.TenantProfileCreateManyArgs> = z.object({
  data: z.union([ TenantProfileCreateManyInputSchema,TenantProfileCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const TenantProfileCreateManyAndReturnArgsSchema: z.ZodType<Prisma.TenantProfileCreateManyAndReturnArgs> = z.object({
  data: z.union([ TenantProfileCreateManyInputSchema,TenantProfileCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const TenantProfileDeleteArgsSchema: z.ZodType<Prisma.TenantProfileDeleteArgs> = z.object({
  select: TenantProfileSelectSchema.optional(),
  include: TenantProfileIncludeSchema.optional(),
  where: TenantProfileWhereUniqueInputSchema,
}).strict() ;

export const TenantProfileUpdateArgsSchema: z.ZodType<Prisma.TenantProfileUpdateArgs> = z.object({
  select: TenantProfileSelectSchema.optional(),
  include: TenantProfileIncludeSchema.optional(),
  data: z.union([ TenantProfileUpdateInputSchema,TenantProfileUncheckedUpdateInputSchema ]),
  where: TenantProfileWhereUniqueInputSchema,
}).strict() ;

export const TenantProfileUpdateManyArgsSchema: z.ZodType<Prisma.TenantProfileUpdateManyArgs> = z.object({
  data: z.union([ TenantProfileUpdateManyMutationInputSchema,TenantProfileUncheckedUpdateManyInputSchema ]),
  where: TenantProfileWhereInputSchema.optional(),
}).strict() ;

export const TenantProfileDeleteManyArgsSchema: z.ZodType<Prisma.TenantProfileDeleteManyArgs> = z.object({
  where: TenantProfileWhereInputSchema.optional(),
}).strict() ;

export const UserCreateArgsSchema: z.ZodType<Prisma.UserCreateArgs> = z.object({
  select: UserSelectSchema.optional(),
  include: UserIncludeSchema.optional(),
  data: z.union([ UserCreateInputSchema,UserUncheckedCreateInputSchema ]),
}).strict() ;

export const UserUpsertArgsSchema: z.ZodType<Prisma.UserUpsertArgs> = z.object({
  select: UserSelectSchema.optional(),
  include: UserIncludeSchema.optional(),
  where: UserWhereUniqueInputSchema,
  create: z.union([ UserCreateInputSchema,UserUncheckedCreateInputSchema ]),
  update: z.union([ UserUpdateInputSchema,UserUncheckedUpdateInputSchema ]),
}).strict() ;

export const UserCreateManyArgsSchema: z.ZodType<Prisma.UserCreateManyArgs> = z.object({
  data: z.union([ UserCreateManyInputSchema,UserCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const UserCreateManyAndReturnArgsSchema: z.ZodType<Prisma.UserCreateManyAndReturnArgs> = z.object({
  data: z.union([ UserCreateManyInputSchema,UserCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const UserDeleteArgsSchema: z.ZodType<Prisma.UserDeleteArgs> = z.object({
  select: UserSelectSchema.optional(),
  include: UserIncludeSchema.optional(),
  where: UserWhereUniqueInputSchema,
}).strict() ;

export const UserUpdateArgsSchema: z.ZodType<Prisma.UserUpdateArgs> = z.object({
  select: UserSelectSchema.optional(),
  include: UserIncludeSchema.optional(),
  data: z.union([ UserUpdateInputSchema,UserUncheckedUpdateInputSchema ]),
  where: UserWhereUniqueInputSchema,
}).strict() ;

export const UserUpdateManyArgsSchema: z.ZodType<Prisma.UserUpdateManyArgs> = z.object({
  data: z.union([ UserUpdateManyMutationInputSchema,UserUncheckedUpdateManyInputSchema ]),
  where: UserWhereInputSchema.optional(),
}).strict() ;

export const UserDeleteManyArgsSchema: z.ZodType<Prisma.UserDeleteManyArgs> = z.object({
  where: UserWhereInputSchema.optional(),
}).strict() ;

export const ProfileCreateArgsSchema: z.ZodType<Prisma.ProfileCreateArgs> = z.object({
  select: ProfileSelectSchema.optional(),
  include: ProfileIncludeSchema.optional(),
  data: z.union([ ProfileCreateInputSchema,ProfileUncheckedCreateInputSchema ]),
}).strict() ;

export const ProfileUpsertArgsSchema: z.ZodType<Prisma.ProfileUpsertArgs> = z.object({
  select: ProfileSelectSchema.optional(),
  include: ProfileIncludeSchema.optional(),
  where: ProfileWhereUniqueInputSchema,
  create: z.union([ ProfileCreateInputSchema,ProfileUncheckedCreateInputSchema ]),
  update: z.union([ ProfileUpdateInputSchema,ProfileUncheckedUpdateInputSchema ]),
}).strict() ;

export const ProfileCreateManyArgsSchema: z.ZodType<Prisma.ProfileCreateManyArgs> = z.object({
  data: z.union([ ProfileCreateManyInputSchema,ProfileCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const ProfileCreateManyAndReturnArgsSchema: z.ZodType<Prisma.ProfileCreateManyAndReturnArgs> = z.object({
  data: z.union([ ProfileCreateManyInputSchema,ProfileCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const ProfileDeleteArgsSchema: z.ZodType<Prisma.ProfileDeleteArgs> = z.object({
  select: ProfileSelectSchema.optional(),
  include: ProfileIncludeSchema.optional(),
  where: ProfileWhereUniqueInputSchema,
}).strict() ;

export const ProfileUpdateArgsSchema: z.ZodType<Prisma.ProfileUpdateArgs> = z.object({
  select: ProfileSelectSchema.optional(),
  include: ProfileIncludeSchema.optional(),
  data: z.union([ ProfileUpdateInputSchema,ProfileUncheckedUpdateInputSchema ]),
  where: ProfileWhereUniqueInputSchema,
}).strict() ;

export const ProfileUpdateManyArgsSchema: z.ZodType<Prisma.ProfileUpdateManyArgs> = z.object({
  data: z.union([ ProfileUpdateManyMutationInputSchema,ProfileUncheckedUpdateManyInputSchema ]),
  where: ProfileWhereInputSchema.optional(),
}).strict() ;

export const ProfileDeleteManyArgsSchema: z.ZodType<Prisma.ProfileDeleteManyArgs> = z.object({
  where: ProfileWhereInputSchema.optional(),
}).strict() ;

export const AccountCreateArgsSchema: z.ZodType<Prisma.AccountCreateArgs> = z.object({
  select: AccountSelectSchema.optional(),
  include: AccountIncludeSchema.optional(),
  data: z.union([ AccountCreateInputSchema,AccountUncheckedCreateInputSchema ]),
}).strict() ;

export const AccountUpsertArgsSchema: z.ZodType<Prisma.AccountUpsertArgs> = z.object({
  select: AccountSelectSchema.optional(),
  include: AccountIncludeSchema.optional(),
  where: AccountWhereUniqueInputSchema,
  create: z.union([ AccountCreateInputSchema,AccountUncheckedCreateInputSchema ]),
  update: z.union([ AccountUpdateInputSchema,AccountUncheckedUpdateInputSchema ]),
}).strict() ;

export const AccountCreateManyArgsSchema: z.ZodType<Prisma.AccountCreateManyArgs> = z.object({
  data: z.union([ AccountCreateManyInputSchema,AccountCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const AccountCreateManyAndReturnArgsSchema: z.ZodType<Prisma.AccountCreateManyAndReturnArgs> = z.object({
  data: z.union([ AccountCreateManyInputSchema,AccountCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const AccountDeleteArgsSchema: z.ZodType<Prisma.AccountDeleteArgs> = z.object({
  select: AccountSelectSchema.optional(),
  include: AccountIncludeSchema.optional(),
  where: AccountWhereUniqueInputSchema,
}).strict() ;

export const AccountUpdateArgsSchema: z.ZodType<Prisma.AccountUpdateArgs> = z.object({
  select: AccountSelectSchema.optional(),
  include: AccountIncludeSchema.optional(),
  data: z.union([ AccountUpdateInputSchema,AccountUncheckedUpdateInputSchema ]),
  where: AccountWhereUniqueInputSchema,
}).strict() ;

export const AccountUpdateManyArgsSchema: z.ZodType<Prisma.AccountUpdateManyArgs> = z.object({
  data: z.union([ AccountUpdateManyMutationInputSchema,AccountUncheckedUpdateManyInputSchema ]),
  where: AccountWhereInputSchema.optional(),
}).strict() ;

export const AccountDeleteManyArgsSchema: z.ZodType<Prisma.AccountDeleteManyArgs> = z.object({
  where: AccountWhereInputSchema.optional(),
}).strict() ;

export const PlanCreateArgsSchema: z.ZodType<Prisma.PlanCreateArgs> = z.object({
  select: PlanSelectSchema.optional(),
  include: PlanIncludeSchema.optional(),
  data: z.union([ PlanCreateInputSchema,PlanUncheckedCreateInputSchema ]),
}).strict() ;

export const PlanUpsertArgsSchema: z.ZodType<Prisma.PlanUpsertArgs> = z.object({
  select: PlanSelectSchema.optional(),
  include: PlanIncludeSchema.optional(),
  where: PlanWhereUniqueInputSchema,
  create: z.union([ PlanCreateInputSchema,PlanUncheckedCreateInputSchema ]),
  update: z.union([ PlanUpdateInputSchema,PlanUncheckedUpdateInputSchema ]),
}).strict() ;

export const PlanCreateManyArgsSchema: z.ZodType<Prisma.PlanCreateManyArgs> = z.object({
  data: z.union([ PlanCreateManyInputSchema,PlanCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const PlanCreateManyAndReturnArgsSchema: z.ZodType<Prisma.PlanCreateManyAndReturnArgs> = z.object({
  data: z.union([ PlanCreateManyInputSchema,PlanCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const PlanDeleteArgsSchema: z.ZodType<Prisma.PlanDeleteArgs> = z.object({
  select: PlanSelectSchema.optional(),
  include: PlanIncludeSchema.optional(),
  where: PlanWhereUniqueInputSchema,
}).strict() ;

export const PlanUpdateArgsSchema: z.ZodType<Prisma.PlanUpdateArgs> = z.object({
  select: PlanSelectSchema.optional(),
  include: PlanIncludeSchema.optional(),
  data: z.union([ PlanUpdateInputSchema,PlanUncheckedUpdateInputSchema ]),
  where: PlanWhereUniqueInputSchema,
}).strict() ;

export const PlanUpdateManyArgsSchema: z.ZodType<Prisma.PlanUpdateManyArgs> = z.object({
  data: z.union([ PlanUpdateManyMutationInputSchema,PlanUncheckedUpdateManyInputSchema ]),
  where: PlanWhereInputSchema.optional(),
}).strict() ;

export const PlanDeleteManyArgsSchema: z.ZodType<Prisma.PlanDeleteManyArgs> = z.object({
  where: PlanWhereInputSchema.optional(),
}).strict() ;

export const TokenCreateArgsSchema: z.ZodType<Prisma.TokenCreateArgs> = z.object({
  select: TokenSelectSchema.optional(),
  include: TokenIncludeSchema.optional(),
  data: z.union([ TokenCreateInputSchema,TokenUncheckedCreateInputSchema ]),
}).strict() ;

export const TokenUpsertArgsSchema: z.ZodType<Prisma.TokenUpsertArgs> = z.object({
  select: TokenSelectSchema.optional(),
  include: TokenIncludeSchema.optional(),
  where: TokenWhereUniqueInputSchema,
  create: z.union([ TokenCreateInputSchema,TokenUncheckedCreateInputSchema ]),
  update: z.union([ TokenUpdateInputSchema,TokenUncheckedUpdateInputSchema ]),
}).strict() ;

export const TokenCreateManyArgsSchema: z.ZodType<Prisma.TokenCreateManyArgs> = z.object({
  data: z.union([ TokenCreateManyInputSchema,TokenCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const TokenCreateManyAndReturnArgsSchema: z.ZodType<Prisma.TokenCreateManyAndReturnArgs> = z.object({
  data: z.union([ TokenCreateManyInputSchema,TokenCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const TokenDeleteArgsSchema: z.ZodType<Prisma.TokenDeleteArgs> = z.object({
  select: TokenSelectSchema.optional(),
  include: TokenIncludeSchema.optional(),
  where: TokenWhereUniqueInputSchema,
}).strict() ;

export const TokenUpdateArgsSchema: z.ZodType<Prisma.TokenUpdateArgs> = z.object({
  select: TokenSelectSchema.optional(),
  include: TokenIncludeSchema.optional(),
  data: z.union([ TokenUpdateInputSchema,TokenUncheckedUpdateInputSchema ]),
  where: TokenWhereUniqueInputSchema,
}).strict() ;

export const TokenUpdateManyArgsSchema: z.ZodType<Prisma.TokenUpdateManyArgs> = z.object({
  data: z.union([ TokenUpdateManyMutationInputSchema,TokenUncheckedUpdateManyInputSchema ]),
  where: TokenWhereInputSchema.optional(),
}).strict() ;

export const TokenDeleteManyArgsSchema: z.ZodType<Prisma.TokenDeleteManyArgs> = z.object({
  where: TokenWhereInputSchema.optional(),
}).strict() ;

export const InvitationCreateArgsSchema: z.ZodType<Prisma.InvitationCreateArgs> = z.object({
  select: InvitationSelectSchema.optional(),
  include: InvitationIncludeSchema.optional(),
  data: z.union([ InvitationCreateInputSchema,InvitationUncheckedCreateInputSchema ]),
}).strict() ;

export const InvitationUpsertArgsSchema: z.ZodType<Prisma.InvitationUpsertArgs> = z.object({
  select: InvitationSelectSchema.optional(),
  include: InvitationIncludeSchema.optional(),
  where: InvitationWhereUniqueInputSchema,
  create: z.union([ InvitationCreateInputSchema,InvitationUncheckedCreateInputSchema ]),
  update: z.union([ InvitationUpdateInputSchema,InvitationUncheckedUpdateInputSchema ]),
}).strict() ;

export const InvitationCreateManyArgsSchema: z.ZodType<Prisma.InvitationCreateManyArgs> = z.object({
  data: z.union([ InvitationCreateManyInputSchema,InvitationCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const InvitationCreateManyAndReturnArgsSchema: z.ZodType<Prisma.InvitationCreateManyAndReturnArgs> = z.object({
  data: z.union([ InvitationCreateManyInputSchema,InvitationCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const InvitationDeleteArgsSchema: z.ZodType<Prisma.InvitationDeleteArgs> = z.object({
  select: InvitationSelectSchema.optional(),
  include: InvitationIncludeSchema.optional(),
  where: InvitationWhereUniqueInputSchema,
}).strict() ;

export const InvitationUpdateArgsSchema: z.ZodType<Prisma.InvitationUpdateArgs> = z.object({
  select: InvitationSelectSchema.optional(),
  include: InvitationIncludeSchema.optional(),
  data: z.union([ InvitationUpdateInputSchema,InvitationUncheckedUpdateInputSchema ]),
  where: InvitationWhereUniqueInputSchema,
}).strict() ;

export const InvitationUpdateManyArgsSchema: z.ZodType<Prisma.InvitationUpdateManyArgs> = z.object({
  data: z.union([ InvitationUpdateManyMutationInputSchema,InvitationUncheckedUpdateManyInputSchema ]),
  where: InvitationWhereInputSchema.optional(),
}).strict() ;

export const InvitationDeleteManyArgsSchema: z.ZodType<Prisma.InvitationDeleteManyArgs> = z.object({
  where: InvitationWhereInputSchema.optional(),
}).strict() ;

export const PatientCreateArgsSchema: z.ZodType<Prisma.PatientCreateArgs> = z.object({
  select: PatientSelectSchema.optional(),
  include: PatientIncludeSchema.optional(),
  data: z.union([ PatientCreateInputSchema,PatientUncheckedCreateInputSchema ]),
}).strict() ;

export const PatientUpsertArgsSchema: z.ZodType<Prisma.PatientUpsertArgs> = z.object({
  select: PatientSelectSchema.optional(),
  include: PatientIncludeSchema.optional(),
  where: PatientWhereUniqueInputSchema,
  create: z.union([ PatientCreateInputSchema,PatientUncheckedCreateInputSchema ]),
  update: z.union([ PatientUpdateInputSchema,PatientUncheckedUpdateInputSchema ]),
}).strict() ;

export const PatientCreateManyArgsSchema: z.ZodType<Prisma.PatientCreateManyArgs> = z.object({
  data: z.union([ PatientCreateManyInputSchema,PatientCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const PatientCreateManyAndReturnArgsSchema: z.ZodType<Prisma.PatientCreateManyAndReturnArgs> = z.object({
  data: z.union([ PatientCreateManyInputSchema,PatientCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const PatientDeleteArgsSchema: z.ZodType<Prisma.PatientDeleteArgs> = z.object({
  select: PatientSelectSchema.optional(),
  include: PatientIncludeSchema.optional(),
  where: PatientWhereUniqueInputSchema,
}).strict() ;

export const PatientUpdateArgsSchema: z.ZodType<Prisma.PatientUpdateArgs> = z.object({
  select: PatientSelectSchema.optional(),
  include: PatientIncludeSchema.optional(),
  data: z.union([ PatientUpdateInputSchema,PatientUncheckedUpdateInputSchema ]),
  where: PatientWhereUniqueInputSchema,
}).strict() ;

export const PatientUpdateManyArgsSchema: z.ZodType<Prisma.PatientUpdateManyArgs> = z.object({
  data: z.union([ PatientUpdateManyMutationInputSchema,PatientUncheckedUpdateManyInputSchema ]),
  where: PatientWhereInputSchema.optional(),
}).strict() ;

export const PatientDeleteManyArgsSchema: z.ZodType<Prisma.PatientDeleteManyArgs> = z.object({
  where: PatientWhereInputSchema.optional(),
}).strict() ;

export const SpecialityCreateArgsSchema: z.ZodType<Prisma.SpecialityCreateArgs> = z.object({
  select: SpecialitySelectSchema.optional(),
  include: SpecialityIncludeSchema.optional(),
  data: z.union([ SpecialityCreateInputSchema,SpecialityUncheckedCreateInputSchema ]),
}).strict() ;

export const SpecialityUpsertArgsSchema: z.ZodType<Prisma.SpecialityUpsertArgs> = z.object({
  select: SpecialitySelectSchema.optional(),
  include: SpecialityIncludeSchema.optional(),
  where: SpecialityWhereUniqueInputSchema,
  create: z.union([ SpecialityCreateInputSchema,SpecialityUncheckedCreateInputSchema ]),
  update: z.union([ SpecialityUpdateInputSchema,SpecialityUncheckedUpdateInputSchema ]),
}).strict() ;

export const SpecialityCreateManyArgsSchema: z.ZodType<Prisma.SpecialityCreateManyArgs> = z.object({
  data: z.union([ SpecialityCreateManyInputSchema,SpecialityCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const SpecialityCreateManyAndReturnArgsSchema: z.ZodType<Prisma.SpecialityCreateManyAndReturnArgs> = z.object({
  data: z.union([ SpecialityCreateManyInputSchema,SpecialityCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const SpecialityDeleteArgsSchema: z.ZodType<Prisma.SpecialityDeleteArgs> = z.object({
  select: SpecialitySelectSchema.optional(),
  include: SpecialityIncludeSchema.optional(),
  where: SpecialityWhereUniqueInputSchema,
}).strict() ;

export const SpecialityUpdateArgsSchema: z.ZodType<Prisma.SpecialityUpdateArgs> = z.object({
  select: SpecialitySelectSchema.optional(),
  include: SpecialityIncludeSchema.optional(),
  data: z.union([ SpecialityUpdateInputSchema,SpecialityUncheckedUpdateInputSchema ]),
  where: SpecialityWhereUniqueInputSchema,
}).strict() ;

export const SpecialityUpdateManyArgsSchema: z.ZodType<Prisma.SpecialityUpdateManyArgs> = z.object({
  data: z.union([ SpecialityUpdateManyMutationInputSchema,SpecialityUncheckedUpdateManyInputSchema ]),
  where: SpecialityWhereInputSchema.optional(),
}).strict() ;

export const SpecialityDeleteManyArgsSchema: z.ZodType<Prisma.SpecialityDeleteManyArgs> = z.object({
  where: SpecialityWhereInputSchema.optional(),
}).strict() ;

export const EventCreateArgsSchema: z.ZodType<Prisma.EventCreateArgs> = z.object({
  select: EventSelectSchema.optional(),
  include: EventIncludeSchema.optional(),
  data: z.union([ EventCreateInputSchema,EventUncheckedCreateInputSchema ]),
}).strict() ;

export const EventUpsertArgsSchema: z.ZodType<Prisma.EventUpsertArgs> = z.object({
  select: EventSelectSchema.optional(),
  include: EventIncludeSchema.optional(),
  where: EventWhereUniqueInputSchema,
  create: z.union([ EventCreateInputSchema,EventUncheckedCreateInputSchema ]),
  update: z.union([ EventUpdateInputSchema,EventUncheckedUpdateInputSchema ]),
}).strict() ;

export const EventCreateManyArgsSchema: z.ZodType<Prisma.EventCreateManyArgs> = z.object({
  data: z.union([ EventCreateManyInputSchema,EventCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const EventCreateManyAndReturnArgsSchema: z.ZodType<Prisma.EventCreateManyAndReturnArgs> = z.object({
  data: z.union([ EventCreateManyInputSchema,EventCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const EventDeleteArgsSchema: z.ZodType<Prisma.EventDeleteArgs> = z.object({
  select: EventSelectSchema.optional(),
  include: EventIncludeSchema.optional(),
  where: EventWhereUniqueInputSchema,
}).strict() ;

export const EventUpdateArgsSchema: z.ZodType<Prisma.EventUpdateArgs> = z.object({
  select: EventSelectSchema.optional(),
  include: EventIncludeSchema.optional(),
  data: z.union([ EventUpdateInputSchema,EventUncheckedUpdateInputSchema ]),
  where: EventWhereUniqueInputSchema,
}).strict() ;

export const EventUpdateManyArgsSchema: z.ZodType<Prisma.EventUpdateManyArgs> = z.object({
  data: z.union([ EventUpdateManyMutationInputSchema,EventUncheckedUpdateManyInputSchema ]),
  where: EventWhereInputSchema.optional(),
}).strict() ;

export const EventDeleteManyArgsSchema: z.ZodType<Prisma.EventDeleteManyArgs> = z.object({
  where: EventWhereInputSchema.optional(),
}).strict() ;

export const EventActionCreateArgsSchema: z.ZodType<Prisma.EventActionCreateArgs> = z.object({
  select: EventActionSelectSchema.optional(),
  include: EventActionIncludeSchema.optional(),
  data: z.union([ EventActionCreateInputSchema,EventActionUncheckedCreateInputSchema ]),
}).strict() ;

export const EventActionUpsertArgsSchema: z.ZodType<Prisma.EventActionUpsertArgs> = z.object({
  select: EventActionSelectSchema.optional(),
  include: EventActionIncludeSchema.optional(),
  where: EventActionWhereUniqueInputSchema,
  create: z.union([ EventActionCreateInputSchema,EventActionUncheckedCreateInputSchema ]),
  update: z.union([ EventActionUpdateInputSchema,EventActionUncheckedUpdateInputSchema ]),
}).strict() ;

export const EventActionCreateManyArgsSchema: z.ZodType<Prisma.EventActionCreateManyArgs> = z.object({
  data: z.union([ EventActionCreateManyInputSchema,EventActionCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const EventActionCreateManyAndReturnArgsSchema: z.ZodType<Prisma.EventActionCreateManyAndReturnArgs> = z.object({
  data: z.union([ EventActionCreateManyInputSchema,EventActionCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const EventActionDeleteArgsSchema: z.ZodType<Prisma.EventActionDeleteArgs> = z.object({
  select: EventActionSelectSchema.optional(),
  include: EventActionIncludeSchema.optional(),
  where: EventActionWhereUniqueInputSchema,
}).strict() ;

export const EventActionUpdateArgsSchema: z.ZodType<Prisma.EventActionUpdateArgs> = z.object({
  select: EventActionSelectSchema.optional(),
  include: EventActionIncludeSchema.optional(),
  data: z.union([ EventActionUpdateInputSchema,EventActionUncheckedUpdateInputSchema ]),
  where: EventActionWhereUniqueInputSchema,
}).strict() ;

export const EventActionUpdateManyArgsSchema: z.ZodType<Prisma.EventActionUpdateManyArgs> = z.object({
  data: z.union([ EventActionUpdateManyMutationInputSchema,EventActionUncheckedUpdateManyInputSchema ]),
  where: EventActionWhereInputSchema.optional(),
}).strict() ;

export const EventActionDeleteManyArgsSchema: z.ZodType<Prisma.EventActionDeleteManyArgs> = z.object({
  where: EventActionWhereInputSchema.optional(),
}).strict() ;

export const MaterialCreateArgsSchema: z.ZodType<Prisma.MaterialCreateArgs> = z.object({
  select: MaterialSelectSchema.optional(),
  include: MaterialIncludeSchema.optional(),
  data: z.union([ MaterialCreateInputSchema,MaterialUncheckedCreateInputSchema ]),
}).strict() ;

export const MaterialUpsertArgsSchema: z.ZodType<Prisma.MaterialUpsertArgs> = z.object({
  select: MaterialSelectSchema.optional(),
  include: MaterialIncludeSchema.optional(),
  where: MaterialWhereUniqueInputSchema,
  create: z.union([ MaterialCreateInputSchema,MaterialUncheckedCreateInputSchema ]),
  update: z.union([ MaterialUpdateInputSchema,MaterialUncheckedUpdateInputSchema ]),
}).strict() ;

export const MaterialCreateManyArgsSchema: z.ZodType<Prisma.MaterialCreateManyArgs> = z.object({
  data: z.union([ MaterialCreateManyInputSchema,MaterialCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const MaterialCreateManyAndReturnArgsSchema: z.ZodType<Prisma.MaterialCreateManyAndReturnArgs> = z.object({
  data: z.union([ MaterialCreateManyInputSchema,MaterialCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const MaterialDeleteArgsSchema: z.ZodType<Prisma.MaterialDeleteArgs> = z.object({
  select: MaterialSelectSchema.optional(),
  include: MaterialIncludeSchema.optional(),
  where: MaterialWhereUniqueInputSchema,
}).strict() ;

export const MaterialUpdateArgsSchema: z.ZodType<Prisma.MaterialUpdateArgs> = z.object({
  select: MaterialSelectSchema.optional(),
  include: MaterialIncludeSchema.optional(),
  data: z.union([ MaterialUpdateInputSchema,MaterialUncheckedUpdateInputSchema ]),
  where: MaterialWhereUniqueInputSchema,
}).strict() ;

export const MaterialUpdateManyArgsSchema: z.ZodType<Prisma.MaterialUpdateManyArgs> = z.object({
  data: z.union([ MaterialUpdateManyMutationInputSchema,MaterialUncheckedUpdateManyInputSchema ]),
  where: MaterialWhereInputSchema.optional(),
}).strict() ;

export const MaterialDeleteManyArgsSchema: z.ZodType<Prisma.MaterialDeleteManyArgs> = z.object({
  where: MaterialWhereInputSchema.optional(),
}).strict() ;

export const ServiceCreateArgsSchema: z.ZodType<Prisma.ServiceCreateArgs> = z.object({
  select: ServiceSelectSchema.optional(),
  include: ServiceIncludeSchema.optional(),
  data: z.union([ ServiceCreateInputSchema,ServiceUncheckedCreateInputSchema ]),
}).strict() ;

export const ServiceUpsertArgsSchema: z.ZodType<Prisma.ServiceUpsertArgs> = z.object({
  select: ServiceSelectSchema.optional(),
  include: ServiceIncludeSchema.optional(),
  where: ServiceWhereUniqueInputSchema,
  create: z.union([ ServiceCreateInputSchema,ServiceUncheckedCreateInputSchema ]),
  update: z.union([ ServiceUpdateInputSchema,ServiceUncheckedUpdateInputSchema ]),
}).strict() ;

export const ServiceCreateManyArgsSchema: z.ZodType<Prisma.ServiceCreateManyArgs> = z.object({
  data: z.union([ ServiceCreateManyInputSchema,ServiceCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const ServiceCreateManyAndReturnArgsSchema: z.ZodType<Prisma.ServiceCreateManyAndReturnArgs> = z.object({
  data: z.union([ ServiceCreateManyInputSchema,ServiceCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const ServiceDeleteArgsSchema: z.ZodType<Prisma.ServiceDeleteArgs> = z.object({
  select: ServiceSelectSchema.optional(),
  include: ServiceIncludeSchema.optional(),
  where: ServiceWhereUniqueInputSchema,
}).strict() ;

export const ServiceUpdateArgsSchema: z.ZodType<Prisma.ServiceUpdateArgs> = z.object({
  select: ServiceSelectSchema.optional(),
  include: ServiceIncludeSchema.optional(),
  data: z.union([ ServiceUpdateInputSchema,ServiceUncheckedUpdateInputSchema ]),
  where: ServiceWhereUniqueInputSchema,
}).strict() ;

export const ServiceUpdateManyArgsSchema: z.ZodType<Prisma.ServiceUpdateManyArgs> = z.object({
  data: z.union([ ServiceUpdateManyMutationInputSchema,ServiceUncheckedUpdateManyInputSchema ]),
  where: ServiceWhereInputSchema.optional(),
}).strict() ;

export const ServiceDeleteManyArgsSchema: z.ZodType<Prisma.ServiceDeleteManyArgs> = z.object({
  where: ServiceWhereInputSchema.optional(),
}).strict() ;

export const RelatedServiceCreateArgsSchema: z.ZodType<Prisma.RelatedServiceCreateArgs> = z.object({
  select: RelatedServiceSelectSchema.optional(),
  include: RelatedServiceIncludeSchema.optional(),
  data: z.union([ RelatedServiceCreateInputSchema,RelatedServiceUncheckedCreateInputSchema ]),
}).strict() ;

export const RelatedServiceUpsertArgsSchema: z.ZodType<Prisma.RelatedServiceUpsertArgs> = z.object({
  select: RelatedServiceSelectSchema.optional(),
  include: RelatedServiceIncludeSchema.optional(),
  where: RelatedServiceWhereUniqueInputSchema,
  create: z.union([ RelatedServiceCreateInputSchema,RelatedServiceUncheckedCreateInputSchema ]),
  update: z.union([ RelatedServiceUpdateInputSchema,RelatedServiceUncheckedUpdateInputSchema ]),
}).strict() ;

export const RelatedServiceCreateManyArgsSchema: z.ZodType<Prisma.RelatedServiceCreateManyArgs> = z.object({
  data: z.union([ RelatedServiceCreateManyInputSchema,RelatedServiceCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const RelatedServiceCreateManyAndReturnArgsSchema: z.ZodType<Prisma.RelatedServiceCreateManyAndReturnArgs> = z.object({
  data: z.union([ RelatedServiceCreateManyInputSchema,RelatedServiceCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const RelatedServiceDeleteArgsSchema: z.ZodType<Prisma.RelatedServiceDeleteArgs> = z.object({
  select: RelatedServiceSelectSchema.optional(),
  include: RelatedServiceIncludeSchema.optional(),
  where: RelatedServiceWhereUniqueInputSchema,
}).strict() ;

export const RelatedServiceUpdateArgsSchema: z.ZodType<Prisma.RelatedServiceUpdateArgs> = z.object({
  select: RelatedServiceSelectSchema.optional(),
  include: RelatedServiceIncludeSchema.optional(),
  data: z.union([ RelatedServiceUpdateInputSchema,RelatedServiceUncheckedUpdateInputSchema ]),
  where: RelatedServiceWhereUniqueInputSchema,
}).strict() ;

export const RelatedServiceUpdateManyArgsSchema: z.ZodType<Prisma.RelatedServiceUpdateManyArgs> = z.object({
  data: z.union([ RelatedServiceUpdateManyMutationInputSchema,RelatedServiceUncheckedUpdateManyInputSchema ]),
  where: RelatedServiceWhereInputSchema.optional(),
}).strict() ;

export const RelatedServiceDeleteManyArgsSchema: z.ZodType<Prisma.RelatedServiceDeleteManyArgs> = z.object({
  where: RelatedServiceWhereInputSchema.optional(),
}).strict() ;

export const ServiceMaterialCreateArgsSchema: z.ZodType<Prisma.ServiceMaterialCreateArgs> = z.object({
  select: ServiceMaterialSelectSchema.optional(),
  include: ServiceMaterialIncludeSchema.optional(),
  data: z.union([ ServiceMaterialCreateInputSchema,ServiceMaterialUncheckedCreateInputSchema ]),
}).strict() ;

export const ServiceMaterialUpsertArgsSchema: z.ZodType<Prisma.ServiceMaterialUpsertArgs> = z.object({
  select: ServiceMaterialSelectSchema.optional(),
  include: ServiceMaterialIncludeSchema.optional(),
  where: ServiceMaterialWhereUniqueInputSchema,
  create: z.union([ ServiceMaterialCreateInputSchema,ServiceMaterialUncheckedCreateInputSchema ]),
  update: z.union([ ServiceMaterialUpdateInputSchema,ServiceMaterialUncheckedUpdateInputSchema ]),
}).strict() ;

export const ServiceMaterialCreateManyArgsSchema: z.ZodType<Prisma.ServiceMaterialCreateManyArgs> = z.object({
  data: z.union([ ServiceMaterialCreateManyInputSchema,ServiceMaterialCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const ServiceMaterialCreateManyAndReturnArgsSchema: z.ZodType<Prisma.ServiceMaterialCreateManyAndReturnArgs> = z.object({
  data: z.union([ ServiceMaterialCreateManyInputSchema,ServiceMaterialCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const ServiceMaterialDeleteArgsSchema: z.ZodType<Prisma.ServiceMaterialDeleteArgs> = z.object({
  select: ServiceMaterialSelectSchema.optional(),
  include: ServiceMaterialIncludeSchema.optional(),
  where: ServiceMaterialWhereUniqueInputSchema,
}).strict() ;

export const ServiceMaterialUpdateArgsSchema: z.ZodType<Prisma.ServiceMaterialUpdateArgs> = z.object({
  select: ServiceMaterialSelectSchema.optional(),
  include: ServiceMaterialIncludeSchema.optional(),
  data: z.union([ ServiceMaterialUpdateInputSchema,ServiceMaterialUncheckedUpdateInputSchema ]),
  where: ServiceMaterialWhereUniqueInputSchema,
}).strict() ;

export const ServiceMaterialUpdateManyArgsSchema: z.ZodType<Prisma.ServiceMaterialUpdateManyArgs> = z.object({
  data: z.union([ ServiceMaterialUpdateManyMutationInputSchema,ServiceMaterialUncheckedUpdateManyInputSchema ]),
  where: ServiceMaterialWhereInputSchema.optional(),
}).strict() ;

export const ServiceMaterialDeleteManyArgsSchema: z.ZodType<Prisma.ServiceMaterialDeleteManyArgs> = z.object({
  where: ServiceMaterialWhereInputSchema.optional(),
}).strict() ;

export const PriceCreateArgsSchema: z.ZodType<Prisma.PriceCreateArgs> = z.object({
  select: PriceSelectSchema.optional(),
  data: z.union([ PriceCreateInputSchema,PriceUncheckedCreateInputSchema ]),
}).strict() ;

export const PriceUpsertArgsSchema: z.ZodType<Prisma.PriceUpsertArgs> = z.object({
  select: PriceSelectSchema.optional(),
  where: PriceWhereUniqueInputSchema,
  create: z.union([ PriceCreateInputSchema,PriceUncheckedCreateInputSchema ]),
  update: z.union([ PriceUpdateInputSchema,PriceUncheckedUpdateInputSchema ]),
}).strict() ;

export const PriceCreateManyArgsSchema: z.ZodType<Prisma.PriceCreateManyArgs> = z.object({
  data: z.union([ PriceCreateManyInputSchema,PriceCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const PriceCreateManyAndReturnArgsSchema: z.ZodType<Prisma.PriceCreateManyAndReturnArgs> = z.object({
  data: z.union([ PriceCreateManyInputSchema,PriceCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const PriceDeleteArgsSchema: z.ZodType<Prisma.PriceDeleteArgs> = z.object({
  select: PriceSelectSchema.optional(),
  where: PriceWhereUniqueInputSchema,
}).strict() ;

export const PriceUpdateArgsSchema: z.ZodType<Prisma.PriceUpdateArgs> = z.object({
  select: PriceSelectSchema.optional(),
  data: z.union([ PriceUpdateInputSchema,PriceUncheckedUpdateInputSchema ]),
  where: PriceWhereUniqueInputSchema,
}).strict() ;

export const PriceUpdateManyArgsSchema: z.ZodType<Prisma.PriceUpdateManyArgs> = z.object({
  data: z.union([ PriceUpdateManyMutationInputSchema,PriceUncheckedUpdateManyInputSchema ]),
  where: PriceWhereInputSchema.optional(),
}).strict() ;

export const PriceDeleteManyArgsSchema: z.ZodType<Prisma.PriceDeleteManyArgs> = z.object({
  where: PriceWhereInputSchema.optional(),
}).strict() ;

export const ServiceCategoryCreateArgsSchema: z.ZodType<Prisma.ServiceCategoryCreateArgs> = z.object({
  select: ServiceCategorySelectSchema.optional(),
  include: ServiceCategoryIncludeSchema.optional(),
  data: z.union([ ServiceCategoryCreateInputSchema,ServiceCategoryUncheckedCreateInputSchema ]),
}).strict() ;

export const ServiceCategoryUpsertArgsSchema: z.ZodType<Prisma.ServiceCategoryUpsertArgs> = z.object({
  select: ServiceCategorySelectSchema.optional(),
  include: ServiceCategoryIncludeSchema.optional(),
  where: ServiceCategoryWhereUniqueInputSchema,
  create: z.union([ ServiceCategoryCreateInputSchema,ServiceCategoryUncheckedCreateInputSchema ]),
  update: z.union([ ServiceCategoryUpdateInputSchema,ServiceCategoryUncheckedUpdateInputSchema ]),
}).strict() ;

export const ServiceCategoryCreateManyArgsSchema: z.ZodType<Prisma.ServiceCategoryCreateManyArgs> = z.object({
  data: z.union([ ServiceCategoryCreateManyInputSchema,ServiceCategoryCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const ServiceCategoryCreateManyAndReturnArgsSchema: z.ZodType<Prisma.ServiceCategoryCreateManyAndReturnArgs> = z.object({
  data: z.union([ ServiceCategoryCreateManyInputSchema,ServiceCategoryCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const ServiceCategoryDeleteArgsSchema: z.ZodType<Prisma.ServiceCategoryDeleteArgs> = z.object({
  select: ServiceCategorySelectSchema.optional(),
  include: ServiceCategoryIncludeSchema.optional(),
  where: ServiceCategoryWhereUniqueInputSchema,
}).strict() ;

export const ServiceCategoryUpdateArgsSchema: z.ZodType<Prisma.ServiceCategoryUpdateArgs> = z.object({
  select: ServiceCategorySelectSchema.optional(),
  include: ServiceCategoryIncludeSchema.optional(),
  data: z.union([ ServiceCategoryUpdateInputSchema,ServiceCategoryUncheckedUpdateInputSchema ]),
  where: ServiceCategoryWhereUniqueInputSchema,
}).strict() ;

export const ServiceCategoryUpdateManyArgsSchema: z.ZodType<Prisma.ServiceCategoryUpdateManyArgs> = z.object({
  data: z.union([ ServiceCategoryUpdateManyMutationInputSchema,ServiceCategoryUncheckedUpdateManyInputSchema ]),
  where: ServiceCategoryWhereInputSchema.optional(),
}).strict() ;

export const ServiceCategoryDeleteManyArgsSchema: z.ZodType<Prisma.ServiceCategoryDeleteManyArgs> = z.object({
  where: ServiceCategoryWhereInputSchema.optional(),
}).strict() ;

export const TreatmentCreateArgsSchema: z.ZodType<Prisma.TreatmentCreateArgs> = z.object({
  select: TreatmentSelectSchema.optional(),
  include: TreatmentIncludeSchema.optional(),
  data: z.union([ TreatmentCreateInputSchema,TreatmentUncheckedCreateInputSchema ]),
}).strict() ;

export const TreatmentUpsertArgsSchema: z.ZodType<Prisma.TreatmentUpsertArgs> = z.object({
  select: TreatmentSelectSchema.optional(),
  include: TreatmentIncludeSchema.optional(),
  where: TreatmentWhereUniqueInputSchema,
  create: z.union([ TreatmentCreateInputSchema,TreatmentUncheckedCreateInputSchema ]),
  update: z.union([ TreatmentUpdateInputSchema,TreatmentUncheckedUpdateInputSchema ]),
}).strict() ;

export const TreatmentCreateManyArgsSchema: z.ZodType<Prisma.TreatmentCreateManyArgs> = z.object({
  data: z.union([ TreatmentCreateManyInputSchema,TreatmentCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const TreatmentCreateManyAndReturnArgsSchema: z.ZodType<Prisma.TreatmentCreateManyAndReturnArgs> = z.object({
  data: z.union([ TreatmentCreateManyInputSchema,TreatmentCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const TreatmentDeleteArgsSchema: z.ZodType<Prisma.TreatmentDeleteArgs> = z.object({
  select: TreatmentSelectSchema.optional(),
  include: TreatmentIncludeSchema.optional(),
  where: TreatmentWhereUniqueInputSchema,
}).strict() ;

export const TreatmentUpdateArgsSchema: z.ZodType<Prisma.TreatmentUpdateArgs> = z.object({
  select: TreatmentSelectSchema.optional(),
  include: TreatmentIncludeSchema.optional(),
  data: z.union([ TreatmentUpdateInputSchema,TreatmentUncheckedUpdateInputSchema ]),
  where: TreatmentWhereUniqueInputSchema,
}).strict() ;

export const TreatmentUpdateManyArgsSchema: z.ZodType<Prisma.TreatmentUpdateManyArgs> = z.object({
  data: z.union([ TreatmentUpdateManyMutationInputSchema,TreatmentUncheckedUpdateManyInputSchema ]),
  where: TreatmentWhereInputSchema.optional(),
}).strict() ;

export const TreatmentDeleteManyArgsSchema: z.ZodType<Prisma.TreatmentDeleteManyArgs> = z.object({
  where: TreatmentWhereInputSchema.optional(),
}).strict() ;

export const VisitCreateArgsSchema: z.ZodType<Prisma.VisitCreateArgs> = z.object({
  select: VisitSelectSchema.optional(),
  include: VisitIncludeSchema.optional(),
  data: z.union([ VisitCreateInputSchema,VisitUncheckedCreateInputSchema ]),
}).strict() ;

export const VisitUpsertArgsSchema: z.ZodType<Prisma.VisitUpsertArgs> = z.object({
  select: VisitSelectSchema.optional(),
  include: VisitIncludeSchema.optional(),
  where: VisitWhereUniqueInputSchema,
  create: z.union([ VisitCreateInputSchema,VisitUncheckedCreateInputSchema ]),
  update: z.union([ VisitUpdateInputSchema,VisitUncheckedUpdateInputSchema ]),
}).strict() ;

export const VisitCreateManyArgsSchema: z.ZodType<Prisma.VisitCreateManyArgs> = z.object({
  data: z.union([ VisitCreateManyInputSchema,VisitCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const VisitCreateManyAndReturnArgsSchema: z.ZodType<Prisma.VisitCreateManyAndReturnArgs> = z.object({
  data: z.union([ VisitCreateManyInputSchema,VisitCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const VisitDeleteArgsSchema: z.ZodType<Prisma.VisitDeleteArgs> = z.object({
  select: VisitSelectSchema.optional(),
  include: VisitIncludeSchema.optional(),
  where: VisitWhereUniqueInputSchema,
}).strict() ;

export const VisitUpdateArgsSchema: z.ZodType<Prisma.VisitUpdateArgs> = z.object({
  select: VisitSelectSchema.optional(),
  include: VisitIncludeSchema.optional(),
  data: z.union([ VisitUpdateInputSchema,VisitUncheckedUpdateInputSchema ]),
  where: VisitWhereUniqueInputSchema,
}).strict() ;

export const VisitUpdateManyArgsSchema: z.ZodType<Prisma.VisitUpdateManyArgs> = z.object({
  data: z.union([ VisitUpdateManyMutationInputSchema,VisitUncheckedUpdateManyInputSchema ]),
  where: VisitWhereInputSchema.optional(),
}).strict() ;

export const VisitDeleteManyArgsSchema: z.ZodType<Prisma.VisitDeleteManyArgs> = z.object({
  where: VisitWhereInputSchema.optional(),
}).strict() ;

export const TreatmentPlanCreateArgsSchema: z.ZodType<Prisma.TreatmentPlanCreateArgs> = z.object({
  select: TreatmentPlanSelectSchema.optional(),
  include: TreatmentPlanIncludeSchema.optional(),
  data: z.union([ TreatmentPlanCreateInputSchema,TreatmentPlanUncheckedCreateInputSchema ]),
}).strict() ;

export const TreatmentPlanUpsertArgsSchema: z.ZodType<Prisma.TreatmentPlanUpsertArgs> = z.object({
  select: TreatmentPlanSelectSchema.optional(),
  include: TreatmentPlanIncludeSchema.optional(),
  where: TreatmentPlanWhereUniqueInputSchema,
  create: z.union([ TreatmentPlanCreateInputSchema,TreatmentPlanUncheckedCreateInputSchema ]),
  update: z.union([ TreatmentPlanUpdateInputSchema,TreatmentPlanUncheckedUpdateInputSchema ]),
}).strict() ;

export const TreatmentPlanCreateManyArgsSchema: z.ZodType<Prisma.TreatmentPlanCreateManyArgs> = z.object({
  data: z.union([ TreatmentPlanCreateManyInputSchema,TreatmentPlanCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const TreatmentPlanCreateManyAndReturnArgsSchema: z.ZodType<Prisma.TreatmentPlanCreateManyAndReturnArgs> = z.object({
  data: z.union([ TreatmentPlanCreateManyInputSchema,TreatmentPlanCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const TreatmentPlanDeleteArgsSchema: z.ZodType<Prisma.TreatmentPlanDeleteArgs> = z.object({
  select: TreatmentPlanSelectSchema.optional(),
  include: TreatmentPlanIncludeSchema.optional(),
  where: TreatmentPlanWhereUniqueInputSchema,
}).strict() ;

export const TreatmentPlanUpdateArgsSchema: z.ZodType<Prisma.TreatmentPlanUpdateArgs> = z.object({
  select: TreatmentPlanSelectSchema.optional(),
  include: TreatmentPlanIncludeSchema.optional(),
  data: z.union([ TreatmentPlanUpdateInputSchema,TreatmentPlanUncheckedUpdateInputSchema ]),
  where: TreatmentPlanWhereUniqueInputSchema,
}).strict() ;

export const TreatmentPlanUpdateManyArgsSchema: z.ZodType<Prisma.TreatmentPlanUpdateManyArgs> = z.object({
  data: z.union([ TreatmentPlanUpdateManyMutationInputSchema,TreatmentPlanUncheckedUpdateManyInputSchema ]),
  where: TreatmentPlanWhereInputSchema.optional(),
}).strict() ;

export const TreatmentPlanDeleteManyArgsSchema: z.ZodType<Prisma.TreatmentPlanDeleteManyArgs> = z.object({
  where: TreatmentPlanWhereInputSchema.optional(),
}).strict() ;

export const QuizCreateArgsSchema: z.ZodType<Prisma.QuizCreateArgs> = z.object({
  select: QuizSelectSchema.optional(),
  include: QuizIncludeSchema.optional(),
  data: z.union([ QuizCreateInputSchema,QuizUncheckedCreateInputSchema ]),
}).strict() ;

export const QuizUpsertArgsSchema: z.ZodType<Prisma.QuizUpsertArgs> = z.object({
  select: QuizSelectSchema.optional(),
  include: QuizIncludeSchema.optional(),
  where: QuizWhereUniqueInputSchema,
  create: z.union([ QuizCreateInputSchema,QuizUncheckedCreateInputSchema ]),
  update: z.union([ QuizUpdateInputSchema,QuizUncheckedUpdateInputSchema ]),
}).strict() ;

export const QuizCreateManyArgsSchema: z.ZodType<Prisma.QuizCreateManyArgs> = z.object({
  data: z.union([ QuizCreateManyInputSchema,QuizCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const QuizCreateManyAndReturnArgsSchema: z.ZodType<Prisma.QuizCreateManyAndReturnArgs> = z.object({
  data: z.union([ QuizCreateManyInputSchema,QuizCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const QuizDeleteArgsSchema: z.ZodType<Prisma.QuizDeleteArgs> = z.object({
  select: QuizSelectSchema.optional(),
  include: QuizIncludeSchema.optional(),
  where: QuizWhereUniqueInputSchema,
}).strict() ;

export const QuizUpdateArgsSchema: z.ZodType<Prisma.QuizUpdateArgs> = z.object({
  select: QuizSelectSchema.optional(),
  include: QuizIncludeSchema.optional(),
  data: z.union([ QuizUpdateInputSchema,QuizUncheckedUpdateInputSchema ]),
  where: QuizWhereUniqueInputSchema,
}).strict() ;

export const QuizUpdateManyArgsSchema: z.ZodType<Prisma.QuizUpdateManyArgs> = z.object({
  data: z.union([ QuizUpdateManyMutationInputSchema,QuizUncheckedUpdateManyInputSchema ]),
  where: QuizWhereInputSchema.optional(),
}).strict() ;

export const QuizDeleteManyArgsSchema: z.ZodType<Prisma.QuizDeleteManyArgs> = z.object({
  where: QuizWhereInputSchema.optional(),
}).strict() ;

export const TagCreateArgsSchema: z.ZodType<Prisma.TagCreateArgs> = z.object({
  select: TagSelectSchema.optional(),
  data: z.union([ TagCreateInputSchema,TagUncheckedCreateInputSchema ]),
}).strict() ;

export const TagUpsertArgsSchema: z.ZodType<Prisma.TagUpsertArgs> = z.object({
  select: TagSelectSchema.optional(),
  where: TagWhereUniqueInputSchema,
  create: z.union([ TagCreateInputSchema,TagUncheckedCreateInputSchema ]),
  update: z.union([ TagUpdateInputSchema,TagUncheckedUpdateInputSchema ]),
}).strict() ;

export const TagCreateManyArgsSchema: z.ZodType<Prisma.TagCreateManyArgs> = z.object({
  data: z.union([ TagCreateManyInputSchema,TagCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const TagCreateManyAndReturnArgsSchema: z.ZodType<Prisma.TagCreateManyAndReturnArgs> = z.object({
  data: z.union([ TagCreateManyInputSchema,TagCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const TagDeleteArgsSchema: z.ZodType<Prisma.TagDeleteArgs> = z.object({
  select: TagSelectSchema.optional(),
  where: TagWhereUniqueInputSchema,
}).strict() ;

export const TagUpdateArgsSchema: z.ZodType<Prisma.TagUpdateArgs> = z.object({
  select: TagSelectSchema.optional(),
  data: z.union([ TagUpdateInputSchema,TagUncheckedUpdateInputSchema ]),
  where: TagWhereUniqueInputSchema,
}).strict() ;

export const TagUpdateManyArgsSchema: z.ZodType<Prisma.TagUpdateManyArgs> = z.object({
  data: z.union([ TagUpdateManyMutationInputSchema,TagUncheckedUpdateManyInputSchema ]),
  where: TagWhereInputSchema.optional(),
}).strict() ;

export const TagDeleteManyArgsSchema: z.ZodType<Prisma.TagDeleteManyArgs> = z.object({
  where: TagWhereInputSchema.optional(),
}).strict() ;

export const TaskCreateArgsSchema: z.ZodType<Prisma.TaskCreateArgs> = z.object({
  select: TaskSelectSchema.optional(),
  include: TaskIncludeSchema.optional(),
  data: z.union([ TaskCreateInputSchema,TaskUncheckedCreateInputSchema ]),
}).strict() ;

export const TaskUpsertArgsSchema: z.ZodType<Prisma.TaskUpsertArgs> = z.object({
  select: TaskSelectSchema.optional(),
  include: TaskIncludeSchema.optional(),
  where: TaskWhereUniqueInputSchema,
  create: z.union([ TaskCreateInputSchema,TaskUncheckedCreateInputSchema ]),
  update: z.union([ TaskUpdateInputSchema,TaskUncheckedUpdateInputSchema ]),
}).strict() ;

export const TaskCreateManyArgsSchema: z.ZodType<Prisma.TaskCreateManyArgs> = z.object({
  data: z.union([ TaskCreateManyInputSchema,TaskCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const TaskCreateManyAndReturnArgsSchema: z.ZodType<Prisma.TaskCreateManyAndReturnArgs> = z.object({
  data: z.union([ TaskCreateManyInputSchema,TaskCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const TaskDeleteArgsSchema: z.ZodType<Prisma.TaskDeleteArgs> = z.object({
  select: TaskSelectSchema.optional(),
  include: TaskIncludeSchema.optional(),
  where: TaskWhereUniqueInputSchema,
}).strict() ;

export const TaskUpdateArgsSchema: z.ZodType<Prisma.TaskUpdateArgs> = z.object({
  select: TaskSelectSchema.optional(),
  include: TaskIncludeSchema.optional(),
  data: z.union([ TaskUpdateInputSchema,TaskUncheckedUpdateInputSchema ]),
  where: TaskWhereUniqueInputSchema,
}).strict() ;

export const TaskUpdateManyArgsSchema: z.ZodType<Prisma.TaskUpdateManyArgs> = z.object({
  data: z.union([ TaskUpdateManyMutationInputSchema,TaskUncheckedUpdateManyInputSchema ]),
  where: TaskWhereInputSchema.optional(),
}).strict() ;

export const TaskDeleteManyArgsSchema: z.ZodType<Prisma.TaskDeleteManyArgs> = z.object({
  where: TaskWhereInputSchema.optional(),
}).strict() ;

export const FileCreateArgsSchema: z.ZodType<Prisma.FileCreateArgs> = z.object({
  select: FileSelectSchema.optional(),
  include: FileIncludeSchema.optional(),
  data: z.union([ FileCreateInputSchema,FileUncheckedCreateInputSchema ]),
}).strict() ;

export const FileUpsertArgsSchema: z.ZodType<Prisma.FileUpsertArgs> = z.object({
  select: FileSelectSchema.optional(),
  include: FileIncludeSchema.optional(),
  where: FileWhereUniqueInputSchema,
  create: z.union([ FileCreateInputSchema,FileUncheckedCreateInputSchema ]),
  update: z.union([ FileUpdateInputSchema,FileUncheckedUpdateInputSchema ]),
}).strict() ;

export const FileCreateManyArgsSchema: z.ZodType<Prisma.FileCreateManyArgs> = z.object({
  data: z.union([ FileCreateManyInputSchema,FileCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const FileCreateManyAndReturnArgsSchema: z.ZodType<Prisma.FileCreateManyAndReturnArgs> = z.object({
  data: z.union([ FileCreateManyInputSchema,FileCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const FileDeleteArgsSchema: z.ZodType<Prisma.FileDeleteArgs> = z.object({
  select: FileSelectSchema.optional(),
  include: FileIncludeSchema.optional(),
  where: FileWhereUniqueInputSchema,
}).strict() ;

export const FileUpdateArgsSchema: z.ZodType<Prisma.FileUpdateArgs> = z.object({
  select: FileSelectSchema.optional(),
  include: FileIncludeSchema.optional(),
  data: z.union([ FileUpdateInputSchema,FileUncheckedUpdateInputSchema ]),
  where: FileWhereUniqueInputSchema,
}).strict() ;

export const FileUpdateManyArgsSchema: z.ZodType<Prisma.FileUpdateManyArgs> = z.object({
  data: z.union([ FileUpdateManyMutationInputSchema,FileUncheckedUpdateManyInputSchema ]),
  where: FileWhereInputSchema.optional(),
}).strict() ;

export const FileDeleteManyArgsSchema: z.ZodType<Prisma.FileDeleteManyArgs> = z.object({
  where: FileWhereInputSchema.optional(),
}).strict() ;

export const AvatarCreateArgsSchema: z.ZodType<Prisma.AvatarCreateArgs> = z.object({
  select: AvatarSelectSchema.optional(),
  include: AvatarIncludeSchema.optional(),
  data: z.union([ AvatarCreateInputSchema,AvatarUncheckedCreateInputSchema ]),
}).strict() ;

export const AvatarUpsertArgsSchema: z.ZodType<Prisma.AvatarUpsertArgs> = z.object({
  select: AvatarSelectSchema.optional(),
  include: AvatarIncludeSchema.optional(),
  where: AvatarWhereUniqueInputSchema,
  create: z.union([ AvatarCreateInputSchema,AvatarUncheckedCreateInputSchema ]),
  update: z.union([ AvatarUpdateInputSchema,AvatarUncheckedUpdateInputSchema ]),
}).strict() ;

export const AvatarCreateManyArgsSchema: z.ZodType<Prisma.AvatarCreateManyArgs> = z.object({
  data: z.union([ AvatarCreateManyInputSchema,AvatarCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const AvatarCreateManyAndReturnArgsSchema: z.ZodType<Prisma.AvatarCreateManyAndReturnArgs> = z.object({
  data: z.union([ AvatarCreateManyInputSchema,AvatarCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const AvatarDeleteArgsSchema: z.ZodType<Prisma.AvatarDeleteArgs> = z.object({
  select: AvatarSelectSchema.optional(),
  include: AvatarIncludeSchema.optional(),
  where: AvatarWhereUniqueInputSchema,
}).strict() ;

export const AvatarUpdateArgsSchema: z.ZodType<Prisma.AvatarUpdateArgs> = z.object({
  select: AvatarSelectSchema.optional(),
  include: AvatarIncludeSchema.optional(),
  data: z.union([ AvatarUpdateInputSchema,AvatarUncheckedUpdateInputSchema ]),
  where: AvatarWhereUniqueInputSchema,
}).strict() ;

export const AvatarUpdateManyArgsSchema: z.ZodType<Prisma.AvatarUpdateManyArgs> = z.object({
  data: z.union([ AvatarUpdateManyMutationInputSchema,AvatarUncheckedUpdateManyInputSchema ]),
  where: AvatarWhereInputSchema.optional(),
}).strict() ;

export const AvatarDeleteManyArgsSchema: z.ZodType<Prisma.AvatarDeleteManyArgs> = z.object({
  where: AvatarWhereInputSchema.optional(),
}).strict() ;

export const CountyCreateArgsSchema: z.ZodType<Prisma.CountyCreateArgs> = z.object({
  select: CountySelectSchema.optional(),
  include: CountyIncludeSchema.optional(),
  data: z.union([ CountyCreateInputSchema,CountyUncheckedCreateInputSchema ]),
}).strict() ;

export const CountyUpsertArgsSchema: z.ZodType<Prisma.CountyUpsertArgs> = z.object({
  select: CountySelectSchema.optional(),
  include: CountyIncludeSchema.optional(),
  where: CountyWhereUniqueInputSchema,
  create: z.union([ CountyCreateInputSchema,CountyUncheckedCreateInputSchema ]),
  update: z.union([ CountyUpdateInputSchema,CountyUncheckedUpdateInputSchema ]),
}).strict() ;

export const CountyCreateManyArgsSchema: z.ZodType<Prisma.CountyCreateManyArgs> = z.object({
  data: z.union([ CountyCreateManyInputSchema,CountyCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const CountyCreateManyAndReturnArgsSchema: z.ZodType<Prisma.CountyCreateManyAndReturnArgs> = z.object({
  data: z.union([ CountyCreateManyInputSchema,CountyCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const CountyDeleteArgsSchema: z.ZodType<Prisma.CountyDeleteArgs> = z.object({
  select: CountySelectSchema.optional(),
  include: CountyIncludeSchema.optional(),
  where: CountyWhereUniqueInputSchema,
}).strict() ;

export const CountyUpdateArgsSchema: z.ZodType<Prisma.CountyUpdateArgs> = z.object({
  select: CountySelectSchema.optional(),
  include: CountyIncludeSchema.optional(),
  data: z.union([ CountyUpdateInputSchema,CountyUncheckedUpdateInputSchema ]),
  where: CountyWhereUniqueInputSchema,
}).strict() ;

export const CountyUpdateManyArgsSchema: z.ZodType<Prisma.CountyUpdateManyArgs> = z.object({
  data: z.union([ CountyUpdateManyMutationInputSchema,CountyUncheckedUpdateManyInputSchema ]),
  where: CountyWhereInputSchema.optional(),
}).strict() ;

export const CountyDeleteManyArgsSchema: z.ZodType<Prisma.CountyDeleteManyArgs> = z.object({
  where: CountyWhereInputSchema.optional(),
}).strict() ;

export const CityCreateArgsSchema: z.ZodType<Prisma.CityCreateArgs> = z.object({
  select: CitySelectSchema.optional(),
  include: CityIncludeSchema.optional(),
  data: z.union([ CityCreateInputSchema,CityUncheckedCreateInputSchema ]),
}).strict() ;

export const CityUpsertArgsSchema: z.ZodType<Prisma.CityUpsertArgs> = z.object({
  select: CitySelectSchema.optional(),
  include: CityIncludeSchema.optional(),
  where: CityWhereUniqueInputSchema,
  create: z.union([ CityCreateInputSchema,CityUncheckedCreateInputSchema ]),
  update: z.union([ CityUpdateInputSchema,CityUncheckedUpdateInputSchema ]),
}).strict() ;

export const CityCreateManyArgsSchema: z.ZodType<Prisma.CityCreateManyArgs> = z.object({
  data: z.union([ CityCreateManyInputSchema,CityCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const CityCreateManyAndReturnArgsSchema: z.ZodType<Prisma.CityCreateManyAndReturnArgs> = z.object({
  data: z.union([ CityCreateManyInputSchema,CityCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const CityDeleteArgsSchema: z.ZodType<Prisma.CityDeleteArgs> = z.object({
  select: CitySelectSchema.optional(),
  include: CityIncludeSchema.optional(),
  where: CityWhereUniqueInputSchema,
}).strict() ;

export const CityUpdateArgsSchema: z.ZodType<Prisma.CityUpdateArgs> = z.object({
  select: CitySelectSchema.optional(),
  include: CityIncludeSchema.optional(),
  data: z.union([ CityUpdateInputSchema,CityUncheckedUpdateInputSchema ]),
  where: CityWhereUniqueInputSchema,
}).strict() ;

export const CityUpdateManyArgsSchema: z.ZodType<Prisma.CityUpdateManyArgs> = z.object({
  data: z.union([ CityUpdateManyMutationInputSchema,CityUncheckedUpdateManyInputSchema ]),
  where: CityWhereInputSchema.optional(),
}).strict() ;

export const CityDeleteManyArgsSchema: z.ZodType<Prisma.CityDeleteManyArgs> = z.object({
  where: CityWhereInputSchema.optional(),
}).strict() ;