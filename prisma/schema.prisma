// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

generator zod {
  provider = "zod-prisma-types"
}

datasource db {
  provider  = "postgresql"
  // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_DATABASE_URL")
}

model Tenant {
  id    String @id @default(cuid())
  email String

  users     User[]
  profileId String        @unique
  profile   TenantProfile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  specialities       Speciality[]
  preferedByProfiles Profile[]
  patients           Patient[]
  services           Service[]
  materials          Material[]
  events             Event[]
  files              File[]

  deletedAt      DateTime?
  disabledAt     DateTime?
  trialExpiresAt DateTime?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
}

model TenantProfile {
  id                   String  @id @default(cuid())
  name                 String
  county               String?
  address              String?
  zip                  String?
  phone                String?
  avatar               Avatar?
  size                 String?
  stripeSubscriptionId String
  activeSubscription   Boolean @default(false)

  planId String
  plan   Plan   @relation(fields: [planId], references: [id], onDelete: Restrict)

  tenant Tenant?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id             String    @id @default(cuid())
  index          Int       @default(autoincrement())
  role           Role      @default(USER)
  workingHours   Json      @default("[]")
  firstDayOfWeek DayOfWeek @default(MONDAY)
  showWeekends   Boolean   @default(true)

  specialityId String?
  speciality   Speciality? @relation(fields: [specialityId], references: [id], onDelete: SetNull)
  profile      Profile     @relation(fields: [profileId], references: [id], onDelete: Cascade)
  profileId    String
  tenantId     String
  tenant       Tenant      @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  invitation   Invitation? @relation(name: "InvitedToUser")

  tokens         Token[]
  patients       Patient[]
  events         Event[]
  eventActions   EventAction[]
  treatmentPlans TreatmentPlan[]
  invitations    Invitation[]    @relation(name: "InvitedByUser")
  files          File[]
  tasks          Task[]

  deletedAt   DateTime?
  activatedAt DateTime?
  lastLoginAt DateTime?
  bannedAt    DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Profile {
  id                  String    @id @default(cuid())
  title               String?   @default("Dr.")
  firstName           String
  lastName            String
  email               String    @unique
  phone               String?
  avatar              Avatar?
  activatedAt         DateTime?
  stripeCustomerId    String?
  stripeFreeTrialUsed Boolean   @default(false)

  preferredTenantId String?
  preferredTenant   Tenant? @relation(fields: [preferredTenantId], references: [id])

  users      User[]
  auth       AccountAuth[]
  authTokens AuthToken[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model AccountAuth {
  id                       String    @id @default(cuid())
  profileId                String
  type                     String
  provider                 String
  passwordHash             String?
  refresh_token            String?   @map("refreshToken")
  access_token             String?   @map("accessToken")
  expires_at               DateTime? @map("expiresAt")
  refresh_token_expires_in Int?      @map("refreshTokenExpiresIn")
  token_type               String?   @map("tokenType")
  scope                    String?
  id_token                 String?   @map("idToken")
  session_state            String?   @map("sessionState")

  profile Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  @@index([profileId])
}

model Plan {
  id              String @id @default(cuid())
  stripeProductId String
  stripePriceId   String @unique

  name     String
  maxUsers Int

  tenantProfiles TenantProfile[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Token {
  id      String    @id @default(cuid())
  type    TokenType
  token   String    @unique
  expires DateTime

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  @@index([userId, token])
}

model AuthToken {
  id      String    @id @default(cuid())
  type    TokenType
  token   String    @unique
  expires DateTime

  profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)
  profileId String

  @@index([profileId, token])
}

model Invitation {
  id      String   @id @default(cuid())
  email   String
  role    Role
  token   String   @unique
  expires DateTime

  invitedById String
  invitedBy   User    @relation(name: "InvitedByUser", fields: [invitedById], references: [id], onDelete: Cascade)
  userId      String? @unique
  user        User?   @relation(name: "InvitedToUser", fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([email])
}

model Patient {
  id                 String    @id @default(cuid())
  firstName          String
  lastName           String
  gender             String?
  dob                DateTime?
  email              String?
  phone              String?
  city               String?
  county             String?
  status             Status    @default(ACTIVE)
  smsNotifications   Boolean   @default(false)
  emailNotifications Boolean   @default(false)
  filters            Json      @default("[]")

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String

  tenant   Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  tenantId String

  files          File[]
  quizes         Quiz[]
  appointments   Event[]
  treatmentPlans TreatmentPlan[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model Speciality {
  id          String  @id @default(cuid())
  name        String
  description String?
  color       String  @default("blue")

  users User[]

  tenantId String
  tenant   Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Event {
  id          String         @id @default(cuid())
  index       Int            @unique @default(autoincrement())
  title       String
  description String?
  date        DateTime
  start       DateTime?
  end         DateTime?
  allDay      Boolean        @default(false)
  type        EventType      @default(APPOINTMENT)
  status      EventStatus    @default(CREATED)
  initiator   EventInitiator @default(SYSTEM)
  visits      Visit[]
  quiz        Quiz?

  actions EventAction[]
  files   File[]

  patientId String?
  patient   Patient? @relation(fields: [patientId], references: [id], onDelete: Cascade)
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  tenantId  String
  tenant    Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([patientId])
}

model EventAction {
  id   String @id @default(cuid())
  data Json

  userId  String
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  eventId String
  event   Event  @relation(fields: [eventId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Material {
  id            String   @id @default(cuid())
  name          String
  description   String?
  unit_price    Int
  unit          String   @default("pcs")
  image         String?
  tags          String[] @default([])
  isActive      Boolean  @default(true)
  keepInventory Boolean  @default(false)
  stock         Int      @default(0)

  services ServiceMaterial[]

  tenantId String
  tenant   Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([name])
}

model Service {
  id          String      @id @default(cuid())
  name        String
  description String?
  unit_price  Int
  unit        ServiceUnit
  duration    Int         @default(60)
  image       String?
  tags        String[]    @default([])
  isActive    Boolean     @default(true)

  tenantId   String
  tenant     Tenant           @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  categoryId String?
  category   ServiceCategory? @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  materials ServiceMaterial[]
  visits    Visit[]
  children  RelatedService[]  @relation("ParentService")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model RelatedService {
  id         String @id @default(cuid())
  order      Int    @default(0)
  quantity   Int    @default(1)
  unit_price Int
  service    Json

  parentId String
  parent   Service @relation("ParentService", fields: [parentId], references: [id])
}

model ServiceMaterial {
  id         String @id @default(cuid())
  quantity   Int
  unit_price Int

  serviceId  String
  service    Service  @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  materialId String
  material   Material @relation(fields: [materialId], references: [id], onDelete: Cascade)
}

model Price {
  id         String    @id @default(cuid())
  unit_price Int
  entityId   String
  type       PriceType

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ServiceCategory {
  id   String @id @default(cuid())
  name String

  services Service[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Treatment {
  id     String          @id @default(cuid())
  price  Int
  target String?
  status TreatmentStatus @default(PLANNED)

  treatmentPlanId String?
  treatmentPlan   TreatmentPlan? @relation(fields: [treatmentPlanId], references: [id])

  visits Visit[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Visit {
  id String @id @default(cuid())

  serviceId   String
  service     Service   @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  treatmentId String
  treatment   Treatment @relation(fields: [treatmentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  eventId     String?
  event       Event?    @relation(fields: [eventId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model TreatmentPlan {
  id          String  @id @default(cuid())
  description String?
  isDone      Boolean @default(false)

  treatments Treatment[]

  patientId String
  patient   Patient @relation(fields: [patientId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId    String
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Quiz {
  id String @id @default(cuid())

  quiz    Json
  answers Int[]

  patientId String
  patient   Patient @relation(fields: [patientId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  eventId   String? @unique
  event     Event?  @relation(fields: [eventId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Tag {
  id   String @id @default(cuid())
  name String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Task {
  id      String    @id @default(cuid())
  title   String
  isDone  Boolean   @default(false)
  dueDate DateTime?

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model File {
  id          String  @id @default(cuid())
  url         String
  key         String  @unique
  name        String
  extension   String
  contentType String
  size        Int
  confirmed   Boolean @default(false)

  tenantId  String
  tenant    Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  eventId   String?
  event     Event?   @relation(fields: [eventId], references: [id], onDelete: Cascade)
  patientId String?
  patient   Patient? @relation(fields: [patientId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([key])
}

model Avatar {
  id  String @id @default(cuid())
  url String
  key String @unique

  profileId       String?        @unique
  profile         Profile?       @relation(fields: [profileId], references: [id], onDelete: Cascade)
  tenantProfileId String?        @unique
  tenantProfile   TenantProfile? @relation(fields: [tenantProfileId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model County {
  id     String @id @default(uuid())
  name   String
  code   String
  cities City[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model City {
  id   String @id @default(uuid())
  name String

  countyId String
  county   County @relation(fields: [countyId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum ServiceUnit {
  TOOTH
  QUAD
  ARCH
  VISIT
}

enum TreatmentStatus {
  PLANNED
  COMPLETED
  CANCELLED
}

enum Currency {
  RON
  EUR
  USD
}

enum ContractType {
  FIXED
  HOURLY
  PERCENTAGE
}

enum Role {
  USER
  ADMIN
}

enum Status {
  ACTIVE
  INACTIVE
}

enum TokenType {
  ACTIVATION
  PASSWORD_RESET
  MAGIC_LINK
}

enum EventStatus {
  CREATED
  CONFIRMED
  COMPLETED
  CANCELLED
  RESCHEDULED
}

enum EventType {
  APPOINTMENT
  DAY_OFF
}

enum EventInitiator {
  PATIENT
  USER
  SYSTEM
}

enum PriceType {
  MATERIAL
  SERVICE
}

enum DayOfWeek {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}
