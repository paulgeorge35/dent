// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

generator zod {
  provider = "zod-prisma-types"
}

datasource db {
  provider  = "postgresql"
  // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_DATABASE_URL")
}

model Account {
  id                       String    @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  refresh_token            String?   @map("refreshToken")
  access_token             String?   @map("accessToken")
  expires_at               DateTime? @map("expiresAt")
  refresh_token_expires_in Int?      @map("refreshTokenExpiresIn")
  token_type               String?   @map("tokenType")
  scope                    String?
  id_token                 String?   @map("idToken")
  session_state            String?   @map("sessionState")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  index         Int       @default(autoincrement())
  name          String
  email         String    @unique
  emailVerified DateTime?
  phone         String?
  passwordHash  String?
  role          Role      @default(USER)
  banned        Boolean   @default(false)

  profile      Profile?

  accounts       Account[]
  tokens         Token[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Profile {
  id        String  @id @default(cuid())
  firstName String
  lastName  String
  avatar    String?

  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Token {
  id      String    @id @default(cuid())
  type    TokenType
  token   String    @unique
  expires DateTime

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  @@index([userId, token])
}

model County {
  id     String @id @default(uuid())
  name   String
  code   String
  cities City[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model City {
  id   String @id @default(uuid())
  name String

  countyId String
  county   County @relation(fields: [countyId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Role {
  USER
  ADMIN
}

enum Status {
  ACTIVE
  INACTIVE
}

enum TokenType {
  ACTIVATION
  PASSWORD_RESET
  MAGIC_LINK
}
